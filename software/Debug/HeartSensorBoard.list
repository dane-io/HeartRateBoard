
HeartSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800b0ac  0800b0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b254  0800b254  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b25c  0800b25c  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b25c  0800b25c  0001b25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800b264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  200004bc  0800b720  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000192c  0800b720  0002192c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c54  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ba  00000000  00000000  000395a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015147  00000000  00000000  00051b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f7b  00000000  00000000  00066ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eec24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  000eec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004bc 	.word	0x200004bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b094 	.word	0x0800b094

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c0 	.word	0x200004c0
 8000104:	0800b094 	.word	0x0800b094

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <TurnOnLED>:
									   A7_Pin,
									   A8_Pin,
									   A9_Pin,
									   A10_Pin};

void TurnOnLED(uint8_t row, uint8_t col) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	1c0a      	adds	r2, r1, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_SET);
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <TurnOnLED+0x54>)
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	58d0      	ldr	r0, [r2, r3]
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <TurnOnLED+0x58>)
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	5ad3      	ldrh	r3, [r2, r3]
 80006b6:	2201      	movs	r2, #1
 80006b8:	0019      	movs	r1, r3
 80006ba:	f002 f810 	bl	80026de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_RESET);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <TurnOnLED+0x5c>)
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	58d0      	ldr	r0, [r2, r3]
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <TurnOnLED+0x60>)
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	5ad3      	ldrh	r3, [r2, r3]
 80006d2:	2200      	movs	r2, #0
 80006d4:	0019      	movs	r1, r3
 80006d6:	f002 f802 	bl	80026de <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Start(cathode_timers[row], cathode_channels[row]);
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000290 	.word	0x20000290
 80006e8:	200002bc 	.word	0x200002bc
 80006ec:	20000260 	.word	0x20000260
 80006f0:	20000280 	.word	0x20000280

080006f4 <TurnOffLED>:

void TurnOffLED(uint8_t row, uint8_t col) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0002      	movs	r2, r0
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	1c0a      	adds	r2, r1, #0
 8000704:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_RESET);
 8000706:	1dbb      	adds	r3, r7, #6
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <TurnOffLED+0x54>)
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	58d0      	ldr	r0, [r2, r3]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <TurnOffLED+0x58>)
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	5ad3      	ldrh	r3, [r2, r3]
 800071a:	2200      	movs	r2, #0
 800071c:	0019      	movs	r1, r3
 800071e:	f001 ffde 	bl	80026de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_SET);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <TurnOffLED+0x5c>)
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	58d0      	ldr	r0, [r2, r3]
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TurnOffLED+0x60>)
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	5ad3      	ldrh	r3, [r2, r3]
 8000736:	2201      	movs	r2, #1
 8000738:	0019      	movs	r1, r3
 800073a:	f001 ffd0 	bl	80026de <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Stop(cathode_timers[row], cathode_channels[row]);
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000290 	.word	0x20000290
 800074c:	200002bc 	.word	0x200002bc
 8000750:	20000260 	.word	0x20000260
 8000754:	20000280 	.word	0x20000280

08000758 <SetLEDQueue>:
//led_queue[ROWS*COLUMNS][0] = 0xFF;
volatile uint8_t queue_index = 0;
volatile uint8_t queue_len;

// Make led_queue equal to led_list
void SetLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue, led_list, len*2);
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	001a      	movs	r2, r3
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <SetLEDQueue+0x38>)
 8000772:	0018      	movs	r0, r3
 8000774:	f00a f81c 	bl	800a7b0 <memcpy>
	//queue_len = sizeof(led_list)/2;
	queue_len = len;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SetLEDQueue+0x3c>)
 800077a:	1cfa      	adds	r2, r7, #3
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	701a      	strb	r2, [r3, #0]
	//led_queue[len][0] = 0xFF;
	//led_queue[len][1] = 0xFF;
	queue_index = 0;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SetLEDQueue+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200004f8 	.word	0x200004f8
 8000794:	200005ab 	.word	0x200005ab
 8000798:	200005aa 	.word	0x200005aa

0800079c <AddToLEDQueue>:

// Concatenate led_list to led_queue
void AddToLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	000a      	movs	r2, r1
 80007a6:	1cfb      	adds	r3, r7, #3
 80007a8:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue+queue_len, led_list, len*2);
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <AddToLEDQueue+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	005a      	lsls	r2, r3, #1
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <AddToLEDQueue+0x48>)
 80007b4:	18d0      	adds	r0, r2, r3
 80007b6:	1cfb      	adds	r3, r7, #3
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	001a      	movs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0019      	movs	r1, r3
 80007c2:	f009 fff5 	bl	800a7b0 <memcpy>
	queue_len += len;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <AddToLEDQueue+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	1cfb      	adds	r3, r7, #3
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <AddToLEDQueue+0x44>)
 80007d6:	701a      	strb	r2, [r3, #0]
	//queue_index = 0;
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200005ab 	.word	0x200005ab
 80007e4:	200004f8 	.word	0x200004f8

080007e8 <HandleLEDQueue>:

void HandleLEDQueue() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	if (queue_len > 0) {	// Don't do anything unless there's something in the queue
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <HandleLEDQueue+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d05d      	beq.n	80008b2 <HandleLEDQueue+0xca>
		if (queue_index <= 0) {
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HandleLEDQueue+0xd4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11d      	bne.n	800083c <HandleLEDQueue+0x54>
			TurnOffLED(led_queue[queue_index-1+queue_len][0], led_queue[queue_index-1+queue_len][1]);
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <HandleLEDQueue+0xd4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <HandleLEDQueue+0xd0>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	189a      	adds	r2, r3, r2
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HandleLEDQueue+0xd4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3b01      	subs	r3, #1
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <HandleLEDQueue+0xd0>)
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	189b      	adds	r3, r3, r2
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HandleLEDQueue+0xd8>)
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	0019      	movs	r1, r3
 8000836:	f7ff ff5d 	bl	80006f4 <TurnOffLED>
 800083a:	e014      	b.n	8000866 <HandleLEDQueue+0x7e>
		}
		else {
			TurnOffLED(led_queue[queue_index-1][0], led_queue[queue_index-1][1]);
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HandleLEDQueue+0xd4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b2d8      	uxtb	r0, r3
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HandleLEDQueue+0xd4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3b01      	subs	r3, #1
 8000854:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	3301      	adds	r3, #1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	0019      	movs	r1, r3
 8000862:	f7ff ff47 	bl	80006f4 <TurnOffLED>
		}

		TurnOnLED(led_queue[queue_index][0], led_queue[queue_index][1]);
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HandleLEDQueue+0xd4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	001a      	movs	r2, r3
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HandleLEDQueue+0xd4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HandleLEDQueue+0xd8>)
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	18d3      	adds	r3, r2, r3
 8000882:	3301      	adds	r3, #1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	0019      	movs	r1, r3
 800088a:	f7ff ff01 	bl	8000690 <TurnOnLED>

		queue_index++;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HandleLEDQueue+0xd4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HandleLEDQueue+0xd4>)
 800089a:	701a      	strb	r2, [r3, #0]
		if (queue_index >= queue_len) {
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HandleLEDQueue+0xd4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HandleLEDQueue+0xd0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d302      	bcc.n	80008b2 <HandleLEDQueue+0xca>
			queue_index = 0;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HandleLEDQueue+0xd4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200005ab 	.word	0x200005ab
 80008bc:	200005aa 	.word	0x200005aa
 80008c0:	200004f8 	.word	0x200004f8

080008c4 <PulseHandler>:


volatile uint8_t pulse_step = 0;
volatile int8_t pulse_dir = 1;
void PulseHandler() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	TurnAllOff();
 80008c8:	f000 f902 	bl	8000ad0 <TurnAllOff>
	SetLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <PulseHandler+0x78>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <PulseHandler+0x7c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	58d2      	ldr	r2, [r2, r3]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <PulseHandler+0x78>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	0019      	movs	r1, r3
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <PulseHandler+0x80>)
 80008e4:	5c5b      	ldrb	r3, [r3, r1]
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f7ff ff35 	bl	8000758 <SetLEDQueue>
	pulse_step += pulse_dir;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <PulseHandler+0x84>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <PulseHandler+0x78>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <PulseHandler+0x78>)
 8000902:	701a      	strb	r2, [r3, #0]
	if (pulse_step >= PULSE_STEPS) {
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <PulseHandler+0x78>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b04      	cmp	r3, #4
 800090c:	d90a      	bls.n	8000924 <PulseHandler+0x60>
		pulse_step--;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <PulseHandler+0x78>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <PulseHandler+0x78>)
 800091a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <PulseHandler+0x84>)
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	701a      	strb	r2, [r3, #0]
	}
	else if (pulse_step == 0) {
		pulse_dir = 1;
	}
}
 8000922:	e007      	b.n	8000934 <PulseHandler+0x70>
	else if (pulse_step == 0) {
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <PulseHandler+0x78>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <PulseHandler+0x70>
		pulse_dir = 1;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <PulseHandler+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200005ac 	.word	0x200005ac
 8000940:	20000074 	.word	0x20000074
 8000944:	20000088 	.word	0x20000088
 8000948:	200002d2 	.word	0x200002d2

0800094c <PulseHandlerKeepOn>:

void PulseHandlerKeepOn() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000950:	f000 f8be 	bl	8000ad0 <TurnAllOff>
	if (pulse_step <= 0) {
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <PulseHandlerKeepOn+0x30>
		SetLEDQueue(pulse_step_list[0], pulse_step_sizes[0]);
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f7ff fef5 	bl	8000758 <SetLEDQueue>
		pulse_dir = 1;
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
		pulse_step = 1;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
	else {
		queue_len -= pulse_step_sizes[pulse_step];
		queue_index = 0;
		pulse_step--;
	}
}
 800097a:	e040      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_step >= PULSE_STEPS) {
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b04      	cmp	r3, #4
 8000984:	d906      	bls.n	8000994 <PulseHandlerKeepOn+0x48>
		pulse_step = PULSE_STEPS - 1;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000988:	2204      	movs	r2, #4
 800098a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	e034      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_dir > 0) {
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	dd18      	ble.n	80009d0 <PulseHandlerKeepOn+0x84>
		AddToLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	58d2      	ldr	r2, [r2, r3]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	0019      	movs	r1, r3
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009b6:	5c5b      	ldrb	r3, [r3, r1]
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f7ff feee 	bl	800079c <AddToLEDQueue>
		pulse_step++;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	e016      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
		queue_len -= pulse_step_sizes[pulse_step];
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	001a      	movs	r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009da:	5c9b      	ldrb	r3, [r3, r2]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009e8:	701a      	strb	r2, [r3, #0]
		queue_index = 0;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <PulseHandlerKeepOn+0xcc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
		pulse_step--;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	3b01      	subs	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200005ac 	.word	0x200005ac
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	20000088 	.word	0x20000088
 8000a10:	200002d2 	.word	0x200002d2
 8000a14:	200005ab 	.word	0x200005ab
 8000a18:	200005aa 	.word	0x200005aa

08000a1c <PrintRate>:

void PrintRate( uint8_t rate ) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	701a      	strb	r2, [r3, #0]

	// Find tens, and ones digit separately (hundreds is either 1 or 0)
	uint8_t tens = (rate % 100) / 10;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2164      	movs	r1, #100	; 0x64
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fbfa 	bl	8000228 <__aeabi_uidivmod>
 8000a34:	000b      	movs	r3, r1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	220f      	movs	r2, #15
 8000a3a:	18bc      	adds	r4, r7, r2
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fb6c 	bl	800011c <__udivsi3>
 8000a44:	0003      	movs	r3, r0
 8000a46:	7023      	strb	r3, [r4, #0]
	uint8_t ones = (rate % 100) % 10;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2164      	movs	r1, #100	; 0x64
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fbea 	bl	8000228 <__aeabi_uidivmod>
 8000a54:	000b      	movs	r3, r1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	220e      	movs	r2, #14
 8000a5a:	18bc      	adds	r4, r7, r2
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fbe2 	bl	8000228 <__aeabi_uidivmod>
 8000a64:	000b      	movs	r3, r1
 8000a66:	7023      	strb	r3, [r4, #0]

	//queue_len = 0;	// Reset queue?
	ResetIndexes();
 8000a68:	f000 f860 	bl	8000b2c <ResetIndexes>
	TurnAllOff();
 8000a6c:	f000 f830 	bl	8000ad0 <TurnAllOff>

	if (rate >= 100) {
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b63      	cmp	r3, #99	; 0x63
 8000a76:	d904      	bls.n	8000a82 <PrintRate+0x66>
		AddToLEDQueue(one_hundreds, 2);
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <PrintRate+0xa4>)
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe8d 	bl	800079c <AddToLEDQueue>
	}
	AddToLEDQueue(tens_digits[tens], digit_sizes[tens]);
 8000a82:	210f      	movs	r1, #15
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <PrintRate+0xa8>)
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	58d0      	ldr	r0, [r2, r3]
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <PrintRate+0xac>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	0019      	movs	r1, r3
 8000a98:	f7ff fe80 	bl	800079c <AddToLEDQueue>
	AddToLEDQueue(ones_digits[ones], digit_sizes[ones]);
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <PrintRate+0xb0>)
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	58d0      	ldr	r0, [r2, r3]
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <PrintRate+0xac>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	f7ff fe73 	bl	800079c <AddToLEDQueue>

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b005      	add	sp, #20
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000200 	.word	0x20000200
 8000ac4:	20000204 	.word	0x20000204
 8000ac8:	20000254 	.word	0x20000254
 8000acc:	2000022c 	.word	0x2000022c

08000ad0 <TurnAllOff>:

void TurnAllOff() {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < queue_len; i++) {
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e015      	b.n	8000b0a <TurnAllOff+0x3a>
		TurnOffLED(led_queue[i][0], led_queue[i][1]);
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <TurnAllOff+0x54>)
 8000ae4:	0052      	lsls	r2, r2, #1
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <TurnAllOff+0x54>)
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	18d3      	adds	r3, r2, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	0019      	movs	r1, r3
 8000afc:	f7ff fdfa 	bl	80006f4 <TurnOffLED>
	for (uint8_t i = 0; i < queue_len; i++) {
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	3201      	adds	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TurnAllOff+0x58>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	1dfa      	adds	r2, r7, #7
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3e2      	bcc.n	8000ade <TurnAllOff+0xe>
	}
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200004f8 	.word	0x200004f8
 8000b28:	200005ab 	.word	0x200005ab

08000b2c <ResetIndexes>:

void ResetIndexes() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000b30:	f7ff ffce 	bl	8000ad0 <TurnAllOff>
	queue_len = 0;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <ResetIndexes+0x28>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	queue_index = 0;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <ResetIndexes+0x2c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	pulse_dir = 1;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <ResetIndexes+0x30>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	pulse_step = 0;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <ResetIndexes+0x34>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200005ab 	.word	0x200005ab
 8000b58:	200005aa 	.word	0x200005aa
 8000b5c:	200002d2 	.word	0x200002d2
 8000b60:	200005ac 	.word	0x200005ac

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	extern TIM_HandleTypeDef *cathode_timers[ROWS];
	cathode_timers[0] = &htim2;
 8000b6a:	4bd6      	ldr	r3, [pc, #856]	; (8000ec4 <main+0x360>)
 8000b6c:	4ad6      	ldr	r2, [pc, #856]	; (8000ec8 <main+0x364>)
 8000b6e:	601a      	str	r2, [r3, #0]
	cathode_timers[1] = &htim2;
 8000b70:	4bd4      	ldr	r3, [pc, #848]	; (8000ec4 <main+0x360>)
 8000b72:	4ad5      	ldr	r2, [pc, #852]	; (8000ec8 <main+0x364>)
 8000b74:	605a      	str	r2, [r3, #4]
	cathode_timers[2] = &htim2;
 8000b76:	4bd3      	ldr	r3, [pc, #844]	; (8000ec4 <main+0x360>)
 8000b78:	4ad3      	ldr	r2, [pc, #844]	; (8000ec8 <main+0x364>)
 8000b7a:	609a      	str	r2, [r3, #8]
	cathode_timers[3] = &htim2;
 8000b7c:	4bd1      	ldr	r3, [pc, #836]	; (8000ec4 <main+0x360>)
 8000b7e:	4ad2      	ldr	r2, [pc, #840]	; (8000ec8 <main+0x364>)
 8000b80:	60da      	str	r2, [r3, #12]
	cathode_timers[4] = &htim3;
 8000b82:	4bd0      	ldr	r3, [pc, #832]	; (8000ec4 <main+0x360>)
 8000b84:	4ad1      	ldr	r2, [pc, #836]	; (8000ecc <main+0x368>)
 8000b86:	611a      	str	r2, [r3, #16]
	cathode_timers[5] = &htim3;
 8000b88:	4bce      	ldr	r3, [pc, #824]	; (8000ec4 <main+0x360>)
 8000b8a:	4ad0      	ldr	r2, [pc, #832]	; (8000ecc <main+0x368>)
 8000b8c:	615a      	str	r2, [r3, #20]
	cathode_timers[6] = &htim3;
 8000b8e:	4bcd      	ldr	r3, [pc, #820]	; (8000ec4 <main+0x360>)
 8000b90:	4ace      	ldr	r2, [pc, #824]	; (8000ecc <main+0x368>)
 8000b92:	619a      	str	r2, [r3, #24]
	cathode_timers[7] = &htim3;
 8000b94:	4bcb      	ldr	r3, [pc, #812]	; (8000ec4 <main+0x360>)
 8000b96:	4acd      	ldr	r2, [pc, #820]	; (8000ecc <main+0x368>)
 8000b98:	61da      	str	r2, [r3, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 ff39 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 fa03 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 fca9 	bl	80014f8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000ba6:	f000 fa73 	bl	8001090 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8000baa:	f009 f89f 	bl	8009cec <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000bae:	f000 fadd 	bl	800116c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb2:	f000 fb59 	bl	8001268 <MX_TIM3_Init>
  MX_TIM21_Init();
 8000bb6:	f000 fc21 	bl	80013fc <MX_TIM21_Init>
  MX_TIM6_Init();
 8000bba:	f000 fba9 	bl	8001310 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bbe:	f000 fbe3 	bl	8001388 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// CHECK FOR BUTT1 PRESS, BUTT1 PRESS AT BOOT MEANS DEBUG MODE
	if (HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin) == GPIO_PIN_RESET) {
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	4ac2      	ldr	r2, [pc, #776]	; (8000ed0 <main+0x36c>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f001 fd6a 	bl	80026a4 <HAL_GPIO_ReadPin>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d102      	bne.n	8000bda <main+0x76>
		DEBUG_MODE = 1;
 8000bd4:	4bbf      	ldr	r3, [pc, #764]	; (8000ed4 <main+0x370>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
	}

	// Set LED timer periods/duty cycle
	//TIM3->CCR1 = 99;
	TIM2->CCR1 = 20;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2214      	movs	r2, #20
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34

	// Timer to control green LED
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000be2:	4bb9      	ldr	r3, [pc, #740]	; (8000ec8 <main+0x364>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f004 fc26 	bl	8005438 <HAL_TIM_PWM_Start>

	// Timer to control LED patterns
	HAL_TIM_Base_Start_IT(&htim21);
 8000bec:	4bba      	ldr	r3, [pc, #744]	; (8000ed8 <main+0x374>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f004 fb40 	bl	8005274 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);

	// Timer to control button debouncing
	HAL_TIM_Base_Start_IT(&htim6);
 8000bf4:	4bb9      	ldr	r3, [pc, #740]	; (8000edc <main+0x378>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 fb3c 	bl	8005274 <HAL_TIM_Base_Start_IT>

	// Timer to control ADC sampling
	HAL_TIM_Base_Start_IT(&htim7);
 8000bfc:	4bb8      	ldr	r3, [pc, #736]	; (8000ee0 <main+0x37c>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f004 fb38 	bl	8005274 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HandleLEDQueue();
 8000c04:	f7ff fdf0 	bl	80007e8 <HandleLEDQueue>
		if (pattern_flag) {
 8000c08:	4bb6      	ldr	r3, [pc, #728]	; (8000ee4 <main+0x380>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01e      	beq.n	8000c4e <main+0xea>
			switch (pattern_select) {
 8000c10:	4bb5      	ldr	r3, [pc, #724]	; (8000ee8 <main+0x384>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d817      	bhi.n	8000c48 <main+0xe4>
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	4bb4      	ldr	r3, [pc, #720]	; (8000eec <main+0x388>)
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	469f      	mov	pc, r3
			case 0:
				PulseHandler();			// Measured heartbeat
 8000c22:	f7ff fe4f 	bl	80008c4 <PulseHandler>
				break;
 8000c26:	e00f      	b.n	8000c48 <main+0xe4>
			case 1:
				PulseHandlerKeepOn();	// Measured heartbeat
 8000c28:	f7ff fe90 	bl	800094c <PulseHandlerKeepOn>
				break;
 8000c2c:	e00c      	b.n	8000c48 <main+0xe4>
			case 2:
				PrintRate(heartbeat_freq);	// Measured heartbeat
 8000c2e:	4bb0      	ldr	r3, [pc, #704]	; (8000ef0 <main+0x38c>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fef1 	bl	8000a1c <PrintRate>
				break;
 8000c3a:	e005      	b.n	8000c48 <main+0xe4>
			case 3:
				PulseHandler();			// Constant heartbeat
 8000c3c:	f7ff fe42 	bl	80008c4 <PulseHandler>
				break;
 8000c40:	e002      	b.n	8000c48 <main+0xe4>
			case 4:
				PulseHandlerKeepOn();	// Constant heartbeat
 8000c42:	f7ff fe83 	bl	800094c <PulseHandlerKeepOn>
				break;
 8000c46:	46c0      	nop			; (mov r8, r8)
			}
			pattern_flag = 0;
 8000c48:	4ba6      	ldr	r3, [pc, #664]	; (8000ee4 <main+0x380>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag) {
 8000c4e:	4ba9      	ldr	r3, [pc, #676]	; (8000ef4 <main+0x390>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d023      	beq.n	8000c9e <main+0x13a>
			pattern_select++;
 8000c56:	4ba4      	ldr	r3, [pc, #656]	; (8000ee8 <main+0x384>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4ba2      	ldr	r3, [pc, #648]	; (8000ee8 <main+0x384>)
 8000c60:	701a      	strb	r2, [r3, #0]
			ResetIndexes();
 8000c62:	f7ff ff63 	bl	8000b2c <ResetIndexes>
			if (pattern_select > 4) {
 8000c66:	4ba0      	ldr	r3, [pc, #640]	; (8000ee8 <main+0x384>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d908      	bls.n	8000c80 <main+0x11c>
				pattern_select = 0;							// Reset patterns
 8000c6e:	4b9e      	ldr	r3, [pc, #632]	; (8000ee8 <main+0x384>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Turn on green LED
 8000c74:	4b94      	ldr	r3, [pc, #592]	; (8000ec8 <main+0x364>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f004 fbdd 	bl	8005438 <HAL_TIM_PWM_Start>
 8000c7e:	e00b      	b.n	8000c98 <main+0x134>
			}
			else if (pattern_select > 2) {
 8000c80:	4b99      	ldr	r3, [pc, #612]	; (8000ee8 <main+0x384>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d907      	bls.n	8000c98 <main+0x134>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	// Turn off green LED
 8000c88:	4b8f      	ldr	r3, [pc, #572]	; (8000ec8 <main+0x364>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fc65 	bl	800555c <HAL_TIM_PWM_Stop>
				TIM21->ARR = 869;							// Preset heartbeat to 69 bpm to avoid glitches
 8000c92:	4b99      	ldr	r3, [pc, #612]	; (8000ef8 <main+0x394>)
 8000c94:	4a99      	ldr	r2, [pc, #612]	; (8000efc <main+0x398>)
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			button_flag = 0;
 8000c98:	4b96      	ldr	r3, [pc, #600]	; (8000ef4 <main+0x390>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
		}

		if (sample_flag) {
 8000c9e:	4b98      	ldr	r3, [pc, #608]	; (8000f00 <main+0x39c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0ae      	beq.n	8000c04 <main+0xa0>

			HAL_ADC_Start(&hadc);
 8000ca6:	4b97      	ldr	r3, [pc, #604]	; (8000f04 <main+0x3a0>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 f895 	bl	8001dd8 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 8000cae:	4b95      	ldr	r3, [pc, #596]	; (8000f04 <main+0x3a0>)
 8000cb0:	2164      	movs	r1, #100	; 0x64
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 f8e4 	bl	8001e80 <HAL_ADC_PollForConversion>
			adc_val = HAL_ADC_GetValue(&hadc);
 8000cb8:	4b92      	ldr	r3, [pc, #584]	; (8000f04 <main+0x3a0>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 f97c 	bl	8001fb8 <HAL_ADC_GetValue>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <main+0x3a4>)
 8000cc4:	601a      	str	r2, [r3, #0]

			if (DEBUG_MODE) {
 8000cc6:	4b83      	ldr	r3, [pc, #524]	; (8000ed4 <main+0x370>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d016      	beq.n	8000cfc <main+0x198>
				// REMOVE USB STUFF TO REDUCE FLICKER
				char buf[10];
				sprintf(buf, "%d %d\r\n", adc_val, heartbeat_freq);
 8000cce:	4b8e      	ldr	r3, [pc, #568]	; (8000f08 <main+0x3a4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b87      	ldr	r3, [pc, #540]	; (8000ef0 <main+0x38c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	498d      	ldr	r1, [pc, #564]	; (8000f0c <main+0x3a8>)
 8000cd8:	0038      	movs	r0, r7
 8000cda:	f009 fd7b 	bl	800a7d4 <siprintf>
				if (heartbeat_freq >= 100) {
 8000cde:	4b84      	ldr	r3, [pc, #528]	; (8000ef0 <main+0x38c>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	2b63      	cmp	r3, #99	; 0x63
 8000ce4:	d905      	bls.n	8000cf2 <main+0x18e>
					CDC_Transmit_FS(buf, 10);
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	210a      	movs	r1, #10
 8000cea:	0018      	movs	r0, r3
 8000cec:	f009 f882 	bl	8009df4 <CDC_Transmit_FS>
 8000cf0:	e004      	b.n	8000cfc <main+0x198>
				}
				else {
					CDC_Transmit_FS(buf, 9);
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2109      	movs	r1, #9
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f009 f87c 	bl	8009df4 <CDC_Transmit_FS>
				}
			}

			// AUTO-CALIBRATION WINDOW STUFF
			// Reset window once length is reached
			calibration_count++;
 8000cfc:	4b84      	ldr	r3, [pc, #528]	; (8000f10 <main+0x3ac>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b82      	ldr	r3, [pc, #520]	; (8000f10 <main+0x3ac>)
 8000d06:	801a      	strh	r2, [r3, #0]
			if (calibration_count >= CALIBRATION_WINDOW_LEN) {
 8000d08:	4b81      	ldr	r3, [pc, #516]	; (8000f10 <main+0x3ac>)
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d32d      	bcc.n	8000d70 <main+0x20c>
				calibration_count = 0;
 8000d14:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <main+0x3ac>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	801a      	strh	r2, [r3, #0]

				uint16_t window_mid = (window_max + window_min) >> 1;
 8000d1a:	4b7e      	ldr	r3, [pc, #504]	; (8000f14 <main+0x3b0>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	001a      	movs	r2, r3
 8000d20:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <main+0x3b4>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	105a      	asrs	r2, r3, #1
 8000d28:	210e      	movs	r1, #14
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	801a      	strh	r2, [r3, #0]

				// Can vary how much between
				// Assign calibration_max between middle and max
				calibration_high = window_mid + ((window_max - window_min) >> 2);
 8000d2e:	4b79      	ldr	r3, [pc, #484]	; (8000f14 <main+0x3b0>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	001a      	movs	r2, r3
 8000d34:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <main+0x3b4>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	109b      	asrs	r3, r3, #2
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <main+0x3b8>)
 8000d48:	801a      	strh	r2, [r3, #0]

				// Assign calibration min between middle and min
				calibration_low = window_mid - ((window_mid - window_min) >> 2);
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	4a72      	ldr	r2, [pc, #456]	; (8000f18 <main+0x3b4>)
 8000d50:	8812      	ldrh	r2, [r2, #0]
 8000d52:	1a9b      	subs	r3, r3, r2
 8000d54:	109b      	asrs	r3, r3, #2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	187a      	adds	r2, r7, r1
 8000d5a:	8812      	ldrh	r2, [r2, #0]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b6f      	ldr	r3, [pc, #444]	; (8000f20 <main+0x3bc>)
 8000d62:	801a      	strh	r2, [r3, #0]

				window_max = 0;
 8000d64:	4b6b      	ldr	r3, [pc, #428]	; (8000f14 <main+0x3b0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	801a      	strh	r2, [r3, #0]
				window_min = 4095;
 8000d6a:	4b6b      	ldr	r3, [pc, #428]	; (8000f18 <main+0x3b4>)
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	; (8000f24 <main+0x3c0>)
 8000d6e:	801a      	strh	r2, [r3, #0]

			}

			// Record max and min values for next window's comparison
			if (adc_val > window_max) {
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <main+0x3b0>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <main+0x3a4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d205      	bcs.n	8000d8a <main+0x226>
				window_max = adc_val;
 8000d7e:	4b62      	ldr	r3, [pc, #392]	; (8000f08 <main+0x3a4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b63      	ldr	r3, [pc, #396]	; (8000f14 <main+0x3b0>)
 8000d86:	801a      	strh	r2, [r3, #0]
 8000d88:	e00b      	b.n	8000da2 <main+0x23e>
			}
			else if (adc_val < window_min) {
 8000d8a:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <main+0x3b4>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	001a      	movs	r2, r3
 8000d90:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <main+0x3a4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d904      	bls.n	8000da2 <main+0x23e>
				window_min = adc_val;
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <main+0x3a4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <main+0x3b4>)
 8000da0:	801a      	strh	r2, [r3, #0]
			}


			// CALCULATING HEART RATE STUFF
			heartbeat_count++;	// Increment time between beats
 8000da2:	4b61      	ldr	r3, [pc, #388]	; (8000f28 <main+0x3c4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <main+0x3c4>)
 8000dac:	801a      	strh	r2, [r3, #0]

			// When signal goes low from high
			if (low_flag && adc_val <= calibration_low) {
 8000dae:	4b5f      	ldr	r3, [pc, #380]	; (8000f2c <main+0x3c8>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <main+0x254>
 8000db6:	e0c3      	b.n	8000f40 <main+0x3dc>
 8000db8:	4b59      	ldr	r3, [pc, #356]	; (8000f20 <main+0x3bc>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <main+0x3a4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d200      	bcs.n	8000dc8 <main+0x264>
 8000dc6:	e0bb      	b.n	8000f40 <main+0x3dc>

				if (DEBUG_MODE) {
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <main+0x370>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <main+0x27a>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	01db      	lsls	r3, r3, #7
 8000dd4:	483e      	ldr	r0, [pc, #248]	; (8000ed0 <main+0x36c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f001 fc80 	bl	80026de <HAL_GPIO_WritePin>
				}
				low_flag = 0;
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <main+0x3c8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
				high_flag = 1;
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <main+0x3cc>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]

				// Sampling time:
				uint16_t sample_freq = 16000000 / (TIM7->PSC+1) / (TIM7->ARR+1);	// In Hz
 8000dea:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <main+0x3d0>)
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	3301      	adds	r3, #1
 8000df0:	0019      	movs	r1, r3
 8000df2:	4851      	ldr	r0, [pc, #324]	; (8000f38 <main+0x3d4>)
 8000df4:	f7ff f992 	bl	800011c <__udivsi3>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <main+0x3d0>)
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	3301      	adds	r3, #1
 8000e02:	0019      	movs	r1, r3
 8000e04:	0010      	movs	r0, r2
 8000e06:	f7ff f989 	bl	800011c <__udivsi3>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	210c      	movs	r1, #12
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	801a      	strh	r2, [r3, #0]

				// In Hz = 1 / ( Counts * (1/Fs) ) = Fs / Counts
				heartbeat_freq = sample_freq * 60 / heartbeat_count; // In BPM
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	0013      	movs	r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	001a      	movs	r2, r3
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <main+0x3c4>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f7ff fa01 	bl	8000230 <__divsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <main+0x38c>)
 8000e34:	801a      	strh	r2, [r3, #0]

				// Limit between 30 BPM and 200 BPM
				if (heartbeat_freq < 30) {
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <main+0x38c>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	2b1d      	cmp	r3, #29
 8000e3c:	d803      	bhi.n	8000e46 <main+0x2e2>
					heartbeat_freq = 30;
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <main+0x38c>)
 8000e40:	221e      	movs	r2, #30
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	e006      	b.n	8000e54 <main+0x2f0>
				}
				else if (heartbeat_freq > 199){
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <main+0x38c>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	2bc7      	cmp	r3, #199	; 0xc7
 8000e4c:	d902      	bls.n	8000e54 <main+0x2f0>
					heartbeat_freq = 199;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <main+0x38c>)
 8000e50:	22c7      	movs	r2, #199	; 0xc7
 8000e52:	801a      	strh	r2, [r3, #0]
					ARR = 16,000,000 / 1600 / (BPM/60)
					ARR = 16,000,000 / 1600 / BPM * 60 / Stages
				 */

				// When printing out numbers, just set constant timer frequency
				if (pattern_select == 2) {
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <main+0x384>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d103      	bne.n	8000e64 <main+0x300>
					TIM21->ARR = 200;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <main+0x394>)
 8000e5e:	22c8      	movs	r2, #200	; 0xc8
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e62:	e02a      	b.n	8000eba <main+0x356>
				}
				else if (pattern_select > 2) {
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <main+0x384>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d903      	bls.n	8000e74 <main+0x310>
					TIM21->ARR = 869;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <main+0x394>)
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <main+0x398>)
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	e022      	b.n	8000eba <main+0x356>
				}
				else {
					// Range (2221 (30 BPM) to 332 (200 BPM)
					TIM21->ARR = 16000000 / (TIM21->PSC+1) / heartbeat_freq * 60 / pattern_steps[pattern_select] - 1;
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <main+0x394>)
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	3301      	adds	r3, #1
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	482e      	ldr	r0, [pc, #184]	; (8000f38 <main+0x3d4>)
 8000e7e:	f7ff f94d 	bl	800011c <__udivsi3>
 8000e82:	0003      	movs	r3, r0
 8000e84:	001a      	movs	r2, r3
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <main+0x38c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f7ff f945 	bl	800011c <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	001a      	movs	r2, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <main+0x384>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <main+0x3d8>)
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	0019      	movs	r1, r3
 8000eac:	f7ff f936 	bl	800011c <__udivsi3>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <main+0x394>)
 8000eb6:	3a01      	subs	r2, #1
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				heartbeat_count = 0;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x3c4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
			if (low_flag && adc_val <= calibration_low) {
 8000ec0:	e05a      	b.n	8000f78 <main+0x414>
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200004d8 	.word	0x200004d8
 8000ec8:	2000060c 	.word	0x2000060c
 8000ecc:	2000064c 	.word	0x2000064c
 8000ed0:	50000400 	.word	0x50000400
 8000ed4:	2000074c 	.word	0x2000074c
 8000ed8:	2000070c 	.word	0x2000070c
 8000edc:	2000068c 	.word	0x2000068c
 8000ee0:	200006cc 	.word	0x200006cc
 8000ee4:	20000762 	.word	0x20000762
 8000ee8:	20000765 	.word	0x20000765
 8000eec:	0800b100 	.word	0x0800b100
 8000ef0:	200002d4 	.word	0x200002d4
 8000ef4:	20000763 	.word	0x20000763
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	00000365 	.word	0x00000365
 8000f00:	20000758 	.word	0x20000758
 8000f04:	200005b0 	.word	0x200005b0
 8000f08:	20000750 	.word	0x20000750
 8000f0c:	0800b0ac 	.word	0x0800b0ac
 8000f10:	2000075c 	.word	0x2000075c
 8000f14:	2000075e 	.word	0x2000075e
 8000f18:	20000760 	.word	0x20000760
 8000f1c:	200002d6 	.word	0x200002d6
 8000f20:	200002d8 	.word	0x200002d8
 8000f24:	00000fff 	.word	0x00000fff
 8000f28:	2000075a 	.word	0x2000075a
 8000f2c:	200002d3 	.word	0x200002d3
 8000f30:	20000759 	.word	0x20000759
 8000f34:	40001400 	.word	0x40001400
 8000f38:	00f42400 	.word	0x00f42400
 8000f3c:	0800b0fc 	.word	0x0800b0fc
			}
			// When signal goes high from low
			else if (high_flag && adc_val >= calibration_high) {
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <main+0x424>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d017      	beq.n	8000f78 <main+0x414>
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <main+0x428>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <main+0x42c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d810      	bhi.n	8000f78 <main+0x414>

				if (DEBUG_MODE) {
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <main+0x430>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <main+0x408>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	01db      	lsls	r3, r3, #7
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <main+0x434>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	0019      	movs	r1, r3
 8000f68:	f001 fbb9 	bl	80026de <HAL_GPIO_WritePin>
				}
				low_flag = 1;
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <main+0x438>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
				high_flag = 0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <main+0x424>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]



			}

			prev_adc_val = adc_val;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <main+0x42c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <main+0x43c>)
 8000f7e:	601a      	str	r2, [r3, #0]
			sample_flag = 0;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x440>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		HandleLEDQueue();
 8000f86:	e63d      	b.n	8000c04 <main+0xa0>
 8000f88:	20000759 	.word	0x20000759
 8000f8c:	200002d6 	.word	0x200002d6
 8000f90:	20000750 	.word	0x20000750
 8000f94:	2000074c 	.word	0x2000074c
 8000f98:	50000400 	.word	0x50000400
 8000f9c:	200002d3 	.word	0x200002d3
 8000fa0:	20000754 	.word	0x20000754
 8000fa4:	20000758 	.word	0x20000758

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b09d      	sub	sp, #116	; 0x74
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	2438      	movs	r4, #56	; 0x38
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2338      	movs	r3, #56	; 0x38
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f009 fc02 	bl	800a7c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbe:	2324      	movs	r3, #36	; 0x24
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2314      	movs	r3, #20
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f009 fbfa 	bl	800a7c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fce:	003b      	movs	r3, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2324      	movs	r3, #36	; 0x24
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f009 fbf3 	bl	800a7c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <SystemClock_Config+0xe0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	; (800108c <SystemClock_Config+0xe4>)
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemClock_Config+0xe0>)
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	0109      	lsls	r1, r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2221      	movs	r2, #33	; 0x21
 8000ff2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0252      	lsls	r2, r2, #9
 8000ffa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ffc:	0021      	movs	r1, r4
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2201      	movs	r2, #1
 8001002:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2202      	movs	r2, #2
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0252      	lsls	r2, r2, #9
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	0412      	lsls	r2, r2, #16
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	187b      	adds	r3, r7, r1
 8001022:	0018      	movs	r0, r3
 8001024:	f003 f9ca 	bl	80043bc <HAL_RCC_OscConfig>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800102c:	f000 fb4a 	bl	80016c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	2124      	movs	r1, #36	; 0x24
 8001032:	187b      	adds	r3, r7, r1
 8001034:	220f      	movs	r2, #15
 8001036:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2203      	movs	r2, #3
 800103c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2100      	movs	r1, #0
 8001054:	0018      	movs	r0, r3
 8001056:	f003 fd85 	bl	8004b64 <HAL_RCC_ClockConfig>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800105e:	f000 fb31 	bl	80016c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001062:	003b      	movs	r3, r7
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001068:	003b      	movs	r3, r7
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	04d2      	lsls	r2, r2, #19
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001070:	003b      	movs	r3, r7
 8001072:	0018      	movs	r0, r3
 8001074:	f003 ff62 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800107c:	f000 fb22 	bl	80016c4 <Error_Handler>
  }
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b01d      	add	sp, #116	; 0x74
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	40007000 	.word	0x40007000
 800108c:	ffffe7ff 	.word	0xffffe7ff

08001090 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	003b      	movs	r3, r7
 8001098:	0018      	movs	r0, r3
 800109a:	2308      	movs	r3, #8
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f009 fb8f 	bl	800a7c2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_ADC_Init+0xd0>)
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <MX_ADC_Init+0xd4>)
 80010a8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <MX_ADC_Init+0xd0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_ADC_Init+0xd0>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_ADC_Init+0xd0>)
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_ADC_Init+0xd0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <MX_ADC_Init+0xd0>)
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	0612      	lsls	r2, r2, #24
 80010c8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_ADC_Init+0xd0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_ADC_Init+0xd0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_ADC_Init+0xd0>)
 80010d8:	2201      	movs	r2, #1
 80010da:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_ADC_Init+0xd0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_ADC_Init+0xd0>)
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_ADC_Init+0xd0>)
 80010ec:	2221      	movs	r2, #33	; 0x21
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_ADC_Init+0xd0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_ADC_Init+0xd0>)
 80010fa:	22c2      	movs	r2, #194	; 0xc2
 80010fc:	32ff      	adds	r2, #255	; 0xff
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_ADC_Init+0xd0>)
 8001102:	222c      	movs	r2, #44	; 0x2c
 8001104:	2100      	movs	r1, #0
 8001106:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_ADC_Init+0xd0>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_ADC_Init+0xd0>)
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_ADC_Init+0xd0>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_ADC_Init+0xd0>)
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_ADC_Init+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_ADC_Init+0xd0>)
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fce1 	bl	8001af0 <HAL_ADC_Init>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001132:	f000 fac7 	bl	80016c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001136:	003b      	movs	r3, r7
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MX_ADC_Init+0xd8>)
 800113a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800113c:	003b      	movs	r3, r7
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	0152      	lsls	r2, r2, #5
 8001142:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001144:	003a      	movs	r2, r7
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_ADC_Init+0xd0>)
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f000 ff40 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8001154:	f000 fab6 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200005b0 	.word	0x200005b0
 8001164:	40012400 	.word	0x40012400
 8001168:	10000010 	.word	0x10000010

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	2318      	movs	r3, #24
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	0018      	movs	r0, r3
 8001178:	2310      	movs	r3, #16
 800117a:	001a      	movs	r2, r3
 800117c:	2100      	movs	r1, #0
 800117e:	f009 fb20 	bl	800a7c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	2310      	movs	r3, #16
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	0018      	movs	r0, r3
 8001188:	2308      	movs	r3, #8
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f009 fb18 	bl	800a7c2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	003b      	movs	r3, r7
 8001194:	0018      	movs	r0, r3
 8001196:	2310      	movs	r3, #16
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f009 fb11 	bl	800a7c2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	05d2      	lsls	r2, r2, #23
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011aa:	220f      	movs	r2, #15
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011b6:	2263      	movs	r2, #99	; 0x63
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f004 f813 	bl	80051f4 <HAL_TIM_Base_Init>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011d2:	f000 fa77 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	2118      	movs	r1, #24
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0152      	lsls	r2, r2, #5
 80011de:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e0:	187a      	adds	r2, r7, r1
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f004 fbfc 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 80011ec:	1e03      	subs	r3, r0, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80011f0:	f000 fa68 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM2_Init+0xf8>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f004 f8d6 	bl	80053a8 <HAL_TIM_PWM_Init>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001200:	f000 fa60 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2110      	movs	r1, #16
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001212:	187a      	adds	r2, r7, r1
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_TIM2_Init+0xf8>)
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f004 fef7 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001222:	f000 fa4f 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	003b      	movs	r3, r7
 8001228:	2260      	movs	r2, #96	; 0x60
 800122a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	003b      	movs	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123e:	0039      	movs	r1, r7
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_TIM2_Init+0xf8>)
 8001242:	2200      	movs	r2, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f004 fb07 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800124e:	f000 fa39 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <MX_TIM2_Init+0xf8>)
 8001254:	0018      	movs	r0, r3
 8001256:	f000 faf1 	bl	800183c <HAL_TIM_MspPostInit>

}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b00a      	add	sp, #40	; 0x28
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	2000060c 	.word	0x2000060c

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	2308      	movs	r3, #8
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	0018      	movs	r0, r3
 8001274:	2310      	movs	r3, #16
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f009 faa2 	bl	800a7c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	003b      	movs	r3, r7
 8001280:	0018      	movs	r0, r3
 8001282:	2308      	movs	r3, #8
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f009 fa9b 	bl	800a7c2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM3_Init+0xa0>)
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <MX_TIM3_Init+0xa4>)
 8001290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM3_Init+0xa0>)
 8001294:	220f      	movs	r2, #15
 8001296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_TIM3_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012a0:	2263      	movs	r2, #99	; 0x63
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f003 ff9e 	bl	80051f4 <HAL_TIM_Base_Init>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012bc:	f000 fa02 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	2108      	movs	r1, #8
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0152      	lsls	r2, r2, #5
 80012c8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ca:	187a      	adds	r2, r7, r1
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f004 fb87 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012da:	f000 f9f3 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ea:	003a      	movs	r2, r7
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f004 fe8b 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012fa:	f000 f9e3 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b006      	add	sp, #24
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	2000064c 	.word	0x2000064c
 800130c:	40000400 	.word	0x40000400

08001310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	003b      	movs	r3, r7
 8001318:	0018      	movs	r0, r3
 800131a:	2308      	movs	r3, #8
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f009 fa4f 	bl	800a7c2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_TIM6_Init+0x6c>)
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <MX_TIM6_Init+0x70>)
 8001328:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_TIM6_Init+0x6c>)
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <MX_TIM6_Init+0x74>)
 800132e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_TIM6_Init+0x6c>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_TIM6_Init+0x6c>)
 8001338:	2263      	movs	r2, #99	; 0x63
 800133a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_TIM6_Init+0x6c>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_TIM6_Init+0x6c>)
 8001344:	0018      	movs	r0, r3
 8001346:	f003 ff55 	bl	80051f4 <HAL_TIM_Base_Init>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800134e:	f000 f9b9 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	003b      	movs	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	003b      	movs	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800135e:	003a      	movs	r2, r7
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_TIM6_Init+0x6c>)
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f004 fe51 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	1e03      	subs	r3, r0, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800136e:	f000 f9a9 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	2000068c 	.word	0x2000068c
 8001380:	40001000 	.word	0x40001000
 8001384:	0000063f 	.word	0x0000063f

08001388 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	003b      	movs	r3, r7
 8001390:	0018      	movs	r0, r3
 8001392:	2308      	movs	r3, #8
 8001394:	001a      	movs	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	f009 fa13 	bl	800a7c2 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_TIM7_Init+0x6c>)
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <MX_TIM7_Init+0x70>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013a4:	2263      	movs	r2, #99	; 0x63
 80013a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 32-1;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013b0:	221f      	movs	r2, #31
 80013b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f003 ff19 	bl	80051f4 <HAL_TIM_Base_Init>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80013c6:	f000 f97d 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	003b      	movs	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	003b      	movs	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013d6:	003a      	movs	r2, r7
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_TIM7_Init+0x6c>)
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f004 fe15 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80013e6:	f000 f96d 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	200006cc 	.word	0x200006cc
 80013f8:	40001400 	.word	0x40001400

080013fc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	2318      	movs	r3, #24
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	0018      	movs	r0, r3
 8001408:	2310      	movs	r3, #16
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f009 f9d8 	bl	800a7c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	2310      	movs	r3, #16
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	0018      	movs	r0, r3
 8001418:	2308      	movs	r3, #8
 800141a:	001a      	movs	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f009 f9d0 	bl	800a7c2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001422:	003b      	movs	r3, r7
 8001424:	0018      	movs	r0, r3
 8001426:	2310      	movs	r3, #16
 8001428:	001a      	movs	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	f009 f9c9 	bl	800a7c2 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001432:	4a2e      	ldr	r2, [pc, #184]	; (80014ec <MX_TIM21_Init+0xf0>)
 8001434:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1600-1;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001438:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_TIM21_Init+0xf4>)
 800143a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_TIM21_Init+0xec>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001444:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <MX_TIM21_Init+0xf8>)
 8001446:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_TIM21_Init+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001456:	0018      	movs	r0, r3
 8001458:	f003 fecc 	bl	80051f4 <HAL_TIM_Base_Init>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8001460:	f000 f930 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	2118      	movs	r1, #24
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0152      	lsls	r2, r2, #5
 800146c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800146e:	187a      	adds	r2, r7, r1
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f004 fab5 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 800147e:	f000 f921 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM21_Init+0xec>)
 8001484:	0018      	movs	r0, r3
 8001486:	f003 ff47 	bl	8005318 <HAL_TIM_OC_Init>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800148e:	f000 f919 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2110      	movs	r1, #16
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80014a0:	187a      	adds	r2, r7, r1
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_TIM21_Init+0xec>)
 80014a4:	0011      	movs	r1, r2
 80014a6:	0018      	movs	r0, r3
 80014a8:	f004 fdb0 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80014b0:	f000 f908 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014ba:	003b      	movs	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	003b      	movs	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	003b      	movs	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	0039      	movs	r1, r7
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_TIM21_Init+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	0018      	movs	r0, r3
 80014d4:	f004 f968 	bl	80057a8 <HAL_TIM_OC_ConfigChannel>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 80014dc:	f000 f8f2 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b00a      	add	sp, #40	; 0x28
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000070c 	.word	0x2000070c
 80014ec:	40010800 	.word	0x40010800
 80014f0:	0000063f 	.word	0x0000063f
 80014f4:	000003e7 	.word	0x000003e7

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	2414      	movs	r4, #20
 8001500:	193b      	adds	r3, r7, r4
 8001502:	0018      	movs	r0, r3
 8001504:	2314      	movs	r3, #20
 8001506:	001a      	movs	r2, r3
 8001508:	2100      	movs	r1, #0
 800150a:	f009 f95a 	bl	800a7c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <MX_GPIO_Init+0x110>)
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <MX_GPIO_Init+0x110>)
 8001514:	2104      	movs	r1, #4
 8001516:	430a      	orrs	r2, r1
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <MX_GPIO_Init+0x110>)
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <MX_GPIO_Init+0x110>)
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <MX_GPIO_Init+0x110>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	430a      	orrs	r2, r1
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_GPIO_Init+0x110>)
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_GPIO_Init+0x110>)
 8001540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <MX_GPIO_Init+0x110>)
 8001544:	2101      	movs	r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_GPIO_Init+0x110>)
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	2201      	movs	r2, #1
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <MX_GPIO_Init+0x110>)
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <MX_GPIO_Init+0x110>)
 800155c:	2102      	movs	r1, #2
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <MX_GPIO_Init+0x110>)
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|C2_Pin|C3_Pin
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	2201      	movs	r2, #1
 8001574:	21cf      	movs	r1, #207	; 0xcf
 8001576:	0018      	movs	r0, r3
 8001578:	f001 f8b1 	bl	80026de <HAL_GPIO_WritePin>
                          |C4_Pin|C5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C6_Pin|C7_Pin|LED1_Pin, GPIO_PIN_SET);
 800157c:	4923      	ldr	r1, [pc, #140]	; (800160c <MX_GPIO_Init+0x114>)
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_GPIO_Init+0x118>)
 8001580:	2201      	movs	r2, #1
 8001582:	0018      	movs	r0, r3
 8001584:	f001 f8ab 	bl	80026de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|A8_Pin|A9_Pin|A10_Pin
 8001588:	4922      	ldr	r1, [pc, #136]	; (8001614 <MX_GPIO_Init+0x11c>)
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_GPIO_Init+0x118>)
 800158c:	2200      	movs	r2, #0
 800158e:	0018      	movs	r0, r3
 8001590:	f001 f8a5 	bl	80026de <HAL_GPIO_WritePin>
                          |A1_Pin|A2_Pin|A3_Pin|A4_Pin
                          |A5_Pin|A6_Pin|A7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C1_Pin C2_Pin C3_Pin
                           C4_Pin C5_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|C2_Pin|C3_Pin
 8001594:	193b      	adds	r3, r7, r4
 8001596:	22cf      	movs	r2, #207	; 0xcf
 8001598:	601a      	str	r2, [r3, #0]
                          |C4_Pin|C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2201      	movs	r2, #1
 800159e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	193a      	adds	r2, r7, r4
 80015ae:	23a0      	movs	r3, #160	; 0xa0
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 fef7 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C6_Pin C7_Pin A0_Pin A8_Pin
                           A9_Pin A10_Pin LED1_Pin A1_Pin
                           A2_Pin A3_Pin A4_Pin A5_Pin
                           A6_Pin A7_Pin */
  GPIO_InitStruct.Pin = C6_Pin|C7_Pin|A0_Pin|A8_Pin
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <MX_GPIO_Init+0x120>)
 80015be:	601a      	str	r2, [r3, #0]
                          |A9_Pin|A10_Pin|LED1_Pin|A1_Pin
                          |A2_Pin|A3_Pin|A4_Pin|A5_Pin
                          |A6_Pin|A7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	2201      	movs	r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	193b      	adds	r3, r7, r4
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <MX_GPIO_Init+0x118>)
 80015d6:	0019      	movs	r1, r3
 80015d8:	0010      	movs	r0, r2
 80015da:	f000 fee5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT1_Pin */
  GPIO_InitStruct.Pin = BUTT1_Pin;
 80015de:	0021      	movs	r1, r4
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0192      	lsls	r2, r2, #6
 80015e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT1_GPIO_Port, &GPIO_InitStruct);
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <MX_GPIO_Init+0x118>)
 80015f8:	0019      	movs	r1, r3
 80015fa:	0010      	movs	r0, r2
 80015fc:	f000 fed4 	bl	80023a8 <HAL_GPIO_Init>

}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b00b      	add	sp, #44	; 0x2c
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	00004003 	.word	0x00004003
 8001610:	50000400 	.word	0x50000400
 8001614:	00001ffc 	.word	0x00001ffc
 8001618:	00005fff 	.word	0x00005fff

0800161c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  // Check if timer to control pattern steps
  if (htim == &htim21)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d103      	bne.n	8001634 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //PulseHandler();
	  pattern_flag = 1;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
  }
  // Check if timer to sample ADC
  else if (htim == &htim7) {
	  sample_flag = 1;
  }
}
 8001632:	e030      	b.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim6) {
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001638:	429a      	cmp	r2, r3
 800163a:	d125      	bne.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x6c>
	  button_state = HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin);
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	019b      	lsls	r3, r3, #6
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f001 f82d 	bl	80026a4 <HAL_GPIO_ReadPin>
 800164a:	0003      	movs	r3, r0
 800164c:	001a      	movs	r2, r3
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001650:	701a      	strb	r2, [r3, #0]
	  if (button_state == GPIO_PIN_RESET && button_prev == GPIO_PIN_SET) {
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10a      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x54>
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x54>
		  button_flag = 1;
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
		  button_prev = GPIO_PIN_RESET;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	e012      	b.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  else if (button_state == GPIO_PIN_SET && button_prev == GPIO_PIN_RESET) {
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10e      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
		  button_prev = GPIO_PIN_SET;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	e006      	b.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim7) {
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800168c:	429a      	cmp	r2, r3
 800168e:	d102      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  sample_flag = 1;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	2000070c 	.word	0x2000070c
 80016a4:	20000762 	.word	0x20000762
 80016a8:	2000068c 	.word	0x2000068c
 80016ac:	50000400 	.word	0x50000400
 80016b0:	20000764 	.word	0x20000764
 80016b4:	200002da 	.word	0x200002da
 80016b8:	20000763 	.word	0x20000763
 80016bc:	200006cc 	.word	0x200006cc
 80016c0:	20000758 	.word	0x20000758

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_MspInit+0x24>)
 80016d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x24>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_MspInit+0x24>)
 80016e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_MspInit+0x24>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0549      	lsls	r1, r1, #21
 80016ea:	430a      	orrs	r2, r1
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	240c      	movs	r4, #12
 8001702:	193b      	adds	r3, r7, r4
 8001704:	0018      	movs	r0, r3
 8001706:	2314      	movs	r3, #20
 8001708:	001a      	movs	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	f009 f859 	bl	800a7c2 <memset>
  if(hadc->Instance==ADC1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <HAL_ADC_MspInit+0x70>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d122      	bne.n	8001760 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_ADC_MspInit+0x74>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_ADC_MspInit+0x74>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0089      	lsls	r1, r1, #2
 8001724:	430a      	orrs	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_ADC_MspInit+0x74>)
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_ADC_MspInit+0x74>)
 800172e:	2101      	movs	r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_ADC_MspInit+0x74>)
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = HEART_ADC_Pin;
 8001740:	193b      	adds	r3, r7, r4
 8001742:	2210      	movs	r2, #16
 8001744:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2203      	movs	r2, #3
 800174a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(HEART_ADC_GPIO_Port, &GPIO_InitStruct);
 8001752:	193a      	adds	r2, r7, r4
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fe24 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b009      	add	sp, #36	; 0x24
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	40012400 	.word	0x40012400
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	429a      	cmp	r2, r3
 8001782:	d106      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 8001786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001790:	e046      	b.n	8001820 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_TIM_Base_MspInit+0xbc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d106      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 800179e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 80017a2:	2102      	movs	r1, #2
 80017a4:	430a      	orrs	r2, r1
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017a8:	e03a      	b.n	8001820 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a20      	ldr	r2, [pc, #128]	; (8001830 <HAL_TIM_Base_MspInit+0xc0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d10e      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 80017b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 80017ba:	2110      	movs	r1, #16
 80017bc:	430a      	orrs	r2, r1
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2011      	movs	r0, #17
 80017c6:	f000 fdbd 	bl	8002344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ca:	2011      	movs	r0, #17
 80017cc:	f000 fdcf 	bl	800236e <HAL_NVIC_EnableIRQ>
}
 80017d0:	e026      	b.n	8001820 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM7)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_TIM_Base_MspInit+0xc4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10e      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 80017de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 80017e2:	2120      	movs	r1, #32
 80017e4:	430a      	orrs	r2, r1
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2012      	movs	r0, #18
 80017ee:	f000 fda9 	bl	8002344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017f2:	2012      	movs	r0, #18
 80017f4:	f000 fdbb 	bl	800236e <HAL_NVIC_EnableIRQ>
}
 80017f8:	e012      	b.n	8001820 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_TIM_Base_MspInit+0xc8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d10d      	bne.n	8001820 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_TIM_Base_MspInit+0xb8>)
 800180a:	2104      	movs	r1, #4
 800180c:	430a      	orrs	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2014      	movs	r0, #20
 8001816:	f000 fd95 	bl	8002344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800181a:	2014      	movs	r0, #20
 800181c:	f000 fda7 	bl	800236e <HAL_NVIC_EnableIRQ>
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40000400 	.word	0x40000400
 8001830:	40001000 	.word	0x40001000
 8001834:	40001400 	.word	0x40001400
 8001838:	40010800 	.word	0x40010800

0800183c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	240c      	movs	r4, #12
 8001846:	193b      	adds	r3, r7, r4
 8001848:	0018      	movs	r0, r3
 800184a:	2314      	movs	r3, #20
 800184c:	001a      	movs	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	f008 ffb7 	bl	800a7c2 <memset>
  if(htim->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	05db      	lsls	r3, r3, #23
 800185c:	429a      	cmp	r2, r3
 800185e:	d122      	bne.n	80018a6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_TIM_MspPostInit+0x74>)
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_TIM_MspPostInit+0x74>)
 8001866:	2101      	movs	r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_TIM_MspPostInit+0x74>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001878:	0021      	movs	r1, r4
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2220      	movs	r2, #32
 800187e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2202      	movs	r2, #2
 8001884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2205      	movs	r2, #5
 8001896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	187a      	adds	r2, r7, r1
 800189a:	23a0      	movs	r3, #160	; 0xa0
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	0011      	movs	r1, r2
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 fd81 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b009      	add	sp, #36	; 0x24
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f8ee 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <TIM6_DAC_IRQHandler+0x14>)
 80018ea:	0018      	movs	r0, r3
 80018ec:	f003 fe74 	bl	80055d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	2000068c 	.word	0x2000068c

080018fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <TIM7_IRQHandler+0x14>)
 8001902:	0018      	movs	r0, r3
 8001904:	f003 fe68 	bl	80055d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	200006cc 	.word	0x200006cc

08001914 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <TIM21_IRQHandler+0x14>)
 800191a:	0018      	movs	r0, r3
 800191c:	f003 fe5c 	bl	80055d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	2000070c 	.word	0x2000070c

0800192c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <USB_IRQHandler+0x14>)
 8001932:	0018      	movs	r0, r3
 8001934:	f001 f816 	bl	8002964 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20001408 	.word	0x20001408

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f008 fef2 	bl	800a75c <__errno>
 8001978:	0003      	movs	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	2301      	movs	r3, #1
 8001980:	425b      	negs	r3, r3
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	18d2      	adds	r2, r2, r3
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b006      	add	sp, #24
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20005000 	.word	0x20005000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	20000768 	.word	0x20000768
 80019ac:	20001930 	.word	0x20001930

080019b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80019be:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c0:	f7ff fff6 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	; (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f008 febd 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff f8b9 	bl	8000b64 <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
   ldr   r0, =_estack
 80019f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8001a00:	0800b264 	.word	0x0800b264
  ldr r2, =_sbss
 8001a04:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8001a08:	2000192c 	.word	0x2000192c

08001a0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_COMP_IRQHandler>
	...

08001a10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_Init+0x3c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Init+0x3c>)
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f811 	bl	8001a50 <HAL_InitTick>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e001      	b.n	8001a3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3a:	f7ff fe49 	bl	80016d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_InitTick+0x5c>)
 8001a5a:	681c      	ldr	r4, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_InitTick+0x60>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	0019      	movs	r1, r3
 8001a62:	23fa      	movs	r3, #250	; 0xfa
 8001a64:	0098      	lsls	r0, r3, #2
 8001a66:	f7fe fb59 	bl	800011c <__udivsi3>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	0020      	movs	r0, r4
 8001a70:	f7fe fb54 	bl	800011c <__udivsi3>
 8001a74:	0003      	movs	r3, r0
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fc89 	bl	800238e <HAL_SYSTICK_Config>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00f      	b.n	8001aa4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d80b      	bhi.n	8001aa2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	425b      	negs	r3, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 fc56 	bl	8002344 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_InitTick+0x64>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b003      	add	sp, #12
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	200002dc 	.word	0x200002dc
 8001ab0:	200002e4 	.word	0x200002e4
 8001ab4:	200002e0 	.word	0x200002e0

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x1c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x20>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	18d2      	adds	r2, r2, r3
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_IncTick+0x20>)
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	200002e4 	.word	0x200002e4
 8001ad8:	2000076c 	.word	0x2000076c

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <HAL_GetTick+0x10>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	2000076c 	.word	0x2000076c

08001af0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e159      	b.n	8001db6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2250      	movs	r2, #80	; 0x50
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff fdec 	bl	80016f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2210      	movs	r2, #16
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d005      	beq.n	8001b38 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2204      	movs	r2, #4
 8001b34:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b36:	d00b      	beq.n	8001b50 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2250      	movs	r2, #80	; 0x50
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e132      	b.n	8001db6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	4a9a      	ldr	r2, [pc, #616]	; (8001dc0 <HAL_ADC_Init+0x2d0>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	2202      	movs	r2, #2
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2203      	movs	r2, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_ADC_Init+0x90>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_Init+0x90>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_Init+0x92>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d149      	bne.n	8001c1a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	23c0      	movs	r3, #192	; 0xc0
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d00b      	beq.n	8001baa <HAL_ADC_Init+0xba>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	05db      	lsls	r3, r3, #23
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d005      	beq.n	8001baa <HAL_ADC_Init+0xba>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d111      	bne.n	8001bce <HAL_ADC_Init+0xde>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	0892      	lsrs	r2, r2, #2
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6919      	ldr	r1, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	e014      	b.n	8001bf8 <HAL_ADC_Init+0x108>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	0892      	lsrs	r2, r2, #2
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001be4:	4978      	ldr	r1, [pc, #480]	; (8001dc8 <HAL_ADC_Init+0x2d8>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2118      	movs	r1, #24
 8001c04:	438a      	bics	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68d9      	ldr	r1, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001c20:	496a      	ldr	r1, [pc, #424]	; (8001dcc <HAL_ADC_Init+0x2dc>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	065a      	lsls	r2, r3, #25
 8001c30:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <HAL_ADC_Init+0x2d4>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	d108      	bne.n	8001c56 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0549      	lsls	r1, r1, #21
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	495b      	ldr	r1, [pc, #364]	; (8001dd0 <HAL_ADC_Init+0x2e0>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68d9      	ldr	r1, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_Init+0x18c>
 8001c78:	2304      	movs	r3, #4
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_Init+0x18e>
 8001c7c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c7e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2020      	movs	r0, #32
 8001c84:	5c1b      	ldrb	r3, [r3, r0]
 8001c86:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c88:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	202c      	movs	r0, #44	; 0x2c
 8001c8e:	5c1b      	ldrb	r3, [r3, r0]
 8001c90:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c92:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001ca0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ca8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb6:	23c2      	movs	r3, #194	; 0xc2
 8001cb8:	33ff      	adds	r3, #255	; 0xff
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2221      	movs	r2, #33	; 0x21
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d11a      	bne.n	8001d16 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0249      	lsls	r1, r1, #9
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e00b      	b.n	8001d16 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	2220      	movs	r2, #32
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	2201      	movs	r2, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d11f      	bne.n	8001d5e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	492a      	ldr	r1, [pc, #168]	; (8001dd4 <HAL_ADC_Init+0x2e4>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6919      	ldr	r1, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d3c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001d42:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	e00e      	b.n	8001d7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2101      	movs	r1, #1
 8001d78:	438a      	bics	r2, r1
 8001d7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2107      	movs	r1, #7
 8001d88:	438a      	bics	r2, r1
 8001d8a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6959      	ldr	r1, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	2203      	movs	r2, #3
 8001daa:	4393      	bics	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b002      	add	sp, #8
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	fffffefd 	.word	0xfffffefd
 8001dc4:	40012708 	.word	0x40012708
 8001dc8:	ffc3ffff 	.word	0xffc3ffff
 8001dcc:	fdffffff 	.word	0xfdffffff
 8001dd0:	fffe0219 	.word	0xfffe0219
 8001dd4:	fffffc03 	.word	0xfffffc03

08001dd8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d138      	bne.n	8001e66 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2250      	movs	r2, #80	; 0x50
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Start+0x2a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e038      	b.n	8001e74 <HAL_ADC_Start+0x9c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2250      	movs	r2, #80	; 0x50
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d007      	beq.n	8001e22 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e12:	230f      	movs	r3, #15
 8001e14:	18fc      	adds	r4, r7, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 f95f 	bl	80020dc <ADC_Enable>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d120      	bne.n	8001e6e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_ADC_Start+0xa4>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2250      	movs	r2, #80	; 0x50
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	221c      	movs	r2, #28
 8001e52:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2104      	movs	r1, #4
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b005      	add	sp, #20
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	fffff0fe 	.word	0xfffff0fe

08001e80 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d102      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e014      	b.n	8001eca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10b      	bne.n	8001ec6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2250      	movs	r2, #80	; 0x50
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e072      	b.n	8001fac <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eca:	f7ff fe07 	bl	8001adc <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ed2:	e01f      	b.n	8001f14 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	d01c      	beq.n	8001f14 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x70>
 8001ee0:	f7ff fdfc 	bl	8001adc <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d211      	bcs.n	8001f14 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d10b      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	2204      	movs	r2, #4
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e04b      	b.n	8001fac <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0d9      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	23c0      	movs	r3, #192	; 0xc0
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d12e      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d129      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d122      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d110      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	210c      	movs	r1, #12
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_ADC_PollForConversion+0x134>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f80:	e00b      	b.n	8001f9a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	2220      	movs	r2, #32
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	2201      	movs	r2, #1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	fffffefe 	.word	0xfffffefe

08001fb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2250      	movs	r2, #80	; 0x50
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x18>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e06c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xf2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2250      	movs	r2, #80	; 0x50
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d00b      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	2220      	movs	r2, #32
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2250      	movs	r2, #80	; 0x50
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e056      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <HAL_ADC_ConfigChannel+0xfc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d028      	beq.n	8002070 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	035b      	lsls	r3, r3, #13
 800202a:	0b5a      	lsrs	r2, r3, #13
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	02db      	lsls	r3, r3, #11
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	0409      	lsls	r1, r1, #16
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800204e:	200a      	movs	r0, #10
 8002050:	f000 f8ac 	bl	80021ac <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d02b      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	03c9      	lsls	r1, r1, #15
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e023      	b.n	80020b8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	035b      	lsls	r3, r3, #13
 800207c:	0b5b      	lsrs	r3, r3, #13
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	02db      	lsls	r3, r3, #11
 8002090:	4013      	ands	r3, r2
 8002092:	d005      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <HAL_ADC_ConfigChannel+0x104>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	4013      	ands	r3, r2
 80020aa:	d005      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_ADC_ConfigChannel+0x100>)
 80020b2:	4909      	ldr	r1, [pc, #36]	; (80020d8 <HAL_ADC_ConfigChannel+0x108>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2250      	movs	r2, #80	; 0x50
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	00001001 	.word	0x00001001
 80020d0:	40012708 	.word	0x40012708
 80020d4:	ff7fffff 	.word	0xff7fffff
 80020d8:	ffbfffff 	.word	0xffbfffff

080020dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2203      	movs	r2, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <ADC_Enable+0x2c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <ADC_Enable+0x2c>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <ADC_Enable+0x2e>
 8002108:	2300      	movs	r3, #0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d146      	bne.n	800219c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <ADC_Enable+0xcc>)
 8002116:	4013      	ands	r3, r2
 8002118:	d00d      	beq.n	8002136 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	2210      	movs	r2, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	2201      	movs	r2, #1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e033      	b.n	800219e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 f830 	bl	80021ac <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800214c:	f7ff fcc6 	bl	8001adc <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002154:	e01b      	b.n	800218e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002156:	f7ff fcc1 	bl	8001adc <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b0a      	cmp	r3, #10
 8002162:	d914      	bls.n	800218e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00d      	beq.n	800218e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	2210      	movs	r2, #16
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	2201      	movs	r2, #1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	2b01      	cmp	r3, #1
 800219a:	d1dc      	bne.n	8002156 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	80000017 	.word	0x80000017

080021ac <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <ADC_DelayMicroSecond+0x38>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	490b      	ldr	r1, [pc, #44]	; (80021e8 <ADC_DelayMicroSecond+0x3c>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fd ffae 	bl	800011c <__udivsi3>
 80021c0:	0003      	movs	r3, r0
 80021c2:	001a      	movs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4353      	muls	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80021ca:	e002      	b.n	80021d2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <ADC_DelayMicroSecond+0x20>
  }
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	200002dc 	.word	0x200002dc
 80021e8:	000f4240 	.word	0x000f4240

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b7f      	cmp	r3, #127	; 0x7f
 80021fe:	d809      	bhi.n	8002214 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	001a      	movs	r2, r3
 8002206:	231f      	movs	r3, #31
 8002208:	401a      	ands	r2, r3
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <__NVIC_EnableIRQ+0x30>)
 800220c:	2101      	movs	r1, #1
 800220e:	4091      	lsls	r1, r2
 8002210:	000a      	movs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	0002      	movs	r2, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b7f      	cmp	r3, #127	; 0x7f
 8002234:	d828      	bhi.n	8002288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002236:	4a2f      	ldr	r2, [pc, #188]	; (80022f4 <__NVIC_SetPriority+0xd4>)
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	33c0      	adds	r3, #192	; 0xc0
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	589b      	ldr	r3, [r3, r2]
 8002246:	1dfa      	adds	r2, r7, #7
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	0011      	movs	r1, r2
 800224c:	2203      	movs	r2, #3
 800224e:	400a      	ands	r2, r1
 8002250:	00d2      	lsls	r2, r2, #3
 8002252:	21ff      	movs	r1, #255	; 0xff
 8002254:	4091      	lsls	r1, r2
 8002256:	000a      	movs	r2, r1
 8002258:	43d2      	mvns	r2, r2
 800225a:	401a      	ands	r2, r3
 800225c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	22ff      	movs	r2, #255	; 0xff
 8002264:	401a      	ands	r2, r3
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	0018      	movs	r0, r3
 800226c:	2303      	movs	r3, #3
 800226e:	4003      	ands	r3, r0
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002274:	481f      	ldr	r0, [pc, #124]	; (80022f4 <__NVIC_SetPriority+0xd4>)
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b25b      	sxtb	r3, r3
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	430a      	orrs	r2, r1
 8002280:	33c0      	adds	r3, #192	; 0xc0
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002286:	e031      	b.n	80022ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <__NVIC_SetPriority+0xd8>)
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0019      	movs	r1, r3
 8002290:	230f      	movs	r3, #15
 8002292:	400b      	ands	r3, r1
 8002294:	3b08      	subs	r3, #8
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3306      	adds	r3, #6
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1dfa      	adds	r2, r7, #7
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	0011      	movs	r1, r2
 80022a8:	2203      	movs	r2, #3
 80022aa:	400a      	ands	r2, r1
 80022ac:	00d2      	lsls	r2, r2, #3
 80022ae:	21ff      	movs	r1, #255	; 0xff
 80022b0:	4091      	lsls	r1, r2
 80022b2:	000a      	movs	r2, r1
 80022b4:	43d2      	mvns	r2, r2
 80022b6:	401a      	ands	r2, r3
 80022b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	401a      	ands	r2, r3
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	2303      	movs	r3, #3
 80022ca:	4003      	ands	r3, r0
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d0:	4809      	ldr	r0, [pc, #36]	; (80022f8 <__NVIC_SetPriority+0xd8>)
 80022d2:	1dfb      	adds	r3, r7, #7
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	001c      	movs	r4, r3
 80022d8:	230f      	movs	r3, #15
 80022da:	4023      	ands	r3, r4
 80022dc:	3b08      	subs	r3, #8
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	430a      	orrs	r2, r1
 80022e2:	3306      	adds	r3, #6
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	18c3      	adds	r3, r0, r3
 80022e8:	3304      	adds	r3, #4
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b003      	add	sp, #12
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	045b      	lsls	r3, r3, #17
 800230c:	429a      	cmp	r2, r3
 800230e:	d301      	bcc.n	8002314 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002310:	2301      	movs	r3, #1
 8002312:	e010      	b.n	8002336 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <SysTick_Config+0x44>)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	3a01      	subs	r2, #1
 800231a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231c:	2301      	movs	r3, #1
 800231e:	425b      	negs	r3, r3
 8002320:	2103      	movs	r1, #3
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff ff7c 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SysTick_Config+0x44>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SysTick_Config+0x44>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	e000e010 	.word	0xe000e010

08002344 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	210f      	movs	r1, #15
 8002350:	187b      	adds	r3, r7, r1
 8002352:	1c02      	adds	r2, r0, #0
 8002354:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	0011      	movs	r1, r2
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	0002      	movs	r2, r0
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b25b      	sxtb	r3, r3
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ff33 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff ffaf 	bl	80022fc <SysTick_Config>
 800239e:	0003      	movs	r3, r0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023be:	e155      	b.n	800266c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4091      	lsls	r1, r2
 80023ca:	000a      	movs	r2, r1
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <HAL_GPIO_Init+0x30>
 80023d6:	e146      	b.n	8002666 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	4013      	ands	r3, r2
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	409a      	lsls	r2, r3
 80023fe:	0013      	movs	r3, r2
 8002400:	43da      	mvns	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
 800242c:	0013      	movs	r3, r2
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	2201      	movs	r2, #1
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
 8002444:	0013      	movs	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	4013      	ands	r3, r2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	4013      	ands	r3, r2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	58d3      	ldr	r3, [r2, r3]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2207      	movs	r2, #7
 80024ac:	4013      	ands	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	43da      	mvns	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2107      	movs	r1, #7
 80024c6:	400b      	ands	r3, r1
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	6939      	ldr	r1, [r7, #16]
 80024e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	401a      	ands	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	23c0      	movs	r3, #192	; 0xc0
 800251c:	029b      	lsls	r3, r3, #10
 800251e:	4013      	ands	r3, r2
 8002520:	d100      	bne.n	8002524 <HAL_GPIO_Init+0x17c>
 8002522:	e0a0      	b.n	8002666 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_GPIO_Init+0x2dc>)
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	4b56      	ldr	r3, [pc, #344]	; (8002684 <HAL_GPIO_Init+0x2dc>)
 800252a:	2101      	movs	r1, #1
 800252c:	430a      	orrs	r2, r1
 800252e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002530:	4a55      	ldr	r2, [pc, #340]	; (8002688 <HAL_GPIO_Init+0x2e0>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	589b      	ldr	r3, [r3, r2]
 800253c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	43da      	mvns	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	23a0      	movs	r3, #160	; 0xa0
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	429a      	cmp	r2, r3
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x1f6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_GPIO_Init+0x2e4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x1f2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a49      	ldr	r2, [pc, #292]	; (8002690 <HAL_GPIO_Init+0x2e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x1ee>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_GPIO_Init+0x2ec>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x1ea>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a47      	ldr	r2, [pc, #284]	; (8002698 <HAL_GPIO_Init+0x2f0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x1e6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a46      	ldr	r2, [pc, #280]	; (800269c <HAL_GPIO_Init+0x2f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x1e2>
 8002586:	2305      	movs	r3, #5
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 800258a:	2306      	movs	r3, #6
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x1f8>
 800259e:	2300      	movs	r3, #0
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	2103      	movs	r1, #3
 80025a4:	400a      	ands	r2, r1
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	; (8002688 <HAL_GPIO_Init+0x2e0>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	035b      	lsls	r3, r3, #13
 80025d6:	4013      	ands	r3, r2
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	039b      	lsls	r3, r3, #14
 8002600:	4013      	ands	r3, r2
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43da      	mvns	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	40da      	lsrs	r2, r3
 8002674:	1e13      	subs	r3, r2, #0
 8002676:	d000      	beq.n	800267a <HAL_GPIO_Init+0x2d2>
 8002678:	e6a2      	b.n	80023c0 <HAL_GPIO_Init+0x18>
  }
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40010000 	.word	0x40010000
 800268c:	50000400 	.word	0x50000400
 8002690:	50000800 	.word	0x50000800
 8002694:	50000c00 	.word	0x50000c00
 8002698:	50001000 	.word	0x50001000
 800269c:	50001c00 	.word	0x50001c00
 80026a0:	40010400 	.word	0x40010400

080026a4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	000a      	movs	r2, r1
 80026ae:	1cbb      	adds	r3, r7, #2
 80026b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	1cba      	adds	r2, r7, #2
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	4013      	ands	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	0008      	movs	r0, r1
 80026e8:	0011      	movs	r1, r2
 80026ea:	1cbb      	adds	r3, r7, #2
 80026ec:	1c02      	adds	r2, r0, #0
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	1c7b      	adds	r3, r7, #1
 80026f2:	1c0a      	adds	r2, r1, #0
 80026f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f6:	1c7b      	adds	r3, r7, #1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002706:	e003      	b.n	8002710 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002708:	1cbb      	adds	r3, r7, #2
 800270a:	881a      	ldrh	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b08b      	sub	sp, #44	; 0x2c
 800271c:	af06      	add	r7, sp, #24
 800271e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0f0      	b.n	800290c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a79      	ldr	r2, [pc, #484]	; (8002914 <HAL_PCD_Init+0x1fc>)
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	23aa      	movs	r3, #170	; 0xaa
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	2100      	movs	r1, #0
 800273e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f007 fcb4 	bl	800a0b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a72      	ldr	r2, [pc, #456]	; (8002914 <HAL_PCD_Init+0x1fc>)
 800274c:	2103      	movs	r1, #3
 800274e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0018      	movs	r0, r3
 8002756:	f003 fccd 	bl	80060f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	230f      	movs	r3, #15
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e049      	b.n	80027f8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002764:	200f      	movs	r0, #15
 8002766:	183b      	adds	r3, r7, r0
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	0013      	movs	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	189b      	adds	r3, r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	18cb      	adds	r3, r1, r3
 8002778:	3301      	adds	r3, #1
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800277e:	183b      	adds	r3, r7, r0
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	0013      	movs	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	189b      	adds	r3, r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	183a      	adds	r2, r7, r0
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002794:	183b      	adds	r3, r7, r0
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	0013      	movs	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	18cb      	adds	r3, r1, r3
 80027a6:	3303      	adds	r3, #3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	0013      	movs	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	18cb      	adds	r3, r1, r3
 80027bc:	3338      	adds	r3, #56	; 0x38
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027c2:	183b      	adds	r3, r7, r0
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	0013      	movs	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	18cb      	adds	r3, r1, r3
 80027d2:	333c      	adds	r3, #60	; 0x3c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	0013      	movs	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	18cb      	adds	r3, r1, r3
 80027e8:	3340      	adds	r3, #64	; 0x40
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	3201      	adds	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	210f      	movs	r1, #15
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3ae      	bcc.n	8002764 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e056      	b.n	80028bc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800280e:	240f      	movs	r4, #15
 8002810:	193b      	adds	r3, r7, r4
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	236a      	movs	r3, #106	; 0x6a
 8002818:	33ff      	adds	r3, #255	; 0xff
 800281a:	0019      	movs	r1, r3
 800281c:	0013      	movs	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	189b      	adds	r3, r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	18c3      	adds	r3, r0, r3
 8002826:	185b      	adds	r3, r3, r1
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800282c:	193b      	adds	r3, r7, r4
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	23b4      	movs	r3, #180	; 0xb4
 8002834:	0059      	lsls	r1, r3, #1
 8002836:	0013      	movs	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	189b      	adds	r3, r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	18c3      	adds	r3, r0, r3
 8002840:	185b      	adds	r3, r3, r1
 8002842:	193a      	adds	r2, r7, r4
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	236c      	movs	r3, #108	; 0x6c
 8002850:	33ff      	adds	r3, #255	; 0xff
 8002852:	0019      	movs	r1, r3
 8002854:	0013      	movs	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	189b      	adds	r3, r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	18c3      	adds	r3, r0, r3
 800285e:	185b      	adds	r3, r3, r1
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002864:	193b      	adds	r3, r7, r4
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	23bc      	movs	r3, #188	; 0xbc
 800286c:	0059      	lsls	r1, r3, #1
 800286e:	0013      	movs	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	189b      	adds	r3, r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	18c3      	adds	r3, r0, r3
 8002878:	185b      	adds	r3, r3, r1
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800287e:	193b      	adds	r3, r7, r4
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	23be      	movs	r3, #190	; 0xbe
 8002886:	0059      	lsls	r1, r3, #1
 8002888:	0013      	movs	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	189b      	adds	r3, r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	18c3      	adds	r3, r0, r3
 8002892:	185b      	adds	r3, r3, r1
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	23c0      	movs	r3, #192	; 0xc0
 80028a0:	0059      	lsls	r1, r3, #1
 80028a2:	0013      	movs	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	18c3      	adds	r3, r0, r3
 80028ac:	185b      	adds	r3, r3, r1
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	3201      	adds	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	230f      	movs	r3, #15
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3a1      	bcc.n	800280e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	466a      	mov	r2, sp
 80028d2:	0011      	movs	r1, r2
 80028d4:	001a      	movs	r2, r3
 80028d6:	3210      	adds	r2, #16
 80028d8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80028da:	c170      	stmia	r1!, {r4, r5, r6}
 80028dc:	ca30      	ldmia	r2!, {r4, r5}
 80028de:	c130      	stmia	r1!, {r4, r5}
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 fc1f 	bl	8006128 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	; 0x24
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_PCD_Init+0x1fc>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d103      	bne.n	800290a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f001 fd23 	bl	8004350 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b005      	add	sp, #20
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002914:	000002a9 	.word	0x000002a9

08002918 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	23aa      	movs	r3, #170	; 0xaa
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_PCD_Start+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e014      	b.n	800295a <HAL_PCD_Start+0x42>
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	23aa      	movs	r3, #170	; 0xaa
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	2101      	movs	r1, #1
 8002938:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0018      	movs	r0, r3
 8002940:	f003 fbc2 	bl	80060c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f005 fbc5 	bl	80080d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	23aa      	movs	r3, #170	; 0xaa
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	2100      	movs	r1, #0
 8002956:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0018      	movs	r0, r3
 8002972:	f005 fbc7 	bl	8008104 <USB_ReadInterrupts>
 8002976:	0003      	movs	r3, r0
 8002978:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	4013      	ands	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fb62 	bl	8003050 <PCD_EP_ISR_Handler>

    return;
 800298c:	e11d      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4013      	ands	r3, r2
 8002996:	d015      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2244      	movs	r2, #68	; 0x44
 800299e:	5a9b      	ldrh	r3, [r3, r2]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	498a      	ldr	r1, [pc, #552]	; (8002bd0 <HAL_PCD_IRQHandler+0x26c>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	b291      	uxth	r1, r2
 80029ac:	2244      	movs	r2, #68	; 0x44
 80029ae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f007 fbff 	bl	800a1b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2100      	movs	r1, #0
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f915 	bl	8002bec <HAL_PCD_SetAddress>

    return;
 80029c2:	e102      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	01db      	lsls	r3, r3, #7
 80029ca:	4013      	ands	r3, r2
 80029cc:	d00c      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2244      	movs	r2, #68	; 0x44
 80029d4:	5a9b      	ldrh	r3, [r3, r2]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	497d      	ldr	r1, [pc, #500]	; (8002bd4 <HAL_PCD_IRQHandler+0x270>)
 80029de:	400a      	ands	r2, r1
 80029e0:	b291      	uxth	r1, r2
 80029e2:	2244      	movs	r2, #68	; 0x44
 80029e4:	5299      	strh	r1, [r3, r2]

    return;
 80029e6:	e0f0      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	4013      	ands	r3, r2
 80029f0:	d00c      	beq.n	8002a0c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2244      	movs	r2, #68	; 0x44
 80029f8:	5a9b      	ldrh	r3, [r3, r2]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4975      	ldr	r1, [pc, #468]	; (8002bd8 <HAL_PCD_IRQHandler+0x274>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	b291      	uxth	r1, r2
 8002a06:	2244      	movs	r2, #68	; 0x44
 8002a08:	5299      	strh	r1, [r3, r2]

    return;
 8002a0a:	e0de      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	015b      	lsls	r3, r3, #5
 8002a12:	4013      	ands	r3, r2
 8002a14:	d038      	beq.n	8002a88 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	5a9b      	ldrh	r3, [r3, r2]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2104      	movs	r1, #4
 8002a26:	438a      	bics	r2, r1
 8002a28:	b291      	uxth	r1, r2
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	5a9b      	ldrh	r3, [r3, r2]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	438a      	bics	r2, r1
 8002a40:	b291      	uxth	r1, r2
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	23b8      	movs	r3, #184	; 0xb8
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d109      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	23b8      	movs	r3, #184	; 0xb8
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	2100      	movs	r1, #0
 8002a5a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	0018      	movs	r0, r3
 8002a62:	f001 fc9f 	bl	80043a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f007 fbe5 	bl	800a238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2244      	movs	r2, #68	; 0x44
 8002a74:	5a9b      	ldrh	r3, [r3, r2]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4957      	ldr	r1, [pc, #348]	; (8002bdc <HAL_PCD_IRQHandler+0x278>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	b291      	uxth	r1, r2
 8002a82:	2244      	movs	r2, #68	; 0x44
 8002a84:	5299      	strh	r1, [r3, r2]

    return;
 8002a86:	e0a0      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d028      	beq.n	8002ae4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	5a9b      	ldrh	r3, [r3, r2]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2108      	movs	r1, #8
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	b291      	uxth	r1, r2
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2244      	movs	r2, #68	; 0x44
 8002ab0:	5a9b      	ldrh	r3, [r3, r2]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4949      	ldr	r1, [pc, #292]	; (8002be0 <HAL_PCD_IRQHandler+0x27c>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	b291      	uxth	r1, r2
 8002abe:	2244      	movs	r2, #68	; 0x44
 8002ac0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	5a9b      	ldrh	r3, [r3, r2]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2104      	movs	r1, #4
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	b291      	uxth	r1, r2
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f007 fb8f 	bl	800a200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ae2:	e072      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d046      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2244      	movs	r2, #68	; 0x44
 8002af2:	5a9b      	ldrh	r3, [r3, r2]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	438a      	bics	r2, r1
 8002afe:	b291      	uxth	r1, r2
 8002b00:	2244      	movs	r2, #68	; 0x44
 8002b02:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	23b8      	movs	r3, #184	; 0xb8
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d12f      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	5a9b      	ldrh	r3, [r3, r2]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2104      	movs	r1, #4
 8002b20:	430a      	orrs	r2, r1
 8002b22:	b291      	uxth	r1, r2
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2240      	movs	r2, #64	; 0x40
 8002b2e:	5a9b      	ldrh	r3, [r3, r2]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2108      	movs	r1, #8
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	b291      	uxth	r1, r2
 8002b3c:	2240      	movs	r2, #64	; 0x40
 8002b3e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	23b8      	movs	r3, #184	; 0xb8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	2101      	movs	r1, #1
 8002b48:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2254      	movs	r2, #84	; 0x54
 8002b50:	5a9b      	ldrh	r3, [r3, r2]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	223c      	movs	r2, #60	; 0x3c
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	23b9      	movs	r3, #185	; 0xb9
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2101      	movs	r1, #1
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f001 fc1b 	bl	80043a4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b6e:	e02c      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f007 fb44 	bl	800a200 <HAL_PCD_SuspendCallback>
    return;
 8002b78:	e027      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	d010      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2244      	movs	r2, #68	; 0x44
 8002b8a:	5a9b      	ldrh	r3, [r3, r2]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4914      	ldr	r1, [pc, #80]	; (8002be4 <HAL_PCD_IRQHandler+0x280>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	b291      	uxth	r1, r2
 8002b98:	2244      	movs	r2, #68	; 0x44
 8002b9a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f007 fafa 	bl	800a198 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ba4:	e011      	b.n	8002bca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00c      	beq.n	8002bca <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2244      	movs	r2, #68	; 0x44
 8002bb6:	5a9b      	ldrh	r3, [r3, r2]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_PCD_IRQHandler+0x284>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	b291      	uxth	r1, r2
 8002bc4:	2244      	movs	r2, #68	; 0x44
 8002bc6:	5299      	strh	r1, [r3, r2]

    return;
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	fffffbff 	.word	0xfffffbff
 8002bd4:	ffffbfff 	.word	0xffffbfff
 8002bd8:	ffffdfff 	.word	0xffffdfff
 8002bdc:	ffffefff 	.word	0xffffefff
 8002be0:	fffff7ff 	.word	0xfffff7ff
 8002be4:	fffffdff 	.word	0xfffffdff
 8002be8:	fffffeff 	.word	0xfffffeff

08002bec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	1cfb      	adds	r3, r7, #3
 8002bf8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	23aa      	movs	r3, #170	; 0xaa
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_PCD_SetAddress+0x1e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e017      	b.n	8002c3a <HAL_PCD_SetAddress+0x4e>
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	23aa      	movs	r3, #170	; 0xaa
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	2101      	movs	r1, #1
 8002c12:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1cfa      	adds	r2, r7, #3
 8002c18:	2124      	movs	r1, #36	; 0x24
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	1cfb      	adds	r3, r7, #3
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	0019      	movs	r1, r3
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f005 fa41 	bl	80080b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	23aa      	movs	r3, #170	; 0xaa
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	2100      	movs	r1, #0
 8002c36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b002      	add	sp, #8
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c42:	b590      	push	{r4, r7, lr}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	000c      	movs	r4, r1
 8002c4c:	0010      	movs	r0, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	1cfb      	adds	r3, r7, #3
 8002c52:	1c22      	adds	r2, r4, #0
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	003b      	movs	r3, r7
 8002c58:	1c02      	adds	r2, r0, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	1cbb      	adds	r3, r7, #2
 8002c5e:	1c0a      	adds	r2, r1, #0
 8002c60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c62:	230b      	movs	r3, #11
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6a:	1cfb      	adds	r3, r7, #3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da0f      	bge.n	8002c94 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	1cfb      	adds	r3, r7, #3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2207      	movs	r2, #7
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	0013      	movs	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	705a      	strb	r2, [r3, #1]
 8002c92:	e00f      	b.n	8002cb4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	1cfb      	adds	r3, r7, #3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2207      	movs	r2, #7
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	0013      	movs	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3369      	adds	r3, #105	; 0x69
 8002ca6:	33ff      	adds	r3, #255	; 0xff
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	1cfb      	adds	r3, r7, #3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cc2:	003b      	movs	r3, r7
 8002cc4:	881a      	ldrh	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1cba      	adds	r2, r7, #2
 8002cce:	7812      	ldrb	r2, [r2, #0]
 8002cd0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd2:	1cbb      	adds	r3, r7, #2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	23aa      	movs	r3, #170	; 0xaa
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_PCD_EP_Open+0xae>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e013      	b.n	8002d18 <HAL_PCD_EP_Open+0xd6>
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	23aa      	movs	r3, #170	; 0xaa
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f003 fa38 	bl	8006178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	23aa      	movs	r3, #170	; 0xaa
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	2100      	movs	r1, #0
 8002d10:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002d12:	230b      	movs	r3, #11
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	781b      	ldrb	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b005      	add	sp, #20
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	000a      	movs	r2, r1
 8002d2a:	1cfb      	adds	r3, r7, #3
 8002d2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2e:	1cfb      	adds	r3, r7, #3
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0f      	bge.n	8002d58 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	1cfb      	adds	r3, r7, #3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	0013      	movs	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	18d3      	adds	r3, r2, r3
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	e00f      	b.n	8002d78 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	1cfb      	adds	r3, r7, #3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	401a      	ands	r2, r3
 8002d60:	0013      	movs	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3369      	adds	r3, #105	; 0x69
 8002d6a:	33ff      	adds	r3, #255	; 0xff
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	18d3      	adds	r3, r2, r3
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	1cfb      	adds	r3, r7, #3
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	23aa      	movs	r3, #170	; 0xaa
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_PCD_EP_Close+0x76>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e011      	b.n	8002dba <HAL_PCD_EP_Close+0x9a>
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	23aa      	movs	r3, #170	; 0xaa
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f003 fd87 	bl	80068bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	23aa      	movs	r3, #170	; 0xaa
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	2100      	movs	r1, #0
 8002db6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	200b      	movs	r0, #11
 8002dd0:	183b      	adds	r3, r7, r0
 8002dd2:	1c0a      	adds	r2, r1, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	0001      	movs	r1, r0
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2207      	movs	r2, #7
 8002dde:	401a      	ands	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	189b      	adds	r3, r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	3369      	adds	r3, #105	; 0x69
 8002dea:	33ff      	adds	r3, #255	; 0xff
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f003 ff0b 	bl	8006c3c <USB_EPStartXfer>

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b006      	add	sp, #24
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	000a      	movs	r2, r1
 8002e3a:	1cfb      	adds	r3, r7, #3
 8002e3c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e3e:	1cfb      	adds	r3, r7, #3
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2207      	movs	r2, #7
 8002e44:	401a      	ands	r2, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	23c2      	movs	r3, #194	; 0xc2
 8002e4a:	0059      	lsls	r1, r3, #1
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	18c3      	adds	r3, r0, r3
 8002e56:	185b      	adds	r3, r3, r1
 8002e58:	681b      	ldr	r3, [r3, #0]
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b002      	add	sp, #8
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	200b      	movs	r0, #11
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	1c0a      	adds	r2, r1, #0
 8002e74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	0013      	movs	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2207      	movs	r2, #7
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f003 feb6 	bl	8006c3c <USB_EPStartXfer>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	000a      	movs	r2, r1
 8002ee4:	1cfb      	adds	r3, r7, #3
 8002ee6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee8:	1cfb      	adds	r3, r7, #3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2207      	movs	r2, #7
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d901      	bls.n	8002efc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e046      	b.n	8002f8a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002efc:	1cfb      	adds	r3, r7, #3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da0f      	bge.n	8002f26 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f06:	1cfb      	adds	r3, r7, #3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	0013      	movs	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	189b      	adds	r3, r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	705a      	strb	r2, [r3, #1]
 8002f24:	e00d      	b.n	8002f42 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f26:	1cfb      	adds	r3, r7, #3
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	3369      	adds	r3, #105	; 0x69
 8002f34:	33ff      	adds	r3, #255	; 0xff
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	18d3      	adds	r3, r2, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f48:	1cfb      	adds	r3, r7, #3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	23aa      	movs	r3, #170	; 0xaa
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_EP_SetStall+0x8c>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e011      	b.n	8002f8a <HAL_PCD_EP_SetStall+0xb0>
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	23aa      	movs	r3, #170	; 0xaa
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f004 ff97 	bl	8007eac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	23aa      	movs	r3, #170	; 0xaa
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	2100      	movs	r1, #0
 8002f86:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b004      	add	sp, #16
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	000a      	movs	r2, r1
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fa0:	1cfb      	adds	r3, r7, #3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e048      	b.n	8003046 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb4:	1cfb      	adds	r3, r7, #3
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da0f      	bge.n	8002fde <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	0013      	movs	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	705a      	strb	r2, [r3, #1]
 8002fdc:	e00f      	b.n	8002ffe <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	1cfb      	adds	r3, r7, #3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	3369      	adds	r3, #105	; 0x69
 8002ff0:	33ff      	adds	r3, #255	; 0xff
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	18d3      	adds	r3, r2, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003004:	1cfb      	adds	r3, r7, #3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2207      	movs	r2, #7
 800300a:	4013      	ands	r3, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	23aa      	movs	r3, #170	; 0xaa
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_PCD_EP_ClrStall+0x90>
 800301e:	2302      	movs	r3, #2
 8003020:	e011      	b.n	8003046 <HAL_PCD_EP_ClrStall+0xb4>
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	23aa      	movs	r3, #170	; 0xaa
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	2101      	movs	r1, #1
 800302a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f004 ff89 	bl	8007f4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	23aa      	movs	r3, #170	; 0xaa
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	2100      	movs	r1, #0
 8003042:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b096      	sub	sp, #88	; 0x58
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003058:	f000 fbec 	bl	8003834 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	204e      	movs	r0, #78	; 0x4e
 8003062:	183b      	adds	r3, r7, r0
 8003064:	2144      	movs	r1, #68	; 0x44
 8003066:	5a52      	ldrh	r2, [r2, r1]
 8003068:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800306a:	183b      	adds	r3, r7, r0
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	244d      	movs	r4, #77	; 0x4d
 8003072:	193b      	adds	r3, r7, r4
 8003074:	210f      	movs	r1, #15
 8003076:	400a      	ands	r2, r1
 8003078:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800307a:	193b      	adds	r3, r7, r4
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d000      	beq.n	8003084 <PCD_EP_ISR_Handler+0x34>
 8003082:	e18f      	b.n	80033a4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003084:	183b      	adds	r3, r7, r0
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	4013      	ands	r3, r2
 800308c:	d155      	bne.n	800313a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29a      	uxth	r2, r3
 8003096:	200e      	movs	r0, #14
 8003098:	183b      	adds	r3, r7, r0
 800309a:	49bb      	ldr	r1, [pc, #748]	; (8003388 <PCD_EP_ISR_Handler+0x338>)
 800309c:	400a      	ands	r2, r1
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	183a      	adds	r2, r7, r0
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	49b8      	ldr	r1, [pc, #736]	; (800338c <PCD_EP_ISR_Handler+0x33c>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	b292      	uxth	r2, r2
 80030ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3328      	adds	r3, #40	; 0x28
 80030b4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2250      	movs	r2, #80	; 0x50
 80030bc:	5a9b      	ldrh	r3, [r3, r2]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	001a      	movs	r2, r3
 80030c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	18d2      	adds	r2, r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	4aaf      	ldr	r2, [pc, #700]	; (8003390 <PCD_EP_ISR_Handler+0x340>)
 80030d2:	4694      	mov	ip, r2
 80030d4:	4463      	add	r3, ip
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	059b      	lsls	r3, r3, #22
 80030da:	0d9a      	lsrs	r2, r3, #22
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	18d2      	adds	r2, r2, r3
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2100      	movs	r1, #0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f007 f832 	bl	800a15c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <PCD_EP_ISR_Handler+0xb8>
 8003104:	f000 fb96 	bl	8003834 <PCD_EP_ISR_Handler+0x7e4>
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <PCD_EP_ISR_Handler+0xc4>
 8003110:	f000 fb90 	bl	8003834 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	4252      	negs	r2, r2
 8003120:	4313      	orrs	r3, r2
 8003122:	b2da      	uxtb	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b291      	uxth	r1, r2
 800312a:	224c      	movs	r2, #76	; 0x4c
 800312c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	; 0x24
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]
 8003136:	f000 fb7d 	bl	8003834 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3369      	adds	r3, #105	; 0x69
 800313e:	33ff      	adds	r3, #255	; 0xff
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	214a      	movs	r1, #74	; 0x4a
 8003148:	187b      	adds	r3, r7, r1
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800314e:	187b      	adds	r3, r7, r1
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d037      	beq.n	80031ca <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2250      	movs	r2, #80	; 0x50
 8003160:	5a9b      	ldrh	r3, [r3, r2]
 8003162:	b29b      	uxth	r3, r3
 8003164:	001a      	movs	r2, r3
 8003166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	18d2      	adds	r2, r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	4a87      	ldr	r2, [pc, #540]	; (8003394 <PCD_EP_ISR_Handler+0x344>)
 8003176:	4694      	mov	ip, r2
 8003178:	4463      	add	r3, ip
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	059b      	lsls	r3, r3, #22
 800317e:	0d9a      	lsrs	r2, r3, #22
 8003180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003182:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	22ac      	movs	r2, #172	; 0xac
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	1899      	adds	r1, r3, r2
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003196:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003198:	b29b      	uxth	r3, r3
 800319a:	f005 f80a 	bl	80081b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	2010      	movs	r0, #16
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	497b      	ldr	r1, [pc, #492]	; (8003398 <PCD_EP_ISR_Handler+0x348>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	183a      	adds	r2, r7, r0
 80031b6:	8812      	ldrh	r2, [r2, #0]
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	430a      	orrs	r2, r1
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f006 ff94 	bl	800a0f0 <HAL_PCD_SetupStageCallback>
 80031c8:	e334      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031ca:	234a      	movs	r3, #74	; 0x4a
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	5e9b      	ldrsh	r3, [r3, r2]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	db00      	blt.n	80031d8 <PCD_EP_ISR_Handler+0x188>
 80031d6:	e32d      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	201e      	movs	r0, #30
 80031e2:	183b      	adds	r3, r7, r0
 80031e4:	496c      	ldr	r1, [pc, #432]	; (8003398 <PCD_EP_ISR_Handler+0x348>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	183a      	adds	r2, r7, r0
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	430a      	orrs	r2, r1
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2250      	movs	r2, #80	; 0x50
 8003200:	5a9b      	ldrh	r3, [r3, r2]
 8003202:	b29b      	uxth	r3, r3
 8003204:	001a      	movs	r2, r3
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	18d2      	adds	r2, r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <PCD_EP_ISR_Handler+0x344>)
 8003216:	4694      	mov	ip, r2
 8003218:	4463      	add	r3, ip
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	059b      	lsls	r3, r3, #22
 800321e:	0d9a      	lsrs	r2, r3, #22
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01a      	beq.n	8003262 <PCD_EP_ISR_Handler+0x212>
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323a:	6959      	ldr	r1, [r3, #20]
 800323c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003242:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003244:	b29b      	uxth	r3, r3
 8003246:	f004 ffb4 	bl	80081b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	18d2      	adds	r2, r2, r3
 8003254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003256:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2100      	movs	r1, #0
 800325c:	0018      	movs	r0, r3
 800325e:	f006 ff5c 	bl	800a11a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	214a      	movs	r1, #74	; 0x4a
 8003268:	187b      	adds	r3, r7, r1
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800326e:	187b      	adds	r3, r7, r1
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4013      	ands	r3, r2
 8003278:	d000      	beq.n	800327c <PCD_EP_ISR_Handler+0x22c>
 800327a:	e2db      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
 800327c:	187b      	adds	r3, r7, r1
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	23c0      	movs	r3, #192	; 0xc0
 8003282:	019b      	lsls	r3, r3, #6
 8003284:	401a      	ands	r2, r3
 8003286:	23c0      	movs	r3, #192	; 0xc0
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	429a      	cmp	r2, r3
 800328c:	d100      	bne.n	8003290 <PCD_EP_ISR_Handler+0x240>
 800328e:	e2d1      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2250      	movs	r2, #80	; 0x50
 800329c:	5a9b      	ldrh	r3, [r3, r2]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	001a      	movs	r2, r3
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <PCD_EP_ISR_Handler+0x344>)
 80032ac:	4694      	mov	ip, r2
 80032ae:	4463      	add	r3, ip
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	059b      	lsls	r3, r3, #22
 80032ba:	0d9b      	lsrs	r3, r3, #22
 80032bc:	b29a      	uxth	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b3e      	cmp	r3, #62	; 0x3e
 80032c8:	d91a      	bls.n	8003300 <PCD_EP_ISR_Handler+0x2b0>
 80032ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	221f      	movs	r2, #31
 80032d8:	4013      	ands	r3, r2
 80032da:	d102      	bne.n	80032e2 <PCD_EP_ISR_Handler+0x292>
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	3b01      	subs	r3, #1
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	029b      	lsls	r3, r3, #10
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <PCD_EP_ISR_Handler+0x33c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	e023      	b.n	8003348 <PCD_EP_ISR_Handler+0x2f8>
 8003300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <PCD_EP_ISR_Handler+0x2ca>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4a1f      	ldr	r2, [pc, #124]	; (800338c <PCD_EP_ISR_Handler+0x33c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	b29a      	uxth	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	e016      	b.n	8003348 <PCD_EP_ISR_Handler+0x2f8>
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
 8003322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	d002      	beq.n	8003332 <PCD_EP_ISR_Handler+0x2e2>
 800332c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332e:	3301      	adds	r3, #1
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29a      	uxth	r2, r3
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	b29b      	uxth	r3, r3
 800333c:	029b      	lsls	r3, r3, #10
 800333e:	b29b      	uxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b29a      	uxth	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29a      	uxth	r2, r3
 8003350:	2012      	movs	r0, #18
 8003352:	183b      	adds	r3, r7, r0
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <PCD_EP_ISR_Handler+0x34c>)
 8003356:	400a      	ands	r2, r1
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	183b      	adds	r3, r7, r0
 800335c:	183a      	adds	r2, r7, r0
 800335e:	8812      	ldrh	r2, [r2, #0]
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0149      	lsls	r1, r1, #5
 8003364:	404a      	eors	r2, r1
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	183b      	adds	r3, r7, r0
 800336a:	183a      	adds	r2, r7, r0
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	0189      	lsls	r1, r1, #6
 8003372:	404a      	eors	r2, r1
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	183a      	adds	r2, r7, r0
 800337c:	8812      	ldrh	r2, [r2, #0]
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <PCD_EP_ISR_Handler+0x350>)
 8003380:	430a      	orrs	r2, r1
 8003382:	b292      	uxth	r2, r2
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e255      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
 8003388:	ffff8f0f 	.word	0xffff8f0f
 800338c:	ffff8000 	.word	0xffff8000
 8003390:	00000402 	.word	0x00000402
 8003394:	00000406 	.word	0x00000406
 8003398:	00000f8f 	.word	0x00000f8f
 800339c:	ffffbf8f 	.word	0xffffbf8f
 80033a0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	001a      	movs	r2, r3
 80033aa:	204d      	movs	r0, #77	; 0x4d
 80033ac:	183b      	adds	r3, r7, r0
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	18d2      	adds	r2, r2, r3
 80033b4:	214a      	movs	r1, #74	; 0x4a
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	8812      	ldrh	r2, [r2, #0]
 80033ba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	5e9b      	ldrsh	r3, [r3, r2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db00      	blt.n	80033c8 <PCD_EP_ISR_Handler+0x378>
 80033c6:	e0fa      	b.n	80035be <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	001a      	movs	r2, r3
 80033ce:	183b      	adds	r3, r7, r0
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	2448      	movs	r4, #72	; 0x48
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	49d1      	ldr	r1, [pc, #836]	; (8003724 <PCD_EP_ISR_Handler+0x6d4>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	001a      	movs	r2, r3
 80033ea:	183b      	adds	r3, r7, r0
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	18d3      	adds	r3, r2, r3
 80033f2:	193a      	adds	r2, r7, r4
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	430a      	orrs	r2, r1
 80033fa:	b292      	uxth	r2, r2
 80033fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	0013      	movs	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	189b      	adds	r3, r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	3369      	adds	r3, #105	; 0x69
 800340c:	33ff      	adds	r3, #255	; 0xff
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	7b1b      	ldrb	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d125      	bne.n	8003468 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2250      	movs	r2, #80	; 0x50
 8003422:	5a9b      	ldrh	r3, [r3, r2]
 8003424:	b29b      	uxth	r3, r3
 8003426:	001a      	movs	r2, r3
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	18d2      	adds	r2, r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	18d3      	adds	r3, r2, r3
 8003436:	4abc      	ldr	r2, [pc, #752]	; (8003728 <PCD_EP_ISR_Handler+0x6d8>)
 8003438:	4694      	mov	ip, r2
 800343a:	4463      	add	r3, ip
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	2450      	movs	r4, #80	; 0x50
 8003440:	193b      	adds	r3, r7, r4
 8003442:	0592      	lsls	r2, r2, #22
 8003444:	0d92      	lsrs	r2, r2, #22
 8003446:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003448:	193b      	adds	r3, r7, r4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d100      	bne.n	8003452 <PCD_EP_ISR_Handler+0x402>
 8003450:	e08d      	b.n	800356e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003458:	6959      	ldr	r1, [r3, #20]
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	88da      	ldrh	r2, [r3, #6]
 800345e:	193b      	adds	r3, r7, r4
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	f004 fea6 	bl	80081b2 <USB_ReadPMA>
 8003466:	e082      	b.n	800356e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d10c      	bne.n	800348a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003470:	2350      	movs	r3, #80	; 0x50
 8003472:	18fc      	adds	r4, r7, r3
 8003474:	234a      	movs	r3, #74	; 0x4a
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f9ec 	bl	800385c <HAL_PCD_EP_DB_Receive>
 8003484:	0003      	movs	r3, r0
 8003486:	8023      	strh	r3, [r4, #0]
 8003488:	e071      	b.n	800356e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	001a      	movs	r2, r3
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29a      	uxth	r2, r3
 800349c:	2052      	movs	r0, #82	; 0x52
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	49a2      	ldr	r1, [pc, #648]	; (800372c <PCD_EP_ISR_Handler+0x6dc>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	001a      	movs	r2, r3
 80034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	183a      	adds	r2, r7, r0
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	499d      	ldr	r1, [pc, #628]	; (8003730 <PCD_EP_ISR_Handler+0x6e0>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	b292      	uxth	r2, r2
 80034be:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	001a      	movs	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	001a      	movs	r2, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	01db      	lsls	r3, r3, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	d024      	beq.n	8003526 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2250      	movs	r2, #80	; 0x50
 80034e2:	5a9b      	ldrh	r3, [r3, r2]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	001a      	movs	r2, r3
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	18d2      	adds	r2, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	18d3      	adds	r3, r2, r3
 80034f6:	4a8f      	ldr	r2, [pc, #572]	; (8003734 <PCD_EP_ISR_Handler+0x6e4>)
 80034f8:	4694      	mov	ip, r2
 80034fa:	4463      	add	r3, ip
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	2450      	movs	r4, #80	; 0x50
 8003500:	193b      	adds	r3, r7, r4
 8003502:	0592      	lsls	r2, r2, #22
 8003504:	0d92      	lsrs	r2, r2, #22
 8003506:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003508:	193b      	adds	r3, r7, r4
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02e      	beq.n	800356e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	6959      	ldr	r1, [r3, #20]
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	891a      	ldrh	r2, [r3, #8]
 800351c:	193b      	adds	r3, r7, r4
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	f004 fe47 	bl	80081b2 <USB_ReadPMA>
 8003524:	e023      	b.n	800356e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2250      	movs	r2, #80	; 0x50
 800352c:	5a9b      	ldrh	r3, [r3, r2]
 800352e:	b29b      	uxth	r3, r3
 8003530:	001a      	movs	r2, r3
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	18d2      	adds	r2, r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	18d3      	adds	r3, r2, r3
 8003540:	4a79      	ldr	r2, [pc, #484]	; (8003728 <PCD_EP_ISR_Handler+0x6d8>)
 8003542:	4694      	mov	ip, r2
 8003544:	4463      	add	r3, ip
 8003546:	881a      	ldrh	r2, [r3, #0]
 8003548:	2450      	movs	r4, #80	; 0x50
 800354a:	193b      	adds	r3, r7, r4
 800354c:	0592      	lsls	r2, r2, #22
 800354e:	0d92      	lsrs	r2, r2, #22
 8003550:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003552:	193b      	adds	r3, r7, r4
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	6959      	ldr	r1, [r3, #20]
 8003562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003564:	895a      	ldrh	r2, [r3, #10]
 8003566:	193b      	adds	r3, r7, r4
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	f004 fe22 	bl	80081b2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800356e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	2150      	movs	r1, #80	; 0x50
 8003574:	187b      	adds	r3, r7, r1
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	18d2      	adds	r2, r2, r3
 800357a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800357e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	187b      	adds	r3, r7, r1
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	18d2      	adds	r2, r2, r3
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <PCD_EP_ISR_Handler+0x550>
 8003594:	187b      	adds	r3, r7, r1
 8003596:	881a      	ldrh	r2, [r3, #0]
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d207      	bcs.n	80035b0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0011      	movs	r1, r2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f006 fdb6 	bl	800a11a <HAL_PCD_DataOutStageCallback>
 80035ae:	e006      	b.n	80035be <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035b6:	0011      	movs	r1, r2
 80035b8:	0018      	movs	r0, r3
 80035ba:	f003 fb3f 	bl	8006c3c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035be:	244a      	movs	r4, #74	; 0x4a
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	4013      	ands	r3, r2
 80035c8:	d100      	bne.n	80035cc <PCD_EP_ISR_Handler+0x57c>
 80035ca:	e133      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80035cc:	204d      	movs	r0, #77	; 0x4d
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	0013      	movs	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	001a      	movs	r2, r3
 80035e8:	183b      	adds	r3, r7, r0
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	2542      	movs	r5, #66	; 0x42
 80035f6:	197b      	adds	r3, r7, r5
 80035f8:	494f      	ldr	r1, [pc, #316]	; (8003738 <PCD_EP_ISR_Handler+0x6e8>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	001a      	movs	r2, r3
 8003604:	183b      	adds	r3, r7, r0
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	197a      	adds	r2, r7, r5
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	494a      	ldr	r1, [pc, #296]	; (800373c <PCD_EP_ISR_Handler+0x6ec>)
 8003612:	430a      	orrs	r2, r1
 8003614:	b292      	uxth	r2, r2
 8003616:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d000      	beq.n	8003622 <PCD_EP_ISR_Handler+0x5d2>
 8003620:	e0af      	b.n	8003782 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	7b1b      	ldrb	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d100      	bne.n	8003632 <PCD_EP_ISR_Handler+0x5e2>
 8003630:	e09f      	b.n	8003772 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003632:	193b      	adds	r3, r7, r4
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	4013      	ands	r3, r2
 800363a:	d046      	beq.n	80036ca <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d125      	bne.n	8003690 <PCD_EP_ISR_Handler+0x640>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2250      	movs	r2, #80	; 0x50
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29b      	uxth	r3, r3
 8003654:	001a      	movs	r2, r3
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	189b      	adds	r3, r3, r2
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00da      	lsls	r2, r3, #3
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	4a33      	ldr	r2, [pc, #204]	; (8003734 <PCD_EP_ISR_Handler+0x6e4>)
 8003668:	4694      	mov	ip, r2
 800366a:	4463      	add	r3, ip
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	059b      	lsls	r3, r3, #22
 8003676:	0d9b      	lsrs	r3, r3, #22
 8003678:	b29a      	uxth	r2, r3
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	4a2d      	ldr	r2, [pc, #180]	; (800373c <PCD_EP_ISR_Handler+0x6ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	b29a      	uxth	r2, r3
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	e070      	b.n	8003772 <PCD_EP_ISR_Handler+0x722>
 8003690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d16c      	bne.n	8003772 <PCD_EP_ISR_Handler+0x722>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2250      	movs	r2, #80	; 0x50
 80036a4:	5a9b      	ldrh	r3, [r3, r2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	001a      	movs	r2, r3
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	189b      	adds	r3, r3, r2
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <PCD_EP_ISR_Handler+0x6e4>)
 80036bc:	4694      	mov	ip, r2
 80036be:	4463      	add	r3, ip
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	2200      	movs	r2, #0
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	e053      	b.n	8003772 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d133      	bne.n	8003740 <PCD_EP_ISR_Handler+0x6f0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2250      	movs	r2, #80	; 0x50
 80036e4:	5a9b      	ldrh	r3, [r3, r2]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	001a      	movs	r2, r3
 80036ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ec:	189b      	adds	r3, r3, r2
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
 80036f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	00da      	lsls	r2, r3, #3
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f8:	18d3      	adds	r3, r2, r3
 80036fa:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <PCD_EP_ISR_Handler+0x6d8>)
 80036fc:	4694      	mov	ip, r2
 80036fe:	4463      	add	r3, ip
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	059b      	lsls	r3, r3, #22
 800370a:	0d9b      	lsrs	r3, r3, #22
 800370c:	b29a      	uxth	r2, r3
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4a08      	ldr	r2, [pc, #32]	; (800373c <PCD_EP_ISR_Handler+0x6ec>)
 800371a:	4313      	orrs	r3, r2
 800371c:	b29a      	uxth	r2, r3
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e026      	b.n	8003772 <PCD_EP_ISR_Handler+0x722>
 8003724:	00000f8f 	.word	0x00000f8f
 8003728:	00000406 	.word	0x00000406
 800372c:	ffff8f8f 	.word	0xffff8f8f
 8003730:	ffff80c0 	.word	0xffff80c0
 8003734:	00000402 	.word	0x00000402
 8003738:	ffff8f0f 	.word	0xffff8f0f
 800373c:	ffff8000 	.word	0xffff8000
 8003740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d114      	bne.n	8003772 <PCD_EP_ISR_Handler+0x722>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2250      	movs	r2, #80	; 0x50
 800374e:	5a9b      	ldrh	r3, [r3, r2]
 8003750:	b29b      	uxth	r3, r3
 8003752:	001a      	movs	r2, r3
 8003754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003756:	189b      	adds	r3, r3, r2
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800375a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	00da      	lsls	r2, r3, #3
 8003760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003762:	18d3      	adds	r3, r2, r3
 8003764:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <PCD_EP_ISR_Handler+0x804>)
 8003766:	4694      	mov	ip, r2
 8003768:	4463      	add	r3, ip
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	2200      	movs	r2, #0
 8003770:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f006 fcee 	bl	800a15c <HAL_PCD_DataInStageCallback>
 8003780:	e058      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003782:	234a      	movs	r3, #74	; 0x4a
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4013      	ands	r3, r2
 800378e:	d149      	bne.n	8003824 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2250      	movs	r2, #80	; 0x50
 8003796:	5a9b      	ldrh	r3, [r3, r2]
 8003798:	b29b      	uxth	r3, r3
 800379a:	001a      	movs	r2, r3
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <PCD_EP_ISR_Handler+0x808>)
 80037ac:	4694      	mov	ip, r2
 80037ae:	4463      	add	r3, ip
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	2140      	movs	r1, #64	; 0x40
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	0592      	lsls	r2, r2, #22
 80037b8:	0d92      	lsrs	r2, r2, #22
 80037ba:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d907      	bls.n	80037d8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	1ad2      	subs	r2, r2, r3
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	619a      	str	r2, [r3, #24]
 80037d6:	e002      	b.n	80037de <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0011      	movs	r1, r2
 80037ee:	0018      	movs	r0, r3
 80037f0:	f006 fcb4 	bl	800a15c <HAL_PCD_DataInStageCallback>
 80037f4:	e01e      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	187b      	adds	r3, r7, r1
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	18d2      	adds	r2, r2, r3
 8003810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003812:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f003 fa0d 	bl	8006c3c <USB_EPStartXfer>
 8003822:	e007      	b.n	8003834 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003824:	234a      	movs	r3, #74	; 0x4a
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f930 	bl	8003a94 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2244      	movs	r2, #68	; 0x44
 800383a:	5a9b      	ldrh	r3, [r3, r2]
 800383c:	b29b      	uxth	r3, r3
 800383e:	b21b      	sxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	da01      	bge.n	8003848 <PCD_EP_ISR_Handler+0x7f8>
 8003844:	f7ff fc0a 	bl	800305c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b016      	add	sp, #88	; 0x58
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	00000406 	.word	0x00000406
 8003858:	00000402 	.word	0x00000402

0800385c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800386a:	1dbb      	adds	r3, r7, #6
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	01db      	lsls	r3, r3, #7
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_PCD_EP_DB_Receive+0x1c>
 8003876:	e07d      	b.n	8003974 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2250      	movs	r2, #80	; 0x50
 800387e:	5a9b      	ldrh	r3, [r3, r2]
 8003880:	b29b      	uxth	r3, r3
 8003882:	001a      	movs	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	18d2      	adds	r2, r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_PCD_EP_DB_Receive+0x220>)
 8003894:	4694      	mov	ip, r2
 8003896:	4463      	add	r3, ip
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	211a      	movs	r1, #26
 800389c:	187b      	adds	r3, r7, r1
 800389e:	0592      	lsls	r2, r2, #22
 80038a0:	0d92      	lsrs	r2, r2, #22
 80038a2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d307      	bcc.n	80038c0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	619a      	str	r2, [r3, #24]
 80038be:	e002      	b.n	80038c6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d121      	bne.n	8003912 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	001a      	movs	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	2018      	movs	r0, #24
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	4966      	ldr	r1, [pc, #408]	; (8003a80 <HAL_PCD_EP_DB_Receive+0x224>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	183a      	adds	r2, r7, r0
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	0189      	lsls	r1, r1, #6
 80038f4:	404a      	eors	r2, r1
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	001a      	movs	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	183a      	adds	r2, r7, r0
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	495e      	ldr	r1, [pc, #376]	; (8003a84 <HAL_PCD_EP_DB_Receive+0x228>)
 800390c:	430a      	orrs	r2, r1
 800390e:	b292      	uxth	r2, r2
 8003910:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	4013      	ands	r3, r2
 800391a:	d01a      	beq.n	8003952 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	001a      	movs	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29a      	uxth	r2, r3
 800392e:	2016      	movs	r0, #22
 8003930:	183b      	adds	r3, r7, r0
 8003932:	4955      	ldr	r1, [pc, #340]	; (8003a88 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003934:	400a      	ands	r2, r1
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	001a      	movs	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	183a      	adds	r2, r7, r0
 8003948:	8812      	ldrh	r2, [r2, #0]
 800394a:	4950      	ldr	r1, [pc, #320]	; (8003a8c <HAL_PCD_EP_DB_Receive+0x230>)
 800394c:	430a      	orrs	r2, r1
 800394e:	b292      	uxth	r2, r2
 8003950:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003952:	241a      	movs	r4, #26
 8003954:	193b      	adds	r3, r7, r4
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d100      	bne.n	800395e <HAL_PCD_EP_DB_Receive+0x102>
 800395c:	e086      	b.n	8003a6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6959      	ldr	r1, [r3, #20]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	891a      	ldrh	r2, [r3, #8]
 800396a:	193b      	adds	r3, r7, r4
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	f004 fc20 	bl	80081b2 <USB_ReadPMA>
 8003972:	e07b      	b.n	8003a6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2250      	movs	r2, #80	; 0x50
 800397a:	5a9b      	ldrh	r3, [r3, r2]
 800397c:	b29b      	uxth	r3, r3
 800397e:	001a      	movs	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	18d2      	adds	r2, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	4a40      	ldr	r2, [pc, #256]	; (8003a90 <HAL_PCD_EP_DB_Receive+0x234>)
 8003990:	4694      	mov	ip, r2
 8003992:	4463      	add	r3, ip
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	211a      	movs	r1, #26
 8003998:	187b      	adds	r3, r7, r1
 800399a:	0592      	lsls	r2, r2, #22
 800399c:	0d92      	lsrs	r2, r2, #22
 800399e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d307      	bcc.n	80039bc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	619a      	str	r2, [r3, #24]
 80039ba:	e002      	b.n	80039c2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	001a      	movs	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	201e      	movs	r0, #30
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	4927      	ldr	r1, [pc, #156]	; (8003a80 <HAL_PCD_EP_DB_Receive+0x224>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	183b      	adds	r3, r7, r0
 80039e8:	183a      	adds	r2, r7, r0
 80039ea:	8812      	ldrh	r2, [r2, #0]
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	0189      	lsls	r1, r1, #6
 80039f0:	404a      	eors	r2, r1
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	001a      	movs	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	183a      	adds	r2, r7, r0
 8003a04:	8812      	ldrh	r2, [r2, #0]
 8003a06:	491f      	ldr	r1, [pc, #124]	; (8003a84 <HAL_PCD_EP_DB_Receive+0x228>)
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a0e:	1dbb      	adds	r3, r7, #6
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	4013      	ands	r3, r2
 8003a16:	d11a      	bne.n	8003a4e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	201c      	movs	r0, #28
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	4916      	ldr	r1, [pc, #88]	; (8003a88 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	001a      	movs	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	18d3      	adds	r3, r2, r3
 8003a42:	183a      	adds	r2, r7, r0
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	4911      	ldr	r1, [pc, #68]	; (8003a8c <HAL_PCD_EP_DB_Receive+0x230>)
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003a4e:	241a      	movs	r4, #26
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6959      	ldr	r1, [r3, #20]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	895a      	ldrh	r2, [r3, #10]
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	f004 fba3 	bl	80081b2 <USB_ReadPMA>
    }
  }

  return count;
 8003a6c:	231a      	movs	r3, #26
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	881b      	ldrh	r3, [r3, #0]
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b009      	add	sp, #36	; 0x24
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	00000402 	.word	0x00000402
 8003a80:	ffffbf8f 	.word	0xffffbf8f
 8003a84:	ffff8080 	.word	0xffff8080
 8003a88:	ffff8f8f 	.word	0xffff8f8f
 8003a8c:	ffff80c0 	.word	0xffff80c0
 8003a90:	00000406 	.word	0x00000406

08003a94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0a4      	sub	sp, #144	; 0x90
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aa2:	1dbb      	adds	r3, r7, #6
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x1a>
 8003aac:	e1e4      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2250      	movs	r2, #80	; 0x50
 8003ab4:	5a9b      	ldrh	r3, [r3, r2]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	001a      	movs	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	18d2      	adds	r2, r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	18d3      	adds	r3, r2, r3
 8003ac8:	4ad0      	ldr	r2, [pc, #832]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003aca:	4694      	mov	ip, r2
 8003acc:	4463      	add	r3, ip
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	2186      	movs	r1, #134	; 0x86
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	0592      	lsls	r2, r2, #22
 8003ad6:	0d92      	lsrs	r2, r2, #22
 8003ad8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d907      	bls.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	619a      	str	r2, [r3, #24]
 8003af4:	e002      	b.n	8003afc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d000      	beq.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x72>
 8003b04:	e0b5      	b.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d125      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0xc6>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2250      	movs	r2, #80	; 0x50
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	001a      	movs	r2, r3
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	4ab6      	ldr	r2, [pc, #728]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003b32:	4694      	mov	ip, r2
 8003b34:	4463      	add	r3, ip
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	059b      	lsls	r3, r3, #22
 8003b40:	0d9b      	lsrs	r3, r3, #22
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4ab0      	ldr	r2, [pc, #704]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e01b      	b.n	8003b92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d117      	bne.n	8003b92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2250      	movs	r2, #80	; 0x50
 8003b6e:	5a9b      	ldrh	r3, [r3, r2]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	001a      	movs	r2, r3
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	00da      	lsls	r2, r3, #3
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	4aa1      	ldr	r2, [pc, #644]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003b86:	4694      	mov	ip, r2
 8003b88:	4463      	add	r3, ip
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	2200      	movs	r2, #0
 8003b90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d125      	bne.n	8003bec <HAL_PCD_EP_DB_Transmit+0x158>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2250      	movs	r2, #80	; 0x50
 8003bac:	5a9b      	ldrh	r3, [r3, r2]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	189b      	adds	r3, r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	00da      	lsls	r2, r3, #3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	18d3      	adds	r3, r2, r3
 8003bc2:	4a94      	ldr	r2, [pc, #592]	; (8003e14 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003bc4:	4694      	mov	ip, r2
 8003bc6:	4463      	add	r3, ip
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	059b      	lsls	r3, r3, #22
 8003bd2:	0d9b      	lsrs	r3, r3, #22
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4a8b      	ldr	r2, [pc, #556]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e018      	b.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d114      	bne.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2250      	movs	r2, #80	; 0x50
 8003bfa:	5a9b      	ldrh	r3, [r3, r2]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	001a      	movs	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	18d3      	adds	r3, r2, r3
 8003c10:	4a80      	ldr	r2, [pc, #512]	; (8003e14 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003c12:	4694      	mov	ip, r2
 8003c14:	4463      	add	r3, ip
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f006 fa98 	bl	800a15c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c2c:	1dbb      	adds	r3, r7, #6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	01db      	lsls	r3, r3, #7
 8003c34:	4013      	ands	r3, r2
 8003c36:	d100      	bne.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003c38:	e309      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	001a      	movs	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	2016      	movs	r0, #22
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	4971      	ldr	r1, [pc, #452]	; (8003e18 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	183a      	adds	r2, r7, r0
 8003c66:	8812      	ldrh	r2, [r2, #0]
 8003c68:	496c      	ldr	r1, [pc, #432]	; (8003e1c <HAL_PCD_EP_DB_Transmit+0x388>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	b292      	uxth	r2, r2
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e2ed      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	01db      	lsls	r3, r3, #7
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	001a      	movs	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	18d3      	adds	r3, r2, r3
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	208a      	movs	r0, #138	; 0x8a
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	4960      	ldr	r1, [pc, #384]	; (8003e18 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	801a      	strh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	183a      	adds	r2, r7, r0
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	495b      	ldr	r1, [pc, #364]	; (8003e1c <HAL_PCD_EP_DB_Transmit+0x388>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d000      	beq.n	8003cc0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003cbe:	e2c6      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	2186      	movs	r1, #134	; 0x86
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	18d2      	adds	r2, r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	18d2      	adds	r2, r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d30c      	bcc.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	218c      	movs	r1, #140	; 0x8c
 8003cf0:	187a      	adds	r2, r7, r1
 8003cf2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e01a      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003d0c:	2386      	movs	r3, #134	; 0x86
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	228c      	movs	r2, #140	; 0x8c
 8003d14:	18ba      	adds	r2, r7, r2
 8003d16:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	5499      	strb	r1, [r3, r2]
 8003d20:	e00b      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2224      	movs	r2, #36	; 0x24
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	228c      	movs	r2, #140	; 0x8c
 8003d30:	18ba      	adds	r2, r7, r2
 8003d32:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d000      	beq.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003d42:	e06d      	b.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2250      	movs	r2, #80	; 0x50
 8003d50:	5a9b      	ldrh	r3, [r3, r2]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	001a      	movs	r2, r3
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	00da      	lsls	r2, r3, #3
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	18d3      	adds	r3, r2, r3
 8003d66:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003d68:	4694      	mov	ip, r2
 8003d6a:	4463      	add	r3, ip
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	059b      	lsls	r3, r3, #22
 8003d76:	0d9b      	lsrs	r3, r3, #22
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	228c      	movs	r2, #140	; 0x8c
 8003d80:	18bb      	adds	r3, r7, r2
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b3e      	cmp	r3, #62	; 0x3e
 8003d86:	d91a      	bls.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x32a>
 8003d88:	18bb      	adds	r3, r7, r2
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d90:	18bb      	adds	r3, r7, r2
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	221f      	movs	r2, #31
 8003d96:	4013      	ands	r3, r2
 8003d98:	d102      	bne.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	029b      	lsls	r3, r3, #10
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e04f      	b.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003dbe:	238c      	movs	r3, #140	; 0x8c
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d108      	bne.n	8003dda <HAL_PCD_EP_DB_Transmit+0x346>
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	e041      	b.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003dda:	228c      	movs	r2, #140	; 0x8c
 8003ddc:	18bb      	adds	r3, r7, r2
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de4:	18bb      	adds	r3, r7, r2
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	d002      	beq.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x360>
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	3301      	adds	r3, #1
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e028      	b.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003e0c:	00000402 	.word	0x00000402
 8003e10:	ffff8000 	.word	0xffff8000
 8003e14:	00000406 	.word	0x00000406
 8003e18:	ffff8f8f 	.word	0xffff8f8f
 8003e1c:	ffffc080 	.word	0xffffc080
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d11a      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2250      	movs	r2, #80	; 0x50
 8003e34:	5a9b      	ldrh	r3, [r3, r2]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	001a      	movs	r2, r3
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00da      	lsls	r2, r3, #3
 8003e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	4adb      	ldr	r2, [pc, #876]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003e4c:	4694      	mov	ip, r2
 8003e4e:	4463      	add	r3, ip
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
 8003e52:	238c      	movs	r3, #140	; 0x8c
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6959      	ldr	r1, [r3, #20]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	891a      	ldrh	r2, [r3, #8]
 8003e6a:	238c      	movs	r3, #140	; 0x8c
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f004 f955 	bl	8008120 <USB_WritePMA>
 8003e76:	e1ea      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2250      	movs	r2, #80	; 0x50
 8003e7e:	5a9b      	ldrh	r3, [r3, r2]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	001a      	movs	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	4aca      	ldr	r2, [pc, #808]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8003e94:	4694      	mov	ip, r2
 8003e96:	4463      	add	r3, ip
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	2186      	movs	r1, #134	; 0x86
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	0592      	lsls	r2, r2, #22
 8003ea0:	0d92      	lsrs	r2, r2, #22
 8003ea2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d307      	bcc.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	619a      	str	r2, [r3, #24]
 8003ebe:	e002      	b.n	8003ec6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d000      	beq.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x43c>
 8003ece:	e0bb      	b.n	8004048 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d125      	bne.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x490>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2250      	movs	r2, #80	; 0x50
 8003ee4:	5a9b      	ldrh	r3, [r3, r2]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	001a      	movs	r2, r3
 8003eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	00da      	lsls	r2, r3, #3
 8003ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	4aaf      	ldr	r2, [pc, #700]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003efc:	4694      	mov	ip, r2
 8003efe:	4463      	add	r3, ip
 8003f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	059b      	lsls	r3, r3, #22
 8003f0a:	0d9b      	lsrs	r3, r3, #22
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4aa9      	ldr	r2, [pc, #676]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	e01b      	b.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d117      	bne.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	667b      	str	r3, [r7, #100]	; 0x64
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2250      	movs	r2, #80	; 0x50
 8003f38:	5a9b      	ldrh	r3, [r3, r2]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	667b      	str	r3, [r7, #100]	; 0x64
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	00da      	lsls	r2, r3, #3
 8003f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	4a9a      	ldr	r2, [pc, #616]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003f50:	4694      	mov	ip, r2
 8003f52:	4463      	add	r3, ip
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
 8003f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f58:	2200      	movs	r2, #0
 8003f5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	677b      	str	r3, [r7, #116]	; 0x74
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12b      	bne.n	8003fc2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2250      	movs	r2, #80	; 0x50
 8003f76:	5a9b      	ldrh	r3, [r3, r2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	189b      	adds	r3, r3, r2
 8003f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	00da      	lsls	r2, r3, #3
 8003f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	4a8b      	ldr	r2, [pc, #556]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8003f8e:	4694      	mov	ip, r2
 8003f90:	4463      	add	r3, ip
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	187a      	adds	r2, r7, r1
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	059b      	lsls	r3, r3, #22
 8003fa2:	0d9b      	lsrs	r3, r3, #22
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4a82      	ldr	r2, [pc, #520]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e018      	b.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x560>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d114      	bne.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x560>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2250      	movs	r2, #80	; 0x50
 8003fd0:	5a9b      	ldrh	r3, [r3, r2]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	677b      	str	r3, [r7, #116]	; 0x74
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	00da      	lsls	r2, r3, #3
 8003fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe4:	18d3      	adds	r3, r2, r3
 8003fe6:	4a75      	ldr	r2, [pc, #468]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8003fe8:	4694      	mov	ip, r2
 8003fea:	4463      	add	r3, ip
 8003fec:	673b      	str	r3, [r7, #112]	; 0x70
 8003fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f006 f8ad 	bl	800a15c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004002:	1dbb      	adds	r3, r7, #6
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	01db      	lsls	r3, r3, #7
 800400a:	4013      	ands	r3, r2
 800400c:	d000      	beq.n	8004010 <HAL_PCD_EP_DB_Transmit+0x57c>
 800400e:	e11e      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	001a      	movs	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	2088      	movs	r0, #136	; 0x88
 8004024:	183b      	adds	r3, r7, r0
 8004026:	4967      	ldr	r1, [pc, #412]	; (80041c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8004028:	400a      	ands	r2, r1
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	001a      	movs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	183a      	adds	r2, r7, r0
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	4962      	ldr	r1, [pc, #392]	; (80041c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8004040:	430a      	orrs	r2, r1
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	e102      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	01db      	lsls	r3, r3, #7
 8004050:	4013      	ands	r3, r2
 8004052:	d11a      	bne.n	800408a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	001a      	movs	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29a      	uxth	r2, r3
 8004066:	204e      	movs	r0, #78	; 0x4e
 8004068:	183b      	adds	r3, r7, r0
 800406a:	4956      	ldr	r1, [pc, #344]	; (80041c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 800406c:	400a      	ands	r2, r1
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	001a      	movs	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	18d3      	adds	r3, r2, r3
 800407e:	183a      	adds	r2, r7, r0
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	4951      	ldr	r1, [pc, #324]	; (80041c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8004084:	430a      	orrs	r2, r1
 8004086:	b292      	uxth	r2, r2
 8004088:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2224      	movs	r2, #36	; 0x24
 800408e:	5c9b      	ldrb	r3, [r3, r2]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d000      	beq.n	8004096 <HAL_PCD_EP_DB_Transmit+0x602>
 8004094:	e0db      	b.n	800424e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	2186      	movs	r1, #134	; 0x86
 800409c:	187b      	adds	r3, r7, r1
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	18d2      	adds	r2, r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	187b      	adds	r3, r7, r1
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	18d2      	adds	r2, r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d30c      	bcc.n	80040da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	218c      	movs	r1, #140	; 0x8c
 80040c6:	187a      	adds	r2, r7, r1
 80040c8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	621a      	str	r2, [r3, #32]
 80040d8:	e01a      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80040e2:	2386      	movs	r3, #134	; 0x86
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	228c      	movs	r2, #140	; 0x8c
 80040ea:	18ba      	adds	r2, r7, r2
 80040ec:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2224      	movs	r2, #36	; 0x24
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
 80040f6:	e00b      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	228c      	movs	r2, #140	; 0x8c
 80040fe:	18ba      	adds	r2, r7, r2
 8004100:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	657b      	str	r3, [r7, #84]	; 0x54
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d000      	beq.n	8004120 <HAL_PCD_EP_DB_Transmit+0x68c>
 800411e:	e06e      	b.n	80041fe <HAL_PCD_EP_DB_Transmit+0x76a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2250      	movs	r2, #80	; 0x50
 800412c:	5a9b      	ldrh	r3, [r3, r2]
 800412e:	b29b      	uxth	r3, r3
 8004130:	001a      	movs	r2, r3
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004134:	189b      	adds	r3, r3, r2
 8004136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00da      	lsls	r2, r3, #3
 800413e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8004144:	4694      	mov	ip, r2
 8004146:	4463      	add	r3, ip
 8004148:	65bb      	str	r3, [r7, #88]	; 0x58
 800414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	059b      	lsls	r3, r3, #22
 8004152:	0d9b      	lsrs	r3, r3, #22
 8004154:	b29a      	uxth	r2, r3
 8004156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	228c      	movs	r2, #140	; 0x8c
 800415c:	18bb      	adds	r3, r7, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b3e      	cmp	r3, #62	; 0x3e
 8004162:	d91a      	bls.n	800419a <HAL_PCD_EP_DB_Transmit+0x706>
 8004164:	18bb      	adds	r3, r7, r2
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	66bb      	str	r3, [r7, #104]	; 0x68
 800416c:	18bb      	adds	r3, r7, r2
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	221f      	movs	r2, #31
 8004172:	4013      	ands	r3, r2
 8004174:	d102      	bne.n	800417c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8004176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004178:	3b01      	subs	r3, #1
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
 800417c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004184:	b29b      	uxth	r3, r3
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	b29b      	uxth	r3, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	b29b      	uxth	r3, r3
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e04d      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800419a:	238c      	movs	r3, #140	; 0x8c
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d113      	bne.n	80041cc <HAL_PCD_EP_DB_Transmit+0x738>
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	e03f      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	00000402 	.word	0x00000402
 80041bc:	00000406 	.word	0x00000406
 80041c0:	ffff8000 	.word	0xffff8000
 80041c4:	ffff8f8f 	.word	0xffff8f8f
 80041c8:	ffffc080 	.word	0xffffc080
 80041cc:	228c      	movs	r2, #140	; 0x8c
 80041ce:	18bb      	adds	r3, r7, r2
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d6:	18bb      	adds	r3, r7, r2
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2201      	movs	r2, #1
 80041dc:	4013      	ands	r3, r2
 80041de:	d002      	beq.n	80041e6 <HAL_PCD_EP_DB_Transmit+0x752>
 80041e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e2:	3301      	adds	r3, #1
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e01b      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d117      	bne.n	8004236 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2250      	movs	r2, #80	; 0x50
 800420c:	5a9b      	ldrh	r3, [r3, r2]
 800420e:	b29b      	uxth	r3, r3
 8004210:	001a      	movs	r2, r3
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	189b      	adds	r3, r3, r2
 8004216:	657b      	str	r3, [r7, #84]	; 0x54
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	00da      	lsls	r2, r3, #3
 800421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8004224:	4694      	mov	ip, r2
 8004226:	4463      	add	r3, ip
 8004228:	653b      	str	r3, [r7, #80]	; 0x50
 800422a:	238c      	movs	r3, #140	; 0x8c
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	895a      	ldrh	r2, [r3, #10]
 8004242:	238c      	movs	r3, #140	; 0x8c
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f003 ff69 	bl	8008120 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	001a      	movs	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	18d3      	adds	r3, r2, r3
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29a      	uxth	r2, r3
 8004260:	2014      	movs	r0, #20
 8004262:	183b      	adds	r3, r7, r0
 8004264:	4911      	ldr	r1, [pc, #68]	; (80042ac <HAL_PCD_EP_DB_Transmit+0x818>)
 8004266:	400a      	ands	r2, r1
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	183b      	adds	r3, r7, r0
 800426c:	183a      	adds	r2, r7, r0
 800426e:	8812      	ldrh	r2, [r2, #0]
 8004270:	2110      	movs	r1, #16
 8004272:	404a      	eors	r2, r1
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	183b      	adds	r3, r7, r0
 8004278:	183a      	adds	r2, r7, r0
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	2120      	movs	r1, #32
 800427e:	404a      	eors	r2, r1
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	001a      	movs	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	18d3      	adds	r3, r2, r3
 8004290:	183a      	adds	r2, r7, r0
 8004292:	8812      	ldrh	r2, [r2, #0]
 8004294:	4906      	ldr	r1, [pc, #24]	; (80042b0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8004296:	430a      	orrs	r2, r1
 8004298:	b292      	uxth	r2, r2
 800429a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b024      	add	sp, #144	; 0x90
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	00000406 	.word	0x00000406
 80042ac:	ffff8fbf 	.word	0xffff8fbf
 80042b0:	ffff8080 	.word	0xffff8080

080042b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	0008      	movs	r0, r1
 80042be:	0011      	movs	r1, r2
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	240a      	movs	r4, #10
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	1c02      	adds	r2, r0, #0
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	2308      	movs	r3, #8
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	1c0a      	adds	r2, r1, #0
 80042d0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042d2:	0021      	movs	r1, r4
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	4013      	ands	r3, r2
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	0013      	movs	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	189b      	adds	r3, r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e00b      	b.n	8004314 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042fc:	230a      	movs	r3, #10
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	0013      	movs	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	189b      	adds	r3, r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	3369      	adds	r3, #105	; 0x69
 800430c:	33ff      	adds	r3, #255	; 0xff
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004314:	2308      	movs	r3, #8
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b29a      	uxth	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	80da      	strh	r2, [r3, #6]
 800432c:	e00b      	b.n	8004346 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2201      	movs	r2, #1
 8004332:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	b29a      	uxth	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	b29a      	uxth	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b007      	add	sp, #28
 800434e:	bd90      	pop	{r4, r7, pc}

08004350 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	23ba      	movs	r3, #186	; 0xba
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	2101      	movs	r1, #1
 8004366:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	23b8      	movs	r3, #184	; 0xb8
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	2100      	movs	r1, #0
 8004370:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2254      	movs	r2, #84	; 0x54
 8004376:	5a9b      	ldrh	r3, [r3, r2]
 8004378:	b29b      	uxth	r3, r3
 800437a:	2201      	movs	r2, #1
 800437c:	4313      	orrs	r3, r2
 800437e:	b299      	uxth	r1, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2254      	movs	r2, #84	; 0x54
 8004384:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2254      	movs	r2, #84	; 0x54
 800438a:	5a9b      	ldrh	r3, [r3, r2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	2202      	movs	r2, #2
 8004390:	4313      	orrs	r3, r2
 8004392:	b299      	uxth	r1, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2254      	movs	r2, #84	; 0x54
 8004398:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	000a      	movs	r2, r1
 80043ae:	1cfb      	adds	r3, r7, #3
 80043b0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f000 fbbf 	bl	8004b4e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d0:	4bc9      	ldr	r3, [pc, #804]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	220c      	movs	r2, #12
 80043d6:	4013      	ands	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043da:	4bc7      	ldr	r3, [pc, #796]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	025b      	lsls	r3, r3, #9
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2201      	movs	r2, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d100      	bne.n	80043f2 <HAL_RCC_OscConfig+0x36>
 80043f0:	e07e      	b.n	80044f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d007      	beq.n	8004408 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d112      	bne.n	8004424 <HAL_RCC_OscConfig+0x68>
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	025b      	lsls	r3, r3, #9
 8004404:	429a      	cmp	r2, r3
 8004406:	d10d      	bne.n	8004424 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	4bbb      	ldr	r3, [pc, #748]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	d100      	bne.n	8004416 <HAL_RCC_OscConfig+0x5a>
 8004414:	e06b      	b.n	80044ee <HAL_RCC_OscConfig+0x132>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d167      	bne.n	80044ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f000 fb95 	bl	8004b4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	025b      	lsls	r3, r3, #9
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x84>
 8004430:	4bb1      	ldr	r3, [pc, #708]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4bb0      	ldr	r3, [pc, #704]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	0249      	lsls	r1, r1, #9
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e027      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	23a0      	movs	r3, #160	; 0xa0
 8004446:	02db      	lsls	r3, r3, #11
 8004448:	429a      	cmp	r2, r3
 800444a:	d10e      	bne.n	800446a <HAL_RCC_OscConfig+0xae>
 800444c:	4baa      	ldr	r3, [pc, #680]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4ba9      	ldr	r3, [pc, #676]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004452:	2180      	movs	r1, #128	; 0x80
 8004454:	02c9      	lsls	r1, r1, #11
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	4ba7      	ldr	r3, [pc, #668]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4ba6      	ldr	r3, [pc, #664]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	0249      	lsls	r1, r1, #9
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e012      	b.n	8004490 <HAL_RCC_OscConfig+0xd4>
 800446a:	4ba3      	ldr	r3, [pc, #652]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4ba2      	ldr	r3, [pc, #648]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004470:	49a2      	ldr	r1, [pc, #648]	; (80046fc <HAL_RCC_OscConfig+0x340>)
 8004472:	400a      	ands	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	4ba0      	ldr	r3, [pc, #640]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	025b      	lsls	r3, r3, #9
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4b9c      	ldr	r3, [pc, #624]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b9b      	ldr	r3, [pc, #620]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800448a:	499d      	ldr	r1, [pc, #628]	; (8004700 <HAL_RCC_OscConfig+0x344>)
 800448c:	400a      	ands	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd fb20 	bl	8001adc <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044a0:	e009      	b.n	80044b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a2:	f7fd fb1b 	bl	8001adc <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b64      	cmp	r3, #100	; 0x64
 80044ae:	d902      	bls.n	80044b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	f000 fb4c 	bl	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b6:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	029b      	lsls	r3, r3, #10
 80044be:	4013      	ands	r3, r2
 80044c0:	d0ef      	beq.n	80044a2 <HAL_RCC_OscConfig+0xe6>
 80044c2:	e015      	b.n	80044f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd fb0a 	bl	8001adc <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ce:	f7fd fb05 	bl	8001adc <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b64      	cmp	r3, #100	; 0x64
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e336      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044e0:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	029b      	lsls	r3, r3, #10
 80044e8:	4013      	ands	r3, r2
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x112>
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2202      	movs	r2, #2
 80044f6:	4013      	ands	r3, r2
 80044f8:	d100      	bne.n	80044fc <HAL_RCC_OscConfig+0x140>
 80044fa:	e099      	b.n	8004630 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	2220      	movs	r2, #32
 8004506:	4013      	ands	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004510:	2120      	movs	r1, #32
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2220      	movs	r2, #32
 800451a:	4393      	bics	r3, r2
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d005      	beq.n	8004530 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d13e      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d13b      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004530:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2204      	movs	r2, #4
 8004536:	4013      	ands	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_RCC_OscConfig+0x188>
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e304      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b6c      	ldr	r3, [pc, #432]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_RCC_OscConfig+0x348>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2209      	movs	r2, #9
 8004560:	4393      	bics	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800456c:	f000 fc42 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004570:	0001      	movs	r1, r0
 8004572:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	220f      	movs	r2, #15
 800457a:	4013      	ands	r3, r2
 800457c:	4a62      	ldr	r2, [pc, #392]	; (8004708 <HAL_RCC_OscConfig+0x34c>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	000a      	movs	r2, r1
 8004582:	40da      	lsrs	r2, r3
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_OscConfig+0x350>)
 8004586:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004588:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x354>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2513      	movs	r5, #19
 800458e:	197c      	adds	r4, r7, r5
 8004590:	0018      	movs	r0, r3
 8004592:	f7fd fa5d 	bl	8001a50 <HAL_InitTick>
 8004596:	0003      	movs	r3, r0
 8004598:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800459a:	197b      	adds	r3, r7, r5
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d046      	beq.n	8004630 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80045a2:	197b      	adds	r3, r7, r5
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	e2d2      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d027      	beq.n	80045fe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045ae:	4b52      	ldr	r3, [pc, #328]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2209      	movs	r2, #9
 80045b4:	4393      	bics	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd fa8c 	bl	8001adc <HAL_GetTick>
 80045c4:	0003      	movs	r3, r0
 80045c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fd fa87 	bl	8001adc <HAL_GetTick>
 80045ce:	0002      	movs	r2, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e2b8      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2204      	movs	r2, #4
 80045e2:	4013      	ands	r3, r2
 80045e4:	d0f1      	beq.n	80045ca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4a46      	ldr	r2, [pc, #280]	; (8004704 <HAL_RCC_OscConfig+0x348>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	021a      	lsls	r2, r3, #8
 80045f6:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	e018      	b.n	8004630 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004604:	2101      	movs	r1, #1
 8004606:	438a      	bics	r2, r1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fd fa67 	bl	8001adc <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004614:	f7fd fa62 	bl	8001adc <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e293      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004626:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2204      	movs	r2, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d1f1      	bne.n	8004614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2210      	movs	r2, #16
 8004636:	4013      	ands	r3, r2
 8004638:	d100      	bne.n	800463c <HAL_RCC_OscConfig+0x280>
 800463a:	e0a2      	b.n	8004782 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d140      	bne.n	80046c4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004642:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4013      	ands	r3, r2
 800464c:	d005      	beq.n	800465a <HAL_RCC_OscConfig+0x29e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e279      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4a2d      	ldr	r2, [pc, #180]	; (8004714 <HAL_RCC_OscConfig+0x358>)
 8004660:	4013      	ands	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	0a19      	lsrs	r1, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	061a      	lsls	r2, r3, #24
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	0b5b      	lsrs	r3, r3, #13
 8004688:	3301      	adds	r3, #1
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	0212      	lsls	r2, r2, #8
 800468e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004690:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	210f      	movs	r1, #15
 8004698:	400b      	ands	r3, r1
 800469a:	491b      	ldr	r1, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x34c>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046a0:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCC_OscConfig+0x350>)
 80046a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <HAL_RCC_OscConfig+0x354>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2513      	movs	r5, #19
 80046aa:	197c      	adds	r4, r7, r5
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fd f9cf 	bl	8001a50 <HAL_InitTick>
 80046b2:	0003      	movs	r3, r0
 80046b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80046b6:	197b      	adds	r3, r7, r5
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d061      	beq.n	8004782 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80046be:	197b      	adds	r3, r7, r5
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	e244      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d040      	beq.n	800474e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_OscConfig+0x33c>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0049      	lsls	r1, r1, #1
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd f9ff 	bl	8001adc <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046e2:	e019      	b.n	8004718 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e4:	f7fd f9fa 	bl	8001adc <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d912      	bls.n	8004718 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e22b      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	40021000 	.word	0x40021000
 80046fc:	fffeffff 	.word	0xfffeffff
 8004700:	fffbffff 	.word	0xfffbffff
 8004704:	ffffe0ff 	.word	0xffffe0ff
 8004708:	0800b114 	.word	0x0800b114
 800470c:	200002dc 	.word	0x200002dc
 8004710:	200002e0 	.word	0x200002e0
 8004714:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004718:	4bca      	ldr	r3, [pc, #808]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4013      	ands	r3, r2
 8004722:	d0df      	beq.n	80046e4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004724:	4bc7      	ldr	r3, [pc, #796]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4ac7      	ldr	r2, [pc, #796]	; (8004a48 <HAL_RCC_OscConfig+0x68c>)
 800472a:	4013      	ands	r3, r2
 800472c:	0019      	movs	r1, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004732:	4bc4      	ldr	r3, [pc, #784]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004738:	4bc2      	ldr	r3, [pc, #776]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	0a19      	lsrs	r1, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	061a      	lsls	r2, r3, #24
 8004746:	4bbf      	ldr	r3, [pc, #764]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	e019      	b.n	8004782 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800474e:	4bbd      	ldr	r3, [pc, #756]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4bbc      	ldr	r3, [pc, #752]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004754:	49bd      	ldr	r1, [pc, #756]	; (8004a4c <HAL_RCC_OscConfig+0x690>)
 8004756:	400a      	ands	r2, r1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fd f9bf 	bl	8001adc <HAL_GetTick>
 800475e:	0003      	movs	r3, r0
 8004760:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004764:	f7fd f9ba 	bl	8001adc <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e1eb      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004776:	4bb3      	ldr	r3, [pc, #716]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2208      	movs	r2, #8
 8004788:	4013      	ands	r3, r2
 800478a:	d036      	beq.n	80047fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d019      	beq.n	80047c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004794:	4bab      	ldr	r3, [pc, #684]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004798:	4baa      	ldr	r3, [pc, #680]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7fd f99c 	bl	8001adc <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fd f997 	bl	8001adc <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1c8      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047bc:	4ba1      	ldr	r3, [pc, #644]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	2202      	movs	r2, #2
 80047c2:	4013      	ands	r3, r2
 80047c4:	d0f1      	beq.n	80047aa <HAL_RCC_OscConfig+0x3ee>
 80047c6:	e018      	b.n	80047fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c8:	4b9e      	ldr	r3, [pc, #632]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80047ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047cc:	4b9d      	ldr	r3, [pc, #628]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80047ce:	2101      	movs	r1, #1
 80047d0:	438a      	bics	r2, r1
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d4:	f7fd f982 	bl	8001adc <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047de:	f7fd f97d 	bl	8001adc <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1ae      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047f0:	4b94      	ldr	r3, [pc, #592]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d1f1      	bne.n	80047de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2204      	movs	r2, #4
 8004800:	4013      	ands	r3, r2
 8004802:	d100      	bne.n	8004806 <HAL_RCC_OscConfig+0x44a>
 8004804:	e0ae      	b.n	8004964 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2023      	movs	r0, #35	; 0x23
 8004808:	183b      	adds	r3, r7, r0
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	055b      	lsls	r3, r3, #21
 8004816:	4013      	ands	r3, r2
 8004818:	d109      	bne.n	800482e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	4b8a      	ldr	r3, [pc, #552]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800481c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481e:	4b89      	ldr	r3, [pc, #548]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	0549      	lsls	r1, r1, #21
 8004824:	430a      	orrs	r2, r1
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004828:	183b      	adds	r3, r7, r0
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b88      	ldr	r3, [pc, #544]	; (8004a50 <HAL_RCC_OscConfig+0x694>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4013      	ands	r3, r2
 8004838:	d11a      	bne.n	8004870 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x694>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b84      	ldr	r3, [pc, #528]	; (8004a50 <HAL_RCC_OscConfig+0x694>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0049      	lsls	r1, r1, #1
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fd f948 	bl	8001adc <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fd f943 	bl	8001adc <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b64      	cmp	r3, #100	; 0x64
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e174      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	4b7a      	ldr	r3, [pc, #488]	; (8004a50 <HAL_RCC_OscConfig+0x694>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4013      	ands	r3, r2
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4d0>
 800487c:	4b71      	ldr	r3, [pc, #452]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800487e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004880:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	0049      	lsls	r1, r1, #1
 8004886:	430a      	orrs	r2, r1
 8004888:	651a      	str	r2, [r3, #80]	; 0x50
 800488a:	e031      	b.n	80048f0 <HAL_RCC_OscConfig+0x534>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_OscConfig+0x4f2>
 8004894:	4b6b      	ldr	r3, [pc, #428]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004898:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800489a:	496c      	ldr	r1, [pc, #432]	; (8004a4c <HAL_RCC_OscConfig+0x690>)
 800489c:	400a      	ands	r2, r1
 800489e:	651a      	str	r2, [r3, #80]	; 0x50
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048a4:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048a6:	496b      	ldr	r1, [pc, #428]	; (8004a54 <HAL_RCC_OscConfig+0x698>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	651a      	str	r2, [r3, #80]	; 0x50
 80048ac:	e020      	b.n	80048f0 <HAL_RCC_OscConfig+0x534>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	23a0      	movs	r3, #160	; 0xa0
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d10e      	bne.n	80048d8 <HAL_RCC_OscConfig+0x51c>
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048be:	4b61      	ldr	r3, [pc, #388]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	00c9      	lsls	r1, r1, #3
 80048c4:	430a      	orrs	r2, r1
 80048c6:	651a      	str	r2, [r3, #80]	; 0x50
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048cc:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	0049      	lsls	r1, r1, #1
 80048d2:	430a      	orrs	r2, r1
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0x534>
 80048d8:	4b5a      	ldr	r3, [pc, #360]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048de:	495b      	ldr	r1, [pc, #364]	; (8004a4c <HAL_RCC_OscConfig+0x690>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50
 80048e4:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e8:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80048ea:	495a      	ldr	r1, [pc, #360]	; (8004a54 <HAL_RCC_OscConfig+0x698>)
 80048ec:	400a      	ands	r2, r1
 80048ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f8:	f7fd f8f0 	bl	8001adc <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004900:	e009      	b.n	8004916 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fd f8eb 	bl	8001adc <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_RCC_OscConfig+0x69c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e11b      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004916:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4013      	ands	r3, r2
 8004920:	d0ef      	beq.n	8004902 <HAL_RCC_OscConfig+0x546>
 8004922:	e014      	b.n	800494e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004924:	f7fd f8da 	bl	8001adc <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800492c:	e009      	b.n	8004942 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492e:	f7fd f8d5 	bl	8001adc <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	4a47      	ldr	r2, [pc, #284]	; (8004a58 <HAL_RCC_OscConfig+0x69c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e105      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004942:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4013      	ands	r3, r2
 800494c:	d1ef      	bne.n	800492e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800494e:	2323      	movs	r3, #35	; 0x23
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	4b3a      	ldr	r3, [pc, #232]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800495e:	493f      	ldr	r1, [pc, #252]	; (8004a5c <HAL_RCC_OscConfig+0x6a0>)
 8004960:	400a      	ands	r2, r1
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2220      	movs	r2, #32
 800496a:	4013      	ands	r3, r2
 800496c:	d049      	beq.n	8004a02 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d026      	beq.n	80049c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004976:	4b33      	ldr	r3, [pc, #204]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 800497c:	2101      	movs	r1, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004988:	2101      	movs	r1, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	635a      	str	r2, [r3, #52]	; 0x34
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x6a4>)
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <HAL_RCC_OscConfig+0x6a4>)
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	0189      	lsls	r1, r1, #6
 8004998:	430a      	orrs	r2, r1
 800499a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd f89e 	bl	8001adc <HAL_GetTick>
 80049a0:	0003      	movs	r3, r0
 80049a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a6:	f7fd f899 	bl	8001adc <HAL_GetTick>
 80049aa:	0002      	movs	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0ca      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2202      	movs	r2, #2
 80049be:	4013      	ands	r3, r2
 80049c0:	d0f1      	beq.n	80049a6 <HAL_RCC_OscConfig+0x5ea>
 80049c2:	e01e      	b.n	8004a02 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <HAL_RCC_OscConfig+0x6a4>)
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_OscConfig+0x6a4>)
 80049d6:	4923      	ldr	r1, [pc, #140]	; (8004a64 <HAL_RCC_OscConfig+0x6a8>)
 80049d8:	400a      	ands	r2, r1
 80049da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fd f87e 	bl	8001adc <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e6:	f7fd f879 	bl	8001adc <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0aa      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2202      	movs	r2, #2
 80049fe:	4013      	ands	r3, r2
 8004a00:	d1f1      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <HAL_RCC_OscConfig+0x650>
 8004a0a:	e09f      	b.n	8004b4c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d100      	bne.n	8004a14 <HAL_RCC_OscConfig+0x658>
 8004a12:	e078      	b.n	8004b06 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d159      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_RCC_OscConfig+0x688>)
 8004a22:	4911      	ldr	r1, [pc, #68]	; (8004a68 <HAL_RCC_OscConfig+0x6ac>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fd f858 	bl	8001adc <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fd f853 	bl	8001adc <HAL_GetTick>
 8004a36:	0002      	movs	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d915      	bls.n	8004a6c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e084      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	ffff1fff 	.word	0xffff1fff
 8004a4c:	fffffeff 	.word	0xfffffeff
 8004a50:	40007000 	.word	0x40007000
 8004a54:	fffffbff 	.word	0xfffffbff
 8004a58:	00001388 	.word	0x00001388
 8004a5c:	efffffff 	.word	0xefffffff
 8004a60:	40010000 	.word	0x40010000
 8004a64:	ffffdfff 	.word	0xffffdfff
 8004a68:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	049b      	lsls	r3, r3, #18
 8004a74:	4013      	ands	r3, r2
 8004a76:	d1dc      	bne.n	8004a32 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a78:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <HAL_RCC_OscConfig+0x7a0>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	431a      	orrs	r2, r3
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0449      	lsls	r1, r1, #17
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fd f819 	bl	8001adc <HAL_GetTick>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd f814 	bl	8001adc <HAL_GetTick>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ac2:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	049b      	lsls	r3, r3, #18
 8004aca:	4013      	ands	r3, r2
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x6f4>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004ad6:	4922      	ldr	r1, [pc, #136]	; (8004b60 <HAL_RCC_OscConfig+0x7a4>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fc fffe 	bl	8001adc <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fc fff9 	bl	8001adc <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e02a      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	049b      	lsls	r3, r3, #18
 8004b00:	4013      	ands	r3, r2
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x72a>
 8004b04:	e022      	b.n	8004b4c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e01d      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_OscConfig+0x79c>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	025b      	lsls	r3, r3, #9
 8004b1e:	401a      	ands	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d10f      	bne.n	8004b48 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	23f0      	movs	r3, #240	; 0xf0
 8004b2c:	039b      	lsls	r3, r3, #14
 8004b2e:	401a      	ands	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	23c0      	movs	r3, #192	; 0xc0
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	401a      	ands	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b00a      	add	sp, #40	; 0x28
 8004b54:	bdb0      	pop	{r4, r5, r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	ff02ffff 	.word	0xff02ffff
 8004b60:	feffffff 	.word	0xfeffffff

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e128      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b96      	ldr	r3, [pc, #600]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d91e      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b93      	ldr	r3, [pc, #588]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	4b90      	ldr	r3, [pc, #576]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b98:	f7fc ffa0 	bl	8001adc <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba0:	e009      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba2:	f7fc ff9b 	bl	8001adc <HAL_GetTick>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	4a8a      	ldr	r2, [pc, #552]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e109      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b87      	ldr	r3, [pc, #540]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bce:	4b83      	ldr	r3, [pc, #524]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	22f0      	movs	r2, #240	; 0xf0
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b7f      	ldr	r3, [pc, #508]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2201      	movs	r2, #1
 8004be8:	4013      	ands	r3, r2
 8004bea:	d100      	bne.n	8004bee <HAL_RCC_ClockConfig+0x8a>
 8004bec:	e089      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf6:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d120      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0e1      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	049b      	lsls	r3, r3, #18
 8004c16:	4013      	ands	r3, r2
 8004c18:	d114      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0d5      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c26:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0ca      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c34:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0c2      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c44:	4b65      	ldr	r3, [pc, #404]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	4393      	bics	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c58:	f7fc ff40 	bl	8001adc <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d111      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c68:	e009      	b.n	8004c7e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fc ff37 	bl	8001adc <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0a5      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c7e:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	220c      	movs	r2, #12
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d1ef      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x106>
 8004c8a:	e03a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d111      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c94:	e009      	b.n	8004caa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c96:	f7fc ff21 	bl	8001adc <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	4a4d      	ldr	r2, [pc, #308]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e08f      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004caa:	4b4c      	ldr	r3, [pc, #304]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	220c      	movs	r2, #12
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d1ef      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x132>
 8004cb6:	e024      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cc0:	e009      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc2:	f7fc ff0b 	bl	8001adc <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	4a42      	ldr	r2, [pc, #264]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e079      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd6:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	220c      	movs	r2, #12
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d1ef      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x15e>
 8004ce2:	e00e      	b.n	8004d02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce4:	f7fc fefa 	bl	8001adc <HAL_GetTick>
 8004ce8:	0002      	movs	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e068      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf8:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	220c      	movs	r2, #12
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d21e      	bcs.n	8004d4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	4393      	bics	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d22:	f7fc fedb 	bl	8001adc <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	e009      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7fc fed6 	bl	8001adc <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e044      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d1ee      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2204      	movs	r2, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_RCC_ClockConfig+0x27c>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4013      	ands	r3, r2
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_RCC_ClockConfig+0x280>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	00da      	lsls	r2, r3, #3
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8c:	f000 f832 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004d90:	0001      	movs	r1, r0
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	220f      	movs	r2, #15
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x284>)
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	000a      	movs	r2, r1
 8004da2:	40da      	lsrs	r2, r3
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCC_ClockConfig+0x288>)
 8004da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <HAL_RCC_ClockConfig+0x28c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	250b      	movs	r5, #11
 8004dae:	197c      	adds	r4, r7, r5
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fc fe4d 	bl	8001a50 <HAL_InitTick>
 8004db6:	0003      	movs	r3, r0
 8004db8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004dc2:	197b      	adds	r3, r7, r5
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	00001388 	.word	0x00001388
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	fffff8ff 	.word	0xfffff8ff
 8004de4:	ffffc7ff 	.word	0xffffc7ff
 8004de8:	0800b114 	.word	0x0800b114
 8004dec:	200002dc 	.word	0x200002dc
 8004df0:	200002e0 	.word	0x200002e0

08004df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004dfa:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e02:	230c      	movs	r3, #12
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d014      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0a:	d900      	bls.n	8004e0e <HAL_RCC_GetSysClockFreq+0x1a>
 8004e0c:	e07b      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x112>
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x24>
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d00b      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e16:	e076      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e18:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004e26:	e07c      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x140>)
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e2c:	e079      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x140>)
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e32:	e076      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	0c9a      	lsrs	r2, r3, #18
 8004e38:	230f      	movs	r3, #15
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e3e:	5c9b      	ldrb	r3, [r3, r2]
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	0d9a      	lsrs	r2, r3, #22
 8004e46:	2303      	movs	r3, #3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	4013      	ands	r3, r2
 8004e58:	d01a      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x140>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	69b8      	ldr	r0, [r7, #24]
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	f7fb faed 	bl	8000448 <__aeabi_lmul>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	000b      	movs	r3, r1
 8004e72:	0010      	movs	r0, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f7fb fac1 	bl	8000408 <__aeabi_uldivmod>
 8004e86:	0002      	movs	r2, r0
 8004e88:	000b      	movs	r3, r1
 8004e8a:	0013      	movs	r3, r2
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	e037      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e90:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	4013      	ands	r3, r2
 8004e98:	d01a      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	68f9      	ldr	r1, [r7, #12]
 8004eaa:	f7fb facd 	bl	8000448 <__aeabi_lmul>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	000b      	movs	r3, r1
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f7fb faa1 	bl	8000408 <__aeabi_uldivmod>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	000b      	movs	r3, r1
 8004eca:	0013      	movs	r3, r2
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ece:	e017      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x140>)
 8004eda:	2300      	movs	r3, #0
 8004edc:	f7fb fab4 	bl	8000448 <__aeabi_lmul>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	000b      	movs	r3, r1
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	001c      	movs	r4, r3
 8004eec:	2300      	movs	r3, #0
 8004eee:	001d      	movs	r5, r3
 8004ef0:	0022      	movs	r2, r4
 8004ef2:	002b      	movs	r3, r5
 8004ef4:	f7fb fa88 	bl	8000408 <__aeabi_uldivmod>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	000b      	movs	r3, r1
 8004efc:	0013      	movs	r3, r2
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f04:	e00d      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	0b5b      	lsrs	r3, r3, #13
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	4013      	ands	r3, r2
 8004f10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	3301      	adds	r3, #1
 8004f16:	2280      	movs	r2, #128	; 0x80
 8004f18:	0212      	lsls	r2, r2, #8
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	0013      	movs	r3, r2
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b00e      	add	sp, #56	; 0x38
 8004f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	003d0900 	.word	0x003d0900
 8004f34:	00f42400 	.word	0x00f42400
 8004f38:	0800b124 	.word	0x0800b124

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f44:	2017      	movs	r0, #23
 8004f46:	183b      	adds	r3, r7, r0
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2220      	movs	r2, #32
 8004f52:	4013      	ands	r3, r2
 8004f54:	d100      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f56:	e0c7      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f58:	4b9b      	ldr	r3, [pc, #620]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	055b      	lsls	r3, r3, #21
 8004f60:	4013      	ands	r3, r2
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f64:	4b98      	ldr	r3, [pc, #608]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	4b97      	ldr	r3, [pc, #604]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	0549      	lsls	r1, r1, #21
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f72:	183b      	adds	r3, r7, r0
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	4b94      	ldr	r3, [pc, #592]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4013      	ands	r3, r2
 8004f82:	d11a      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f84:	4b91      	ldr	r3, [pc, #580]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b90      	ldr	r3, [pc, #576]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	0049      	lsls	r1, r1, #1
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fc fda3 	bl	8001adc <HAL_GetTick>
 8004f96:	0003      	movs	r3, r0
 8004f98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9c:	f7fc fd9e 	bl	8001adc <HAL_GetTick>
 8004fa0:	0002      	movs	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e107      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b87      	ldr	r3, [pc, #540]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004fba:	4b83      	ldr	r3, [pc, #524]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	23c0      	movs	r3, #192	; 0xc0
 8004fc0:	039b      	lsls	r3, r3, #14
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	23c0      	movs	r3, #192	; 0xc0
 8004fcc:	039b      	lsls	r3, r3, #14
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d013      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	401a      	ands	r2, r3
 8004fe0:	23c0      	movs	r3, #192	; 0xc0
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fe8:	4b77      	ldr	r3, [pc, #476]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0df      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004ffe:	4b72      	ldr	r3, [pc, #456]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005002:	23c0      	movs	r3, #192	; 0xc0
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	4013      	ands	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d03b      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	23c0      	movs	r3, #192	; 0xc0
 8005016:	029b      	lsls	r3, r3, #10
 8005018:	4013      	ands	r3, r2
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d033      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2220      	movs	r2, #32
 8005026:	4013      	ands	r3, r2
 8005028:	d02e      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800502a:	4b67      	ldr	r3, [pc, #412]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	4a68      	ldr	r2, [pc, #416]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005034:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005038:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	0309      	lsls	r1, r1, #12
 800503e:	430a      	orrs	r2, r1
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005042:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005046:	4b60      	ldr	r3, [pc, #384]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005048:	4962      	ldr	r1, [pc, #392]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800504a:	400a      	ands	r2, r1
 800504c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800504e:	4b5e      	ldr	r3, [pc, #376]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4013      	ands	r3, r2
 800505c:	d014      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505e:	f7fc fd3d 	bl	8001adc <HAL_GetTick>
 8005062:	0003      	movs	r3, r0
 8005064:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005066:	e009      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc fd38 	bl	8001adc <HAL_GetTick>
 800506c:	0002      	movs	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	4a59      	ldr	r2, [pc, #356]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e0a0      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507c:	4b52      	ldr	r3, [pc, #328]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800507e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d0ef      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2220      	movs	r2, #32
 800508e:	4013      	ands	r3, r2
 8005090:	d01f      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	23c0      	movs	r3, #192	; 0xc0
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	401a      	ands	r2, r3
 800509c:	23c0      	movs	r3, #192	; 0xc0
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d10c      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050a4:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a4c      	ldr	r2, [pc, #304]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	23c0      	movs	r3, #192	; 0xc0
 80050b4:	039b      	lsls	r3, r3, #14
 80050b6:	401a      	ands	r2, r3
 80050b8:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	4b42      	ldr	r3, [pc, #264]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	23c0      	movs	r3, #192	; 0xc0
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	401a      	ands	r2, r3
 80050cc:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050ce:	430a      	orrs	r2, r1
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050d2:	2317      	movs	r3, #23
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e0:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050e2:	493f      	ldr	r1, [pc, #252]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f2:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	2203      	movs	r2, #3
 80050f8:	4393      	bics	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005102:	430a      	orrs	r2, r1
 8005104:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	4013      	ands	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005110:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005114:	220c      	movs	r2, #12
 8005116:	4393      	bics	r3, r2
 8005118:	0019      	movs	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005120:	430a      	orrs	r2, r1
 8005122:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2204      	movs	r2, #4
 800512a:	4013      	ands	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800512e:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800513e:	430a      	orrs	r2, r1
 8005140:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2208      	movs	r2, #8
 8005148:	4013      	ands	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005152:	4013      	ands	r3, r2
 8005154:	0019      	movs	r1, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800515c:	430a      	orrs	r2, r1
 800515e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800517c:	430a      	orrs	r2, r1
 800517e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2240      	movs	r2, #64	; 0x40
 8005186:	4013      	ands	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800519a:	430a      	orrs	r2, r1
 800519c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	4013      	ands	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	0019      	movs	r1, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051b8:	430a      	orrs	r2, r1
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	0018      	movs	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b006      	add	sp, #24
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40007000 	.word	0x40007000
 80051d0:	fffcffff 	.word	0xfffcffff
 80051d4:	fff7ffff 	.word	0xfff7ffff
 80051d8:	00001388 	.word	0x00001388
 80051dc:	ffcfffff 	.word	0xffcfffff
 80051e0:	efffffff 	.word	0xefffffff
 80051e4:	fffff3ff 	.word	0xfffff3ff
 80051e8:	ffffcfff 	.word	0xffffcfff
 80051ec:	fbffffff 	.word	0xfbffffff
 80051f0:	fff3ffff 	.word	0xfff3ffff

080051f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e032      	b.n	800526c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2239      	movs	r2, #57	; 0x39
 800520a:	5c9b      	ldrb	r3, [r3, r2]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2238      	movs	r2, #56	; 0x38
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	0018      	movs	r0, r3
 800521e:	f7fc faa7 	bl	8001770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2239      	movs	r2, #57	; 0x39
 8005226:	2102      	movs	r1, #2
 8005228:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	0019      	movs	r1, r3
 8005234:	0010      	movs	r0, r2
 8005236:	f000 fcc9 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223e      	movs	r2, #62	; 0x3e
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223a      	movs	r2, #58	; 0x3a
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	223b      	movs	r2, #59	; 0x3b
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	223c      	movs	r2, #60	; 0x3c
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	223d      	movs	r2, #61	; 0x3d
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2239      	movs	r2, #57	; 0x39
 8005266:	2101      	movs	r1, #1
 8005268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2239      	movs	r2, #57	; 0x39
 8005280:	5c9b      	ldrb	r3, [r3, r2]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d001      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e03b      	b.n	8005304 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2239      	movs	r2, #57	; 0x39
 8005290:	2102      	movs	r1, #2
 8005292:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2101      	movs	r1, #1
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	05db      	lsls	r3, r3, #23
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_Base_Start_IT+0x5a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <HAL_TIM_Base_Start_IT+0x98>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_Base_Start_IT+0x5a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a14      	ldr	r2, [pc, #80]	; (8005310 <HAL_TIM_Base_Start_IT+0x9c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_Base_Start_IT+0x5a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a12      	ldr	r2, [pc, #72]	; (8005314 <HAL_TIM_Base_Start_IT+0xa0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d111      	bne.n	80052f2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2207      	movs	r2, #7
 80052d6:	4013      	ands	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d010      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2101      	movs	r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	e007      	b.n	8005302 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2101      	movs	r1, #1
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40000400 	.word	0x40000400
 8005310:	40010800 	.word	0x40010800
 8005314:	40011400 	.word	0x40011400

08005318 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e032      	b.n	8005390 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2239      	movs	r2, #57	; 0x39
 800532e:	5c9b      	ldrb	r3, [r3, r2]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2238      	movs	r2, #56	; 0x38
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f000 f829 	bl	8005398 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2239      	movs	r2, #57	; 0x39
 800534a:	2102      	movs	r1, #2
 800534c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	0019      	movs	r1, r3
 8005358:	0010      	movs	r0, r2
 800535a:	f000 fc37 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223e      	movs	r2, #62	; 0x3e
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	223a      	movs	r2, #58	; 0x3a
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	223b      	movs	r2, #59	; 0x3b
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	223d      	movs	r2, #61	; 0x3d
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2239      	movs	r2, #57	; 0x39
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e032      	b.n	8005420 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2239      	movs	r2, #57	; 0x39
 80053be:	5c9b      	ldrb	r3, [r3, r2]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2238      	movs	r2, #56	; 0x38
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f829 	bl	8005428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2239      	movs	r2, #57	; 0x39
 80053da:	2102      	movs	r1, #2
 80053dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	0019      	movs	r1, r3
 80053e8:	0010      	movs	r0, r2
 80053ea:	f000 fbef 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223e      	movs	r2, #62	; 0x3e
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	223a      	movs	r2, #58	; 0x3a
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223b      	movs	r2, #59	; 0x3b
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223c      	movs	r2, #60	; 0x3c
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223d      	movs	r2, #61	; 0x3d
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2239      	movs	r2, #57	; 0x39
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <HAL_TIM_PWM_Start+0x22>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	223a      	movs	r2, #58	; 0x3a
 800544c:	5c9b      	ldrb	r3, [r3, r2]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	4193      	sbcs	r3, r2
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e01f      	b.n	800549a <HAL_TIM_PWM_Start+0x62>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d108      	bne.n	8005472 <HAL_TIM_PWM_Start+0x3a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223b      	movs	r2, #59	; 0x3b
 8005464:	5c9b      	ldrb	r3, [r3, r2]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	4193      	sbcs	r3, r2
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e013      	b.n	800549a <HAL_TIM_PWM_Start+0x62>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d108      	bne.n	800548a <HAL_TIM_PWM_Start+0x52>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	223c      	movs	r2, #60	; 0x3c
 800547c:	5c9b      	ldrb	r3, [r3, r2]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	4193      	sbcs	r3, r2
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e007      	b.n	800549a <HAL_TIM_PWM_Start+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	223d      	movs	r2, #61	; 0x3d
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	4193      	sbcs	r3, r2
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e052      	b.n	8005548 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_PWM_Start+0x7a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223a      	movs	r2, #58	; 0x3a
 80054ac:	2102      	movs	r1, #2
 80054ae:	5499      	strb	r1, [r3, r2]
 80054b0:	e013      	b.n	80054da <HAL_TIM_PWM_Start+0xa2>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_PWM_Start+0x8a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223b      	movs	r2, #59	; 0x3b
 80054bc:	2102      	movs	r1, #2
 80054be:	5499      	strb	r1, [r3, r2]
 80054c0:	e00b      	b.n	80054da <HAL_TIM_PWM_Start+0xa2>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_PWM_Start+0x9a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	223c      	movs	r2, #60	; 0x3c
 80054cc:	2102      	movs	r1, #2
 80054ce:	5499      	strb	r1, [r3, r2]
 80054d0:	e003      	b.n	80054da <HAL_TIM_PWM_Start+0xa2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	223d      	movs	r2, #61	; 0x3d
 80054d6:	2102      	movs	r1, #2
 80054d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 fd6e 	bl	8005fc4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	05db      	lsls	r3, r3, #23
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_PWM_Start+0xda>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a15      	ldr	r2, [pc, #84]	; (8005550 <HAL_TIM_PWM_Start+0x118>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIM_PWM_Start+0xda>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a14      	ldr	r2, [pc, #80]	; (8005554 <HAL_TIM_PWM_Start+0x11c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_PWM_Start+0xda>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a12      	ldr	r2, [pc, #72]	; (8005558 <HAL_TIM_PWM_Start+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d111      	bne.n	8005536 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2207      	movs	r2, #7
 800551a:	4013      	ands	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d010      	beq.n	8005546 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	e007      	b.n	8005546 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b004      	add	sp, #16
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40000400 	.word	0x40000400
 8005554:	40010800 	.word	0x40010800
 8005558:	40011400 	.word	0x40011400

0800555c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	0018      	movs	r0, r3
 8005570:	f000 fd28 	bl	8005fc4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <HAL_TIM_PWM_Stop+0x78>)
 800557c:	4013      	ands	r3, r2
 800557e:	d107      	bne.n	8005590 <HAL_TIM_PWM_Stop+0x34>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	438a      	bics	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <HAL_TIM_PWM_Stop+0x44>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223a      	movs	r2, #58	; 0x3a
 800559a:	2101      	movs	r1, #1
 800559c:	5499      	strb	r1, [r3, r2]
 800559e:	e013      	b.n	80055c8 <HAL_TIM_PWM_Stop+0x6c>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d104      	bne.n	80055b0 <HAL_TIM_PWM_Stop+0x54>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	223b      	movs	r2, #59	; 0x3b
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]
 80055ae:	e00b      	b.n	80055c8 <HAL_TIM_PWM_Stop+0x6c>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d104      	bne.n	80055c0 <HAL_TIM_PWM_Stop+0x64>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	223c      	movs	r2, #60	; 0x3c
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]
 80055be:	e003      	b.n	80055c8 <HAL_TIM_PWM_Stop+0x6c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	223d      	movs	r2, #61	; 0x3d
 80055c4:	2101      	movs	r1, #1
 80055c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	00001111 	.word	0x00001111

080055d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d124      	bne.n	8005638 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d11d      	bne.n	8005638 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2203      	movs	r2, #3
 8005602:	4252      	negs	r2, r2
 8005604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2203      	movs	r2, #3
 8005614:	4013      	ands	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fabe 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 8005620:	e007      	b.n	8005632 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 fab1 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f000 fabd 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2204      	movs	r2, #4
 8005640:	4013      	ands	r3, r2
 8005642:	2b04      	cmp	r3, #4
 8005644:	d125      	bne.n	8005692 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2204      	movs	r2, #4
 800564e:	4013      	ands	r3, r2
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11e      	bne.n	8005692 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2205      	movs	r2, #5
 800565a:	4252      	negs	r2, r2
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	23c0      	movs	r3, #192	; 0xc0
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4013      	ands	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fa91 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 800567a:	e007      	b.n	800568c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fa84 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f000 fa90 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2208      	movs	r2, #8
 800569a:	4013      	ands	r3, r2
 800569c:	2b08      	cmp	r3, #8
 800569e:	d124      	bne.n	80056ea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2208      	movs	r2, #8
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d11d      	bne.n	80056ea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2209      	movs	r2, #9
 80056b4:	4252      	negs	r2, r2
 80056b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2204      	movs	r2, #4
 80056bc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	2203      	movs	r2, #3
 80056c6:	4013      	ands	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 fa65 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 80056d2:	e007      	b.n	80056e4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 fa58 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 fa64 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2210      	movs	r2, #16
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d125      	bne.n	8005744 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2210      	movs	r2, #16
 8005700:	4013      	ands	r3, r2
 8005702:	2b10      	cmp	r3, #16
 8005704:	d11e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2211      	movs	r2, #17
 800570c:	4252      	negs	r2, r2
 800570e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2208      	movs	r2, #8
 8005714:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	23c0      	movs	r3, #192	; 0xc0
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4013      	ands	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 fa38 	bl	8005b9c <HAL_TIM_IC_CaptureCallback>
 800572c:	e007      	b.n	800573e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fa2b 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fa37 	bl	8005bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2201      	movs	r2, #1
 800574c:	4013      	ands	r3, r2
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10f      	bne.n	8005772 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	4013      	ands	r3, r2
 800575c:	2b01      	cmp	r3, #1
 800575e:	d108      	bne.n	8005772 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2202      	movs	r2, #2
 8005766:	4252      	negs	r2, r2
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f7fb ff55 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	4013      	ands	r3, r2
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d10f      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2240      	movs	r2, #64	; 0x40
 8005788:	4013      	ands	r3, r2
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d108      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2241      	movs	r2, #65	; 0x41
 8005794:	4252      	negs	r2, r2
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fa0e 	bl	8005bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b002      	add	sp, #8
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2317      	movs	r3, #23
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2238      	movs	r2, #56	; 0x38
 80057c0:	5c9b      	ldrb	r3, [r3, r2]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_OC_ConfigChannel+0x22>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e042      	b.n	8005850 <HAL_TIM_OC_ConfigChannel+0xa8>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2238      	movs	r2, #56	; 0x38
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d027      	beq.n	8005828 <HAL_TIM_OC_ConfigChannel+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d82c      	bhi.n	8005838 <HAL_TIM_OC_ConfigChannel+0x90>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d019      	beq.n	8005818 <HAL_TIM_OC_ConfigChannel+0x70>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d826      	bhi.n	8005838 <HAL_TIM_OC_ConfigChannel+0x90>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_TIM_OC_ConfigChannel+0x50>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d008      	beq.n	8005808 <HAL_TIM_OC_ConfigChannel+0x60>
 80057f6:	e01f      	b.n	8005838 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f000 fa41 	bl	8005c88 <TIM_OC1_SetConfig>
      break;
 8005806:	e01c      	b.n	8005842 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	0011      	movs	r1, r2
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fa75 	bl	8005d00 <TIM_OC2_SetConfig>
      break;
 8005816:	e014      	b.n	8005842 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0011      	movs	r1, r2
 8005820:	0018      	movs	r0, r3
 8005822:	f000 faaf 	bl	8005d84 <TIM_OC3_SetConfig>
      break;
 8005826:	e00c      	b.n	8005842 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	0011      	movs	r1, r2
 8005830:	0018      	movs	r0, r3
 8005832:	f000 fae7 	bl	8005e04 <TIM_OC4_SetConfig>
      break;
 8005836:	e004      	b.n	8005842 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005838:	2317      	movs	r3, #23
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
      break;
 8005840:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2238      	movs	r2, #56	; 0x38
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]

  return status;
 800584a:	2317      	movs	r3, #23
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	781b      	ldrb	r3, [r3, #0]
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2317      	movs	r3, #23
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2238      	movs	r2, #56	; 0x38
 8005870:	5c9b      	ldrb	r3, [r3, r2]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005876:	2302      	movs	r3, #2
 8005878:	e0ad      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2238      	movs	r2, #56	; 0x38
 800587e:	2101      	movs	r1, #1
 8005880:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	d100      	bne.n	800588a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005888:	e076      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x120>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d900      	bls.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005890:	e095      	b.n	80059be <HAL_TIM_PWM_ConfigChannel+0x166>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d04e      	beq.n	8005936 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d900      	bls.n	80058a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 800589e:	e08e      	b.n	80059be <HAL_TIM_PWM_ConfigChannel+0x166>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x56>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d021      	beq.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80058ac:	e087      	b.n	80059be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	0011      	movs	r1, r2
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f9e6 	bl	8005c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2108      	movs	r1, #8
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2104      	movs	r1, #4
 80058d8:	438a      	bics	r2, r1
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	619a      	str	r2, [r3, #24]
      break;
 80058ee:	e06b      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	0011      	movs	r1, r2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 fa01 	bl	8005d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	0109      	lsls	r1, r1, #4
 800590c:	430a      	orrs	r2, r1
 800590e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4931      	ldr	r1, [pc, #196]	; (80059e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800591c:	400a      	ands	r2, r1
 800591e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	619a      	str	r2, [r3, #24]
      break;
 8005934:	e048      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0011      	movs	r1, r2
 800593e:	0018      	movs	r0, r3
 8005940:	f000 fa20 	bl	8005d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2108      	movs	r1, #8
 8005950:	430a      	orrs	r2, r1
 8005952:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2104      	movs	r1, #4
 8005960:	438a      	bics	r2, r1
 8005962:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69d9      	ldr	r1, [r3, #28]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	61da      	str	r2, [r3, #28]
      break;
 8005976:	e027      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	0011      	movs	r1, r2
 8005980:	0018      	movs	r0, r3
 8005982:	f000 fa3f 	bl	8005e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	0109      	lsls	r1, r1, #4
 8005994:	430a      	orrs	r2, r1
 8005996:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	490f      	ldr	r1, [pc, #60]	; (80059e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69d9      	ldr	r1, [r3, #28]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	61da      	str	r2, [r3, #28]
      break;
 80059bc:	e004      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80059be:	2317      	movs	r3, #23
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
      break;
 80059c6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2238      	movs	r2, #56	; 0x38
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]

  return status;
 80059d0:	2317      	movs	r3, #23
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	781b      	ldrb	r3, [r3, #0]
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b006      	add	sp, #24
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	fffffbff 	.word	0xfffffbff

080059e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2238      	movs	r2, #56	; 0x38
 80059fa:	5c9b      	ldrb	r3, [r3, r2]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_ConfigClockSource+0x20>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0bc      	b.n	8005b7e <HAL_TIM_ConfigClockSource+0x19a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2238      	movs	r2, #56	; 0x38
 8005a08:	2101      	movs	r1, #1
 8005a0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2239      	movs	r2, #57	; 0x39
 8005a10:	2102      	movs	r1, #2
 8005a12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2277      	movs	r2, #119	; 0x77
 8005a20:	4393      	bics	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4a58      	ldr	r2, [pc, #352]	; (8005b88 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2280      	movs	r2, #128	; 0x80
 8005a3a:	0192      	lsls	r2, r2, #6
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d040      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0xde>
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	0192      	lsls	r2, r2, #6
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d900      	bls.n	8005a4a <HAL_TIM_ConfigClockSource+0x66>
 8005a48:	e088      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	0152      	lsls	r2, r2, #5
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d100      	bne.n	8005a54 <HAL_TIM_ConfigClockSource+0x70>
 8005a52:	e088      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x182>
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	0152      	lsls	r2, r2, #5
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d900      	bls.n	8005a5e <HAL_TIM_ConfigClockSource+0x7a>
 8005a5c:	e07e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a5e:	2b70      	cmp	r3, #112	; 0x70
 8005a60:	d018      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0xb0>
 8005a62:	d900      	bls.n	8005a66 <HAL_TIM_ConfigClockSource+0x82>
 8005a64:	e07a      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a66:	2b60      	cmp	r3, #96	; 0x60
 8005a68:	d04f      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x126>
 8005a6a:	d900      	bls.n	8005a6e <HAL_TIM_ConfigClockSource+0x8a>
 8005a6c:	e076      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a6e:	2b50      	cmp	r3, #80	; 0x50
 8005a70:	d03b      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x106>
 8005a72:	d900      	bls.n	8005a76 <HAL_TIM_ConfigClockSource+0x92>
 8005a74:	e072      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d057      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x146>
 8005a7a:	d900      	bls.n	8005a7e <HAL_TIM_ConfigClockSource+0x9a>
 8005a7c:	e06e      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a7e:	2b30      	cmp	r3, #48	; 0x30
 8005a80:	d063      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x166>
 8005a82:	d86b      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d060      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x166>
 8005a88:	d868      	bhi.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d05d      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x166>
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d05b      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x166>
 8005a92:	e063      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6899      	ldr	r1, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f000 fa6e 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2277      	movs	r2, #119	; 0x77
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
      break;
 8005ac0:	e052      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6899      	ldr	r1, [r3, #8]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f000 fa57 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	01c9      	lsls	r1, r1, #7
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]
      break;
 8005ae8:	e03e      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	001a      	movs	r2, r3
 8005af8:	f000 f9ca 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2150      	movs	r1, #80	; 0x50
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 fa24 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005b08:	e02e      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	001a      	movs	r2, r3
 8005b18:	f000 f9e8 	bl	8005eec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2160      	movs	r1, #96	; 0x60
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 fa14 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e01e      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	001a      	movs	r2, r3
 8005b38:	f000 f9aa 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2140      	movs	r1, #64	; 0x40
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 fa04 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e00e      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	0019      	movs	r1, r3
 8005b54:	0010      	movs	r0, r2
 8005b56:	f000 f9fb 	bl	8005f50 <TIM_ITRx_SetConfig>
      break;
 8005b5a:	e005      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	230f      	movs	r3, #15
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
      break;
 8005b64:	e000      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005b66:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2239      	movs	r2, #57	; 0x39
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2238      	movs	r2, #56	; 0x38
 8005b74:	2100      	movs	r1, #0
 8005b76:	5499      	strb	r1, [r3, r2]

  return status;
 8005b78:	230f      	movs	r3, #15
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b004      	add	sp, #16
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	ffff00ff 	.word	0xffff00ff

08005b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b002      	add	sp, #8
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	05db      	lsls	r3, r3, #23
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0x32>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a23      	ldr	r2, [pc, #140]	; (8005c78 <TIM_Base_SetConfig+0xac>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0x32>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <TIM_Base_SetConfig+0xb0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x32>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <TIM_Base_SetConfig+0xb4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2270      	movs	r2, #112	; 0x70
 8005c02:	4393      	bics	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	05db      	lsls	r3, r3, #23
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d00b      	beq.n	8005c32 <TIM_Base_SetConfig+0x66>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <TIM_Base_SetConfig+0xac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0x66>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <TIM_Base_SetConfig+0xb0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0x66>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_Base_SetConfig+0xb4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <TIM_Base_SetConfig+0xb8>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	4393      	bics	r3, r2
 8005c4a:	001a      	movs	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	615a      	str	r2, [r3, #20]
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b004      	add	sp, #16
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40010800 	.word	0x40010800
 8005c80:	40011400 	.word	0x40011400
 8005c84:	fffffcff 	.word	0xfffffcff

08005c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4393      	bics	r3, r2
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2270      	movs	r2, #112	; 0x70
 8005cb6:	4393      	bics	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	621a      	str	r2, [r3, #32]
}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b006      	add	sp, #24
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	2210      	movs	r2, #16
 8005d10:	4393      	bics	r3, r2
 8005d12:	001a      	movs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <TIM_OC2_SetConfig+0x7c>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <TIM_OC2_SetConfig+0x80>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	621a      	str	r2, [r3, #32]
}
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b006      	add	sp, #24
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	ffff8fff 	.word	0xffff8fff
 8005d80:	fffffcff 	.word	0xfffffcff

08005d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <TIM_OC3_SetConfig+0x78>)
 8005d94:	401a      	ands	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2270      	movs	r2, #112	; 0x70
 8005db0:	4393      	bics	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2203      	movs	r2, #3
 8005db8:	4393      	bics	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <TIM_OC3_SetConfig+0x7c>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b006      	add	sp, #24
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	fffffeff 	.word	0xfffffeff
 8005e00:	fffffdff 	.word	0xfffffdff

08005e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <TIM_OC4_SetConfig+0x7c>)
 8005e14:	401a      	ands	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <TIM_OC4_SetConfig+0x80>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <TIM_OC4_SetConfig+0x84>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <TIM_OC4_SetConfig+0x88>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	031b      	lsls	r3, r3, #12
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b006      	add	sp, #24
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	ffffefff 	.word	0xffffefff
 8005e84:	ffff8fff 	.word	0xffff8fff
 8005e88:	fffffcff 	.word	0xfffffcff
 8005e8c:	ffffdfff 	.word	0xffffdfff

08005e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	4393      	bics	r3, r2
 8005eaa:	001a      	movs	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	22f0      	movs	r2, #240	; 0xf0
 8005eba:	4393      	bics	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	220a      	movs	r2, #10
 8005ecc:	4393      	bics	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b006      	add	sp, #24
 8005eea:	bd80      	pop	{r7, pc}

08005eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	2210      	movs	r2, #16
 8005efe:	4393      	bics	r3, r2
 8005f00:	001a      	movs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <TIM_TI2_ConfigInputStage+0x60>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	22a0      	movs	r2, #160	; 0xa0
 8005f28:	4393      	bics	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b006      	add	sp, #24
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	ffff0fff 	.word	0xffff0fff

08005f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2270      	movs	r2, #112	; 0x70
 8005f64:	4393      	bics	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	2207      	movs	r2, #7
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	609a      	str	r2, [r3, #8]
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <TIM_ETR_SetConfig+0x3c>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b006      	add	sp, #24
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	ffff00ff 	.word	0xffff00ff

08005fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	221f      	movs	r2, #31
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	0013      	movs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	43d2      	mvns	r2, r2
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	211f      	movs	r1, #31
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4099      	lsls	r1, r3
 8005ffa:	000b      	movs	r3, r1
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b006      	add	sp, #24
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2238      	movs	r2, #56	; 0x38
 800601a:	5c9b      	ldrb	r3, [r3, r2]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e047      	b.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2238      	movs	r2, #56	; 0x38
 8006028:	2101      	movs	r1, #1
 800602a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2239      	movs	r2, #57	; 0x39
 8006030:	2102      	movs	r1, #2
 8006032:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2270      	movs	r2, #112	; 0x70
 8006048:	4393      	bics	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	05db      	lsls	r3, r3, #23
 8006066:	429a      	cmp	r2, r3
 8006068:	d00e      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a13      	ldr	r2, [pc, #76]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a10      	ldr	r2, [pc, #64]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10c      	bne.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	4393      	bics	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2239      	movs	r2, #57	; 0x39
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2238      	movs	r2, #56	; 0x38
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40010800 	.word	0x40010800
 80060c4:	40011400 	.word	0x40011400

080060c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2244      	movs	r2, #68	; 0x44
 80060d4:	2100      	movs	r1, #0
 80060d6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <USB_EnableGlobalInt+0x28>)
 80060da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	b299      	uxth	r1, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b004      	add	sp, #16
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	0000bf80 	.word	0x0000bf80

080060f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <USB_DisableGlobalInt+0x30>)
 80060fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	5a9b      	ldrh	r3, [r3, r2]
 8006106:	b29b      	uxth	r3, r3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	b292      	uxth	r2, r2
 800610c:	43d2      	mvns	r2, r2
 800610e:	b292      	uxth	r2, r2
 8006110:	4013      	ands	r3, r2
 8006112:	b299      	uxth	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b004      	add	sp, #16
 8006122:	bd80      	pop	{r7, pc}
 8006124:	0000bf80 	.word	0x0000bf80

08006128 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	2004      	movs	r0, #4
 8006134:	2410      	movs	r4, #16
 8006136:	1900      	adds	r0, r0, r4
 8006138:	2408      	movs	r4, #8
 800613a:	46a4      	mov	ip, r4
 800613c:	44bc      	add	ip, r7
 800613e:	4460      	add	r0, ip
 8006140:	6001      	str	r1, [r0, #0]
 8006142:	6042      	str	r2, [r0, #4]
 8006144:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2240      	movs	r2, #64	; 0x40
 800614a:	2101      	movs	r1, #1
 800614c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2240      	movs	r2, #64	; 0x40
 8006152:	2100      	movs	r1, #0
 8006154:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2244      	movs	r2, #68	; 0x44
 800615a:	2100      	movs	r1, #0
 800615c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2250      	movs	r2, #80	; 0x50
 8006162:	2100      	movs	r1, #0
 8006164:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b003      	add	sp, #12
 800616e:	bc90      	pop	{r4, r7}
 8006170:	bc08      	pop	{r3}
 8006172:	b004      	add	sp, #16
 8006174:	4718      	bx	r3
	...

08006178 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b09c      	sub	sp, #112	; 0x70
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006182:	236f      	movs	r3, #111	; 0x6f
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	236c      	movs	r3, #108	; 0x6c
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	49a3      	ldr	r1, [pc, #652]	; (800642c <USB_ActivateEndpoint+0x2b4>)
 800619e:	400a      	ands	r2, r1
 80061a0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d017      	beq.n	80061da <USB_ActivateEndpoint+0x62>
 80061aa:	dc28      	bgt.n	80061fe <USB_ActivateEndpoint+0x86>
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d00e      	beq.n	80061ce <USB_ActivateEndpoint+0x56>
 80061b0:	dc25      	bgt.n	80061fe <USB_ActivateEndpoint+0x86>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <USB_ActivateEndpoint+0x44>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d018      	beq.n	80061ec <USB_ActivateEndpoint+0x74>
 80061ba:	e020      	b.n	80061fe <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061bc:	226c      	movs	r2, #108	; 0x6c
 80061be:	18bb      	adds	r3, r7, r2
 80061c0:	18ba      	adds	r2, r7, r2
 80061c2:	8812      	ldrh	r2, [r2, #0]
 80061c4:	2180      	movs	r1, #128	; 0x80
 80061c6:	0089      	lsls	r1, r1, #2
 80061c8:	430a      	orrs	r2, r1
 80061ca:	801a      	strh	r2, [r3, #0]
      break;
 80061cc:	e01c      	b.n	8006208 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80061ce:	226c      	movs	r2, #108	; 0x6c
 80061d0:	18bb      	adds	r3, r7, r2
 80061d2:	18ba      	adds	r2, r7, r2
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	801a      	strh	r2, [r3, #0]
      break;
 80061d8:	e016      	b.n	8006208 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061da:	226c      	movs	r2, #108	; 0x6c
 80061dc:	18bb      	adds	r3, r7, r2
 80061de:	18ba      	adds	r2, r7, r2
 80061e0:	8812      	ldrh	r2, [r2, #0]
 80061e2:	21c0      	movs	r1, #192	; 0xc0
 80061e4:	00c9      	lsls	r1, r1, #3
 80061e6:	430a      	orrs	r2, r1
 80061e8:	801a      	strh	r2, [r3, #0]
      break;
 80061ea:	e00d      	b.n	8006208 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061ec:	226c      	movs	r2, #108	; 0x6c
 80061ee:	18bb      	adds	r3, r7, r2
 80061f0:	18ba      	adds	r2, r7, r2
 80061f2:	8812      	ldrh	r2, [r2, #0]
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	00c9      	lsls	r1, r1, #3
 80061f8:	430a      	orrs	r2, r1
 80061fa:	801a      	strh	r2, [r3, #0]
      break;
 80061fc:	e004      	b.n	8006208 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80061fe:	236f      	movs	r3, #111	; 0x6f
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
      break;
 8006206:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	18d3      	adds	r3, r2, r3
 8006212:	226c      	movs	r2, #108	; 0x6c
 8006214:	18ba      	adds	r2, r7, r2
 8006216:	8812      	ldrh	r2, [r2, #0]
 8006218:	4985      	ldr	r1, [pc, #532]	; (8006430 <USB_ActivateEndpoint+0x2b8>)
 800621a:	430a      	orrs	r2, r1
 800621c:	b292      	uxth	r2, r2
 800621e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	b21b      	sxth	r3, r3
 8006230:	4a80      	ldr	r2, [pc, #512]	; (8006434 <USB_ActivateEndpoint+0x2bc>)
 8006232:	4013      	ands	r3, r2
 8006234:	b21a      	sxth	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b21b      	sxth	r3, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	b21a      	sxth	r2, r3
 8006240:	2166      	movs	r1, #102	; 0x66
 8006242:	187b      	adds	r3, r7, r1
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	18d3      	adds	r3, r2, r3
 8006250:	187a      	adds	r2, r7, r1
 8006252:	8812      	ldrh	r2, [r2, #0]
 8006254:	4976      	ldr	r1, [pc, #472]	; (8006430 <USB_ActivateEndpoint+0x2b8>)
 8006256:	430a      	orrs	r2, r1
 8006258:	b292      	uxth	r2, r2
 800625a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	7b1b      	ldrb	r3, [r3, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d000      	beq.n	8006266 <USB_ActivateEndpoint+0xee>
 8006264:	e178      	b.n	8006558 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d100      	bne.n	8006270 <USB_ActivateEndpoint+0xf8>
 800626e:	e07a      	b.n	8006366 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2250      	movs	r2, #80	; 0x50
 8006278:	5a9b      	ldrh	r3, [r3, r2]
 800627a:	b29b      	uxth	r3, r3
 800627c:	001a      	movs	r2, r3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	189b      	adds	r3, r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00da      	lsls	r2, r3, #3
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	00d2      	lsls	r2, r2, #3
 8006292:	4694      	mov	ip, r2
 8006294:	4463      	add	r3, ip
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	88db      	ldrh	r3, [r3, #6]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	b29b      	uxth	r3, r3
 80062a0:	18db      	adds	r3, r3, r3
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	18d2      	adds	r2, r2, r3
 80062b2:	2112      	movs	r1, #18
 80062b4:	187b      	adds	r3, r7, r1
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	187b      	adds	r3, r7, r1
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	2240      	movs	r2, #64	; 0x40
 80062c0:	4013      	ands	r3, r2
 80062c2:	d016      	beq.n	80062f2 <USB_ActivateEndpoint+0x17a>
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	18d3      	adds	r3, r2, r3
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	2010      	movs	r0, #16
 80062d4:	183b      	adds	r3, r7, r0
 80062d6:	4957      	ldr	r1, [pc, #348]	; (8006434 <USB_ActivateEndpoint+0x2bc>)
 80062d8:	400a      	ands	r2, r1
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	183a      	adds	r2, r7, r0
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	4953      	ldr	r1, [pc, #332]	; (8006438 <USB_ActivateEndpoint+0x2c0>)
 80062ec:	430a      	orrs	r2, r1
 80062ee:	b292      	uxth	r2, r2
 80062f0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	78db      	ldrb	r3, [r3, #3]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d01d      	beq.n	8006336 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	200c      	movs	r0, #12
 800630a:	183b      	adds	r3, r7, r0
 800630c:	494b      	ldr	r1, [pc, #300]	; (800643c <USB_ActivateEndpoint+0x2c4>)
 800630e:	400a      	ands	r2, r1
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	183b      	adds	r3, r7, r0
 8006314:	183a      	adds	r2, r7, r0
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	2120      	movs	r1, #32
 800631a:	404a      	eors	r2, r1
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	18d3      	adds	r3, r2, r3
 8006328:	183a      	adds	r2, r7, r0
 800632a:	8812      	ldrh	r2, [r2, #0]
 800632c:	4940      	ldr	r1, [pc, #256]	; (8006430 <USB_ActivateEndpoint+0x2b8>)
 800632e:	430a      	orrs	r2, r1
 8006330:	b292      	uxth	r2, r2
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e2b4      	b.n	80068a0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29a      	uxth	r2, r3
 8006344:	200e      	movs	r0, #14
 8006346:	183b      	adds	r3, r7, r0
 8006348:	493c      	ldr	r1, [pc, #240]	; (800643c <USB_ActivateEndpoint+0x2c4>)
 800634a:	400a      	ands	r2, r1
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	18d3      	adds	r3, r2, r3
 8006358:	183a      	adds	r2, r7, r0
 800635a:	8812      	ldrh	r2, [r2, #0]
 800635c:	4934      	ldr	r1, [pc, #208]	; (8006430 <USB_ActivateEndpoint+0x2b8>)
 800635e:	430a      	orrs	r2, r1
 8006360:	b292      	uxth	r2, r2
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	e29c      	b.n	80068a0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	633b      	str	r3, [r7, #48]	; 0x30
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2250      	movs	r2, #80	; 0x50
 800636e:	5a9b      	ldrh	r3, [r3, r2]
 8006370:	b29b      	uxth	r3, r3
 8006372:	001a      	movs	r2, r3
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	189b      	adds	r3, r3, r2
 8006378:	633b      	str	r3, [r7, #48]	; 0x30
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00da      	lsls	r2, r3, #3
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	18d3      	adds	r3, r2, r3
 8006384:	4a2e      	ldr	r2, [pc, #184]	; (8006440 <USB_ActivateEndpoint+0x2c8>)
 8006386:	4694      	mov	ip, r2
 8006388:	4463      	add	r3, ip
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	88db      	ldrh	r3, [r3, #6]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	b29b      	uxth	r3, r3
 8006394:	18db      	adds	r3, r3, r3
 8006396:	b29a      	uxth	r2, r3
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2250      	movs	r2, #80	; 0x50
 80063a4:	5a9b      	ldrh	r3, [r3, r2]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	001a      	movs	r2, r3
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	189b      	adds	r3, r3, r2
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	00da      	lsls	r2, r3, #3
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	18d3      	adds	r3, r2, r3
 80063ba:	4a22      	ldr	r2, [pc, #136]	; (8006444 <USB_ActivateEndpoint+0x2cc>)
 80063bc:	4694      	mov	ip, r2
 80063be:	4463      	add	r3, ip
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	059b      	lsls	r3, r3, #22
 80063ca:	0d9b      	lsrs	r3, r3, #22
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b3e      	cmp	r3, #62	; 0x3e
 80063d8:	d91a      	bls.n	8006410 <USB_ActivateEndpoint+0x298>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	221f      	movs	r2, #31
 80063e8:	4013      	ands	r3, r2
 80063ea:	d102      	bne.n	80063f2 <USB_ActivateEndpoint+0x27a>
 80063ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ee:	3b01      	subs	r3, #1
 80063f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	b29b      	uxth	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	4a10      	ldr	r2, [pc, #64]	; (8006448 <USB_ActivateEndpoint+0x2d0>)
 8006406:	4313      	orrs	r3, r2
 8006408:	b29a      	uxth	r2, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e034      	b.n	800647a <USB_ActivateEndpoint+0x302>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d119      	bne.n	800644c <USB_ActivateEndpoint+0x2d4>
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <USB_ActivateEndpoint+0x2d0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	b29a      	uxth	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e027      	b.n	800647a <USB_ActivateEndpoint+0x302>
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	ffff898f 	.word	0xffff898f
 8006430:	ffff8080 	.word	0xffff8080
 8006434:	ffff8f8f 	.word	0xffff8f8f
 8006438:	ffff80c0 	.word	0xffff80c0
 800643c:	ffff8fbf 	.word	0xffff8fbf
 8006440:	00000404 	.word	0x00000404
 8006444:	00000406 	.word	0x00000406
 8006448:	ffff8000 	.word	0xffff8000
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	66bb      	str	r3, [r7, #104]	; 0x68
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2201      	movs	r2, #1
 800645a:	4013      	ands	r3, r2
 800645c:	d002      	beq.n	8006464 <USB_ActivateEndpoint+0x2ec>
 800645e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006460:	3301      	adds	r3, #1
 8006462:	66bb      	str	r3, [r7, #104]	; 0x68
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800646c:	b29b      	uxth	r3, r3
 800646e:	029b      	lsls	r3, r3, #10
 8006470:	b29b      	uxth	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	b29a      	uxth	r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	18d2      	adds	r2, r2, r3
 8006484:	2122      	movs	r1, #34	; 0x22
 8006486:	187b      	adds	r3, r7, r1
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	187b      	adds	r3, r7, r1
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	01db      	lsls	r3, r3, #7
 8006494:	4013      	ands	r3, r2
 8006496:	d016      	beq.n	80064c6 <USB_ActivateEndpoint+0x34e>
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	2020      	movs	r0, #32
 80064a8:	183b      	adds	r3, r7, r0
 80064aa:	49dd      	ldr	r1, [pc, #884]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 80064ac:	400a      	ands	r2, r1
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	18d3      	adds	r3, r2, r3
 80064ba:	183a      	adds	r2, r7, r0
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	49d9      	ldr	r1, [pc, #868]	; (8006824 <USB_ActivateEndpoint+0x6ac>)
 80064c0:	430a      	orrs	r2, r1
 80064c2:	b292      	uxth	r2, r2
 80064c4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d125      	bne.n	800651a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	18d3      	adds	r3, r2, r3
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	201c      	movs	r0, #28
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	49d1      	ldr	r1, [pc, #836]	; (8006828 <USB_ActivateEndpoint+0x6b0>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	183b      	adds	r3, r7, r0
 80064e8:	183a      	adds	r2, r7, r0
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	0149      	lsls	r1, r1, #5
 80064f0:	404a      	eors	r2, r1
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	183b      	adds	r3, r7, r0
 80064f6:	183a      	adds	r2, r7, r0
 80064f8:	8812      	ldrh	r2, [r2, #0]
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	0189      	lsls	r1, r1, #6
 80064fe:	404a      	eors	r2, r1
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	18d3      	adds	r3, r2, r3
 800650c:	183a      	adds	r2, r7, r0
 800650e:	8812      	ldrh	r2, [r2, #0]
 8006510:	49c6      	ldr	r1, [pc, #792]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 8006512:	430a      	orrs	r2, r1
 8006514:	b292      	uxth	r2, r2
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e1c2      	b.n	80068a0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29a      	uxth	r2, r3
 8006528:	201e      	movs	r0, #30
 800652a:	183b      	adds	r3, r7, r0
 800652c:	49be      	ldr	r1, [pc, #760]	; (8006828 <USB_ActivateEndpoint+0x6b0>)
 800652e:	400a      	ands	r2, r1
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	183b      	adds	r3, r7, r0
 8006534:	183a      	adds	r2, r7, r0
 8006536:	8812      	ldrh	r2, [r2, #0]
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	0189      	lsls	r1, r1, #6
 800653c:	404a      	eors	r2, r1
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	18d3      	adds	r3, r2, r3
 800654a:	183a      	adds	r2, r7, r0
 800654c:	8812      	ldrh	r2, [r2, #0]
 800654e:	49b7      	ldr	r1, [pc, #732]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 8006550:	430a      	orrs	r2, r1
 8006552:	b292      	uxth	r2, r2
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e1a3      	b.n	80068a0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d117      	bne.n	8006590 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	18d3      	adds	r3, r2, r3
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29a      	uxth	r2, r3
 800656e:	2062      	movs	r0, #98	; 0x62
 8006570:	183b      	adds	r3, r7, r0
 8006572:	49ab      	ldr	r1, [pc, #684]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 8006574:	400a      	ands	r2, r1
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	18d3      	adds	r3, r2, r3
 8006582:	183a      	adds	r2, r7, r0
 8006584:	8812      	ldrh	r2, [r2, #0]
 8006586:	49aa      	ldr	r1, [pc, #680]	; (8006830 <USB_ActivateEndpoint+0x6b8>)
 8006588:	430a      	orrs	r2, r1
 800658a:	b292      	uxth	r2, r2
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e016      	b.n	80065be <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	2064      	movs	r0, #100	; 0x64
 80065a0:	183b      	adds	r3, r7, r0
 80065a2:	49a4      	ldr	r1, [pc, #656]	; (8006834 <USB_ActivateEndpoint+0x6bc>)
 80065a4:	400a      	ands	r2, r1
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	183a      	adds	r2, r7, r0
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	499d      	ldr	r1, [pc, #628]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 80065b8:	430a      	orrs	r2, r1
 80065ba:	b292      	uxth	r2, r2
 80065bc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2250      	movs	r2, #80	; 0x50
 80065c6:	5a9b      	ldrh	r3, [r3, r2]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	001a      	movs	r2, r3
 80065cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	00da      	lsls	r2, r3, #3
 80065d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065da:	18d3      	adds	r3, r2, r3
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	00d2      	lsls	r2, r2, #3
 80065e0:	4694      	mov	ip, r2
 80065e2:	4463      	add	r3, ip
 80065e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	891b      	ldrh	r3, [r3, #8]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	18db      	adds	r3, r3, r3
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	657b      	str	r3, [r7, #84]	; 0x54
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2250      	movs	r2, #80	; 0x50
 80065fe:	5a9b      	ldrh	r3, [r3, r2]
 8006600:	b29b      	uxth	r3, r3
 8006602:	001a      	movs	r2, r3
 8006604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006606:	189b      	adds	r3, r3, r2
 8006608:	657b      	str	r3, [r7, #84]	; 0x54
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	00da      	lsls	r2, r3, #3
 8006610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006612:	18d3      	adds	r3, r2, r3
 8006614:	4a88      	ldr	r2, [pc, #544]	; (8006838 <USB_ActivateEndpoint+0x6c0>)
 8006616:	4694      	mov	ip, r2
 8006618:	4463      	add	r3, ip
 800661a:	653b      	str	r3, [r7, #80]	; 0x50
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	895b      	ldrh	r3, [r3, #10]
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	b29b      	uxth	r3, r3
 8006624:	18db      	adds	r3, r3, r3
 8006626:	b29a      	uxth	r2, r3
 8006628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d000      	beq.n	8006636 <USB_ActivateEndpoint+0x4be>
 8006634:	e087      	b.n	8006746 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	18d2      	adds	r2, r2, r3
 8006640:	2140      	movs	r1, #64	; 0x40
 8006642:	187b      	adds	r3, r7, r1
 8006644:	8812      	ldrh	r2, [r2, #0]
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	187b      	adds	r3, r7, r1
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	01db      	lsls	r3, r3, #7
 8006650:	4013      	ands	r3, r2
 8006652:	d016      	beq.n	8006682 <USB_ActivateEndpoint+0x50a>
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	18d3      	adds	r3, r2, r3
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29a      	uxth	r2, r3
 8006662:	203e      	movs	r0, #62	; 0x3e
 8006664:	183b      	adds	r3, r7, r0
 8006666:	496e      	ldr	r1, [pc, #440]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 8006668:	400a      	ands	r2, r1
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	183a      	adds	r2, r7, r0
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	496a      	ldr	r1, [pc, #424]	; (8006824 <USB_ActivateEndpoint+0x6ac>)
 800667c:	430a      	orrs	r2, r1
 800667e:	b292      	uxth	r2, r2
 8006680:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	18d2      	adds	r2, r2, r3
 800668c:	213c      	movs	r1, #60	; 0x3c
 800668e:	187b      	adds	r3, r7, r1
 8006690:	8812      	ldrh	r2, [r2, #0]
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	187b      	adds	r3, r7, r1
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	2240      	movs	r2, #64	; 0x40
 800669a:	4013      	ands	r3, r2
 800669c:	d016      	beq.n	80066cc <USB_ActivateEndpoint+0x554>
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	18d3      	adds	r3, r2, r3
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	203a      	movs	r0, #58	; 0x3a
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	495b      	ldr	r1, [pc, #364]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 80066b2:	400a      	ands	r2, r1
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	18d3      	adds	r3, r2, r3
 80066c0:	183a      	adds	r2, r7, r0
 80066c2:	8812      	ldrh	r2, [r2, #0]
 80066c4:	495d      	ldr	r1, [pc, #372]	; (800683c <USB_ActivateEndpoint+0x6c4>)
 80066c6:	430a      	orrs	r2, r1
 80066c8:	b292      	uxth	r2, r2
 80066ca:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	2038      	movs	r0, #56	; 0x38
 80066dc:	183b      	adds	r3, r7, r0
 80066de:	4952      	ldr	r1, [pc, #328]	; (8006828 <USB_ActivateEndpoint+0x6b0>)
 80066e0:	400a      	ands	r2, r1
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	183b      	adds	r3, r7, r0
 80066e6:	183a      	adds	r2, r7, r0
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	0149      	lsls	r1, r1, #5
 80066ee:	404a      	eors	r2, r1
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	183b      	adds	r3, r7, r0
 80066f4:	183a      	adds	r2, r7, r0
 80066f6:	8812      	ldrh	r2, [r2, #0]
 80066f8:	2180      	movs	r1, #128	; 0x80
 80066fa:	0189      	lsls	r1, r1, #6
 80066fc:	404a      	eors	r2, r1
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	18d3      	adds	r3, r2, r3
 800670a:	183a      	adds	r2, r7, r0
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	4947      	ldr	r1, [pc, #284]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 8006710:	430a      	orrs	r2, r1
 8006712:	b292      	uxth	r2, r2
 8006714:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	18d3      	adds	r3, r2, r3
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29a      	uxth	r2, r3
 8006724:	2036      	movs	r0, #54	; 0x36
 8006726:	183b      	adds	r3, r7, r0
 8006728:	4945      	ldr	r1, [pc, #276]	; (8006840 <USB_ActivateEndpoint+0x6c8>)
 800672a:	400a      	ands	r2, r1
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	18d3      	adds	r3, r2, r3
 8006738:	183a      	adds	r2, r7, r0
 800673a:	8812      	ldrh	r2, [r2, #0]
 800673c:	493b      	ldr	r1, [pc, #236]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 800673e:	430a      	orrs	r2, r1
 8006740:	b292      	uxth	r2, r2
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e0ac      	b.n	80068a0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	18d2      	adds	r2, r2, r3
 8006750:	214e      	movs	r1, #78	; 0x4e
 8006752:	187b      	adds	r3, r7, r1
 8006754:	8812      	ldrh	r2, [r2, #0]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	187b      	adds	r3, r7, r1
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	4013      	ands	r3, r2
 8006762:	d016      	beq.n	8006792 <USB_ActivateEndpoint+0x61a>
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	18d3      	adds	r3, r2, r3
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29a      	uxth	r2, r3
 8006772:	204c      	movs	r0, #76	; 0x4c
 8006774:	183b      	adds	r3, r7, r0
 8006776:	492a      	ldr	r1, [pc, #168]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 8006778:	400a      	ands	r2, r1
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	18d3      	adds	r3, r2, r3
 8006786:	183a      	adds	r2, r7, r0
 8006788:	8812      	ldrh	r2, [r2, #0]
 800678a:	4926      	ldr	r1, [pc, #152]	; (8006824 <USB_ActivateEndpoint+0x6ac>)
 800678c:	430a      	orrs	r2, r1
 800678e:	b292      	uxth	r2, r2
 8006790:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	18d2      	adds	r2, r2, r3
 800679c:	214a      	movs	r1, #74	; 0x4a
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	8812      	ldrh	r2, [r2, #0]
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	4013      	ands	r3, r2
 80067ac:	d016      	beq.n	80067dc <USB_ActivateEndpoint+0x664>
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	18d3      	adds	r3, r2, r3
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	2048      	movs	r0, #72	; 0x48
 80067be:	183b      	adds	r3, r7, r0
 80067c0:	4917      	ldr	r1, [pc, #92]	; (8006820 <USB_ActivateEndpoint+0x6a8>)
 80067c2:	400a      	ands	r2, r1
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	18d3      	adds	r3, r2, r3
 80067d0:	183a      	adds	r2, r7, r0
 80067d2:	8812      	ldrh	r2, [r2, #0]
 80067d4:	4919      	ldr	r1, [pc, #100]	; (800683c <USB_ActivateEndpoint+0x6c4>)
 80067d6:	430a      	orrs	r2, r1
 80067d8:	b292      	uxth	r2, r2
 80067da:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	78db      	ldrb	r3, [r3, #3]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d02f      	beq.n	8006844 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	18d3      	adds	r3, r2, r3
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	2044      	movs	r0, #68	; 0x44
 80067f4:	183b      	adds	r3, r7, r0
 80067f6:	4912      	ldr	r1, [pc, #72]	; (8006840 <USB_ActivateEndpoint+0x6c8>)
 80067f8:	400a      	ands	r2, r1
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	183b      	adds	r3, r7, r0
 80067fe:	183a      	adds	r2, r7, r0
 8006800:	8812      	ldrh	r2, [r2, #0]
 8006802:	2120      	movs	r1, #32
 8006804:	404a      	eors	r2, r1
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	18d3      	adds	r3, r2, r3
 8006812:	183a      	adds	r2, r7, r0
 8006814:	8812      	ldrh	r2, [r2, #0]
 8006816:	4905      	ldr	r1, [pc, #20]	; (800682c <USB_ActivateEndpoint+0x6b4>)
 8006818:	430a      	orrs	r2, r1
 800681a:	b292      	uxth	r2, r2
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	e028      	b.n	8006872 <USB_ActivateEndpoint+0x6fa>
 8006820:	ffff8f8f 	.word	0xffff8f8f
 8006824:	ffffc080 	.word	0xffffc080
 8006828:	ffffbf8f 	.word	0xffffbf8f
 800682c:	ffff8080 	.word	0xffff8080
 8006830:	ffff8180 	.word	0xffff8180
 8006834:	ffff8e8f 	.word	0xffff8e8f
 8006838:	00000404 	.word	0x00000404
 800683c:	ffff80c0 	.word	0xffff80c0
 8006840:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	18d3      	adds	r3, r2, r3
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29a      	uxth	r2, r3
 8006852:	2046      	movs	r0, #70	; 0x46
 8006854:	183b      	adds	r3, r7, r0
 8006856:	4916      	ldr	r1, [pc, #88]	; (80068b0 <USB_ActivateEndpoint+0x738>)
 8006858:	400a      	ands	r2, r1
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	18d3      	adds	r3, r2, r3
 8006866:	183a      	adds	r2, r7, r0
 8006868:	8812      	ldrh	r2, [r2, #0]
 800686a:	4912      	ldr	r1, [pc, #72]	; (80068b4 <USB_ActivateEndpoint+0x73c>)
 800686c:	430a      	orrs	r2, r1
 800686e:	b292      	uxth	r2, r2
 8006870:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	18d3      	adds	r3, r2, r3
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29a      	uxth	r2, r3
 8006880:	2042      	movs	r0, #66	; 0x42
 8006882:	183b      	adds	r3, r7, r0
 8006884:	490c      	ldr	r1, [pc, #48]	; (80068b8 <USB_ActivateEndpoint+0x740>)
 8006886:	400a      	ands	r2, r1
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	18d3      	adds	r3, r2, r3
 8006894:	183a      	adds	r2, r7, r0
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	4906      	ldr	r1, [pc, #24]	; (80068b4 <USB_ActivateEndpoint+0x73c>)
 800689a:	430a      	orrs	r2, r1
 800689c:	b292      	uxth	r2, r2
 800689e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80068a0:	236f      	movs	r3, #111	; 0x6f
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	781b      	ldrb	r3, [r3, #0]
}
 80068a6:	0018      	movs	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b01c      	add	sp, #112	; 0x70
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	ffff8fbf 	.word	0xffff8fbf
 80068b4:	ffff8080 	.word	0xffff8080
 80068b8:	ffffbf8f 	.word	0xffffbf8f

080068bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	; 0x30
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	7b1b      	ldrb	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d000      	beq.n	80068d0 <USB_DeactivateEndpoint+0x14>
 80068ce:	e07e      	b.n	80069ce <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d03c      	beq.n	8006952 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	18d2      	adds	r2, r2, r3
 80068e2:	210c      	movs	r1, #12
 80068e4:	187b      	adds	r3, r7, r1
 80068e6:	8812      	ldrh	r2, [r2, #0]
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	187b      	adds	r3, r7, r1
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	2240      	movs	r2, #64	; 0x40
 80068f0:	4013      	ands	r3, r2
 80068f2:	d016      	beq.n	8006922 <USB_DeactivateEndpoint+0x66>
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	18d3      	adds	r3, r2, r3
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29a      	uxth	r2, r3
 8006902:	200a      	movs	r0, #10
 8006904:	183b      	adds	r3, r7, r0
 8006906:	49c7      	ldr	r1, [pc, #796]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006908:	400a      	ands	r2, r1
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	18d3      	adds	r3, r2, r3
 8006916:	183a      	adds	r2, r7, r0
 8006918:	8812      	ldrh	r2, [r2, #0]
 800691a:	49c3      	ldr	r1, [pc, #780]	; (8006c28 <USB_DeactivateEndpoint+0x36c>)
 800691c:	430a      	orrs	r2, r1
 800691e:	b292      	uxth	r2, r2
 8006920:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	2008      	movs	r0, #8
 8006932:	183b      	adds	r3, r7, r0
 8006934:	49bd      	ldr	r1, [pc, #756]	; (8006c2c <USB_DeactivateEndpoint+0x370>)
 8006936:	400a      	ands	r2, r1
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	18d3      	adds	r3, r2, r3
 8006944:	183a      	adds	r2, r7, r0
 8006946:	8812      	ldrh	r2, [r2, #0]
 8006948:	49b9      	ldr	r1, [pc, #740]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 800694a:	430a      	orrs	r2, r1
 800694c:	b292      	uxth	r2, r2
 800694e:	801a      	strh	r2, [r3, #0]
 8006950:	e163      	b.n	8006c1a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	18d2      	adds	r2, r2, r3
 800695c:	2112      	movs	r1, #18
 800695e:	187b      	adds	r3, r7, r1
 8006960:	8812      	ldrh	r2, [r2, #0]
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	187b      	adds	r3, r7, r1
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	01db      	lsls	r3, r3, #7
 800696c:	4013      	ands	r3, r2
 800696e:	d016      	beq.n	800699e <USB_DeactivateEndpoint+0xe2>
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	18d3      	adds	r3, r2, r3
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29a      	uxth	r2, r3
 800697e:	2010      	movs	r0, #16
 8006980:	183b      	adds	r3, r7, r0
 8006982:	49a8      	ldr	r1, [pc, #672]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006984:	400a      	ands	r2, r1
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	18d3      	adds	r3, r2, r3
 8006992:	183a      	adds	r2, r7, r0
 8006994:	8812      	ldrh	r2, [r2, #0]
 8006996:	49a7      	ldr	r1, [pc, #668]	; (8006c34 <USB_DeactivateEndpoint+0x378>)
 8006998:	430a      	orrs	r2, r1
 800699a:	b292      	uxth	r2, r2
 800699c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	18d3      	adds	r3, r2, r3
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	200e      	movs	r0, #14
 80069ae:	183b      	adds	r3, r7, r0
 80069b0:	49a1      	ldr	r1, [pc, #644]	; (8006c38 <USB_DeactivateEndpoint+0x37c>)
 80069b2:	400a      	ands	r2, r1
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	183a      	adds	r2, r7, r0
 80069c2:	8812      	ldrh	r2, [r2, #0]
 80069c4:	499a      	ldr	r1, [pc, #616]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 80069c6:	430a      	orrs	r2, r1
 80069c8:	b292      	uxth	r2, r2
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	e125      	b.n	8006c1a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d000      	beq.n	80069d8 <USB_DeactivateEndpoint+0x11c>
 80069d6:	e090      	b.n	8006afa <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	18d2      	adds	r2, r2, r3
 80069e2:	2120      	movs	r1, #32
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	8812      	ldrh	r2, [r2, #0]
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	2380      	movs	r3, #128	; 0x80
 80069f0:	01db      	lsls	r3, r3, #7
 80069f2:	4013      	ands	r3, r2
 80069f4:	d016      	beq.n	8006a24 <USB_DeactivateEndpoint+0x168>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	201e      	movs	r0, #30
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	4986      	ldr	r1, [pc, #536]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006a0a:	400a      	ands	r2, r1
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	18d3      	adds	r3, r2, r3
 8006a18:	183a      	adds	r2, r7, r0
 8006a1a:	8812      	ldrh	r2, [r2, #0]
 8006a1c:	4985      	ldr	r1, [pc, #532]	; (8006c34 <USB_DeactivateEndpoint+0x378>)
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	b292      	uxth	r2, r2
 8006a22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	18d2      	adds	r2, r2, r3
 8006a2e:	211c      	movs	r1, #28
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	8812      	ldrh	r2, [r2, #0]
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d016      	beq.n	8006a6e <USB_DeactivateEndpoint+0x1b2>
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	18d3      	adds	r3, r2, r3
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	201a      	movs	r0, #26
 8006a50:	183b      	adds	r3, r7, r0
 8006a52:	4974      	ldr	r1, [pc, #464]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	18d3      	adds	r3, r2, r3
 8006a62:	183a      	adds	r2, r7, r0
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	4970      	ldr	r1, [pc, #448]	; (8006c28 <USB_DeactivateEndpoint+0x36c>)
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	18d3      	adds	r3, r2, r3
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	2018      	movs	r0, #24
 8006a7e:	183b      	adds	r3, r7, r0
 8006a80:	4968      	ldr	r1, [pc, #416]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006a82:	400a      	ands	r2, r1
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	18d3      	adds	r3, r2, r3
 8006a90:	183a      	adds	r2, r7, r0
 8006a92:	8812      	ldrh	r2, [r2, #0]
 8006a94:	4964      	ldr	r1, [pc, #400]	; (8006c28 <USB_DeactivateEndpoint+0x36c>)
 8006a96:	430a      	orrs	r2, r1
 8006a98:	b292      	uxth	r2, r2
 8006a9a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	18d3      	adds	r3, r2, r3
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	2016      	movs	r0, #22
 8006aac:	183b      	adds	r3, r7, r0
 8006aae:	4962      	ldr	r1, [pc, #392]	; (8006c38 <USB_DeactivateEndpoint+0x37c>)
 8006ab0:	400a      	ands	r2, r1
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	18d3      	adds	r3, r2, r3
 8006abe:	183a      	adds	r2, r7, r0
 8006ac0:	8812      	ldrh	r2, [r2, #0]
 8006ac2:	495b      	ldr	r1, [pc, #364]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	18d3      	adds	r3, r2, r3
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	2014      	movs	r0, #20
 8006ada:	183b      	adds	r3, r7, r0
 8006adc:	4953      	ldr	r1, [pc, #332]	; (8006c2c <USB_DeactivateEndpoint+0x370>)
 8006ade:	400a      	ands	r2, r1
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	18d3      	adds	r3, r2, r3
 8006aec:	183a      	adds	r2, r7, r0
 8006aee:	8812      	ldrh	r2, [r2, #0]
 8006af0:	494f      	ldr	r1, [pc, #316]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 8006af2:	430a      	orrs	r2, r1
 8006af4:	b292      	uxth	r2, r2
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e08f      	b.n	8006c1a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	18d2      	adds	r2, r2, r3
 8006b04:	212e      	movs	r1, #46	; 0x2e
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	8812      	ldrh	r2, [r2, #0]
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	187b      	adds	r3, r7, r1
 8006b0e:	881a      	ldrh	r2, [r3, #0]
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	01db      	lsls	r3, r3, #7
 8006b14:	4013      	ands	r3, r2
 8006b16:	d016      	beq.n	8006b46 <USB_DeactivateEndpoint+0x28a>
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	202c      	movs	r0, #44	; 0x2c
 8006b28:	183b      	adds	r3, r7, r0
 8006b2a:	493e      	ldr	r1, [pc, #248]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006b2c:	400a      	ands	r2, r1
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	18d3      	adds	r3, r2, r3
 8006b3a:	183a      	adds	r2, r7, r0
 8006b3c:	8812      	ldrh	r2, [r2, #0]
 8006b3e:	493d      	ldr	r1, [pc, #244]	; (8006c34 <USB_DeactivateEndpoint+0x378>)
 8006b40:	430a      	orrs	r2, r1
 8006b42:	b292      	uxth	r2, r2
 8006b44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	18d2      	adds	r2, r2, r3
 8006b50:	212a      	movs	r1, #42	; 0x2a
 8006b52:	187b      	adds	r3, r7, r1
 8006b54:	8812      	ldrh	r2, [r2, #0]
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	187b      	adds	r3, r7, r1
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	2240      	movs	r2, #64	; 0x40
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d016      	beq.n	8006b90 <USB_DeactivateEndpoint+0x2d4>
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	18d3      	adds	r3, r2, r3
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	2028      	movs	r0, #40	; 0x28
 8006b72:	183b      	adds	r3, r7, r0
 8006b74:	492b      	ldr	r1, [pc, #172]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	18d3      	adds	r3, r2, r3
 8006b84:	183a      	adds	r2, r7, r0
 8006b86:	8812      	ldrh	r2, [r2, #0]
 8006b88:	4927      	ldr	r1, [pc, #156]	; (8006c28 <USB_DeactivateEndpoint+0x36c>)
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	18d3      	adds	r3, r2, r3
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	2026      	movs	r0, #38	; 0x26
 8006ba0:	183b      	adds	r3, r7, r0
 8006ba2:	4920      	ldr	r1, [pc, #128]	; (8006c24 <USB_DeactivateEndpoint+0x368>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	18d3      	adds	r3, r2, r3
 8006bb2:	183a      	adds	r2, r7, r0
 8006bb4:	8812      	ldrh	r2, [r2, #0]
 8006bb6:	491f      	ldr	r1, [pc, #124]	; (8006c34 <USB_DeactivateEndpoint+0x378>)
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	18d3      	adds	r3, r2, r3
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	2024      	movs	r0, #36	; 0x24
 8006bce:	183b      	adds	r3, r7, r0
 8006bd0:	4916      	ldr	r1, [pc, #88]	; (8006c2c <USB_DeactivateEndpoint+0x370>)
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	18d3      	adds	r3, r2, r3
 8006be0:	183a      	adds	r2, r7, r0
 8006be2:	8812      	ldrh	r2, [r2, #0]
 8006be4:	4912      	ldr	r1, [pc, #72]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 8006be6:	430a      	orrs	r2, r1
 8006be8:	b292      	uxth	r2, r2
 8006bea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	18d3      	adds	r3, r2, r3
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	2022      	movs	r0, #34	; 0x22
 8006bfc:	183b      	adds	r3, r7, r0
 8006bfe:	490e      	ldr	r1, [pc, #56]	; (8006c38 <USB_DeactivateEndpoint+0x37c>)
 8006c00:	400a      	ands	r2, r1
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	18d3      	adds	r3, r2, r3
 8006c0e:	183a      	adds	r2, r7, r0
 8006c10:	8812      	ldrh	r2, [r2, #0]
 8006c12:	4907      	ldr	r1, [pc, #28]	; (8006c30 <USB_DeactivateEndpoint+0x374>)
 8006c14:	430a      	orrs	r2, r1
 8006c16:	b292      	uxth	r2, r2
 8006c18:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b00c      	add	sp, #48	; 0x30
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	ffff8f8f 	.word	0xffff8f8f
 8006c28:	ffff80c0 	.word	0xffff80c0
 8006c2c:	ffff8fbf 	.word	0xffff8fbf
 8006c30:	ffff8080 	.word	0xffff8080
 8006c34:	ffffc080 	.word	0xffffc080
 8006c38:	ffffbf8f 	.word	0xffffbf8f

08006c3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b0c3      	sub	sp, #268	; 0x10c
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <USB_EPStartXfer+0x16>
 8006c4e:	f000 fd2d 	bl	80076ac <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d905      	bls.n	8006c6a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	1d7a      	adds	r2, r7, #5
 8006c64:	32ff      	adds	r2, #255	; 0xff
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	e004      	b.n	8006c74 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	1d7a      	adds	r2, r7, #5
 8006c70:	32ff      	adds	r2, #255	; 0xff
 8006c72:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	7b1b      	ldrb	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d125      	bne.n	8006cc8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6959      	ldr	r1, [r3, #20]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88da      	ldrh	r2, [r3, #6]
 8006c84:	1d7b      	adds	r3, r7, #5
 8006c86:	33ff      	adds	r3, #255	; 0xff
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fa47 	bl	8008120 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2250      	movs	r2, #80	; 0x50
 8006c9a:	5a9b      	ldrh	r3, [r3, r2]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	189b      	adds	r3, r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00da      	lsls	r2, r3, #3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	18d3      	adds	r3, r2, r3
 8006cb0:	4ad7      	ldr	r2, [pc, #860]	; (8007010 <USB_EPStartXfer+0x3d4>)
 8006cb2:	4694      	mov	ip, r2
 8006cb4:	4463      	add	r3, ip
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	1d7b      	adds	r3, r7, #5
 8006cba:	33ff      	adds	r3, #255	; 0xff
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	f000 fccd 	bl	8007662 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	78db      	ldrb	r3, [r3, #3]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d000      	beq.n	8006cd2 <USB_EPStartXfer+0x96>
 8006cd0:	e362      	b.n	8007398 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d800      	bhi.n	8006ce0 <USB_EPStartXfer+0xa4>
 8006cde:	e309      	b.n	80072f4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	18d3      	adds	r3, r2, r3
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	2056      	movs	r0, #86	; 0x56
 8006cf0:	183b      	adds	r3, r7, r0
 8006cf2:	49c8      	ldr	r1, [pc, #800]	; (8007014 <USB_EPStartXfer+0x3d8>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	18d3      	adds	r3, r2, r3
 8006d02:	183a      	adds	r2, r7, r0
 8006d04:	8812      	ldrh	r2, [r2, #0]
 8006d06:	49c4      	ldr	r1, [pc, #784]	; (8007018 <USB_EPStartXfer+0x3dc>)
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	1d7b      	adds	r3, r7, #5
 8006d14:	33ff      	adds	r3, #255	; 0xff
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	1ad2      	subs	r2, r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	001a      	movs	r2, r3
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	4013      	ands	r3, r2
 8006d32:	d100      	bne.n	8006d36 <USB_EPStartXfer+0xfa>
 8006d34:	e176      	b.n	8007024 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d000      	beq.n	8006d44 <USB_EPStartXfer+0x108>
 8006d42:	e074      	b.n	8006e2e <USB_EPStartXfer+0x1f2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2250      	movs	r2, #80	; 0x50
 8006d4c:	5a9b      	ldrh	r3, [r3, r2]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	001a      	movs	r2, r3
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	00da      	lsls	r2, r3, #3
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	18d3      	adds	r3, r2, r3
 8006d62:	4aae      	ldr	r2, [pc, #696]	; (800701c <USB_EPStartXfer+0x3e0>)
 8006d64:	4694      	mov	ip, r2
 8006d66:	4463      	add	r3, ip
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	059b      	lsls	r3, r3, #22
 8006d72:	0d9b      	lsrs	r3, r3, #22
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	1d7b      	adds	r3, r7, #5
 8006d7c:	33ff      	adds	r3, #255	; 0xff
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b3e      	cmp	r3, #62	; 0x3e
 8006d82:	d924      	bls.n	8006dce <USB_EPStartXfer+0x192>
 8006d84:	1d7b      	adds	r3, r7, #5
 8006d86:	33ff      	adds	r3, #255	; 0xff
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	1c7a      	adds	r2, r7, #1
 8006d8e:	32ff      	adds	r2, #255	; 0xff
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	1d7b      	adds	r3, r7, #5
 8006d94:	33ff      	adds	r3, #255	; 0xff
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	221f      	movs	r2, #31
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d106      	bne.n	8006dac <USB_EPStartXfer+0x170>
 8006d9e:	1c7b      	adds	r3, r7, #1
 8006da0:	33ff      	adds	r3, #255	; 0xff
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	1c7a      	adds	r2, r7, #1
 8006da8:	32ff      	adds	r2, #255	; 0xff
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	1c7b      	adds	r3, r7, #1
 8006db4:	33ff      	adds	r3, #255	; 0xff
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	029b      	lsls	r3, r3, #10
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4a97      	ldr	r2, [pc, #604]	; (8007020 <USB_EPStartXfer+0x3e4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	e04a      	b.n	8006e64 <USB_EPStartXfer+0x228>
 8006dce:	1d7b      	adds	r3, r7, #5
 8006dd0:	33ff      	adds	r3, #255	; 0xff
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d108      	bne.n	8006dea <USB_EPStartXfer+0x1ae>
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4a90      	ldr	r2, [pc, #576]	; (8007020 <USB_EPStartXfer+0x3e4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	e03c      	b.n	8006e64 <USB_EPStartXfer+0x228>
 8006dea:	1d7b      	adds	r3, r7, #5
 8006dec:	33ff      	adds	r3, #255	; 0xff
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	1c7a      	adds	r2, r7, #1
 8006df4:	32ff      	adds	r2, #255	; 0xff
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	1d7b      	adds	r3, r7, #5
 8006dfa:	33ff      	adds	r3, #255	; 0xff
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4013      	ands	r3, r2
 8006e02:	d006      	beq.n	8006e12 <USB_EPStartXfer+0x1d6>
 8006e04:	1c7b      	adds	r3, r7, #1
 8006e06:	33ff      	adds	r3, #255	; 0xff
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	1c7a      	adds	r2, r7, #1
 8006e0e:	32ff      	adds	r2, #255	; 0xff
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	1c7b      	adds	r3, r7, #1
 8006e1a:	33ff      	adds	r3, #255	; 0xff
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	e01a      	b.n	8006e64 <USB_EPStartXfer+0x228>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d116      	bne.n	8006e64 <USB_EPStartXfer+0x228>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2250      	movs	r2, #80	; 0x50
 8006e3a:	5a9b      	ldrh	r3, [r3, r2]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	001a      	movs	r2, r3
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	00da      	lsls	r2, r3, #3
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	18d3      	adds	r3, r2, r3
 8006e50:	4a72      	ldr	r2, [pc, #456]	; (800701c <USB_EPStartXfer+0x3e0>)
 8006e52:	4694      	mov	ip, r2
 8006e54:	4463      	add	r3, ip
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e58:	1d7b      	adds	r3, r7, #5
 8006e5a:	33ff      	adds	r3, #255	; 0xff
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e64:	2076      	movs	r0, #118	; 0x76
 8006e66:	183b      	adds	r3, r7, r0
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	8952      	ldrh	r2, [r2, #10]
 8006e6c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6959      	ldr	r1, [r3, #20]
 8006e72:	1d7b      	adds	r3, r7, #5
 8006e74:	33ff      	adds	r3, #255	; 0xff
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	b29c      	uxth	r4, r3
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	0023      	movs	r3, r4
 8006e82:	f001 f94d 	bl	8008120 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	1d7b      	adds	r3, r7, #5
 8006e8c:	33ff      	adds	r3, #255	; 0xff
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	18d2      	adds	r2, r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d908      	bls.n	8006eb4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	1d7b      	adds	r3, r7, #5
 8006ea8:	33ff      	adds	r3, #255	; 0xff
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	621a      	str	r2, [r3, #32]
 8006eb2:	e007      	b.n	8006ec4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	1d7a      	adds	r2, r7, #5
 8006eba:	32ff      	adds	r2, #255	; 0xff
 8006ebc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d000      	beq.n	8006ece <USB_EPStartXfer+0x292>
 8006ecc:	e070      	b.n	8006fb0 <USB_EPStartXfer+0x374>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2250      	movs	r2, #80	; 0x50
 8006ed6:	5a9b      	ldrh	r3, [r3, r2]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	001a      	movs	r2, r3
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00da      	lsls	r2, r3, #3
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	18d3      	adds	r3, r2, r3
 8006eec:	4a48      	ldr	r2, [pc, #288]	; (8007010 <USB_EPStartXfer+0x3d4>)
 8006eee:	4694      	mov	ip, r2
 8006ef0:	4463      	add	r3, ip
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	059b      	lsls	r3, r3, #22
 8006efc:	0d9b      	lsrs	r3, r3, #22
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	1d7b      	adds	r3, r7, #5
 8006f06:	33ff      	adds	r3, #255	; 0xff
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0c:	d922      	bls.n	8006f54 <USB_EPStartXfer+0x318>
 8006f0e:	1d7b      	adds	r3, r7, #5
 8006f10:	33ff      	adds	r3, #255	; 0xff
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	21fc      	movs	r1, #252	; 0xfc
 8006f18:	187a      	adds	r2, r7, r1
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	1d7b      	adds	r3, r7, #5
 8006f1e:	33ff      	adds	r3, #255	; 0xff
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	221f      	movs	r2, #31
 8006f24:	4013      	ands	r3, r2
 8006f26:	d104      	bne.n	8006f32 <USB_EPStartXfer+0x2f6>
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	187a      	adds	r2, r7, r1
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	23fc      	movs	r3, #252	; 0xfc
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4a35      	ldr	r2, [pc, #212]	; (8007020 <USB_EPStartXfer+0x3e4>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e04a      	b.n	8006fea <USB_EPStartXfer+0x3ae>
 8006f54:	1d7b      	adds	r3, r7, #5
 8006f56:	33ff      	adds	r3, #255	; 0xff
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d108      	bne.n	8006f70 <USB_EPStartXfer+0x334>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	4a2e      	ldr	r2, [pc, #184]	; (8007020 <USB_EPStartXfer+0x3e4>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e03c      	b.n	8006fea <USB_EPStartXfer+0x3ae>
 8006f70:	1d7b      	adds	r3, r7, #5
 8006f72:	33ff      	adds	r3, #255	; 0xff
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	21fc      	movs	r1, #252	; 0xfc
 8006f7a:	187a      	adds	r2, r7, r1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	1d7b      	adds	r3, r7, #5
 8006f80:	33ff      	adds	r3, #255	; 0xff
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	4013      	ands	r3, r2
 8006f88:	d004      	beq.n	8006f94 <USB_EPStartXfer+0x358>
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	187a      	adds	r2, r7, r1
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	23fc      	movs	r3, #252	; 0xfc
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e01c      	b.n	8006fea <USB_EPStartXfer+0x3ae>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d118      	bne.n	8006fea <USB_EPStartXfer+0x3ae>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2250      	movs	r2, #80	; 0x50
 8006fc0:	5a9b      	ldrh	r3, [r3, r2]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	189b      	adds	r3, r3, r2
 8006fca:	623b      	str	r3, [r7, #32]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	00da      	lsls	r2, r3, #3
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	18d3      	adds	r3, r2, r3
 8006fd6:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <USB_EPStartXfer+0x3d4>)
 8006fd8:	4694      	mov	ip, r2
 8006fda:	4463      	add	r3, ip
 8006fdc:	61fb      	str	r3, [r7, #28]
 8006fde:	1d7b      	adds	r3, r7, #5
 8006fe0:	33ff      	adds	r3, #255	; 0xff
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fea:	2076      	movs	r0, #118	; 0x76
 8006fec:	183b      	adds	r3, r7, r0
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	8912      	ldrh	r2, [r2, #8]
 8006ff2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6959      	ldr	r1, [r3, #20]
 8006ff8:	1d7b      	adds	r3, r7, #5
 8006ffa:	33ff      	adds	r3, #255	; 0xff
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	b29c      	uxth	r4, r3
 8007000:	183b      	adds	r3, r7, r0
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	0023      	movs	r3, r4
 8007008:	f001 f88a 	bl	8008120 <USB_WritePMA>
 800700c:	e329      	b.n	8007662 <USB_EPStartXfer+0xa26>
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	00000402 	.word	0x00000402
 8007014:	ffff8f8f 	.word	0xffff8f8f
 8007018:	ffff8180 	.word	0xffff8180
 800701c:	00000406 	.word	0x00000406
 8007020:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d000      	beq.n	800702e <USB_EPStartXfer+0x3f2>
 800702c:	e070      	b.n	8007110 <USB_EPStartXfer+0x4d4>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	64bb      	str	r3, [r7, #72]	; 0x48
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2250      	movs	r2, #80	; 0x50
 8007036:	5a9b      	ldrh	r3, [r3, r2]
 8007038:	b29b      	uxth	r3, r3
 800703a:	001a      	movs	r2, r3
 800703c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703e:	189b      	adds	r3, r3, r2
 8007040:	64bb      	str	r3, [r7, #72]	; 0x48
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00da      	lsls	r2, r3, #3
 8007048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704a:	18d3      	adds	r3, r2, r3
 800704c:	4acd      	ldr	r2, [pc, #820]	; (8007384 <USB_EPStartXfer+0x748>)
 800704e:	4694      	mov	ip, r2
 8007050:	4463      	add	r3, ip
 8007052:	647b      	str	r3, [r7, #68]	; 0x44
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	059b      	lsls	r3, r3, #22
 800705c:	0d9b      	lsrs	r3, r3, #22
 800705e:	b29a      	uxth	r2, r3
 8007060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	1d7b      	adds	r3, r7, #5
 8007066:	33ff      	adds	r3, #255	; 0xff
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b3e      	cmp	r3, #62	; 0x3e
 800706c:	d922      	bls.n	80070b4 <USB_EPStartXfer+0x478>
 800706e:	1d7b      	adds	r3, r7, #5
 8007070:	33ff      	adds	r3, #255	; 0xff
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	21f8      	movs	r1, #248	; 0xf8
 8007078:	187a      	adds	r2, r7, r1
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	1d7b      	adds	r3, r7, #5
 800707e:	33ff      	adds	r3, #255	; 0xff
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	221f      	movs	r2, #31
 8007084:	4013      	ands	r3, r2
 8007086:	d104      	bne.n	8007092 <USB_EPStartXfer+0x456>
 8007088:	187b      	adds	r3, r7, r1
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	187a      	adds	r2, r7, r1
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29a      	uxth	r2, r3
 8007098:	23f8      	movs	r3, #248	; 0xf8
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	029b      	lsls	r3, r3, #10
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4ab7      	ldr	r2, [pc, #732]	; (8007388 <USB_EPStartXfer+0x74c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e04a      	b.n	800714a <USB_EPStartXfer+0x50e>
 80070b4:	1d7b      	adds	r3, r7, #5
 80070b6:	33ff      	adds	r3, #255	; 0xff
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <USB_EPStartXfer+0x494>
 80070be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	4ab0      	ldr	r2, [pc, #704]	; (8007388 <USB_EPStartXfer+0x74c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e03c      	b.n	800714a <USB_EPStartXfer+0x50e>
 80070d0:	1d7b      	adds	r3, r7, #5
 80070d2:	33ff      	adds	r3, #255	; 0xff
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	21f8      	movs	r1, #248	; 0xf8
 80070da:	187a      	adds	r2, r7, r1
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	1d7b      	adds	r3, r7, #5
 80070e0:	33ff      	adds	r3, #255	; 0xff
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	4013      	ands	r3, r2
 80070e8:	d004      	beq.n	80070f4 <USB_EPStartXfer+0x4b8>
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	187a      	adds	r2, r7, r1
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	23f8      	movs	r3, #248	; 0xf8
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b29a      	uxth	r2, r3
 800710a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	e01c      	b.n	800714a <USB_EPStartXfer+0x50e>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d118      	bne.n	800714a <USB_EPStartXfer+0x50e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	653b      	str	r3, [r7, #80]	; 0x50
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2250      	movs	r2, #80	; 0x50
 8007120:	5a9b      	ldrh	r3, [r3, r2]
 8007122:	b29b      	uxth	r3, r3
 8007124:	001a      	movs	r2, r3
 8007126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007128:	189b      	adds	r3, r3, r2
 800712a:	653b      	str	r3, [r7, #80]	; 0x50
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	00da      	lsls	r2, r3, #3
 8007132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007134:	18d3      	adds	r3, r2, r3
 8007136:	4a93      	ldr	r2, [pc, #588]	; (8007384 <USB_EPStartXfer+0x748>)
 8007138:	4694      	mov	ip, r2
 800713a:	4463      	add	r3, ip
 800713c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713e:	1d7b      	adds	r3, r7, #5
 8007140:	33ff      	adds	r3, #255	; 0xff
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b29a      	uxth	r2, r3
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800714a:	2076      	movs	r0, #118	; 0x76
 800714c:	183b      	adds	r3, r7, r0
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	8912      	ldrh	r2, [r2, #8]
 8007152:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	6959      	ldr	r1, [r3, #20]
 8007158:	1d7b      	adds	r3, r7, #5
 800715a:	33ff      	adds	r3, #255	; 0xff
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	b29c      	uxth	r4, r3
 8007160:	183b      	adds	r3, r7, r0
 8007162:	881a      	ldrh	r2, [r3, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	0023      	movs	r3, r4
 8007168:	f000 ffda 	bl	8008120 <USB_WritePMA>
            ep->xfer_buff += len;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	1d7b      	adds	r3, r7, #5
 8007172:	33ff      	adds	r3, #255	; 0xff
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	18d2      	adds	r2, r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6a1a      	ldr	r2, [r3, #32]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	429a      	cmp	r2, r3
 8007186:	d908      	bls.n	800719a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6a1a      	ldr	r2, [r3, #32]
 800718c:	1d7b      	adds	r3, r7, #5
 800718e:	33ff      	adds	r3, #255	; 0xff
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	621a      	str	r2, [r3, #32]
 8007198:	e007      	b.n	80071aa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	1d7a      	adds	r2, r7, #5
 80071a0:	32ff      	adds	r2, #255	; 0xff
 80071a2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2200      	movs	r2, #0
 80071a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	643b      	str	r3, [r7, #64]	; 0x40
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d000      	beq.n	80071b8 <USB_EPStartXfer+0x57c>
 80071b6:	e070      	b.n	800729a <USB_EPStartXfer+0x65e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2250      	movs	r2, #80	; 0x50
 80071c0:	5a9b      	ldrh	r3, [r3, r2]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	001a      	movs	r2, r3
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	189b      	adds	r3, r3, r2
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	00da      	lsls	r2, r3, #3
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	18d3      	adds	r3, r2, r3
 80071d6:	4a6d      	ldr	r2, [pc, #436]	; (800738c <USB_EPStartXfer+0x750>)
 80071d8:	4694      	mov	ip, r2
 80071da:	4463      	add	r3, ip
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	059b      	lsls	r3, r3, #22
 80071e6:	0d9b      	lsrs	r3, r3, #22
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	1d7b      	adds	r3, r7, #5
 80071f0:	33ff      	adds	r3, #255	; 0xff
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b3e      	cmp	r3, #62	; 0x3e
 80071f6:	d922      	bls.n	800723e <USB_EPStartXfer+0x602>
 80071f8:	1d7b      	adds	r3, r7, #5
 80071fa:	33ff      	adds	r3, #255	; 0xff
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	21f4      	movs	r1, #244	; 0xf4
 8007202:	187a      	adds	r2, r7, r1
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	1d7b      	adds	r3, r7, #5
 8007208:	33ff      	adds	r3, #255	; 0xff
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	221f      	movs	r2, #31
 800720e:	4013      	ands	r3, r2
 8007210:	d104      	bne.n	800721c <USB_EPStartXfer+0x5e0>
 8007212:	187b      	adds	r3, r7, r1
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3b01      	subs	r3, #1
 8007218:	187a      	adds	r2, r7, r1
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	23f4      	movs	r3, #244	; 0xf4
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	029b      	lsls	r3, r3, #10
 800722c:	b29b      	uxth	r3, r3
 800722e:	4313      	orrs	r3, r2
 8007230:	b29b      	uxth	r3, r3
 8007232:	4a55      	ldr	r2, [pc, #340]	; (8007388 <USB_EPStartXfer+0x74c>)
 8007234:	4313      	orrs	r3, r2
 8007236:	b29a      	uxth	r2, r3
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e048      	b.n	80072d0 <USB_EPStartXfer+0x694>
 800723e:	1d7b      	adds	r3, r7, #5
 8007240:	33ff      	adds	r3, #255	; 0xff
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d108      	bne.n	800725a <USB_EPStartXfer+0x61e>
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	4a4e      	ldr	r2, [pc, #312]	; (8007388 <USB_EPStartXfer+0x74c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	b29a      	uxth	r2, r3
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	e03a      	b.n	80072d0 <USB_EPStartXfer+0x694>
 800725a:	1d7b      	adds	r3, r7, #5
 800725c:	33ff      	adds	r3, #255	; 0xff
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	21f4      	movs	r1, #244	; 0xf4
 8007264:	187a      	adds	r2, r7, r1
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	1d7b      	adds	r3, r7, #5
 800726a:	33ff      	adds	r3, #255	; 0xff
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	4013      	ands	r3, r2
 8007272:	d004      	beq.n	800727e <USB_EPStartXfer+0x642>
 8007274:	187b      	adds	r3, r7, r1
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	187a      	adds	r2, r7, r1
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	23f4      	movs	r3, #244	; 0xf4
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	b29b      	uxth	r3, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e01a      	b.n	80072d0 <USB_EPStartXfer+0x694>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d116      	bne.n	80072d0 <USB_EPStartXfer+0x694>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2250      	movs	r2, #80	; 0x50
 80072a6:	5a9b      	ldrh	r3, [r3, r2]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	001a      	movs	r2, r3
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	00da      	lsls	r2, r3, #3
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	18d3      	adds	r3, r2, r3
 80072bc:	4a33      	ldr	r2, [pc, #204]	; (800738c <USB_EPStartXfer+0x750>)
 80072be:	4694      	mov	ip, r2
 80072c0:	4463      	add	r3, ip
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c4:	1d7b      	adds	r3, r7, #5
 80072c6:	33ff      	adds	r3, #255	; 0xff
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072d0:	2076      	movs	r0, #118	; 0x76
 80072d2:	183b      	adds	r3, r7, r0
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	8952      	ldrh	r2, [r2, #10]
 80072d8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6959      	ldr	r1, [r3, #20]
 80072de:	1d7b      	adds	r3, r7, #5
 80072e0:	33ff      	adds	r3, #255	; 0xff
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	b29c      	uxth	r4, r3
 80072e6:	183b      	adds	r3, r7, r0
 80072e8:	881a      	ldrh	r2, [r3, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	0023      	movs	r3, r4
 80072ee:	f000 ff17 	bl	8008120 <USB_WritePMA>
 80072f2:	e1b6      	b.n	8007662 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	1d7a      	adds	r2, r7, #5
 80072fa:	32ff      	adds	r2, #255	; 0xff
 80072fc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	18d3      	adds	r3, r2, r3
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29a      	uxth	r2, r3
 800730c:	2062      	movs	r0, #98	; 0x62
 800730e:	183b      	adds	r3, r7, r0
 8007310:	491f      	ldr	r1, [pc, #124]	; (8007390 <USB_EPStartXfer+0x754>)
 8007312:	400a      	ands	r2, r1
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	18d3      	adds	r3, r2, r3
 8007320:	183a      	adds	r2, r7, r0
 8007322:	8812      	ldrh	r2, [r2, #0]
 8007324:	491b      	ldr	r1, [pc, #108]	; (8007394 <USB_EPStartXfer+0x758>)
 8007326:	430a      	orrs	r2, r1
 8007328:	b292      	uxth	r2, r2
 800732a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2250      	movs	r2, #80	; 0x50
 8007334:	5a9b      	ldrh	r3, [r3, r2]
 8007336:	b29b      	uxth	r3, r3
 8007338:	001a      	movs	r2, r3
 800733a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733c:	189b      	adds	r3, r3, r2
 800733e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	00da      	lsls	r2, r3, #3
 8007346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007348:	18d3      	adds	r3, r2, r3
 800734a:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <USB_EPStartXfer+0x748>)
 800734c:	4694      	mov	ip, r2
 800734e:	4463      	add	r3, ip
 8007350:	65bb      	str	r3, [r7, #88]	; 0x58
 8007352:	1d7b      	adds	r3, r7, #5
 8007354:	33ff      	adds	r3, #255	; 0xff
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	b29a      	uxth	r2, r3
 800735a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800735c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800735e:	2076      	movs	r0, #118	; 0x76
 8007360:	183b      	adds	r3, r7, r0
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	8912      	ldrh	r2, [r2, #8]
 8007366:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6959      	ldr	r1, [r3, #20]
 800736c:	1d7b      	adds	r3, r7, #5
 800736e:	33ff      	adds	r3, #255	; 0xff
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b29c      	uxth	r4, r3
 8007374:	183b      	adds	r3, r7, r0
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	0023      	movs	r3, r4
 800737c:	f000 fed0 	bl	8008120 <USB_WritePMA>
 8007380:	e16f      	b.n	8007662 <USB_EPStartXfer+0xa26>
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	00000402 	.word	0x00000402
 8007388:	ffff8000 	.word	0xffff8000
 800738c:	00000406 	.word	0x00000406
 8007390:	ffff8e8f 	.word	0xffff8e8f
 8007394:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	1d7b      	adds	r3, r7, #5
 800739e:	33ff      	adds	r3, #255	; 0xff
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	18d3      	adds	r3, r2, r3
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	001a      	movs	r2, r3
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	4013      	ands	r3, r2
 80073bc:	d100      	bne.n	80073c0 <USB_EPStartXfer+0x784>
 80073be:	e0a4      	b.n	800750a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	673b      	str	r3, [r7, #112]	; 0x70
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d000      	beq.n	80073ce <USB_EPStartXfer+0x792>
 80073cc:	e070      	b.n	80074b0 <USB_EPStartXfer+0x874>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2250      	movs	r2, #80	; 0x50
 80073d6:	5a9b      	ldrh	r3, [r3, r2]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	001a      	movs	r2, r3
 80073dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	00da      	lsls	r2, r3, #3
 80073e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ea:	18d3      	adds	r3, r2, r3
 80073ec:	4abc      	ldr	r2, [pc, #752]	; (80076e0 <USB_EPStartXfer+0xaa4>)
 80073ee:	4694      	mov	ip, r2
 80073f0:	4463      	add	r3, ip
 80073f2:	667b      	str	r3, [r7, #100]	; 0x64
 80073f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	059b      	lsls	r3, r3, #22
 80073fc:	0d9b      	lsrs	r3, r3, #22
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	1d7b      	adds	r3, r7, #5
 8007406:	33ff      	adds	r3, #255	; 0xff
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b3e      	cmp	r3, #62	; 0x3e
 800740c:	d922      	bls.n	8007454 <USB_EPStartXfer+0x818>
 800740e:	1d7b      	adds	r3, r7, #5
 8007410:	33ff      	adds	r3, #255	; 0xff
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	21f0      	movs	r1, #240	; 0xf0
 8007418:	187a      	adds	r2, r7, r1
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	1d7b      	adds	r3, r7, #5
 800741e:	33ff      	adds	r3, #255	; 0xff
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	221f      	movs	r2, #31
 8007424:	4013      	ands	r3, r2
 8007426:	d104      	bne.n	8007432 <USB_EPStartXfer+0x7f6>
 8007428:	187b      	adds	r3, r7, r1
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3b01      	subs	r3, #1
 800742e:	187a      	adds	r2, r7, r1
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	23f0      	movs	r3, #240	; 0xf0
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29b      	uxth	r3, r3
 8007448:	4aa6      	ldr	r2, [pc, #664]	; (80076e4 <USB_EPStartXfer+0xaa8>)
 800744a:	4313      	orrs	r3, r2
 800744c:	b29a      	uxth	r2, r3
 800744e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	e048      	b.n	80074e6 <USB_EPStartXfer+0x8aa>
 8007454:	1d7b      	adds	r3, r7, #5
 8007456:	33ff      	adds	r3, #255	; 0xff
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <USB_EPStartXfer+0x834>
 800745e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	4a9f      	ldr	r2, [pc, #636]	; (80076e4 <USB_EPStartXfer+0xaa8>)
 8007466:	4313      	orrs	r3, r2
 8007468:	b29a      	uxth	r2, r3
 800746a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e03a      	b.n	80074e6 <USB_EPStartXfer+0x8aa>
 8007470:	1d7b      	adds	r3, r7, #5
 8007472:	33ff      	adds	r3, #255	; 0xff
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	21f0      	movs	r1, #240	; 0xf0
 800747a:	187a      	adds	r2, r7, r1
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	1d7b      	adds	r3, r7, #5
 8007480:	33ff      	adds	r3, #255	; 0xff
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	4013      	ands	r3, r2
 8007488:	d004      	beq.n	8007494 <USB_EPStartXfer+0x858>
 800748a:	187b      	adds	r3, r7, r1
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	187a      	adds	r2, r7, r1
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29a      	uxth	r2, r3
 800749a:	23f0      	movs	r3, #240	; 0xf0
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	029b      	lsls	r3, r3, #10
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	e01a      	b.n	80074e6 <USB_EPStartXfer+0x8aa>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d116      	bne.n	80074e6 <USB_EPStartXfer+0x8aa>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2250      	movs	r2, #80	; 0x50
 80074bc:	5a9b      	ldrh	r3, [r3, r2]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	001a      	movs	r2, r3
 80074c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c4:	189b      	adds	r3, r3, r2
 80074c6:	673b      	str	r3, [r7, #112]	; 0x70
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	00da      	lsls	r2, r3, #3
 80074ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074d0:	18d3      	adds	r3, r2, r3
 80074d2:	4a83      	ldr	r2, [pc, #524]	; (80076e0 <USB_EPStartXfer+0xaa4>)
 80074d4:	4694      	mov	ip, r2
 80074d6:	4463      	add	r3, ip
 80074d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074da:	1d7b      	adds	r3, r7, #5
 80074dc:	33ff      	adds	r3, #255	; 0xff
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80074e6:	2076      	movs	r0, #118	; 0x76
 80074e8:	183b      	adds	r3, r7, r0
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	8952      	ldrh	r2, [r2, #10]
 80074ee:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	6959      	ldr	r1, [r3, #20]
 80074f4:	1d7b      	adds	r3, r7, #5
 80074f6:	33ff      	adds	r3, #255	; 0xff
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	b29c      	uxth	r4, r3
 80074fc:	183b      	adds	r3, r7, r0
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	0023      	movs	r3, r4
 8007504:	f000 fe0c 	bl	8008120 <USB_WritePMA>
 8007508:	e0ab      	b.n	8007662 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d000      	beq.n	8007514 <USB_EPStartXfer+0x8d8>
 8007512:	e070      	b.n	80075f6 <USB_EPStartXfer+0x9ba>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2250      	movs	r2, #80	; 0x50
 800751c:	5a9b      	ldrh	r3, [r3, r2]
 800751e:	b29b      	uxth	r3, r3
 8007520:	001a      	movs	r2, r3
 8007522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007524:	189b      	adds	r3, r3, r2
 8007526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00da      	lsls	r2, r3, #3
 800752e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007530:	18d3      	adds	r3, r2, r3
 8007532:	4a6d      	ldr	r2, [pc, #436]	; (80076e8 <USB_EPStartXfer+0xaac>)
 8007534:	4694      	mov	ip, r2
 8007536:	4463      	add	r3, ip
 8007538:	67bb      	str	r3, [r7, #120]	; 0x78
 800753a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	059b      	lsls	r3, r3, #22
 8007542:	0d9b      	lsrs	r3, r3, #22
 8007544:	b29a      	uxth	r2, r3
 8007546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	1d7b      	adds	r3, r7, #5
 800754c:	33ff      	adds	r3, #255	; 0xff
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b3e      	cmp	r3, #62	; 0x3e
 8007552:	d922      	bls.n	800759a <USB_EPStartXfer+0x95e>
 8007554:	1d7b      	adds	r3, r7, #5
 8007556:	33ff      	adds	r3, #255	; 0xff
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	21ec      	movs	r1, #236	; 0xec
 800755e:	187a      	adds	r2, r7, r1
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	1d7b      	adds	r3, r7, #5
 8007564:	33ff      	adds	r3, #255	; 0xff
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	221f      	movs	r2, #31
 800756a:	4013      	ands	r3, r2
 800756c:	d104      	bne.n	8007578 <USB_EPStartXfer+0x93c>
 800756e:	187b      	adds	r3, r7, r1
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	187a      	adds	r2, r7, r1
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29a      	uxth	r2, r3
 800757e:	23ec      	movs	r3, #236	; 0xec
 8007580:	18fb      	adds	r3, r7, r3
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	029b      	lsls	r3, r3, #10
 8007588:	b29b      	uxth	r3, r3
 800758a:	4313      	orrs	r3, r2
 800758c:	b29b      	uxth	r3, r3
 800758e:	4a55      	ldr	r2, [pc, #340]	; (80076e4 <USB_EPStartXfer+0xaa8>)
 8007590:	4313      	orrs	r3, r2
 8007592:	b29a      	uxth	r2, r3
 8007594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	e052      	b.n	8007640 <USB_EPStartXfer+0xa04>
 800759a:	1d7b      	adds	r3, r7, #5
 800759c:	33ff      	adds	r3, #255	; 0xff
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d108      	bne.n	80075b6 <USB_EPStartXfer+0x97a>
 80075a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4a4e      	ldr	r2, [pc, #312]	; (80076e4 <USB_EPStartXfer+0xaa8>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e044      	b.n	8007640 <USB_EPStartXfer+0xa04>
 80075b6:	1d7b      	adds	r3, r7, #5
 80075b8:	33ff      	adds	r3, #255	; 0xff
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	085b      	lsrs	r3, r3, #1
 80075be:	21ec      	movs	r1, #236	; 0xec
 80075c0:	187a      	adds	r2, r7, r1
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	1d7b      	adds	r3, r7, #5
 80075c6:	33ff      	adds	r3, #255	; 0xff
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2201      	movs	r2, #1
 80075cc:	4013      	ands	r3, r2
 80075ce:	d004      	beq.n	80075da <USB_EPStartXfer+0x99e>
 80075d0:	187b      	adds	r3, r7, r1
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	187a      	adds	r2, r7, r1
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	23ec      	movs	r3, #236	; 0xec
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4313      	orrs	r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e024      	b.n	8007640 <USB_EPStartXfer+0xa04>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d120      	bne.n	8007640 <USB_EPStartXfer+0xa04>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2184      	movs	r1, #132	; 0x84
 8007602:	187a      	adds	r2, r7, r1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2250      	movs	r2, #80	; 0x50
 800760a:	5a9b      	ldrh	r3, [r3, r2]
 800760c:	b29b      	uxth	r3, r3
 800760e:	001a      	movs	r2, r3
 8007610:	187b      	adds	r3, r7, r1
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	189b      	adds	r3, r3, r2
 8007616:	187a      	adds	r2, r7, r1
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	187b      	adds	r3, r7, r1
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	18d3      	adds	r3, r2, r3
 8007626:	4a30      	ldr	r2, [pc, #192]	; (80076e8 <USB_EPStartXfer+0xaac>)
 8007628:	4694      	mov	ip, r2
 800762a:	4463      	add	r3, ip
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	187a      	adds	r2, r7, r1
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	1d7b      	adds	r3, r7, #5
 8007634:	33ff      	adds	r3, #255	; 0xff
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b29a      	uxth	r2, r3
 800763a:	187b      	adds	r3, r7, r1
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007640:	2076      	movs	r0, #118	; 0x76
 8007642:	183b      	adds	r3, r7, r0
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	8912      	ldrh	r2, [r2, #8]
 8007648:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6959      	ldr	r1, [r3, #20]
 800764e:	1d7b      	adds	r3, r7, #5
 8007650:	33ff      	adds	r3, #255	; 0xff
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	b29c      	uxth	r4, r3
 8007656:	183b      	adds	r3, r7, r0
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	0023      	movs	r3, r4
 800765e:	f000 fd5f 	bl	8008120 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	200a      	movs	r0, #10
 8007672:	183b      	adds	r3, r7, r0
 8007674:	491d      	ldr	r1, [pc, #116]	; (80076ec <USB_EPStartXfer+0xab0>)
 8007676:	400a      	ands	r2, r1
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	183b      	adds	r3, r7, r0
 800767c:	183a      	adds	r2, r7, r0
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	2110      	movs	r1, #16
 8007682:	404a      	eors	r2, r1
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	183b      	adds	r3, r7, r0
 8007688:	183a      	adds	r2, r7, r0
 800768a:	8812      	ldrh	r2, [r2, #0]
 800768c:	2120      	movs	r1, #32
 800768e:	404a      	eors	r2, r1
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	18d3      	adds	r3, r2, r3
 800769c:	183a      	adds	r2, r7, r0
 800769e:	8812      	ldrh	r2, [r2, #0]
 80076a0:	4913      	ldr	r1, [pc, #76]	; (80076f0 <USB_EPStartXfer+0xab4>)
 80076a2:	430a      	orrs	r2, r1
 80076a4:	b292      	uxth	r2, r2
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	f000 fbf4 	bl	8007e94 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	7b1b      	ldrb	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d000      	beq.n	80076b6 <USB_EPStartXfer+0xa7a>
 80076b4:	e0a9      	b.n	800780a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d918      	bls.n	80076f4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	1d7a      	adds	r2, r7, #5
 80076c8:	32ff      	adds	r2, #255	; 0xff
 80076ca:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	1d7b      	adds	r3, r7, #5
 80076d2:	33ff      	adds	r3, #255	; 0xff
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	619a      	str	r2, [r3, #24]
 80076dc:	e012      	b.n	8007704 <USB_EPStartXfer+0xac8>
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	00000406 	.word	0x00000406
 80076e4:	ffff8000 	.word	0xffff8000
 80076e8:	00000402 	.word	0x00000402
 80076ec:	ffff8fbf 	.word	0xffff8fbf
 80076f0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	1d7a      	adds	r2, r7, #5
 80076fa:	32ff      	adds	r2, #255	; 0xff
 80076fc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2200      	movs	r2, #0
 8007702:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2190      	movs	r1, #144	; 0x90
 8007708:	187a      	adds	r2, r7, r1
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2250      	movs	r2, #80	; 0x50
 8007710:	5a9b      	ldrh	r3, [r3, r2]
 8007712:	b29b      	uxth	r3, r3
 8007714:	001a      	movs	r2, r3
 8007716:	187b      	adds	r3, r7, r1
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	189b      	adds	r3, r3, r2
 800771c:	187a      	adds	r2, r7, r1
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00da      	lsls	r2, r3, #3
 8007726:	187b      	adds	r3, r7, r1
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	18d3      	adds	r3, r2, r3
 800772c:	4acf      	ldr	r2, [pc, #828]	; (8007a6c <USB_EPStartXfer+0xe30>)
 800772e:	4694      	mov	ip, r2
 8007730:	4463      	add	r3, ip
 8007732:	218c      	movs	r1, #140	; 0x8c
 8007734:	187a      	adds	r2, r7, r1
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	187b      	adds	r3, r7, r1
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	059b      	lsls	r3, r3, #22
 8007742:	0d9b      	lsrs	r3, r3, #22
 8007744:	b29a      	uxth	r2, r3
 8007746:	187b      	adds	r3, r7, r1
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	1d7b      	adds	r3, r7, #5
 800774e:	33ff      	adds	r3, #255	; 0xff
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b3e      	cmp	r3, #62	; 0x3e
 8007754:	d925      	bls.n	80077a2 <USB_EPStartXfer+0xb66>
 8007756:	1d7b      	adds	r3, r7, #5
 8007758:	33ff      	adds	r3, #255	; 0xff
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	21e8      	movs	r1, #232	; 0xe8
 8007760:	187a      	adds	r2, r7, r1
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	1d7b      	adds	r3, r7, #5
 8007766:	33ff      	adds	r3, #255	; 0xff
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	221f      	movs	r2, #31
 800776c:	4013      	ands	r3, r2
 800776e:	d104      	bne.n	800777a <USB_EPStartXfer+0xb3e>
 8007770:	187b      	adds	r3, r7, r1
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3b01      	subs	r3, #1
 8007776:	187a      	adds	r2, r7, r1
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	218c      	movs	r1, #140	; 0x8c
 800777c:	187b      	adds	r3, r7, r1
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29a      	uxth	r2, r3
 8007784:	23e8      	movs	r3, #232	; 0xe8
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29b      	uxth	r3, r3
 8007794:	4ab6      	ldr	r2, [pc, #728]	; (8007a70 <USB_EPStartXfer+0xe34>)
 8007796:	4313      	orrs	r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	187b      	adds	r3, r7, r1
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e353      	b.n	8007e4a <USB_EPStartXfer+0x120e>
 80077a2:	1d7b      	adds	r3, r7, #5
 80077a4:	33ff      	adds	r3, #255	; 0xff
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <USB_EPStartXfer+0xb88>
 80077ac:	218c      	movs	r1, #140	; 0x8c
 80077ae:	187b      	adds	r3, r7, r1
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4aae      	ldr	r2, [pc, #696]	; (8007a70 <USB_EPStartXfer+0xe34>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	187b      	adds	r3, r7, r1
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e342      	b.n	8007e4a <USB_EPStartXfer+0x120e>
 80077c4:	1d7b      	adds	r3, r7, #5
 80077c6:	33ff      	adds	r3, #255	; 0xff
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	21e8      	movs	r1, #232	; 0xe8
 80077ce:	187a      	adds	r2, r7, r1
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	1d7b      	adds	r3, r7, #5
 80077d4:	33ff      	adds	r3, #255	; 0xff
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2201      	movs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d004      	beq.n	80077e8 <USB_EPStartXfer+0xbac>
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	187a      	adds	r2, r7, r1
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	218c      	movs	r1, #140	; 0x8c
 80077ea:	187b      	adds	r3, r7, r1
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	23e8      	movs	r3, #232	; 0xe8
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	029b      	lsls	r3, r3, #10
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4313      	orrs	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	187b      	adds	r3, r7, r1
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e31f      	b.n	8007e4a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d000      	beq.n	8007814 <USB_EPStartXfer+0xbd8>
 8007812:	e191      	b.n	8007b38 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d000      	beq.n	800781e <USB_EPStartXfer+0xbe2>
 800781c:	e07c      	b.n	8007918 <USB_EPStartXfer+0xcdc>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	21ac      	movs	r1, #172	; 0xac
 8007822:	187a      	adds	r2, r7, r1
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2250      	movs	r2, #80	; 0x50
 800782a:	5a9b      	ldrh	r3, [r3, r2]
 800782c:	b29b      	uxth	r3, r3
 800782e:	001a      	movs	r2, r3
 8007830:	187b      	adds	r3, r7, r1
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	189b      	adds	r3, r3, r2
 8007836:	187a      	adds	r2, r7, r1
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	00da      	lsls	r2, r3, #3
 8007840:	187b      	adds	r3, r7, r1
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	18d3      	adds	r3, r2, r3
 8007846:	4a8b      	ldr	r2, [pc, #556]	; (8007a74 <USB_EPStartXfer+0xe38>)
 8007848:	4694      	mov	ip, r2
 800784a:	4463      	add	r3, ip
 800784c:	21a8      	movs	r1, #168	; 0xa8
 800784e:	187a      	adds	r2, r7, r1
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	187b      	adds	r3, r7, r1
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29b      	uxth	r3, r3
 800785a:	059b      	lsls	r3, r3, #22
 800785c:	0d9b      	lsrs	r3, r3, #22
 800785e:	b29a      	uxth	r2, r3
 8007860:	187b      	adds	r3, r7, r1
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b3e      	cmp	r3, #62	; 0x3e
 800786c:	d923      	bls.n	80078b6 <USB_EPStartXfer+0xc7a>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	21e4      	movs	r1, #228	; 0xe4
 8007876:	187a      	adds	r2, r7, r1
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	221f      	movs	r2, #31
 8007880:	4013      	ands	r3, r2
 8007882:	d104      	bne.n	800788e <USB_EPStartXfer+0xc52>
 8007884:	187b      	adds	r3, r7, r1
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	187a      	adds	r2, r7, r1
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	21a8      	movs	r1, #168	; 0xa8
 8007890:	187b      	adds	r3, r7, r1
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	23e4      	movs	r3, #228	; 0xe4
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4a71      	ldr	r2, [pc, #452]	; (8007a70 <USB_EPStartXfer+0xe34>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	187b      	adds	r3, r7, r1
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e054      	b.n	8007960 <USB_EPStartXfer+0xd24>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <USB_EPStartXfer+0xc9a>
 80078be:	21a8      	movs	r1, #168	; 0xa8
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4a69      	ldr	r2, [pc, #420]	; (8007a70 <USB_EPStartXfer+0xe34>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	187b      	adds	r3, r7, r1
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	e044      	b.n	8007960 <USB_EPStartXfer+0xd24>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	21e4      	movs	r1, #228	; 0xe4
 80078de:	187a      	adds	r2, r7, r1
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2201      	movs	r2, #1
 80078e8:	4013      	ands	r3, r2
 80078ea:	d004      	beq.n	80078f6 <USB_EPStartXfer+0xcba>
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	187a      	adds	r2, r7, r1
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	21a8      	movs	r1, #168	; 0xa8
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	23e4      	movs	r3, #228	; 0xe4
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	b29b      	uxth	r3, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	b29a      	uxth	r2, r3
 8007910:	187b      	adds	r3, r7, r1
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e023      	b.n	8007960 <USB_EPStartXfer+0xd24>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11f      	bne.n	8007960 <USB_EPStartXfer+0xd24>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	21b4      	movs	r1, #180	; 0xb4
 8007924:	187a      	adds	r2, r7, r1
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2250      	movs	r2, #80	; 0x50
 800792c:	5a9b      	ldrh	r3, [r3, r2]
 800792e:	b29b      	uxth	r3, r3
 8007930:	001a      	movs	r2, r3
 8007932:	187b      	adds	r3, r7, r1
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	189b      	adds	r3, r3, r2
 8007938:	187a      	adds	r2, r7, r1
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	00da      	lsls	r2, r3, #3
 8007942:	187b      	adds	r3, r7, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	18d3      	adds	r3, r2, r3
 8007948:	4a4a      	ldr	r2, [pc, #296]	; (8007a74 <USB_EPStartXfer+0xe38>)
 800794a:	4694      	mov	ip, r2
 800794c:	4463      	add	r3, ip
 800794e:	21b0      	movs	r1, #176	; 0xb0
 8007950:	187a      	adds	r2, r7, r1
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	b29a      	uxth	r2, r3
 800795a:	187b      	adds	r3, r7, r1
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	22a4      	movs	r2, #164	; 0xa4
 8007964:	18ba      	adds	r2, r7, r2
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d000      	beq.n	8007972 <USB_EPStartXfer+0xd36>
 8007970:	e082      	b.n	8007a78 <USB_EPStartXfer+0xe3c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	219c      	movs	r1, #156	; 0x9c
 8007976:	187a      	adds	r2, r7, r1
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2250      	movs	r2, #80	; 0x50
 800797e:	5a9b      	ldrh	r3, [r3, r2]
 8007980:	b29b      	uxth	r3, r3
 8007982:	001a      	movs	r2, r3
 8007984:	187b      	adds	r3, r7, r1
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	189b      	adds	r3, r3, r2
 800798a:	187a      	adds	r2, r7, r1
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	00da      	lsls	r2, r3, #3
 8007994:	187b      	adds	r3, r7, r1
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	18d3      	adds	r3, r2, r3
 800799a:	4a34      	ldr	r2, [pc, #208]	; (8007a6c <USB_EPStartXfer+0xe30>)
 800799c:	4694      	mov	ip, r2
 800799e:	4463      	add	r3, ip
 80079a0:	2198      	movs	r1, #152	; 0x98
 80079a2:	187a      	adds	r2, r7, r1
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	187b      	adds	r3, r7, r1
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	059b      	lsls	r3, r3, #22
 80079b0:	0d9b      	lsrs	r3, r3, #22
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b3e      	cmp	r3, #62	; 0x3e
 80079c0:	d923      	bls.n	8007a0a <USB_EPStartXfer+0xdce>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	21e0      	movs	r1, #224	; 0xe0
 80079ca:	187a      	adds	r2, r7, r1
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	221f      	movs	r2, #31
 80079d4:	4013      	ands	r3, r2
 80079d6:	d104      	bne.n	80079e2 <USB_EPStartXfer+0xda6>
 80079d8:	187b      	adds	r3, r7, r1
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	187a      	adds	r2, r7, r1
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	2198      	movs	r1, #152	; 0x98
 80079e4:	187b      	adds	r3, r7, r1
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	23e0      	movs	r3, #224	; 0xe0
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4313      	orrs	r3, r2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <USB_EPStartXfer+0xe34>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e057      	b.n	8007aba <USB_EPStartXfer+0xe7e>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <USB_EPStartXfer+0xdee>
 8007a12:	2198      	movs	r1, #152	; 0x98
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <USB_EPStartXfer+0xe34>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	187b      	adds	r3, r7, r1
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e047      	b.n	8007aba <USB_EPStartXfer+0xe7e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	21e0      	movs	r1, #224	; 0xe0
 8007a32:	187a      	adds	r2, r7, r1
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d004      	beq.n	8007a4a <USB_EPStartXfer+0xe0e>
 8007a40:	187b      	adds	r3, r7, r1
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	187a      	adds	r2, r7, r1
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	2198      	movs	r1, #152	; 0x98
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	23e0      	movs	r3, #224	; 0xe0
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	187b      	adds	r3, r7, r1
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	e026      	b.n	8007aba <USB_EPStartXfer+0xe7e>
 8007a6c:	00000406 	.word	0x00000406
 8007a70:	ffff8000 	.word	0xffff8000
 8007a74:	00000402 	.word	0x00000402
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d11c      	bne.n	8007aba <USB_EPStartXfer+0xe7e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2250      	movs	r2, #80	; 0x50
 8007a84:	5a9b      	ldrh	r3, [r3, r2]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	001a      	movs	r2, r3
 8007a8a:	21a4      	movs	r1, #164	; 0xa4
 8007a8c:	187b      	adds	r3, r7, r1
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	189b      	adds	r3, r3, r2
 8007a92:	187a      	adds	r2, r7, r1
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00da      	lsls	r2, r3, #3
 8007a9c:	187b      	adds	r3, r7, r1
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	4ad2      	ldr	r2, [pc, #840]	; (8007dec <USB_EPStartXfer+0x11b0>)
 8007aa4:	4694      	mov	ip, r2
 8007aa6:	4463      	add	r3, ip
 8007aa8:	21a0      	movs	r1, #160	; 0xa0
 8007aaa:	187a      	adds	r2, r7, r1
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	187b      	adds	r3, r7, r1
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d100      	bne.n	8007ac4 <USB_EPStartXfer+0xe88>
 8007ac2:	e1c2      	b.n	8007e4a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	18d2      	adds	r2, r2, r3
 8007ace:	2196      	movs	r1, #150	; 0x96
 8007ad0:	187b      	adds	r3, r7, r1
 8007ad2:	8812      	ldrh	r2, [r2, #0]
 8007ad4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ad6:	187b      	adds	r3, r7, r1
 8007ad8:	881a      	ldrh	r2, [r3, #0]
 8007ada:	2380      	movs	r3, #128	; 0x80
 8007adc:	01db      	lsls	r3, r3, #7
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d004      	beq.n	8007aec <USB_EPStartXfer+0xeb0>
 8007ae2:	187b      	adds	r3, r7, r1
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	2240      	movs	r2, #64	; 0x40
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d10d      	bne.n	8007b08 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aec:	2196      	movs	r1, #150	; 0x96
 8007aee:	187b      	adds	r3, r7, r1
 8007af0:	881a      	ldrh	r2, [r3, #0]
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	01db      	lsls	r3, r3, #7
 8007af6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007af8:	d000      	beq.n	8007afc <USB_EPStartXfer+0xec0>
 8007afa:	e1a6      	b.n	8007e4a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007afc:	187b      	adds	r3, r7, r1
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	2240      	movs	r2, #64	; 0x40
 8007b02:	4013      	ands	r3, r2
 8007b04:	d000      	beq.n	8007b08 <USB_EPStartXfer+0xecc>
 8007b06:	e1a0      	b.n	8007e4a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	18d3      	adds	r3, r2, r3
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	2094      	movs	r0, #148	; 0x94
 8007b18:	183b      	adds	r3, r7, r0
 8007b1a:	49b5      	ldr	r1, [pc, #724]	; (8007df0 <USB_EPStartXfer+0x11b4>)
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	18d3      	adds	r3, r2, r3
 8007b2a:	183a      	adds	r2, r7, r0
 8007b2c:	8812      	ldrh	r2, [r2, #0]
 8007b2e:	49b1      	ldr	r1, [pc, #708]	; (8007df4 <USB_EPStartXfer+0x11b8>)
 8007b30:	430a      	orrs	r2, r1
 8007b32:	b292      	uxth	r2, r2
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e188      	b.n	8007e4a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d000      	beq.n	8007b42 <USB_EPStartXfer+0xf06>
 8007b40:	e181      	b.n	8007e46 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d90d      	bls.n	8007b6a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	1d7a      	adds	r2, r7, #5
 8007b54:	32ff      	adds	r2, #255	; 0xff
 8007b56:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	1d7b      	adds	r3, r7, #5
 8007b5e:	33ff      	adds	r3, #255	; 0xff
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	1ad2      	subs	r2, r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	619a      	str	r2, [r3, #24]
 8007b68:	e007      	b.n	8007b7a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	1d7a      	adds	r2, r7, #5
 8007b70:	32ff      	adds	r2, #255	; 0xff
 8007b72:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d000      	beq.n	8007b84 <USB_EPStartXfer+0xf48>
 8007b82:	e082      	b.n	8007c8a <USB_EPStartXfer+0x104e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	21cc      	movs	r1, #204	; 0xcc
 8007b88:	187a      	adds	r2, r7, r1
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2250      	movs	r2, #80	; 0x50
 8007b90:	5a9b      	ldrh	r3, [r3, r2]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	001a      	movs	r2, r3
 8007b96:	187b      	adds	r3, r7, r1
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	187a      	adds	r2, r7, r1
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	00da      	lsls	r2, r3, #3
 8007ba6:	187b      	adds	r3, r7, r1
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	18d3      	adds	r3, r2, r3
 8007bac:	4a92      	ldr	r2, [pc, #584]	; (8007df8 <USB_EPStartXfer+0x11bc>)
 8007bae:	4694      	mov	ip, r2
 8007bb0:	4463      	add	r3, ip
 8007bb2:	21c8      	movs	r1, #200	; 0xc8
 8007bb4:	187a      	adds	r2, r7, r1
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	187b      	adds	r3, r7, r1
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	0d9b      	lsrs	r3, r3, #22
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	1d7b      	adds	r3, r7, #5
 8007bce:	33ff      	adds	r3, #255	; 0xff
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8007bd4:	d925      	bls.n	8007c22 <USB_EPStartXfer+0xfe6>
 8007bd6:	1d7b      	adds	r3, r7, #5
 8007bd8:	33ff      	adds	r3, #255	; 0xff
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	21dc      	movs	r1, #220	; 0xdc
 8007be0:	187a      	adds	r2, r7, r1
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	1d7b      	adds	r3, r7, #5
 8007be6:	33ff      	adds	r3, #255	; 0xff
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	221f      	movs	r2, #31
 8007bec:	4013      	ands	r3, r2
 8007bee:	d104      	bne.n	8007bfa <USB_EPStartXfer+0xfbe>
 8007bf0:	187b      	adds	r3, r7, r1
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	187a      	adds	r2, r7, r1
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	21c8      	movs	r1, #200	; 0xc8
 8007bfc:	187b      	adds	r3, r7, r1
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	23dc      	movs	r3, #220	; 0xdc
 8007c06:	18fb      	adds	r3, r7, r3
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	029b      	lsls	r3, r3, #10
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4a79      	ldr	r2, [pc, #484]	; (8007dfc <USB_EPStartXfer+0x11c0>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	e058      	b.n	8007cd4 <USB_EPStartXfer+0x1098>
 8007c22:	1d7b      	adds	r3, r7, #5
 8007c24:	33ff      	adds	r3, #255	; 0xff
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10b      	bne.n	8007c44 <USB_EPStartXfer+0x1008>
 8007c2c:	21c8      	movs	r1, #200	; 0xc8
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4a71      	ldr	r2, [pc, #452]	; (8007dfc <USB_EPStartXfer+0x11c0>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e047      	b.n	8007cd4 <USB_EPStartXfer+0x1098>
 8007c44:	1d7b      	adds	r3, r7, #5
 8007c46:	33ff      	adds	r3, #255	; 0xff
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	21dc      	movs	r1, #220	; 0xdc
 8007c4e:	187a      	adds	r2, r7, r1
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	1d7b      	adds	r3, r7, #5
 8007c54:	33ff      	adds	r3, #255	; 0xff
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <USB_EPStartXfer+0x102c>
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	187a      	adds	r2, r7, r1
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	21c8      	movs	r1, #200	; 0xc8
 8007c6a:	187b      	adds	r3, r7, r1
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	23dc      	movs	r3, #220	; 0xdc
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	029b      	lsls	r3, r3, #10
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	187b      	adds	r3, r7, r1
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e024      	b.n	8007cd4 <USB_EPStartXfer+0x1098>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d120      	bne.n	8007cd4 <USB_EPStartXfer+0x1098>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	21d4      	movs	r1, #212	; 0xd4
 8007c96:	187a      	adds	r2, r7, r1
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2250      	movs	r2, #80	; 0x50
 8007c9e:	5a9b      	ldrh	r3, [r3, r2]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	187b      	adds	r3, r7, r1
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	187a      	adds	r2, r7, r1
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	00da      	lsls	r2, r3, #3
 8007cb4:	187b      	adds	r3, r7, r1
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	18d3      	adds	r3, r2, r3
 8007cba:	4a4f      	ldr	r2, [pc, #316]	; (8007df8 <USB_EPStartXfer+0x11bc>)
 8007cbc:	4694      	mov	ip, r2
 8007cbe:	4463      	add	r3, ip
 8007cc0:	21d0      	movs	r1, #208	; 0xd0
 8007cc2:	187a      	adds	r2, r7, r1
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	1d7b      	adds	r3, r7, #5
 8007cc8:	33ff      	adds	r3, #255	; 0xff
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	187b      	adds	r3, r7, r1
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	22c4      	movs	r2, #196	; 0xc4
 8007cd8:	18ba      	adds	r2, r7, r2
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d000      	beq.n	8007ce6 <USB_EPStartXfer+0x10aa>
 8007ce4:	e08c      	b.n	8007e00 <USB_EPStartXfer+0x11c4>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	21bc      	movs	r1, #188	; 0xbc
 8007cea:	187a      	adds	r2, r7, r1
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2250      	movs	r2, #80	; 0x50
 8007cf2:	5a9b      	ldrh	r3, [r3, r2]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	001a      	movs	r2, r3
 8007cf8:	187b      	adds	r3, r7, r1
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	189b      	adds	r3, r3, r2
 8007cfe:	187a      	adds	r2, r7, r1
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	00da      	lsls	r2, r3, #3
 8007d08:	187b      	adds	r3, r7, r1
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	18d3      	adds	r3, r2, r3
 8007d0e:	4a37      	ldr	r2, [pc, #220]	; (8007dec <USB_EPStartXfer+0x11b0>)
 8007d10:	4694      	mov	ip, r2
 8007d12:	4463      	add	r3, ip
 8007d14:	21b8      	movs	r1, #184	; 0xb8
 8007d16:	187a      	adds	r2, r7, r1
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	187b      	adds	r3, r7, r1
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	059b      	lsls	r3, r3, #22
 8007d24:	0d9b      	lsrs	r3, r3, #22
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	187b      	adds	r3, r7, r1
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	1d7b      	adds	r3, r7, #5
 8007d30:	33ff      	adds	r3, #255	; 0xff
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b3e      	cmp	r3, #62	; 0x3e
 8007d36:	d925      	bls.n	8007d84 <USB_EPStartXfer+0x1148>
 8007d38:	1d7b      	adds	r3, r7, #5
 8007d3a:	33ff      	adds	r3, #255	; 0xff
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	21d8      	movs	r1, #216	; 0xd8
 8007d42:	187a      	adds	r2, r7, r1
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	1d7b      	adds	r3, r7, #5
 8007d48:	33ff      	adds	r3, #255	; 0xff
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	221f      	movs	r2, #31
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d104      	bne.n	8007d5c <USB_EPStartXfer+0x1120>
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	187a      	adds	r2, r7, r1
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	21b8      	movs	r1, #184	; 0xb8
 8007d5e:	187b      	adds	r3, r7, r1
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	23d8      	movs	r3, #216	; 0xd8
 8007d68:	18fb      	adds	r3, r7, r3
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	029b      	lsls	r3, r3, #10
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4313      	orrs	r3, r2
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <USB_EPStartXfer+0x11c0>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	187b      	adds	r3, r7, r1
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e062      	b.n	8007e4a <USB_EPStartXfer+0x120e>
 8007d84:	1d7b      	adds	r3, r7, #5
 8007d86:	33ff      	adds	r3, #255	; 0xff
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <USB_EPStartXfer+0x116a>
 8007d8e:	21b8      	movs	r1, #184	; 0xb8
 8007d90:	187b      	adds	r3, r7, r1
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <USB_EPStartXfer+0x11c0>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	187b      	adds	r3, r7, r1
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	e051      	b.n	8007e4a <USB_EPStartXfer+0x120e>
 8007da6:	1d7b      	adds	r3, r7, #5
 8007da8:	33ff      	adds	r3, #255	; 0xff
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	21d8      	movs	r1, #216	; 0xd8
 8007db0:	187a      	adds	r2, r7, r1
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	1d7b      	adds	r3, r7, #5
 8007db6:	33ff      	adds	r3, #255	; 0xff
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d004      	beq.n	8007dca <USB_EPStartXfer+0x118e>
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	187a      	adds	r2, r7, r1
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	21b8      	movs	r1, #184	; 0xb8
 8007dcc:	187b      	adds	r3, r7, r1
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	23d8      	movs	r3, #216	; 0xd8
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	029b      	lsls	r3, r3, #10
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e02e      	b.n	8007e4a <USB_EPStartXfer+0x120e>
 8007dec:	00000406 	.word	0x00000406
 8007df0:	ffff8f8f 	.word	0xffff8f8f
 8007df4:	ffff80c0 	.word	0xffff80c0
 8007df8:	00000402 	.word	0x00000402
 8007dfc:	ffff8000 	.word	0xffff8000
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d120      	bne.n	8007e4a <USB_EPStartXfer+0x120e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2250      	movs	r2, #80	; 0x50
 8007e0c:	5a9b      	ldrh	r3, [r3, r2]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	001a      	movs	r2, r3
 8007e12:	21c4      	movs	r1, #196	; 0xc4
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	189b      	adds	r3, r3, r2
 8007e1a:	187a      	adds	r2, r7, r1
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	00da      	lsls	r2, r3, #3
 8007e24:	187b      	adds	r3, r7, r1
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	18d3      	adds	r3, r2, r3
 8007e2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <USB_EPStartXfer+0x1264>)
 8007e2c:	4694      	mov	ip, r2
 8007e2e:	4463      	add	r3, ip
 8007e30:	21c0      	movs	r1, #192	; 0xc0
 8007e32:	187a      	adds	r2, r7, r1
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	1d7b      	adds	r3, r7, #5
 8007e38:	33ff      	adds	r3, #255	; 0xff
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	187b      	adds	r3, r7, r1
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e001      	b.n	8007e4a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e025      	b.n	8007e96 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	18d3      	adds	r3, r2, r3
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	208a      	movs	r0, #138	; 0x8a
 8007e5a:	183b      	adds	r3, r7, r0
 8007e5c:	4911      	ldr	r1, [pc, #68]	; (8007ea4 <USB_EPStartXfer+0x1268>)
 8007e5e:	400a      	ands	r2, r1
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	183b      	adds	r3, r7, r0
 8007e64:	183a      	adds	r2, r7, r0
 8007e66:	8812      	ldrh	r2, [r2, #0]
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	0149      	lsls	r1, r1, #5
 8007e6c:	404a      	eors	r2, r1
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	183b      	adds	r3, r7, r0
 8007e72:	183a      	adds	r2, r7, r0
 8007e74:	8812      	ldrh	r2, [r2, #0]
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	0189      	lsls	r1, r1, #6
 8007e7a:	404a      	eors	r2, r1
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	18d3      	adds	r3, r2, r3
 8007e88:	183a      	adds	r2, r7, r0
 8007e8a:	8812      	ldrh	r2, [r2, #0]
 8007e8c:	4906      	ldr	r1, [pc, #24]	; (8007ea8 <USB_EPStartXfer+0x126c>)
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	b292      	uxth	r2, r2
 8007e92:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b043      	add	sp, #268	; 0x10c
 8007e9c:	bd90      	pop	{r4, r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	00000406 	.word	0x00000406
 8007ea4:	ffffbf8f 	.word	0xffffbf8f
 8007ea8:	ffff8080 	.word	0xffff8080

08007eac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01d      	beq.n	8007efa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	18d3      	adds	r3, r2, r3
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	200c      	movs	r0, #12
 8007ece:	183b      	adds	r3, r7, r0
 8007ed0:	491b      	ldr	r1, [pc, #108]	; (8007f40 <USB_EPSetStall+0x94>)
 8007ed2:	400a      	ands	r2, r1
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	183b      	adds	r3, r7, r0
 8007ed8:	183a      	adds	r2, r7, r0
 8007eda:	8812      	ldrh	r2, [r2, #0]
 8007edc:	2110      	movs	r1, #16
 8007ede:	404a      	eors	r2, r1
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	18d3      	adds	r3, r2, r3
 8007eec:	183a      	adds	r2, r7, r0
 8007eee:	8812      	ldrh	r2, [r2, #0]
 8007ef0:	4914      	ldr	r1, [pc, #80]	; (8007f44 <USB_EPSetStall+0x98>)
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	b292      	uxth	r2, r2
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e01d      	b.n	8007f36 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	18d3      	adds	r3, r2, r3
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	200e      	movs	r0, #14
 8007f0a:	183b      	adds	r3, r7, r0
 8007f0c:	490e      	ldr	r1, [pc, #56]	; (8007f48 <USB_EPSetStall+0x9c>)
 8007f0e:	400a      	ands	r2, r1
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	183b      	adds	r3, r7, r0
 8007f14:	183a      	adds	r2, r7, r0
 8007f16:	8812      	ldrh	r2, [r2, #0]
 8007f18:	2180      	movs	r1, #128	; 0x80
 8007f1a:	0149      	lsls	r1, r1, #5
 8007f1c:	404a      	eors	r2, r1
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	18d3      	adds	r3, r2, r3
 8007f2a:	183a      	adds	r2, r7, r0
 8007f2c:	8812      	ldrh	r2, [r2, #0]
 8007f2e:	4905      	ldr	r1, [pc, #20]	; (8007f44 <USB_EPSetStall+0x98>)
 8007f30:	430a      	orrs	r2, r1
 8007f32:	b292      	uxth	r2, r2
 8007f34:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	0018      	movs	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b004      	add	sp, #16
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	ffff8fbf 	.word	0xffff8fbf
 8007f44:	ffff8080 	.word	0xffff8080
 8007f48:	ffffbf8f 	.word	0xffffbf8f

08007f4c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	7b1b      	ldrb	r3, [r3, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d000      	beq.n	8007f60 <USB_EPClearStall+0x14>
 8007f5e:	e095      	b.n	800808c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d046      	beq.n	8007ff6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	18d2      	adds	r2, r2, r3
 8007f72:	2110      	movs	r1, #16
 8007f74:	187b      	adds	r3, r7, r1
 8007f76:	8812      	ldrh	r2, [r2, #0]
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	187b      	adds	r3, r7, r1
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	2240      	movs	r2, #64	; 0x40
 8007f80:	4013      	ands	r3, r2
 8007f82:	d016      	beq.n	8007fb2 <USB_EPClearStall+0x66>
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	18d3      	adds	r3, r2, r3
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	200e      	movs	r0, #14
 8007f94:	183b      	adds	r3, r7, r0
 8007f96:	4940      	ldr	r1, [pc, #256]	; (8008098 <USB_EPClearStall+0x14c>)
 8007f98:	400a      	ands	r2, r1
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	183a      	adds	r2, r7, r0
 8007fa8:	8812      	ldrh	r2, [r2, #0]
 8007faa:	493c      	ldr	r1, [pc, #240]	; (800809c <USB_EPClearStall+0x150>)
 8007fac:	430a      	orrs	r2, r1
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	78db      	ldrb	r3, [r3, #3]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d068      	beq.n	800808c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	200c      	movs	r0, #12
 8007fca:	183b      	adds	r3, r7, r0
 8007fcc:	4934      	ldr	r1, [pc, #208]	; (80080a0 <USB_EPClearStall+0x154>)
 8007fce:	400a      	ands	r2, r1
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	183b      	adds	r3, r7, r0
 8007fd4:	183a      	adds	r2, r7, r0
 8007fd6:	8812      	ldrh	r2, [r2, #0]
 8007fd8:	2120      	movs	r1, #32
 8007fda:	404a      	eors	r2, r1
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	18d3      	adds	r3, r2, r3
 8007fe8:	183a      	adds	r2, r7, r0
 8007fea:	8812      	ldrh	r2, [r2, #0]
 8007fec:	492d      	ldr	r1, [pc, #180]	; (80080a4 <USB_EPClearStall+0x158>)
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e04a      	b.n	800808c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	18d2      	adds	r2, r2, r3
 8008000:	2116      	movs	r1, #22
 8008002:	187b      	adds	r3, r7, r1
 8008004:	8812      	ldrh	r2, [r2, #0]
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	187b      	adds	r3, r7, r1
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	4013      	ands	r3, r2
 8008012:	d016      	beq.n	8008042 <USB_EPClearStall+0xf6>
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29a      	uxth	r2, r3
 8008022:	2014      	movs	r0, #20
 8008024:	183b      	adds	r3, r7, r0
 8008026:	491c      	ldr	r1, [pc, #112]	; (8008098 <USB_EPClearStall+0x14c>)
 8008028:	400a      	ands	r2, r1
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	183a      	adds	r2, r7, r0
 8008038:	8812      	ldrh	r2, [r2, #0]
 800803a:	491b      	ldr	r1, [pc, #108]	; (80080a8 <USB_EPClearStall+0x15c>)
 800803c:	430a      	orrs	r2, r1
 800803e:	b292      	uxth	r2, r2
 8008040:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	18d3      	adds	r3, r2, r3
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29a      	uxth	r2, r3
 8008050:	2012      	movs	r0, #18
 8008052:	183b      	adds	r3, r7, r0
 8008054:	4915      	ldr	r1, [pc, #84]	; (80080ac <USB_EPClearStall+0x160>)
 8008056:	400a      	ands	r2, r1
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	183b      	adds	r3, r7, r0
 800805c:	183a      	adds	r2, r7, r0
 800805e:	8812      	ldrh	r2, [r2, #0]
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	0149      	lsls	r1, r1, #5
 8008064:	404a      	eors	r2, r1
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	183b      	adds	r3, r7, r0
 800806a:	183a      	adds	r2, r7, r0
 800806c:	8812      	ldrh	r2, [r2, #0]
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	0189      	lsls	r1, r1, #6
 8008072:	404a      	eors	r2, r1
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	18d3      	adds	r3, r2, r3
 8008080:	183a      	adds	r2, r7, r0
 8008082:	8812      	ldrh	r2, [r2, #0]
 8008084:	4907      	ldr	r1, [pc, #28]	; (80080a4 <USB_EPClearStall+0x158>)
 8008086:	430a      	orrs	r2, r1
 8008088:	b292      	uxth	r2, r2
 800808a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b006      	add	sp, #24
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	ffff8f8f 	.word	0xffff8f8f
 800809c:	ffff80c0 	.word	0xffff80c0
 80080a0:	ffff8fbf 	.word	0xffff8fbf
 80080a4:	ffff8080 	.word	0xffff8080
 80080a8:	ffffc080 	.word	0xffffc080
 80080ac:	ffffbf8f 	.word	0xffffbf8f

080080b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	000a      	movs	r2, r1
 80080ba:	1cfb      	adds	r3, r7, #3
 80080bc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80080be:	1cfb      	adds	r3, r7, #3
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d103      	bne.n	80080ce <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	224c      	movs	r2, #76	; 0x4c
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	0018      	movs	r0, r3
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b002      	add	sp, #8
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2258      	movs	r2, #88	; 0x58
 80080e4:	5a9b      	ldrh	r3, [r3, r2]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4a05      	ldr	r2, [pc, #20]	; (8008100 <USB_DevConnect+0x28>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b299      	uxth	r1, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2258      	movs	r2, #88	; 0x58
 80080f2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b002      	add	sp, #8
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	ffff8000 	.word	0xffff8000

08008104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2244      	movs	r2, #68	; 0x44
 8008110:	5a9b      	ldrh	r3, [r3, r2]
 8008112:	b29b      	uxth	r3, r3
 8008114:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008116:	68fb      	ldr	r3, [r7, #12]
}
 8008118:	0018      	movs	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	b004      	add	sp, #16
 800811e:	bd80      	pop	{r7, pc}

08008120 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	0019      	movs	r1, r3
 800812c:	1dbb      	adds	r3, r7, #6
 800812e:	801a      	strh	r2, [r3, #0]
 8008130:	1d3b      	adds	r3, r7, #4
 8008132:	1c0a      	adds	r2, r1, #0
 8008134:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	3301      	adds	r3, #1
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008148:	1dbb      	adds	r3, r7, #6
 800814a:	881a      	ldrh	r2, [r3, #0]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	18d3      	adds	r3, r2, r3
 8008150:	2280      	movs	r2, #128	; 0x80
 8008152:	00d2      	lsls	r2, r2, #3
 8008154:	4694      	mov	ip, r2
 8008156:	4463      	add	r3, ip
 8008158:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e020      	b.n	80081a2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	2112      	movs	r1, #18
 8008166:	187b      	adds	r3, r7, r1
 8008168:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	3301      	adds	r3, #1
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	b21a      	sxth	r2, r3
 8008174:	187b      	adds	r3, r7, r1
 8008176:	2000      	movs	r0, #0
 8008178:	5e1b      	ldrsh	r3, [r3, r0]
 800817a:	4313      	orrs	r3, r2
 800817c:	b21a      	sxth	r2, r3
 800817e:	187b      	adds	r3, r7, r1
 8008180:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	187a      	adds	r2, r7, r1
 8008186:	8812      	ldrh	r2, [r2, #0]
 8008188:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	3302      	adds	r3, #2
 800818e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	3301      	adds	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	3301      	adds	r3, #1
 800819a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	3b01      	subs	r3, #1
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1db      	bne.n	8008160 <USB_WritePMA+0x40>
  }
}
 80081a8:	46c0      	nop			; (mov r8, r8)
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b00a      	add	sp, #40	; 0x28
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b08a      	sub	sp, #40	; 0x28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	0019      	movs	r1, r3
 80081be:	1dbb      	adds	r3, r7, #6
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	1c0a      	adds	r2, r1, #0
 80081c6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081da:	1dbb      	adds	r3, r7, #6
 80081dc:	881a      	ldrh	r2, [r3, #0]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	18d3      	adds	r3, r2, r3
 80081e2:	2280      	movs	r2, #128	; 0x80
 80081e4:	00d2      	lsls	r2, r2, #3
 80081e6:	4694      	mov	ip, r2
 80081e8:	4463      	add	r3, ip
 80081ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
 80081f0:	e018      	b.n	8008224 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	3302      	adds	r3, #2
 80081fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	b2da      	uxtb	r2, r3
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	3301      	adds	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	b2da      	uxtb	r2, r3
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	3b01      	subs	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e3      	bne.n	80081f2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	2201      	movs	r2, #1
 8008230:	4013      	ands	r3, r2
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	701a      	strb	r2, [r3, #0]
  }
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	46bd      	mov	sp, r7
 800824c:	b00a      	add	sp, #40	; 0x28
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	000a      	movs	r2, r1
 800825a:	1cfb      	adds	r3, r7, #3
 800825c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800825e:	230f      	movs	r3, #15
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7c1b      	ldrb	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d116      	bne.n	800829c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800826e:	2380      	movs	r3, #128	; 0x80
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	2181      	movs	r1, #129	; 0x81
 8008278:	f002 f885 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	2101      	movs	r1, #1
 800828c:	f002 f87b 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	23b6      	movs	r3, #182	; 0xb6
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	2101      	movs	r1, #1
 8008298:	50d1      	str	r1, [r2, r3]
 800829a:	e013      	b.n	80082c4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	2340      	movs	r3, #64	; 0x40
 80082a0:	2202      	movs	r2, #2
 80082a2:	2181      	movs	r1, #129	; 0x81
 80082a4:	f002 f86f 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	2202      	movs	r2, #2
 80082b4:	2101      	movs	r1, #1
 80082b6:	f002 f866 	bl	800a386 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	23b6      	movs	r3, #182	; 0xb6
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	2101      	movs	r1, #1
 80082c2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	2308      	movs	r3, #8
 80082c8:	2203      	movs	r2, #3
 80082ca:	2182      	movs	r1, #130	; 0x82
 80082cc:	f002 f85b 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082d6:	2387      	movs	r3, #135	; 0x87
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	0018      	movs	r0, r3
 80082dc:	f002 f9ec 	bl	800a6b8 <USBD_static_malloc>
 80082e0:	0001      	movs	r1, r0
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	23ae      	movs	r3, #174	; 0xae
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	23ae      	movs	r3, #174	; 0xae
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	58d3      	ldr	r3, [r2, r3]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d104      	bne.n	8008300 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80082f6:	230f      	movs	r3, #15
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	2201      	movs	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e02c      	b.n	800835a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	23ae      	movs	r3, #174	; 0xae
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	58d3      	ldr	r3, [r2, r3]
 8008308:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	23af      	movs	r3, #175	; 0xaf
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	58d3      	ldr	r3, [r2, r3]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	2385      	movs	r3, #133	; 0x85
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	2100      	movs	r1, #0
 800831e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	2386      	movs	r3, #134	; 0x86
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	2100      	movs	r1, #0
 8008328:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7c1b      	ldrb	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	2381      	movs	r3, #129	; 0x81
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	58d2      	ldr	r2, [r2, r3]
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	2101      	movs	r1, #1
 8008342:	f002 f96b 	bl	800a61c <USBD_LL_PrepareReceive>
 8008346:	e008      	b.n	800835a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	2381      	movs	r3, #129	; 0x81
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	58d2      	ldr	r2, [r2, r3]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	2101      	movs	r1, #1
 8008356:	f002 f961 	bl	800a61c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800835a:	230f      	movs	r3, #15
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	781b      	ldrb	r3, [r3, #0]
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b004      	add	sp, #16
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	000a      	movs	r2, r1
 8008372:	1cfb      	adds	r3, r7, #3
 8008374:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008376:	230f      	movs	r3, #15
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2181      	movs	r1, #129	; 0x81
 8008382:	0018      	movs	r0, r3
 8008384:	f002 f836 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2101      	movs	r1, #1
 8008392:	0018      	movs	r0, r3
 8008394:	f002 f82e 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	23b6      	movs	r3, #182	; 0xb6
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	2100      	movs	r1, #0
 80083a0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2182      	movs	r1, #130	; 0x82
 80083a6:	0018      	movs	r0, r3
 80083a8:	f002 f824 	bl	800a3f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	23ae      	movs	r3, #174	; 0xae
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	58d3      	ldr	r3, [r2, r3]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d011      	beq.n	80083e2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	23af      	movs	r3, #175	; 0xaf
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	58d3      	ldr	r3, [r2, r3]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	23ae      	movs	r3, #174	; 0xae
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	58d3      	ldr	r3, [r2, r3]
 80083d2:	0018      	movs	r0, r3
 80083d4:	f002 f97c 	bl	800a6d0 <USBD_static_free>
    pdev->pClassData = NULL;
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	23ae      	movs	r3, #174	; 0xae
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	2100      	movs	r1, #0
 80083e0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80083e2:	230f      	movs	r3, #15
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	781b      	ldrb	r3, [r3, #0]
}
 80083e8:	0018      	movs	r0, r3
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b004      	add	sp, #16
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	23ae      	movs	r3, #174	; 0xae
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	58d3      	ldr	r3, [r2, r3]
 8008402:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008404:	230f      	movs	r3, #15
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800840c:	230c      	movs	r3, #12
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	2200      	movs	r2, #0
 8008412:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008414:	2317      	movs	r3, #23
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	001a      	movs	r2, r3
 8008422:	2360      	movs	r3, #96	; 0x60
 8008424:	4013      	ands	r3, r2
 8008426:	d03d      	beq.n	80084a4 <USBD_CDC_Setup+0xb4>
 8008428:	2b20      	cmp	r3, #32
 800842a:	d000      	beq.n	800842e <USBD_CDC_Setup+0x3e>
 800842c:	e094      	b.n	8008558 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	88db      	ldrh	r3, [r3, #6]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02b      	beq.n	800848e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b25b      	sxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	da12      	bge.n	8008466 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	23af      	movs	r3, #175	; 0xaf
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	58d3      	ldr	r3, [r2, r3]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800844e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	88d2      	ldrh	r2, [r2, #6]
 8008454:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008456:	6939      	ldr	r1, [r7, #16]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	88da      	ldrh	r2, [r3, #6]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	0018      	movs	r0, r3
 8008460:	f001 fbb2 	bl	8009bc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008464:	e083      	b.n	800856e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	7859      	ldrb	r1, [r3, #1]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	2380      	movs	r3, #128	; 0x80
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	b2d9      	uxtb	r1, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4a40      	ldr	r2, [pc, #256]	; (800857c <USBD_CDC_Setup+0x18c>)
 800847c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800847e:	6939      	ldr	r1, [r7, #16]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	88da      	ldrh	r2, [r3, #6]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	0018      	movs	r0, r3
 8008488:	f001 fbd1 	bl	8009c2e <USBD_CtlPrepareRx>
      break;
 800848c:	e06f      	b.n	800856e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	23af      	movs	r3, #175	; 0xaf
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	58d3      	ldr	r3, [r2, r3]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	7850      	ldrb	r0, [r2, #1]
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	2200      	movs	r2, #0
 80084a0:	4798      	blx	r3
      break;
 80084a2:	e064      	b.n	800856e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b0b      	cmp	r3, #11
 80084aa:	d037      	beq.n	800851c <USBD_CDC_Setup+0x12c>
 80084ac:	dc47      	bgt.n	800853e <USBD_CDC_Setup+0x14e>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <USBD_CDC_Setup+0xc8>
 80084b2:	2b0a      	cmp	r3, #10
 80084b4:	d019      	beq.n	80084ea <USBD_CDC_Setup+0xfa>
 80084b6:	e042      	b.n	800853e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	23a7      	movs	r3, #167	; 0xa7
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d107      	bne.n	80084d4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084c4:	230c      	movs	r3, #12
 80084c6:	18f9      	adds	r1, r7, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	0018      	movs	r0, r3
 80084ce:	f001 fb7b 	bl	8009bc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d2:	e040      	b.n	8008556 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	0011      	movs	r1, r2
 80084da:	0018      	movs	r0, r3
 80084dc:	f001 faf6 	bl	8009acc <USBD_CtlError>
            ret = USBD_FAIL;
 80084e0:	2317      	movs	r3, #23
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	2202      	movs	r2, #2
 80084e6:	701a      	strb	r2, [r3, #0]
          break;
 80084e8:	e035      	b.n	8008556 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	23a7      	movs	r3, #167	; 0xa7
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	5cd3      	ldrb	r3, [r2, r3]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d107      	bne.n	8008506 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084f6:	230f      	movs	r3, #15
 80084f8:	18f9      	adds	r1, r7, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	0018      	movs	r0, r3
 8008500:	f001 fb62 	bl	8009bc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008504:	e027      	b.n	8008556 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	0011      	movs	r1, r2
 800850c:	0018      	movs	r0, r3
 800850e:	f001 fadd 	bl	8009acc <USBD_CtlError>
            ret = USBD_FAIL;
 8008512:	2317      	movs	r3, #23
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	2202      	movs	r2, #2
 8008518:	701a      	strb	r2, [r3, #0]
          break;
 800851a:	e01c      	b.n	8008556 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	23a7      	movs	r3, #167	; 0xa7
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	5cd3      	ldrb	r3, [r2, r3]
 8008524:	2b03      	cmp	r3, #3
 8008526:	d015      	beq.n	8008554 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	0011      	movs	r1, r2
 800852e:	0018      	movs	r0, r3
 8008530:	f001 facc 	bl	8009acc <USBD_CtlError>
            ret = USBD_FAIL;
 8008534:	2317      	movs	r3, #23
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	2202      	movs	r2, #2
 800853a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800853c:	e00a      	b.n	8008554 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	0011      	movs	r1, r2
 8008544:	0018      	movs	r0, r3
 8008546:	f001 fac1 	bl	8009acc <USBD_CtlError>
          ret = USBD_FAIL;
 800854a:	2317      	movs	r3, #23
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	2202      	movs	r2, #2
 8008550:	701a      	strb	r2, [r3, #0]
          break;
 8008552:	e000      	b.n	8008556 <USBD_CDC_Setup+0x166>
          break;
 8008554:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008556:	e00a      	b.n	800856e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	0011      	movs	r1, r2
 800855e:	0018      	movs	r0, r3
 8008560:	f001 fab4 	bl	8009acc <USBD_CtlError>
      ret = USBD_FAIL;
 8008564:	2317      	movs	r3, #23
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	2202      	movs	r2, #2
 800856a:	701a      	strb	r2, [r3, #0]
      break;
 800856c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800856e:	2317      	movs	r3, #23
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	781b      	ldrb	r3, [r3, #0]
}
 8008574:	0018      	movs	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	b006      	add	sp, #24
 800857a:	bd80      	pop	{r7, pc}
 800857c:	00000201 	.word	0x00000201

08008580 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	000a      	movs	r2, r1
 800858a:	1cfb      	adds	r3, r7, #3
 800858c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	23ae      	movs	r3, #174	; 0xae
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	58d3      	ldr	r3, [r2, r3]
 8008596:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	23b0      	movs	r3, #176	; 0xb0
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	58d3      	ldr	r3, [r2, r3]
 80085a0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	23ae      	movs	r3, #174	; 0xae
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	58d3      	ldr	r3, [r2, r3]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d03e      	beq.n	800862c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085ae:	1cfb      	adds	r3, r7, #3
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	0013      	movs	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	18cb      	adds	r3, r1, r3
 80085be:	331c      	adds	r3, #28
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d02b      	beq.n	800861e <USBD_CDC_DataIn+0x9e>
 80085c6:	1cfb      	adds	r3, r7, #3
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	0013      	movs	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	189b      	adds	r3, r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	18cb      	adds	r3, r1, r3
 80085d6:	331c      	adds	r3, #28
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	1cfb      	adds	r3, r7, #3
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	0013      	movs	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	189b      	adds	r3, r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	18cb      	adds	r3, r1, r3
 80085ea:	3338      	adds	r3, #56	; 0x38
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	0019      	movs	r1, r3
 80085f0:	f7f7 fe1a 	bl	8000228 <__aeabi_uidivmod>
 80085f4:	1e0b      	subs	r3, r1, #0
 80085f6:	d112      	bne.n	800861e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085f8:	1cfb      	adds	r3, r7, #3
 80085fa:	781a      	ldrb	r2, [r3, #0]
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	0013      	movs	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	189b      	adds	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	18cb      	adds	r3, r1, r3
 8008608:	331c      	adds	r3, #28
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800860e:	1cfb      	adds	r3, r7, #3
 8008610:	7819      	ldrb	r1, [r3, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	f001 ffc9 	bl	800a5ae <USBD_LL_Transmit>
 800861c:	e004      	b.n	8008628 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	2385      	movs	r3, #133	; 0x85
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	2100      	movs	r1, #0
 8008626:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	e000      	b.n	800862e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800862c:	2302      	movs	r3, #2
  }
}
 800862e:	0018      	movs	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	b004      	add	sp, #16
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	000a      	movs	r2, r1
 8008640:	1cfb      	adds	r3, r7, #3
 8008642:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	23ae      	movs	r3, #174	; 0xae
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	58d3      	ldr	r3, [r2, r3]
 800864c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800864e:	1cfb      	adds	r3, r7, #3
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	0011      	movs	r1, r2
 8008656:	0018      	movs	r0, r3
 8008658:	f002 f817 	bl	800a68a <USBD_LL_GetRxDataSize>
 800865c:	0001      	movs	r1, r0
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	2383      	movs	r3, #131	; 0x83
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	23ae      	movs	r3, #174	; 0xae
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	58d3      	ldr	r3, [r2, r3]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d011      	beq.n	8008696 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	23af      	movs	r3, #175	; 0xaf
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	58d3      	ldr	r3, [r2, r3]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	2381      	movs	r3, #129	; 0x81
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	58c8      	ldr	r0, [r1, r3]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2183      	movs	r1, #131	; 0x83
 8008688:	0089      	lsls	r1, r1, #2
 800868a:	468c      	mov	ip, r1
 800868c:	4463      	add	r3, ip
 800868e:	0019      	movs	r1, r3
 8008690:	4790      	blx	r2

    return USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	e000      	b.n	8008698 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8008696:	2302      	movs	r3, #2
  }
}
 8008698:	0018      	movs	r0, r3
 800869a:	46bd      	mov	sp, r7
 800869c:	b004      	add	sp, #16
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	23ae      	movs	r3, #174	; 0xae
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	58d3      	ldr	r3, [r2, r3]
 80086b0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	23af      	movs	r3, #175	; 0xaf
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	58d3      	ldr	r3, [r2, r3]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d019      	beq.n	80086f2 <USBD_CDC_EP0_RxReady+0x52>
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	5cd3      	ldrb	r3, [r2, r3]
 80086c6:	2bff      	cmp	r3, #255	; 0xff
 80086c8:	d013      	beq.n	80086f2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	23af      	movs	r3, #175	; 0xaf
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	58d3      	ldr	r3, [r2, r3]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	2280      	movs	r2, #128	; 0x80
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80086dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4c06      	ldr	r4, [pc, #24]	; (80086fc <USBD_CDC_EP0_RxReady+0x5c>)
 80086e2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086e4:	b292      	uxth	r2, r2
 80086e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	2380      	movs	r3, #128	; 0x80
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	21ff      	movs	r1, #255	; 0xff
 80086f0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	0018      	movs	r0, r3
 80086f6:	46bd      	mov	sp, r7
 80086f8:	b005      	add	sp, #20
 80086fa:	bd90      	pop	{r4, r7, pc}
 80086fc:	00000201 	.word	0x00000201

08008700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2243      	movs	r2, #67	; 0x43
 800870c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800870e:	4b02      	ldr	r3, [pc, #8]	; (8008718 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8008710:	0018      	movs	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	b002      	add	sp, #8
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000370 	.word	0x20000370

0800871c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2243      	movs	r2, #67	; 0x43
 8008728:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800872a:	4b02      	ldr	r3, [pc, #8]	; (8008734 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800872c:	0018      	movs	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	b002      	add	sp, #8
 8008732:	bd80      	pop	{r7, pc}
 8008734:	2000032c 	.word	0x2000032c

08008738 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2243      	movs	r2, #67	; 0x43
 8008744:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008746:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b002      	add	sp, #8
 800874e:	bd80      	pop	{r7, pc}
 8008750:	200003b4 	.word	0x200003b4

08008754 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220a      	movs	r2, #10
 8008760:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008762:	4b02      	ldr	r3, [pc, #8]	; (800876c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	b002      	add	sp, #8
 800876a:	bd80      	pop	{r7, pc}
 800876c:	200002e8 	.word	0x200002e8

08008770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800877a:	200f      	movs	r0, #15
 800877c:	183b      	adds	r3, r7, r0
 800877e:	2202      	movs	r2, #2
 8008780:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	23af      	movs	r3, #175	; 0xaf
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8008792:	183b      	adds	r3, r7, r0
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008798:	230f      	movs	r3, #15
 800879a:	18fb      	adds	r3, r7, r3
 800879c:	781b      	ldrb	r3, [r3, #0]
}
 800879e:	0018      	movs	r0, r3
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b004      	add	sp, #16
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	1dbb      	adds	r3, r7, #6
 80087b2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	23ae      	movs	r3, #174	; 0xae
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	58d3      	ldr	r3, [r2, r3]
 80087bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	2382      	movs	r3, #130	; 0x82
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80087c8:	1dbb      	adds	r3, r7, #6
 80087ca:	8819      	ldrh	r1, [r3, #0]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	2384      	movs	r3, #132	; 0x84
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	0018      	movs	r0, r3
 80087d8:	46bd      	mov	sp, r7
 80087da:	b006      	add	sp, #24
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	23ae      	movs	r3, #174	; 0xae
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	58d3      	ldr	r3, [r2, r3]
 80087f0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	2381      	movs	r3, #129	; 0x81
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	0018      	movs	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	b004      	add	sp, #16
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	23ae      	movs	r3, #174	; 0xae
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	58d3      	ldr	r3, [r2, r3]
 8008816:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	23ae      	movs	r3, #174	; 0xae
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	58d3      	ldr	r3, [r2, r3]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d022      	beq.n	800886a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	2385      	movs	r3, #133	; 0x85
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	58d3      	ldr	r3, [r2, r3]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11a      	bne.n	8008866 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	2385      	movs	r3, #133	; 0x85
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	2101      	movs	r1, #1
 8008838:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	2384      	movs	r3, #132	; 0x84
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	58d2      	ldr	r2, [r2, r3]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	2382      	movs	r3, #130	; 0x82
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	2384      	movs	r3, #132	; 0x84
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008856:	b29b      	uxth	r3, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	000a      	movs	r2, r1
 800885c:	2181      	movs	r1, #129	; 0x81
 800885e:	f001 fea6 	bl	800a5ae <USBD_LL_Transmit>

      return USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e002      	b.n	800886c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800886a:	2302      	movs	r3, #2
  }
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b004      	add	sp, #16
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	23ae      	movs	r3, #174	; 0xae
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	58d3      	ldr	r3, [r2, r3]
 8008884:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	23ae      	movs	r3, #174	; 0xae
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	58d3      	ldr	r3, [r2, r3]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d019      	beq.n	80088c6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7c1b      	ldrb	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	2381      	movs	r3, #129	; 0x81
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	58d2      	ldr	r2, [r2, r3]
 80088a2:	2380      	movs	r3, #128	; 0x80
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	2101      	movs	r1, #1
 80088aa:	f001 feb7 	bl	800a61c <USBD_LL_PrepareReceive>
 80088ae:	e008      	b.n	80088c2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	2381      	movs	r3, #129	; 0x81
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	58d2      	ldr	r2, [r2, r3]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	2340      	movs	r3, #64	; 0x40
 80088bc:	2101      	movs	r1, #1
 80088be:	f001 fead 	bl	800a61c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e000      	b.n	80088c8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80088c6:	2302      	movs	r3, #2
  }
}
 80088c8:	0018      	movs	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b004      	add	sp, #16
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	1dfb      	adds	r3, r7, #7
 80088dc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	e020      	b.n	800892a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	23ad      	movs	r3, #173	; 0xad
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	58d3      	ldr	r3, [r2, r3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	23ad      	movs	r3, #173	; 0xad
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	2100      	movs	r1, #0
 80088fc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	23ac      	movs	r3, #172	; 0xac
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	23a7      	movs	r3, #167	; 0xa7
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	2101      	movs	r1, #1
 8008916:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1dfa      	adds	r2, r7, #7
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	0018      	movs	r0, r3
 8008924:	f001 fca6 	bl	800a274 <USBD_LL_Init>

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	0018      	movs	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	b004      	add	sp, #16
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800893c:	200f      	movs	r0, #15
 800893e:	183b      	adds	r3, r7, r0
 8008940:	2200      	movs	r2, #0
 8008942:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	23ad      	movs	r3, #173	; 0xad
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008954:	183b      	adds	r3, r7, r0
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	e003      	b.n	8008964 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800895c:	230f      	movs	r3, #15
 800895e:	18fb      	adds	r3, r7, r3
 8008960:	2202      	movs	r2, #2
 8008962:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008964:	230f      	movs	r3, #15
 8008966:	18fb      	adds	r3, r7, r3
 8008968:	781b      	ldrb	r3, [r3, #0]
}
 800896a:	0018      	movs	r0, r3
 800896c:	46bd      	mov	sp, r7
 800896e:	b004      	add	sp, #16
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	0018      	movs	r0, r3
 800897e:	f001 fcdd 	bl	800a33c <USBD_LL_Start>

  return USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	0018      	movs	r0, r3
 8008998:	46bd      	mov	sp, r7
 800899a:	b002      	add	sp, #8
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800899e:	b590      	push	{r4, r7, lr}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	000a      	movs	r2, r1
 80089a8:	1cfb      	adds	r3, r7, #3
 80089aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089ac:	240f      	movs	r4, #15
 80089ae:	193b      	adds	r3, r7, r4
 80089b0:	2202      	movs	r2, #2
 80089b2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	23ad      	movs	r3, #173	; 0xad
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	58d3      	ldr	r3, [r2, r3]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00e      	beq.n	80089de <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	23ad      	movs	r3, #173	; 0xad
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	58d3      	ldr	r3, [r2, r3]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	1cfa      	adds	r2, r7, #3
 80089cc:	7811      	ldrb	r1, [r2, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	0010      	movs	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	1e03      	subs	r3, r0, #0
 80089d6:	d102      	bne.n	80089de <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80089d8:	193b      	adds	r3, r7, r4
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80089de:	230f      	movs	r3, #15
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	781b      	ldrb	r3, [r3, #0]
}
 80089e4:	0018      	movs	r0, r3
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b005      	add	sp, #20
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	000a      	movs	r2, r1
 80089f6:	1cfb      	adds	r3, r7, #3
 80089f8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	23ad      	movs	r3, #173	; 0xad
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	58d3      	ldr	r3, [r2, r3]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	1cfa      	adds	r2, r7, #3
 8008a06:	7811      	ldrb	r1, [r2, #0]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	0010      	movs	r0, r2
 8008a0c:	4798      	blx	r3

  return USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	0018      	movs	r0, r3
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	22aa      	movs	r2, #170	; 0xaa
 8008a26:	0092      	lsls	r2, r2, #2
 8008a28:	4694      	mov	ip, r2
 8008a2a:	4463      	add	r3, ip
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	0011      	movs	r1, r2
 8008a30:	0018      	movs	r0, r3
 8008a32:	f001 f810 	bl	8009a56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	23a5      	movs	r3, #165	; 0xa5
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a23      	ldr	r2, [pc, #140]	; (8008ad0 <USBD_LL_SetupStage+0xb8>)
 8008a44:	5a9b      	ldrh	r3, [r3, r2]
 8008a46:	0019      	movs	r1, r3
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	23a6      	movs	r3, #166	; 0xa6
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	23aa      	movs	r3, #170	; 0xaa
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	5cd3      	ldrb	r3, [r2, r3]
 8008a58:	001a      	movs	r2, r3
 8008a5a:	231f      	movs	r3, #31
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d019      	beq.n	8008a96 <USBD_LL_SetupStage+0x7e>
 8008a62:	d822      	bhi.n	8008aaa <USBD_LL_SetupStage+0x92>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <USBD_LL_SetupStage+0x56>
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d00a      	beq.n	8008a82 <USBD_LL_SetupStage+0x6a>
 8008a6c:	e01d      	b.n	8008aaa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	22aa      	movs	r2, #170	; 0xaa
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	189a      	adds	r2, r3, r2
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	0011      	movs	r1, r2
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fa10 	bl	8008ea0 <USBD_StdDevReq>
      break;
 8008a80:	e020      	b.n	8008ac4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	22aa      	movs	r2, #170	; 0xaa
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	189a      	adds	r2, r3, r2
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	0011      	movs	r1, r2
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f000 fa78 	bl	8008f84 <USBD_StdItfReq>
      break;
 8008a94:	e016      	b.n	8008ac4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	22aa      	movs	r2, #170	; 0xaa
 8008a9a:	0092      	lsls	r2, r2, #2
 8008a9c:	189a      	adds	r2, r3, r2
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0011      	movs	r1, r2
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 fac5 	bl	8009032 <USBD_StdEPReq>
      break;
 8008aa8:	e00c      	b.n	8008ac4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	23aa      	movs	r3, #170	; 0xaa
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	5cd3      	ldrb	r3, [r2, r3]
 8008ab2:	227f      	movs	r2, #127	; 0x7f
 8008ab4:	4393      	bics	r3, r2
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	0011      	movs	r1, r2
 8008abc:	0018      	movs	r0, r3
 8008abe:	f001 fcc4 	bl	800a44a <USBD_LL_StallEP>
      break;
 8008ac2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	b002      	add	sp, #8
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	000002ae 	.word	0x000002ae

08008ad4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	200b      	movs	r0, #11
 8008ae0:	183b      	adds	r3, r7, r0
 8008ae2:	1c0a      	adds	r2, r1, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ae6:	183b      	adds	r3, r7, r0
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d154      	bne.n	8008b98 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3355      	adds	r3, #85	; 0x55
 8008af2:	33ff      	adds	r3, #255	; 0xff
 8008af4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	23a5      	movs	r3, #165	; 0xa5
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	58d3      	ldr	r3, [r2, r3]
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d139      	bne.n	8008b76 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d919      	bls.n	8008b42 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d203      	bcs.n	8008b30 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	e002      	b.n	8008b36 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	001a      	movs	r2, r3
 8008b3c:	f001 f89b 	bl	8009c76 <USBD_CtlContinueRx>
 8008b40:	e045      	b.n	8008bce <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	23ad      	movs	r3, #173	; 0xad
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	58d3      	ldr	r3, [r2, r3]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00d      	beq.n	8008b6c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	23a7      	movs	r3, #167	; 0xa7
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d107      	bne.n	8008b6c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	23ad      	movs	r3, #173	; 0xad
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	58d3      	ldr	r3, [r2, r3]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	0010      	movs	r0, r2
 8008b6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f001 f894 	bl	8009c9c <USBD_CtlSendStatus>
 8008b74:	e02b      	b.n	8008bce <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	23a5      	movs	r3, #165	; 0xa5
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	58d3      	ldr	r3, [r2, r3]
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d125      	bne.n	8008bce <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	23a5      	movs	r3, #165	; 0xa5
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	2100      	movs	r1, #0
 8008b8a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2100      	movs	r1, #0
 8008b90:	0018      	movs	r0, r3
 8008b92:	f001 fc5a 	bl	800a44a <USBD_LL_StallEP>
 8008b96:	e01a      	b.n	8008bce <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	23ad      	movs	r3, #173	; 0xad
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	58d3      	ldr	r3, [r2, r3]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d011      	beq.n	8008bca <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	23a7      	movs	r3, #167	; 0xa7
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d10b      	bne.n	8008bca <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	23ad      	movs	r3, #173	; 0xad
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	58d3      	ldr	r3, [r2, r3]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	220b      	movs	r2, #11
 8008bbe:	18ba      	adds	r2, r7, r2
 8008bc0:	7811      	ldrb	r1, [r2, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	0010      	movs	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	e001      	b.n	8008bce <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e000      	b.n	8008bd0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b006      	add	sp, #24
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	607a      	str	r2, [r7, #4]
 8008be2:	200b      	movs	r0, #11
 8008be4:	183b      	adds	r3, r7, r0
 8008be6:	1c0a      	adds	r2, r1, #0
 8008be8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bea:	183b      	adds	r3, r7, r0
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d000      	beq.n	8008bf4 <USBD_LL_DataInStage+0x1c>
 8008bf2:	e08e      	b.n	8008d12 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	23a5      	movs	r3, #165	; 0xa5
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	58d3      	ldr	r3, [r2, r3]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d164      	bne.n	8008cd0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d915      	bls.n	8008c3e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f000 ffec 	bl	8009c08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	2300      	movs	r3, #0
 8008c34:	2200      	movs	r2, #0
 8008c36:	2100      	movs	r1, #0
 8008c38:	f001 fcf0 	bl	800a61c <USBD_LL_PrepareReceive>
 8008c3c:	e059      	b.n	8008cf2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	0019      	movs	r1, r3
 8008c48:	0010      	movs	r0, r2
 8008c4a:	f7f7 faed 	bl	8000228 <__aeabi_uidivmod>
 8008c4e:	1e0b      	subs	r3, r1, #0
 8008c50:	d11f      	bne.n	8008c92 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d319      	bcc.n	8008c92 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	23a6      	movs	r3, #166	; 0xa6
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d211      	bcs.n	8008c92 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2100      	movs	r1, #0
 8008c74:	0018      	movs	r0, r3
 8008c76:	f000 ffc7 	bl	8009c08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	23a6      	movs	r3, #166	; 0xa6
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	2100      	movs	r1, #0
 8008c82:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	2300      	movs	r3, #0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f001 fcc6 	bl	800a61c <USBD_LL_PrepareReceive>
 8008c90:	e02f      	b.n	8008cf2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	23ad      	movs	r3, #173	; 0xad
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	58d3      	ldr	r3, [r2, r3]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00d      	beq.n	8008cbc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	23a7      	movs	r3, #167	; 0xa7
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d107      	bne.n	8008cbc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	23ad      	movs	r3, #173	; 0xad
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	58d3      	ldr	r3, [r2, r3]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	0010      	movs	r0, r2
 8008cba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f001 fbc2 	bl	800a44a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f000 fffb 	bl	8009cc4 <USBD_CtlReceiveStatus>
 8008cce:	e010      	b.n	8008cf2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	23a5      	movs	r3, #165	; 0xa5
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	58d3      	ldr	r3, [r2, r3]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d005      	beq.n	8008ce8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	23a5      	movs	r3, #165	; 0xa5
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	0018      	movs	r0, r3
 8008cee:	f001 fbac 	bl	800a44a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	23a8      	movs	r3, #168	; 0xa8
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	5cd3      	ldrb	r3, [r2, r3]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d124      	bne.n	8008d48 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	0018      	movs	r0, r3
 8008d02:	f7ff fe43 	bl	800898c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	23a8      	movs	r3, #168	; 0xa8
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	54d1      	strb	r1, [r2, r3]
 8008d10:	e01a      	b.n	8008d48 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	23ad      	movs	r3, #173	; 0xad
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	58d3      	ldr	r3, [r2, r3]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d011      	beq.n	8008d44 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	23a7      	movs	r3, #167	; 0xa7
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d10b      	bne.n	8008d44 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	23ad      	movs	r3, #173	; 0xad
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	58d3      	ldr	r3, [r2, r3]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	220b      	movs	r2, #11
 8008d38:	18ba      	adds	r2, r7, r2
 8008d3a:	7811      	ldrb	r1, [r2, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	0010      	movs	r0, r2
 8008d40:	4798      	blx	r3
 8008d42:	e001      	b.n	8008d48 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d44:	2302      	movs	r3, #2
 8008d46:	e000      	b.n	8008d4a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b006      	add	sp, #24
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2100      	movs	r1, #0
 8008d62:	f001 fb10 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	23ac      	movs	r3, #172	; 0xac
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	23b2      	movs	r3, #178	; 0xb2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	2140      	movs	r1, #64	; 0x40
 8008d78:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	f001 fb00 	bl	800a386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2240      	movs	r2, #64	; 0x40
 8008d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	23a7      	movs	r3, #167	; 0xa7
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	2101      	movs	r1, #1
 8008d9a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	23a5      	movs	r3, #165	; 0xa5
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	2100      	movs	r1, #0
 8008da4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	23a9      	movs	r3, #169	; 0xa9
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	2100      	movs	r1, #0
 8008db4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	23ae      	movs	r3, #174	; 0xae
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	58d3      	ldr	r3, [r2, r3]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	23ad      	movs	r3, #173	; 0xad
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	58d3      	ldr	r3, [r2, r3]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	b2d9      	uxtb	r1, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	4790      	blx	r2
  }

  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	0018      	movs	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	b002      	add	sp, #8
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	000a      	movs	r2, r1
 8008dec:	1cfb      	adds	r3, r7, #3
 8008dee:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1cfa      	adds	r2, r7, #3
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	b002      	add	sp, #8
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	23a7      	movs	r3, #167	; 0xa7
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	5cd1      	ldrb	r1, [r2, r3]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a06      	ldr	r2, [pc, #24]	; (8008e30 <USBD_LL_Suspend+0x2c>)
 8008e18:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	23a7      	movs	r3, #167	; 0xa7
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	2104      	movs	r1, #4
 8008e22:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	0018      	movs	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b002      	add	sp, #8
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	0000029d 	.word	0x0000029d

08008e34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	23a7      	movs	r3, #167	; 0xa7
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d106      	bne.n	8008e56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a05      	ldr	r2, [pc, #20]	; (8008e60 <USBD_LL_Resume+0x2c>)
 8008e4c:	5c99      	ldrb	r1, [r3, r2]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	23a7      	movs	r3, #167	; 0xa7
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	0018      	movs	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b002      	add	sp, #8
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	0000029d 	.word	0x0000029d

08008e64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	23a7      	movs	r3, #167	; 0xa7
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	5cd3      	ldrb	r3, [r2, r3]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d10e      	bne.n	8008e96 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	23ad      	movs	r3, #173	; 0xad
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	58d3      	ldr	r3, [r2, r3]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	23ad      	movs	r3, #173	; 0xad
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	58d3      	ldr	r3, [r2, r3]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	0010      	movs	r0, r2
 8008e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	0018      	movs	r0, r3
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	b002      	add	sp, #8
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eaa:	230f      	movs	r3, #15
 8008eac:	18fb      	adds	r3, r7, r3
 8008eae:	2200      	movs	r2, #0
 8008eb0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	001a      	movs	r2, r3
 8008eb8:	2360      	movs	r3, #96	; 0x60
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b40      	cmp	r3, #64	; 0x40
 8008ebe:	d004      	beq.n	8008eca <USBD_StdDevReq+0x2a>
 8008ec0:	d84f      	bhi.n	8008f62 <USBD_StdDevReq+0xc2>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_StdDevReq+0x3e>
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d14b      	bne.n	8008f62 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	23ad      	movs	r3, #173	; 0xad
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	58d3      	ldr	r3, [r2, r3]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	0010      	movs	r0, r2
 8008eda:	4798      	blx	r3
      break;
 8008edc:	e048      	b.n	8008f70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	d835      	bhi.n	8008f52 <USBD_StdDevReq+0xb2>
 8008ee6:	009a      	lsls	r2, r3, #2
 8008ee8:	4b25      	ldr	r3, [pc, #148]	; (8008f80 <USBD_StdDevReq+0xe0>)
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	0011      	movs	r1, r2
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f000 fa52 	bl	80093a0 <USBD_GetDescriptor>
          break;
 8008efc:	e030      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f000 fbfd 	bl	8009704 <USBD_SetAddress>
          break;
 8008f0a:	e029      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	0011      	movs	r1, r2
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 fc4a 	bl	80097ac <USBD_SetConfig>
          break;
 8008f18:	e022      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f000 fce7 	bl	80098f4 <USBD_GetConfig>
          break;
 8008f26:	e01b      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	0011      	movs	r1, r2
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f000 fd1b 	bl	800996a <USBD_GetStatus>
          break;
 8008f34:	e014      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	0011      	movs	r1, r2
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 fd4e 	bl	80099de <USBD_SetFeature>
          break;
 8008f42:	e00d      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	0011      	movs	r1, r2
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f000 fd5d 	bl	8009a0a <USBD_ClrFeature>
          break;
 8008f50:	e006      	b.n	8008f60 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	0011      	movs	r1, r2
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 fdb7 	bl	8009acc <USBD_CtlError>
          break;
 8008f5e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008f60:	e006      	b.n	8008f70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	0011      	movs	r1, r2
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f000 fdaf 	bl	8009acc <USBD_CtlError>
      break;
 8008f6e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008f70:	230f      	movs	r3, #15
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	781b      	ldrb	r3, [r3, #0]
}
 8008f76:	0018      	movs	r0, r3
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	b004      	add	sp, #16
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	0800b130 	.word	0x0800b130

08008f84 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f84:	b5b0      	push	{r4, r5, r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f8e:	230f      	movs	r3, #15
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	001a      	movs	r2, r3
 8008f9c:	2360      	movs	r3, #96	; 0x60
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d004      	beq.n	8008fae <USBD_StdItfReq+0x2a>
 8008fa4:	d839      	bhi.n	800901a <USBD_StdItfReq+0x96>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <USBD_StdItfReq+0x2a>
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d135      	bne.n	800901a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	23a7      	movs	r3, #167	; 0xa7
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	5cd3      	ldrb	r3, [r2, r3]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d825      	bhi.n	8009008 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	889b      	ldrh	r3, [r3, #4]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d819      	bhi.n	8008ffa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	23ad      	movs	r3, #173	; 0xad
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	58d3      	ldr	r3, [r2, r3]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	250f      	movs	r5, #15
 8008fd2:	197c      	adds	r4, r7, r5
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	0010      	movs	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	0003      	movs	r3, r0
 8008fde:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	88db      	ldrh	r3, [r3, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d116      	bne.n	8009016 <USBD_StdItfReq+0x92>
 8008fe8:	197b      	adds	r3, r7, r5
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d112      	bne.n	8009016 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f000 fe52 	bl	8009c9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ff8:	e00d      	b.n	8009016 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	0011      	movs	r1, r2
 8009000:	0018      	movs	r0, r3
 8009002:	f000 fd63 	bl	8009acc <USBD_CtlError>
          break;
 8009006:	e006      	b.n	8009016 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	0011      	movs	r1, r2
 800900e:	0018      	movs	r0, r3
 8009010:	f000 fd5c 	bl	8009acc <USBD_CtlError>
          break;
 8009014:	e000      	b.n	8009018 <USBD_StdItfReq+0x94>
          break;
 8009016:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009018:	e006      	b.n	8009028 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f000 fd53 	bl	8009acc <USBD_CtlError>
      break;
 8009026:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	0018      	movs	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	b004      	add	sp, #16
 8009030:	bdb0      	pop	{r4, r5, r7, pc}

08009032 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009032:	b5b0      	push	{r4, r5, r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800903c:	230f      	movs	r3, #15
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	889a      	ldrh	r2, [r3, #4]
 8009048:	230e      	movs	r3, #14
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	001a      	movs	r2, r3
 8009054:	2360      	movs	r3, #96	; 0x60
 8009056:	4013      	ands	r3, r2
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d006      	beq.n	800906a <USBD_StdEPReq+0x38>
 800905c:	d900      	bls.n	8009060 <USBD_StdEPReq+0x2e>
 800905e:	e190      	b.n	8009382 <USBD_StdEPReq+0x350>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <USBD_StdEPReq+0x4c>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d000      	beq.n	800906a <USBD_StdEPReq+0x38>
 8009068:	e18b      	b.n	8009382 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	23ad      	movs	r3, #173	; 0xad
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	58d3      	ldr	r3, [r2, r3]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	0010      	movs	r0, r2
 800907a:	4798      	blx	r3
      break;
 800907c:	e188      	b.n	8009390 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	001a      	movs	r2, r3
 8009084:	2360      	movs	r3, #96	; 0x60
 8009086:	4013      	ands	r3, r2
 8009088:	2b20      	cmp	r3, #32
 800908a:	d10f      	bne.n	80090ac <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	23ad      	movs	r3, #173	; 0xad
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	58d3      	ldr	r3, [r2, r3]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	250f      	movs	r5, #15
 8009098:	197c      	adds	r4, r7, r5
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	0010      	movs	r0, r2
 80090a0:	4798      	blx	r3
 80090a2:	0003      	movs	r3, r0
 80090a4:	7023      	strb	r3, [r4, #0]

        return ret;
 80090a6:	197b      	adds	r3, r7, r5
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	e174      	b.n	8009396 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d007      	beq.n	80090c4 <USBD_StdEPReq+0x92>
 80090b4:	dd00      	ble.n	80090b8 <USBD_StdEPReq+0x86>
 80090b6:	e15c      	b.n	8009372 <USBD_StdEPReq+0x340>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d100      	bne.n	80090be <USBD_StdEPReq+0x8c>
 80090bc:	e092      	b.n	80091e4 <USBD_StdEPReq+0x1b2>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d04b      	beq.n	800915a <USBD_StdEPReq+0x128>
 80090c2:	e156      	b.n	8009372 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	23a7      	movs	r3, #167	; 0xa7
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	5cd3      	ldrb	r3, [r2, r3]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d002      	beq.n	80090d6 <USBD_StdEPReq+0xa4>
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d01d      	beq.n	8009110 <USBD_StdEPReq+0xde>
 80090d4:	e039      	b.n	800914a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090d6:	220e      	movs	r2, #14
 80090d8:	18bb      	adds	r3, r7, r2
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d010      	beq.n	8009102 <USBD_StdEPReq+0xd0>
 80090e0:	18bb      	adds	r3, r7, r2
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b80      	cmp	r3, #128	; 0x80
 80090e6:	d00c      	beq.n	8009102 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80090e8:	18bb      	adds	r3, r7, r2
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	0011      	movs	r1, r2
 80090f0:	0018      	movs	r0, r3
 80090f2:	f001 f9aa 	bl	800a44a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2180      	movs	r1, #128	; 0x80
 80090fa:	0018      	movs	r0, r3
 80090fc:	f001 f9a5 	bl	800a44a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009100:	e02a      	b.n	8009158 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	0011      	movs	r1, r2
 8009108:	0018      	movs	r0, r3
 800910a:	f000 fcdf 	bl	8009acc <USBD_CtlError>
              break;
 800910e:	e023      	b.n	8009158 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d113      	bne.n	8009140 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009118:	220e      	movs	r2, #14
 800911a:	18bb      	adds	r3, r7, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00e      	beq.n	8009140 <USBD_StdEPReq+0x10e>
 8009122:	18bb      	adds	r3, r7, r2
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b80      	cmp	r3, #128	; 0x80
 8009128:	d00a      	beq.n	8009140 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	88db      	ldrh	r3, [r3, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009132:	18bb      	adds	r3, r7, r2
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	0011      	movs	r1, r2
 800913a:	0018      	movs	r0, r3
 800913c:	f001 f985 	bl	800a44a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	0018      	movs	r0, r3
 8009144:	f000 fdaa 	bl	8009c9c <USBD_CtlSendStatus>

              break;
 8009148:	e006      	b.n	8009158 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f000 fcbb 	bl	8009acc <USBD_CtlError>
              break;
 8009156:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009158:	e112      	b.n	8009380 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	23a7      	movs	r3, #167	; 0xa7
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	5cd3      	ldrb	r3, [r2, r3]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d002      	beq.n	800916c <USBD_StdEPReq+0x13a>
 8009166:	2b03      	cmp	r3, #3
 8009168:	d01d      	beq.n	80091a6 <USBD_StdEPReq+0x174>
 800916a:	e032      	b.n	80091d2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800916c:	220e      	movs	r2, #14
 800916e:	18bb      	adds	r3, r7, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d010      	beq.n	8009198 <USBD_StdEPReq+0x166>
 8009176:	18bb      	adds	r3, r7, r2
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d00c      	beq.n	8009198 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800917e:	18bb      	adds	r3, r7, r2
 8009180:	781a      	ldrb	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	0011      	movs	r1, r2
 8009186:	0018      	movs	r0, r3
 8009188:	f001 f95f 	bl	800a44a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	0018      	movs	r0, r3
 8009192:	f001 f95a 	bl	800a44a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009196:	e024      	b.n	80091e2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	0011      	movs	r1, r2
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 fc94 	bl	8009acc <USBD_CtlError>
              break;
 80091a4:	e01d      	b.n	80091e2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d118      	bne.n	80091e0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091ae:	210e      	movs	r1, #14
 80091b0:	187b      	adds	r3, r7, r1
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	227f      	movs	r2, #127	; 0x7f
 80091b6:	4013      	ands	r3, r2
 80091b8:	d006      	beq.n	80091c8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80091ba:	187b      	adds	r3, r7, r1
 80091bc:	781a      	ldrb	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	0011      	movs	r1, r2
 80091c2:	0018      	movs	r0, r3
 80091c4:	f001 f96c 	bl	800a4a0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	0018      	movs	r0, r3
 80091cc:	f000 fd66 	bl	8009c9c <USBD_CtlSendStatus>
              }
              break;
 80091d0:	e006      	b.n	80091e0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0011      	movs	r1, r2
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 fc77 	bl	8009acc <USBD_CtlError>
              break;
 80091de:	e000      	b.n	80091e2 <USBD_StdEPReq+0x1b0>
              break;
 80091e0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80091e2:	e0cd      	b.n	8009380 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	23a7      	movs	r3, #167	; 0xa7
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	5cd3      	ldrb	r3, [r2, r3]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d002      	beq.n	80091f6 <USBD_StdEPReq+0x1c4>
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d03c      	beq.n	800926e <USBD_StdEPReq+0x23c>
 80091f4:	e0b5      	b.n	8009362 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091f6:	220e      	movs	r2, #14
 80091f8:	18bb      	adds	r3, r7, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <USBD_StdEPReq+0x1e4>
 8009200:	18bb      	adds	r3, r7, r2
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b80      	cmp	r3, #128	; 0x80
 8009206:	d006      	beq.n	8009216 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	0011      	movs	r1, r2
 800920e:	0018      	movs	r0, r3
 8009210:	f000 fc5c 	bl	8009acc <USBD_CtlError>
                break;
 8009214:	e0ac      	b.n	8009370 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009216:	220e      	movs	r2, #14
 8009218:	18bb      	adds	r3, r7, r2
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b25b      	sxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	da0c      	bge.n	800923c <USBD_StdEPReq+0x20a>
 8009222:	18bb      	adds	r3, r7, r2
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	227f      	movs	r2, #127	; 0x7f
 8009228:	401a      	ands	r2, r3
 800922a:	0013      	movs	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	189b      	adds	r3, r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	3310      	adds	r3, #16
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	18d3      	adds	r3, r2, r3
 8009238:	3304      	adds	r3, #4
 800923a:	e00d      	b.n	8009258 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800923c:	230e      	movs	r3, #14
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	227f      	movs	r2, #127	; 0x7f
 8009244:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009246:	0013      	movs	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	189b      	adds	r3, r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	3351      	adds	r3, #81	; 0x51
 8009250:	33ff      	adds	r3, #255	; 0xff
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	18d3      	adds	r3, r2, r3
 8009256:	3304      	adds	r3, #4
 8009258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009260:	68b9      	ldr	r1, [r7, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	0018      	movs	r0, r3
 8009268:	f000 fcae 	bl	8009bc8 <USBD_CtlSendData>
              break;
 800926c:	e080      	b.n	8009370 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800926e:	220e      	movs	r2, #14
 8009270:	18bb      	adds	r3, r7, r2
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	b25b      	sxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	da14      	bge.n	80092a4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800927a:	18bb      	adds	r3, r7, r2
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	220f      	movs	r2, #15
 8009280:	401a      	ands	r2, r3
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	0013      	movs	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	189b      	adds	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	18cb      	adds	r3, r1, r3
 800928e:	3318      	adds	r3, #24
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d11e      	bne.n	80092d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	0011      	movs	r1, r2
 800929c:	0018      	movs	r0, r3
 800929e:	f000 fc15 	bl	8009acc <USBD_CtlError>
                  break;
 80092a2:	e065      	b.n	8009370 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092a4:	230e      	movs	r3, #14
 80092a6:	18fb      	adds	r3, r7, r3
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	220f      	movs	r2, #15
 80092ac:	401a      	ands	r2, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	23ac      	movs	r3, #172	; 0xac
 80092b2:	0059      	lsls	r1, r3, #1
 80092b4:	0013      	movs	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	189b      	adds	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	18c3      	adds	r3, r0, r3
 80092be:	185b      	adds	r3, r3, r1
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	0011      	movs	r1, r2
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 fbfd 	bl	8009acc <USBD_CtlError>
                  break;
 80092d2:	e04d      	b.n	8009370 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092d4:	220e      	movs	r2, #14
 80092d6:	18bb      	adds	r3, r7, r2
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b25b      	sxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	da0c      	bge.n	80092fa <USBD_StdEPReq+0x2c8>
 80092e0:	18bb      	adds	r3, r7, r2
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	227f      	movs	r2, #127	; 0x7f
 80092e6:	401a      	ands	r2, r3
 80092e8:	0013      	movs	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	189b      	adds	r3, r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	3310      	adds	r3, #16
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	3304      	adds	r3, #4
 80092f8:	e00d      	b.n	8009316 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092fa:	230e      	movs	r3, #14
 80092fc:	18fb      	adds	r3, r7, r3
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	227f      	movs	r2, #127	; 0x7f
 8009302:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009304:	0013      	movs	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	189b      	adds	r3, r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3351      	adds	r3, #81	; 0x51
 800930e:	33ff      	adds	r3, #255	; 0xff
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	18d3      	adds	r3, r2, r3
 8009314:	3304      	adds	r3, #4
 8009316:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009318:	220e      	movs	r2, #14
 800931a:	18bb      	adds	r3, r7, r2
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <USBD_StdEPReq+0x2f8>
 8009322:	18bb      	adds	r3, r7, r2
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b80      	cmp	r3, #128	; 0x80
 8009328:	d103      	bne.n	8009332 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e010      	b.n	8009354 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009332:	230e      	movs	r3, #14
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	0011      	movs	r1, r2
 800933c:	0018      	movs	r0, r3
 800933e:	f001 f8da 	bl	800a4f6 <USBD_LL_IsStallEP>
 8009342:	1e03      	subs	r3, r0, #0
 8009344:	d003      	beq.n	800934e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2201      	movs	r2, #1
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	e002      	b.n	8009354 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	0018      	movs	r0, r3
 800935c:	f000 fc34 	bl	8009bc8 <USBD_CtlSendData>
              break;
 8009360:	e006      	b.n	8009370 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0011      	movs	r1, r2
 8009368:	0018      	movs	r0, r3
 800936a:	f000 fbaf 	bl	8009acc <USBD_CtlError>
              break;
 800936e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009370:	e006      	b.n	8009380 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	0011      	movs	r1, r2
 8009378:	0018      	movs	r0, r3
 800937a:	f000 fba7 	bl	8009acc <USBD_CtlError>
          break;
 800937e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009380:	e006      	b.n	8009390 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	0011      	movs	r1, r2
 8009388:	0018      	movs	r0, r3
 800938a:	f000 fb9f 	bl	8009acc <USBD_CtlError>
      break;
 800938e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009390:	230f      	movs	r3, #15
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	781b      	ldrb	r3, [r3, #0]
}
 8009396:	0018      	movs	r0, r3
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080093a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093aa:	2308      	movs	r3, #8
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	2200      	movs	r2, #0
 80093b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093b6:	230b      	movs	r3, #11
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b07      	cmp	r3, #7
 80093c8:	d900      	bls.n	80093cc <USBD_GetDescriptor+0x2c>
 80093ca:	e159      	b.n	8009680 <USBD_GetDescriptor+0x2e0>
 80093cc:	009a      	lsls	r2, r3, #2
 80093ce:	4bcb      	ldr	r3, [pc, #812]	; (80096fc <USBD_GetDescriptor+0x35c>)
 80093d0:	18d3      	adds	r3, r2, r3
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	23ac      	movs	r3, #172	; 0xac
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	58d3      	ldr	r3, [r2, r3]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	2108      	movs	r1, #8
 80093e6:	1879      	adds	r1, r7, r1
 80093e8:	0010      	movs	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	0003      	movs	r3, r0
 80093ee:	60fb      	str	r3, [r7, #12]
      break;
 80093f0:	e153      	b.n	800969a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7c1b      	ldrb	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10f      	bne.n	800941a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	23ad      	movs	r3, #173	; 0xad
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	58d3      	ldr	r3, [r2, r3]
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	2208      	movs	r2, #8
 8009406:	18ba      	adds	r2, r7, r2
 8009408:	0010      	movs	r0, r2
 800940a:	4798      	blx	r3
 800940c:	0003      	movs	r3, r0
 800940e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	2202      	movs	r2, #2
 8009416:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009418:	e13f      	b.n	800969a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	23ad      	movs	r3, #173	; 0xad
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	58d3      	ldr	r3, [r2, r3]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	2208      	movs	r2, #8
 8009426:	18ba      	adds	r2, r7, r2
 8009428:	0010      	movs	r0, r2
 800942a:	4798      	blx	r3
 800942c:	0003      	movs	r3, r0
 800942e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	2202      	movs	r2, #2
 8009436:	701a      	strb	r2, [r3, #0]
      break;
 8009438:	e12f      	b.n	800969a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b05      	cmp	r3, #5
 8009442:	d900      	bls.n	8009446 <USBD_GetDescriptor+0xa6>
 8009444:	e0d0      	b.n	80095e8 <USBD_GetDescriptor+0x248>
 8009446:	009a      	lsls	r2, r3, #2
 8009448:	4bad      	ldr	r3, [pc, #692]	; (8009700 <USBD_GetDescriptor+0x360>)
 800944a:	18d3      	adds	r3, r2, r3
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	23ac      	movs	r3, #172	; 0xac
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	58d3      	ldr	r3, [r2, r3]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00d      	beq.n	800947a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	23ac      	movs	r3, #172	; 0xac
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	58d3      	ldr	r3, [r2, r3]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	7c12      	ldrb	r2, [r2, #16]
 800946c:	2108      	movs	r1, #8
 800946e:	1879      	adds	r1, r7, r1
 8009470:	0010      	movs	r0, r2
 8009472:	4798      	blx	r3
 8009474:	0003      	movs	r3, r0
 8009476:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009478:	e0c3      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	0011      	movs	r1, r2
 8009480:	0018      	movs	r0, r3
 8009482:	f000 fb23 	bl	8009acc <USBD_CtlError>
            err++;
 8009486:	210b      	movs	r1, #11
 8009488:	187b      	adds	r3, r7, r1
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	187b      	adds	r3, r7, r1
 800948e:	3201      	adds	r2, #1
 8009490:	701a      	strb	r2, [r3, #0]
          break;
 8009492:	e0b6      	b.n	8009602 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	23ac      	movs	r3, #172	; 0xac
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	58d3      	ldr	r3, [r2, r3]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00d      	beq.n	80094be <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	23ac      	movs	r3, #172	; 0xac
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	58d3      	ldr	r3, [r2, r3]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	2108      	movs	r1, #8
 80094b2:	1879      	adds	r1, r7, r1
 80094b4:	0010      	movs	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	0003      	movs	r3, r0
 80094ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094bc:	e0a1      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0011      	movs	r1, r2
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 fb01 	bl	8009acc <USBD_CtlError>
            err++;
 80094ca:	210b      	movs	r1, #11
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	3201      	adds	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]
          break;
 80094d6:	e094      	b.n	8009602 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	23ac      	movs	r3, #172	; 0xac
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	58d3      	ldr	r3, [r2, r3]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	23ac      	movs	r3, #172	; 0xac
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	58d3      	ldr	r3, [r2, r3]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7c12      	ldrb	r2, [r2, #16]
 80094f4:	2108      	movs	r1, #8
 80094f6:	1879      	adds	r1, r7, r1
 80094f8:	0010      	movs	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	0003      	movs	r3, r0
 80094fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009500:	e07f      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	0011      	movs	r1, r2
 8009508:	0018      	movs	r0, r3
 800950a:	f000 fadf 	bl	8009acc <USBD_CtlError>
            err++;
 800950e:	210b      	movs	r1, #11
 8009510:	187b      	adds	r3, r7, r1
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	187b      	adds	r3, r7, r1
 8009516:	3201      	adds	r2, #1
 8009518:	701a      	strb	r2, [r3, #0]
          break;
 800951a:	e072      	b.n	8009602 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	23ac      	movs	r3, #172	; 0xac
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	58d3      	ldr	r3, [r2, r3]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00d      	beq.n	8009546 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	23ac      	movs	r3, #172	; 0xac
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	58d3      	ldr	r3, [r2, r3]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	2108      	movs	r1, #8
 800953a:	1879      	adds	r1, r7, r1
 800953c:	0010      	movs	r0, r2
 800953e:	4798      	blx	r3
 8009540:	0003      	movs	r3, r0
 8009542:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009544:	e05d      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	0011      	movs	r1, r2
 800954c:	0018      	movs	r0, r3
 800954e:	f000 fabd 	bl	8009acc <USBD_CtlError>
            err++;
 8009552:	210b      	movs	r1, #11
 8009554:	187b      	adds	r3, r7, r1
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	187b      	adds	r3, r7, r1
 800955a:	3201      	adds	r2, #1
 800955c:	701a      	strb	r2, [r3, #0]
          break;
 800955e:	e050      	b.n	8009602 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	23ac      	movs	r3, #172	; 0xac
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	58d3      	ldr	r3, [r2, r3]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00d      	beq.n	800958a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	23ac      	movs	r3, #172	; 0xac
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	58d3      	ldr	r3, [r2, r3]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	2108      	movs	r1, #8
 800957e:	1879      	adds	r1, r7, r1
 8009580:	0010      	movs	r0, r2
 8009582:	4798      	blx	r3
 8009584:	0003      	movs	r3, r0
 8009586:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009588:	e03b      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	0011      	movs	r1, r2
 8009590:	0018      	movs	r0, r3
 8009592:	f000 fa9b 	bl	8009acc <USBD_CtlError>
            err++;
 8009596:	210b      	movs	r1, #11
 8009598:	187b      	adds	r3, r7, r1
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	187b      	adds	r3, r7, r1
 800959e:	3201      	adds	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
          break;
 80095a2:	e02e      	b.n	8009602 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	23ac      	movs	r3, #172	; 0xac
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	58d3      	ldr	r3, [r2, r3]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	23ac      	movs	r3, #172	; 0xac
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	58d3      	ldr	r3, [r2, r3]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	7c12      	ldrb	r2, [r2, #16]
 80095c0:	2108      	movs	r1, #8
 80095c2:	1879      	adds	r1, r7, r1
 80095c4:	0010      	movs	r0, r2
 80095c6:	4798      	blx	r3
 80095c8:	0003      	movs	r3, r0
 80095ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095cc:	e019      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	0011      	movs	r1, r2
 80095d4:	0018      	movs	r0, r3
 80095d6:	f000 fa79 	bl	8009acc <USBD_CtlError>
            err++;
 80095da:	210b      	movs	r1, #11
 80095dc:	187b      	adds	r3, r7, r1
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	187b      	adds	r3, r7, r1
 80095e2:	3201      	adds	r2, #1
 80095e4:	701a      	strb	r2, [r3, #0]
          break;
 80095e6:	e00c      	b.n	8009602 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	0011      	movs	r1, r2
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 fa6c 	bl	8009acc <USBD_CtlError>
          err++;
 80095f4:	210b      	movs	r1, #11
 80095f6:	187b      	adds	r3, r7, r1
 80095f8:	781a      	ldrb	r2, [r3, #0]
 80095fa:	187b      	adds	r3, r7, r1
 80095fc:	3201      	adds	r2, #1
 80095fe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009600:	e04b      	b.n	800969a <USBD_GetDescriptor+0x2fa>
 8009602:	e04a      	b.n	800969a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	7c1b      	ldrb	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	23ad      	movs	r3, #173	; 0xad
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	58d3      	ldr	r3, [r2, r3]
 8009614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009616:	2208      	movs	r2, #8
 8009618:	18ba      	adds	r2, r7, r2
 800961a:	0010      	movs	r0, r2
 800961c:	4798      	blx	r3
 800961e:	0003      	movs	r3, r0
 8009620:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009622:	e03a      	b.n	800969a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0011      	movs	r1, r2
 800962a:	0018      	movs	r0, r3
 800962c:	f000 fa4e 	bl	8009acc <USBD_CtlError>
        err++;
 8009630:	210b      	movs	r1, #11
 8009632:	187b      	adds	r3, r7, r1
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	187b      	adds	r3, r7, r1
 8009638:	3201      	adds	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
      break;
 800963c:	e02d      	b.n	800969a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7c1b      	ldrb	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10f      	bne.n	8009666 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	23ad      	movs	r3, #173	; 0xad
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	58d3      	ldr	r3, [r2, r3]
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	2208      	movs	r2, #8
 8009652:	18ba      	adds	r2, r7, r2
 8009654:	0010      	movs	r0, r2
 8009656:	4798      	blx	r3
 8009658:	0003      	movs	r3, r0
 800965a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	2207      	movs	r2, #7
 8009662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009664:	e019      	b.n	800969a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	0011      	movs	r1, r2
 800966c:	0018      	movs	r0, r3
 800966e:	f000 fa2d 	bl	8009acc <USBD_CtlError>
        err++;
 8009672:	210b      	movs	r1, #11
 8009674:	187b      	adds	r3, r7, r1
 8009676:	781a      	ldrb	r2, [r3, #0]
 8009678:	187b      	adds	r3, r7, r1
 800967a:	3201      	adds	r2, #1
 800967c:	701a      	strb	r2, [r3, #0]
      break;
 800967e:	e00c      	b.n	800969a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	0011      	movs	r1, r2
 8009686:	0018      	movs	r0, r3
 8009688:	f000 fa20 	bl	8009acc <USBD_CtlError>
      err++;
 800968c:	210b      	movs	r1, #11
 800968e:	187b      	adds	r3, r7, r1
 8009690:	781a      	ldrb	r2, [r3, #0]
 8009692:	187b      	adds	r3, r7, r1
 8009694:	3201      	adds	r2, #1
 8009696:	701a      	strb	r2, [r3, #0]
      break;
 8009698:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800969a:	230b      	movs	r3, #11
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d127      	bne.n	80096f4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80096a4:	2108      	movs	r1, #8
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d019      	beq.n	80096e2 <USBD_GetDescriptor+0x342>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88db      	ldrh	r3, [r3, #6]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d015      	beq.n	80096e2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	88da      	ldrh	r2, [r3, #6]
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	1c18      	adds	r0, r3, #0
 80096c0:	1c11      	adds	r1, r2, #0
 80096c2:	b28a      	uxth	r2, r1
 80096c4:	b283      	uxth	r3, r0
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d900      	bls.n	80096cc <USBD_GetDescriptor+0x32c>
 80096ca:	1c01      	adds	r1, r0, #0
 80096cc:	b28a      	uxth	r2, r1
 80096ce:	2108      	movs	r1, #8
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096d4:	187b      	adds	r3, r7, r1
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68f9      	ldr	r1, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0018      	movs	r0, r3
 80096de:	f000 fa73 	bl	8009bc8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	88db      	ldrh	r3, [r3, #6]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d105      	bne.n	80096f6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	0018      	movs	r0, r3
 80096ee:	f000 fad5 	bl	8009c9c <USBD_CtlSendStatus>
 80096f2:	e000      	b.n	80096f6 <USBD_GetDescriptor+0x356>
    return;
 80096f4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b004      	add	sp, #16
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	0800b158 	.word	0x0800b158
 8009700:	0800b178 	.word	0x0800b178

08009704 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	889b      	ldrh	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d13d      	bne.n	8009792 <USBD_SetAddress+0x8e>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	88db      	ldrh	r3, [r3, #6]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d139      	bne.n	8009792 <USBD_SetAddress+0x8e>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	885b      	ldrh	r3, [r3, #2]
 8009722:	2b7f      	cmp	r3, #127	; 0x7f
 8009724:	d835      	bhi.n	8009792 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	885b      	ldrh	r3, [r3, #2]
 800972a:	b2da      	uxtb	r2, r3
 800972c:	230f      	movs	r3, #15
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	217f      	movs	r1, #127	; 0x7f
 8009732:	400a      	ands	r2, r1
 8009734:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	23a7      	movs	r3, #167	; 0xa7
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	5cd3      	ldrb	r3, [r2, r3]
 800973e:	2b03      	cmp	r3, #3
 8009740:	d106      	bne.n	8009750 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f000 f9bf 	bl	8009acc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974e:	e027      	b.n	80097a0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	240f      	movs	r4, #15
 8009754:	193a      	adds	r2, r7, r4
 8009756:	4914      	ldr	r1, [pc, #80]	; (80097a8 <USBD_SetAddress+0xa4>)
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800975c:	193b      	adds	r3, r7, r4
 800975e:	781a      	ldrb	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	0011      	movs	r1, r2
 8009764:	0018      	movs	r0, r3
 8009766:	f000 fef7 	bl	800a558 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	0018      	movs	r0, r3
 800976e:	f000 fa95 	bl	8009c9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009772:	193b      	adds	r3, r7, r4
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	23a7      	movs	r3, #167	; 0xa7
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	2102      	movs	r1, #2
 8009782:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009784:	e00c      	b.n	80097a0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	23a7      	movs	r3, #167	; 0xa7
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	2101      	movs	r1, #1
 800978e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009790:	e006      	b.n	80097a0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	0011      	movs	r1, r2
 8009798:	0018      	movs	r0, r3
 800979a:	f000 f997 	bl	8009acc <USBD_CtlError>
  }
}
 800979e:	46c0      	nop			; (mov r8, r8)
 80097a0:	46c0      	nop			; (mov r8, r8)
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b005      	add	sp, #20
 80097a6:	bd90      	pop	{r4, r7, pc}
 80097a8:	0000029e 	.word	0x0000029e

080097ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	885b      	ldrh	r3, [r3, #2]
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	4b4c      	ldr	r3, [pc, #304]	; (80098f0 <USBD_SetConfig+0x144>)
 80097be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097c0:	4b4b      	ldr	r3, [pc, #300]	; (80098f0 <USBD_SetConfig+0x144>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d906      	bls.n	80097d6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	0011      	movs	r1, r2
 80097ce:	0018      	movs	r0, r3
 80097d0:	f000 f97c 	bl	8009acc <USBD_CtlError>
 80097d4:	e088      	b.n	80098e8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	23a7      	movs	r3, #167	; 0xa7
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	5cd3      	ldrb	r3, [r2, r3]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d002      	beq.n	80097e8 <USBD_SetConfig+0x3c>
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d029      	beq.n	800983a <USBD_SetConfig+0x8e>
 80097e6:	e071      	b.n	80098cc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80097e8:	4b41      	ldr	r3, [pc, #260]	; (80098f0 <USBD_SetConfig+0x144>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01f      	beq.n	8009830 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80097f0:	4b3f      	ldr	r3, [pc, #252]	; (80098f0 <USBD_SetConfig+0x144>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	001a      	movs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	23a7      	movs	r3, #167	; 0xa7
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	2103      	movs	r1, #3
 8009802:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009804:	4b3a      	ldr	r3, [pc, #232]	; (80098f0 <USBD_SetConfig+0x144>)
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	0011      	movs	r1, r2
 800980c:	0018      	movs	r0, r3
 800980e:	f7ff f8c6 	bl	800899e <USBD_SetClassConfig>
 8009812:	0003      	movs	r3, r0
 8009814:	2b02      	cmp	r3, #2
 8009816:	d106      	bne.n	8009826 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0011      	movs	r1, r2
 800981e:	0018      	movs	r0, r3
 8009820:	f000 f954 	bl	8009acc <USBD_CtlError>
            return;
 8009824:	e060      	b.n	80098e8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	0018      	movs	r0, r3
 800982a:	f000 fa37 	bl	8009c9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800982e:	e05b      	b.n	80098e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	0018      	movs	r0, r3
 8009834:	f000 fa32 	bl	8009c9c <USBD_CtlSendStatus>
        break;
 8009838:	e056      	b.n	80098e8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800983a:	4b2d      	ldr	r3, [pc, #180]	; (80098f0 <USBD_SetConfig+0x144>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d115      	bne.n	800986e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	23a7      	movs	r3, #167	; 0xa7
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	2102      	movs	r1, #2
 800984a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800984c:	4b28      	ldr	r3, [pc, #160]	; (80098f0 <USBD_SetConfig+0x144>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	001a      	movs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009856:	4b26      	ldr	r3, [pc, #152]	; (80098f0 <USBD_SetConfig+0x144>)
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	0011      	movs	r1, r2
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff f8c4 	bl	80089ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	0018      	movs	r0, r3
 8009868:	f000 fa18 	bl	8009c9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800986c:	e03c      	b.n	80098e8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800986e:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <USBD_SetConfig+0x144>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	001a      	movs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	429a      	cmp	r2, r3
 800987a:	d022      	beq.n	80098c2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	0011      	movs	r1, r2
 8009886:	0018      	movs	r0, r3
 8009888:	f7ff f8b0 	bl	80089ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800988c:	4b18      	ldr	r3, [pc, #96]	; (80098f0 <USBD_SetConfig+0x144>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	001a      	movs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009896:	4b16      	ldr	r3, [pc, #88]	; (80098f0 <USBD_SetConfig+0x144>)
 8009898:	781a      	ldrb	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	0011      	movs	r1, r2
 800989e:	0018      	movs	r0, r3
 80098a0:	f7ff f87d 	bl	800899e <USBD_SetClassConfig>
 80098a4:	0003      	movs	r3, r0
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d106      	bne.n	80098b8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	0011      	movs	r1, r2
 80098b0:	0018      	movs	r0, r3
 80098b2:	f000 f90b 	bl	8009acc <USBD_CtlError>
            return;
 80098b6:	e017      	b.n	80098e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	0018      	movs	r0, r3
 80098bc:	f000 f9ee 	bl	8009c9c <USBD_CtlSendStatus>
        break;
 80098c0:	e012      	b.n	80098e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	0018      	movs	r0, r3
 80098c6:	f000 f9e9 	bl	8009c9c <USBD_CtlSendStatus>
        break;
 80098ca:	e00d      	b.n	80098e8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f000 f8fa 	bl	8009acc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <USBD_SetConfig+0x144>)
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	0011      	movs	r1, r2
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7ff f883 	bl	80089ec <USBD_ClrClassConfig>
        break;
 80098e6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80098e8:	46bd      	mov	sp, r7
 80098ea:	b002      	add	sp, #8
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	20000770 	.word	0x20000770

080098f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88db      	ldrh	r3, [r3, #6]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d006      	beq.n	8009914 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	0011      	movs	r1, r2
 800990c:	0018      	movs	r0, r3
 800990e:	f000 f8dd 	bl	8009acc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009912:	e026      	b.n	8009962 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	23a7      	movs	r3, #167	; 0xa7
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	5cd3      	ldrb	r3, [r2, r3]
 800991c:	2b02      	cmp	r3, #2
 800991e:	dc02      	bgt.n	8009926 <USBD_GetConfig+0x32>
 8009920:	2b00      	cmp	r3, #0
 8009922:	dc03      	bgt.n	800992c <USBD_GetConfig+0x38>
 8009924:	e016      	b.n	8009954 <USBD_GetConfig+0x60>
 8009926:	2b03      	cmp	r3, #3
 8009928:	d00c      	beq.n	8009944 <USBD_GetConfig+0x50>
 800992a:	e013      	b.n	8009954 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3308      	adds	r3, #8
 8009936:	0019      	movs	r1, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	0018      	movs	r0, r3
 800993e:	f000 f943 	bl	8009bc8 <USBD_CtlSendData>
        break;
 8009942:	e00e      	b.n	8009962 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	1d19      	adds	r1, r3, #4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	0018      	movs	r0, r3
 800994e:	f000 f93b 	bl	8009bc8 <USBD_CtlSendData>
        break;
 8009952:	e006      	b.n	8009962 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	0011      	movs	r1, r2
 800995a:	0018      	movs	r0, r3
 800995c:	f000 f8b6 	bl	8009acc <USBD_CtlError>
        break;
 8009960:	46c0      	nop			; (mov r8, r8)
}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	46bd      	mov	sp, r7
 8009966:	b002      	add	sp, #8
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	23a7      	movs	r3, #167	; 0xa7
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	5cd3      	ldrb	r3, [r2, r3]
 800997c:	3b01      	subs	r3, #1
 800997e:	2b02      	cmp	r3, #2
 8009980:	d822      	bhi.n	80099c8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d006      	beq.n	8009998 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	0011      	movs	r1, r2
 8009990:	0018      	movs	r0, r3
 8009992:	f000 f89b 	bl	8009acc <USBD_CtlError>
        break;
 8009996:	e01e      	b.n	80099d6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	23a9      	movs	r3, #169	; 0xa9
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	58d3      	ldr	r3, [r2, r3]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	2202      	movs	r2, #2
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	330c      	adds	r3, #12
 80099ba:	0019      	movs	r1, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	0018      	movs	r0, r3
 80099c2:	f000 f901 	bl	8009bc8 <USBD_CtlSendData>
      break;
 80099c6:	e006      	b.n	80099d6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	0011      	movs	r1, r2
 80099ce:	0018      	movs	r0, r3
 80099d0:	f000 f87c 	bl	8009acc <USBD_CtlError>
      break;
 80099d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	46bd      	mov	sp, r7
 80099da:	b002      	add	sp, #8
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	885b      	ldrh	r3, [r3, #2]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d108      	bne.n	8009a02 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	23a9      	movs	r3, #169	; 0xa9
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	2101      	movs	r1, #1
 80099f8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	0018      	movs	r0, r3
 80099fe:	f000 f94d 	bl	8009c9c <USBD_CtlSendStatus>
  }
}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b002      	add	sp, #8
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	23a7      	movs	r3, #167	; 0xa7
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	5cd3      	ldrb	r3, [r2, r3]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d80d      	bhi.n	8009a3e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	885b      	ldrh	r3, [r3, #2]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d110      	bne.n	8009a4c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	23a9      	movs	r3, #169	; 0xa9
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	2100      	movs	r1, #0
 8009a32:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0018      	movs	r0, r3
 8009a38:	f000 f930 	bl	8009c9c <USBD_CtlSendStatus>
      }
      break;
 8009a3c:	e006      	b.n	8009a4c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	0011      	movs	r1, r2
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 f841 	bl	8009acc <USBD_CtlError>
      break;
 8009a4a:	e000      	b.n	8009a4e <USBD_ClrFeature+0x44>
      break;
 8009a4c:	46c0      	nop			; (mov r8, r8)
  }
}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785a      	ldrb	r2, [r3, #1]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	3302      	adds	r3, #2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	3303      	adds	r3, #3
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	18d3      	adds	r3, r2, r3
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	3305      	adds	r3, #5
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	18d3      	adds	r3, r2, r3
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	3306      	adds	r3, #6
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	3307      	adds	r3, #7
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	18d3      	adds	r3, r2, r3
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	80da      	strh	r2, [r3, #6]

}
 8009ac4:	46c0      	nop			; (mov r8, r8)
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b002      	add	sp, #8
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2180      	movs	r1, #128	; 0x80
 8009ada:	0018      	movs	r0, r3
 8009adc:	f000 fcb5 	bl	800a44a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fcb0 	bl	800a44a <USBD_LL_StallEP>
}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	46bd      	mov	sp, r7
 8009aee:	b002      	add	sp, #8
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009af2:	b590      	push	{r4, r7, lr}
 8009af4:	b087      	sub	sp, #28
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009afe:	2417      	movs	r4, #23
 8009b00:	193b      	adds	r3, r7, r4
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d03c      	beq.n	8009b86 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f000 f83d 	bl	8009b8e <USBD_GetLen>
 8009b14:	0003      	movs	r3, r0
 8009b16:	3301      	adds	r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	18db      	adds	r3, r3, r3
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b22:	193b      	adds	r3, r7, r4
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	193a      	adds	r2, r7, r4
 8009b28:	1c59      	adds	r1, r3, #1
 8009b2a:	7011      	strb	r1, [r2, #0]
 8009b2c:	001a      	movs	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	189b      	adds	r3, r3, r2
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	7812      	ldrb	r2, [r2, #0]
 8009b36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b38:	193b      	adds	r3, r7, r4
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	193a      	adds	r2, r7, r4
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	7011      	strb	r1, [r2, #0]
 8009b42:	001a      	movs	r2, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	2203      	movs	r2, #3
 8009b4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b4c:	e017      	b.n	8009b7e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	60fa      	str	r2, [r7, #12]
 8009b54:	2417      	movs	r4, #23
 8009b56:	193a      	adds	r2, r7, r4
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	1939      	adds	r1, r7, r4
 8009b5c:	1c50      	adds	r0, r2, #1
 8009b5e:	7008      	strb	r0, [r1, #0]
 8009b60:	0011      	movs	r1, r2
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	1852      	adds	r2, r2, r1
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009b6a:	193b      	adds	r3, r7, r4
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	193a      	adds	r2, r7, r4
 8009b70:	1c59      	adds	r1, r3, #1
 8009b72:	7011      	strb	r1, [r2, #0]
 8009b74:	001a      	movs	r2, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1e3      	bne.n	8009b4e <USBD_GetString+0x5c>
    }
  }
}
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	b007      	add	sp, #28
 8009b8c:	bd90      	pop	{r4, r7, pc}

08009b8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b96:	230f      	movs	r3, #15
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8009b9e:	e008      	b.n	8009bb2 <USBD_GetLen+0x24>
  {
    len++;
 8009ba0:	210f      	movs	r1, #15
 8009ba2:	187b      	adds	r3, r7, r1
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
    buf++;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f2      	bne.n	8009ba0 <USBD_GetLen+0x12>
  }

  return len;
 8009bba:	230f      	movs	r3, #15
 8009bbc:	18fb      	adds	r3, r7, r3
 8009bbe:	781b      	ldrb	r3, [r3, #0]
}
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b004      	add	sp, #16
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	1dbb      	adds	r3, r7, #6
 8009bd4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	23a5      	movs	r3, #165	; 0xa5
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	2102      	movs	r1, #2
 8009bde:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8009be0:	1dbb      	adds	r3, r7, #6
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009be8:	1dbb      	adds	r3, r7, #6
 8009bea:	881a      	ldrh	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bf0:	1dbb      	adds	r3, r7, #6
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	f000 fcd8 	bl	800a5ae <USBD_LL_Transmit>

  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	0018      	movs	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	b004      	add	sp, #16
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	1dbb      	adds	r3, r7, #6
 8009c14:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c16:	1dbb      	adds	r3, r7, #6
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	f000 fcc5 	bl	800a5ae <USBD_LL_Transmit>

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	0018      	movs	r0, r3
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	b004      	add	sp, #16
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	1dbb      	adds	r3, r7, #6
 8009c3a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	23a5      	movs	r3, #165	; 0xa5
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	2103      	movs	r1, #3
 8009c44:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8009c46:	1dbb      	adds	r3, r7, #6
 8009c48:	8819      	ldrh	r1, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	23ae      	movs	r3, #174	; 0xae
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8009c52:	1dbb      	adds	r3, r7, #6
 8009c54:	8819      	ldrh	r1, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	23b0      	movs	r3, #176	; 0xb0
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c5e:	1dbb      	adds	r3, r7, #6
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	2100      	movs	r1, #0
 8009c68:	f000 fcd8 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	0018      	movs	r0, r3
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b004      	add	sp, #16
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	1dbb      	adds	r3, r7, #6
 8009c82:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c84:	1dbb      	adds	r3, r7, #6
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f000 fcc5 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	0018      	movs	r0, r3
 8009c96:	46bd      	mov	sp, r7
 8009c98:	b004      	add	sp, #16
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	23a5      	movs	r3, #165	; 0xa5
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	2104      	movs	r1, #4
 8009cac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f000 fc7a 	bl	800a5ae <USBD_LL_Transmit>

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b002      	add	sp, #8
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	23a5      	movs	r3, #165	; 0xa5
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	2105      	movs	r1, #5
 8009cd4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	f000 fc9d 	bl	800a61c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd80      	pop	{r7, pc}

08009cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cf0:	4914      	ldr	r1, [pc, #80]	; (8009d44 <MX_USB_DEVICE_Init+0x58>)
 8009cf2:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7fe fdea 	bl	80088d0 <USBD_Init>
 8009cfc:	1e03      	subs	r3, r0, #0
 8009cfe:	d001      	beq.n	8009d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d00:	f7f7 fce0 	bl	80016c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d04:	4a11      	ldr	r2, [pc, #68]	; (8009d4c <MX_USB_DEVICE_Init+0x60>)
 8009d06:	4b10      	ldr	r3, [pc, #64]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7fe fe11 	bl	8008932 <USBD_RegisterClass>
 8009d10:	1e03      	subs	r3, r0, #0
 8009d12:	d001      	beq.n	8009d18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009d14:	f7f7 fcd6 	bl	80016c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d18:	4a0d      	ldr	r2, [pc, #52]	; (8009d50 <MX_USB_DEVICE_Init+0x64>)
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009d1c:	0011      	movs	r1, r2
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7fe fd26 	bl	8008770 <USBD_CDC_RegisterInterface>
 8009d24:	1e03      	subs	r3, r0, #0
 8009d26:	d001      	beq.n	8009d2c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009d28:	f7f7 fccc 	bl	80016c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <MX_USB_DEVICE_Init+0x5c>)
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f7fe fe1f 	bl	8008972 <USBD_Start>
 8009d34:	1e03      	subs	r3, r0, #0
 8009d36:	d001      	beq.n	8009d3c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009d38:	f7f7 fcc4 	bl	80016c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d3c:	46c0      	nop			; (mov r8, r8)
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	20000408 	.word	0x20000408
 8009d48:	20000774 	.word	0x20000774
 8009d4c:	200002f4 	.word	0x200002f4
 8009d50:	200003f8 	.word	0x200003f8

08009d54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d58:	4907      	ldr	r1, [pc, #28]	; (8009d78 <CDC_Init_FS+0x24>)
 8009d5a:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <CDC_Init_FS+0x28>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7fe fd21 	bl	80087a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d64:	4a06      	ldr	r2, [pc, #24]	; (8009d80 <CDC_Init_FS+0x2c>)
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <CDC_Init_FS+0x28>)
 8009d68:	0011      	movs	r1, r2
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7fe fd37 	bl	80087de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d70:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d72:	0018      	movs	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20000e20 	.word	0x20000e20
 8009d7c:	20000774 	.word	0x20000774
 8009d80:	20000a38 	.word	0x20000a38

08009d84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6039      	str	r1, [r7, #0]
 8009d98:	0011      	movs	r1, r2
 8009d9a:	1dfb      	adds	r3, r7, #7
 8009d9c:	1c02      	adds	r2, r0, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	1d3b      	adds	r3, r7, #4
 8009da2:	1c0a      	adds	r2, r1, #0
 8009da4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009da6:	1dfb      	adds	r3, r7, #7
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b23      	cmp	r3, #35	; 0x23
 8009dac:	d804      	bhi.n	8009db8 <CDC_Control_FS+0x28>
 8009dae:	009a      	lsls	r2, r3, #2
 8009db0:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <CDC_Control_FS+0x34>)
 8009db2:	18d3      	adds	r3, r2, r3
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009db8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8009dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	0800b190 	.word	0x0800b190

08009dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <CDC_Receive_FS+0x28>)
 8009dd6:	0011      	movs	r1, r2
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7fe fd00 	bl	80087de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009dde:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <CDC_Receive_FS+0x28>)
 8009de0:	0018      	movs	r0, r3
 8009de2:	f7fe fd47 	bl	8008874 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009de6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009de8:	0018      	movs	r0, r3
 8009dea:	46bd      	mov	sp, r7
 8009dec:	b002      	add	sp, #8
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000774 	.word	0x20000774

08009df4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	000a      	movs	r2, r1
 8009dfe:	1cbb      	adds	r3, r7, #2
 8009e00:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009e02:	230f      	movs	r3, #15
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e0a:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <CDC_Transmit_FS+0x5c>)
 8009e0c:	23ae      	movs	r3, #174	; 0xae
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	58d3      	ldr	r3, [r2, r3]
 8009e12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	2385      	movs	r3, #133	; 0x85
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	58d3      	ldr	r3, [r2, r3]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e010      	b.n	8009e46 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009e24:	1cbb      	adds	r3, r7, #2
 8009e26:	881a      	ldrh	r2, [r3, #0]
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <CDC_Transmit_FS+0x5c>)
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f7fe fcba 	bl	80087a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e32:	250f      	movs	r5, #15
 8009e34:	197c      	adds	r4, r7, r5
 8009e36:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <CDC_Transmit_FS+0x5c>)
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f7fe fce4 	bl	8008806 <USBD_CDC_TransmitPacket>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	781b      	ldrb	r3, [r3, #0]
}
 8009e46:	0018      	movs	r0, r3
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b004      	add	sp, #16
 8009e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	20000774 	.word	0x20000774

08009e54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	0002      	movs	r2, r0
 8009e5c:	6039      	str	r1, [r7, #0]
 8009e5e:	1dfb      	adds	r3, r7, #7
 8009e60:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2212      	movs	r2, #18
 8009e66:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	b002      	add	sp, #8
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	20000424 	.word	0x20000424

08009e78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	0002      	movs	r2, r0
 8009e80:	6039      	str	r1, [r7, #0]
 8009e82:	1dfb      	adds	r3, r7, #7
 8009e84:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2204      	movs	r2, #4
 8009e8a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e8c:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e8e:	0018      	movs	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	b002      	add	sp, #8
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	20000438 	.word	0x20000438

08009e9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	0002      	movs	r2, r0
 8009ea4:	6039      	str	r1, [r7, #0]
 8009ea6:	1dfb      	adds	r3, r7, #7
 8009ea8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009eaa:	1dfb      	adds	r3, r7, #7
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d106      	bne.n	8009ec0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4908      	ldr	r1, [pc, #32]	; (8009ed8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <USBD_FS_ProductStrDescriptor+0x40>)
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f7ff fe1a 	bl	8009af2 <USBD_GetString>
 8009ebe:	e005      	b.n	8009ecc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	4905      	ldr	r1, [pc, #20]	; (8009ed8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <USBD_FS_ProductStrDescriptor+0x40>)
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f7ff fe13 	bl	8009af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009ece:	0018      	movs	r0, r3
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b002      	add	sp, #8
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	20001208 	.word	0x20001208
 8009edc:	0800b0b4 	.word	0x0800b0b4

08009ee0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	0002      	movs	r2, r0
 8009ee8:	6039      	str	r1, [r7, #0]
 8009eea:	1dfb      	adds	r3, r7, #7
 8009eec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	4904      	ldr	r1, [pc, #16]	; (8009f04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7ff fdfc 	bl	8009af2 <USBD_GetString>
  return USBD_StrDesc;
 8009efa:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b002      	add	sp, #8
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20001208 	.word	0x20001208
 8009f08:	0800b0cc 	.word	0x0800b0cc

08009f0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	0002      	movs	r2, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	1dfb      	adds	r3, r7, #7
 8009f18:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	221a      	movs	r2, #26
 8009f1e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f20:	f000 f84c 	bl	8009fbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009f26:	0018      	movs	r0, r3
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	b002      	add	sp, #8
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	2000043c 	.word	0x2000043c

08009f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	0002      	movs	r2, r0
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	1dfb      	adds	r3, r7, #7
 8009f40:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009f42:	1dfb      	adds	r3, r7, #7
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4908      	ldr	r1, [pc, #32]	; (8009f70 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009f50:	0018      	movs	r0, r3
 8009f52:	f7ff fdce 	bl	8009af2 <USBD_GetString>
 8009f56:	e005      	b.n	8009f64 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4905      	ldr	r1, [pc, #20]	; (8009f70 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009f5c:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7ff fdc7 	bl	8009af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009f66:	0018      	movs	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b002      	add	sp, #8
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	20001208 	.word	0x20001208
 8009f74:	0800b0e0 	.word	0x0800b0e0

08009f78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	0002      	movs	r2, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	1dfb      	adds	r3, r7, #7
 8009f84:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009f86:	1dfb      	adds	r3, r7, #7
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4908      	ldr	r1, [pc, #32]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009f94:	0018      	movs	r0, r3
 8009f96:	f7ff fdac 	bl	8009af2 <USBD_GetString>
 8009f9a:	e005      	b.n	8009fa8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4905      	ldr	r1, [pc, #20]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7ff fda5 	bl	8009af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fa8:	4b02      	ldr	r3, [pc, #8]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b002      	add	sp, #8
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	20001208 	.word	0x20001208
 8009fb8:	0800b0ec 	.word	0x0800b0ec

08009fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <Get_SerialNum+0x48>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <Get_SerialNum+0x4c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <Get_SerialNum+0x50>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	18d3      	adds	r3, r2, r3
 8009fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00b      	beq.n	8009ffa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fe2:	490b      	ldr	r1, [pc, #44]	; (800a010 <Get_SerialNum+0x54>)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f000 f815 	bl	800a018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fee:	4909      	ldr	r1, [pc, #36]	; (800a014 <Get_SerialNum+0x58>)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f000 f80f 	bl	800a018 <IntToUnicode>
  }
}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	b004      	add	sp, #16
 800a000:	bd80      	pop	{r7, pc}
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	1ff80050 	.word	0x1ff80050
 800a008:	1ff80054 	.word	0x1ff80054
 800a00c:	1ff80058 	.word	0x1ff80058
 800a010:	2000043e 	.word	0x2000043e
 800a014:	2000044e 	.word	0x2000044e

0800a018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	1dfb      	adds	r3, r7, #7
 800a024:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a026:	2117      	movs	r1, #23
 800a028:	187b      	adds	r3, r7, r1
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a02e:	187b      	adds	r3, r7, r1
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	e02f      	b.n	800a096 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	0f1b      	lsrs	r3, r3, #28
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	d80d      	bhi.n	800a05a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	0f1b      	lsrs	r3, r3, #28
 800a042:	b2da      	uxtb	r2, r3
 800a044:	2317      	movs	r3, #23
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	0019      	movs	r1, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	185b      	adds	r3, r3, r1
 800a052:	3230      	adds	r2, #48	; 0x30
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e00c      	b.n	800a074 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	0f1b      	lsrs	r3, r3, #28
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	2317      	movs	r3, #23
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	0019      	movs	r1, r3
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	185b      	adds	r3, r3, r1
 800a06e:	3237      	adds	r2, #55	; 0x37
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a07a:	2117      	movs	r1, #23
 800a07c:	187b      	adds	r3, r7, r1
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	3301      	adds	r3, #1
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	18d3      	adds	r3, r2, r3
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	187b      	adds	r3, r7, r1
 800a092:	3201      	adds	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	2317      	movs	r3, #23
 800a098:	18fa      	adds	r2, r7, r3
 800a09a:	1dfb      	adds	r3, r7, #7
 800a09c:	7812      	ldrb	r2, [r2, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d3c8      	bcc.n	800a036 <IntToUnicode+0x1e>
  }
}
 800a0a4:	46c0      	nop			; (mov r8, r8)
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b006      	add	sp, #24
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <HAL_PCD_MspInit+0x38>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10e      	bne.n	800a0e0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <HAL_PCD_MspInit+0x3c>)
 800a0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <HAL_PCD_MspInit+0x3c>)
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	0409      	lsls	r1, r1, #16
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	201f      	movs	r0, #31
 800a0d6:	f7f8 f935 	bl	8002344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a0da:	201f      	movs	r0, #31
 800a0dc:	f7f8 f947 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a0e0:	46c0      	nop			; (mov r8, r8)
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40005c00 	.word	0x40005c00
 800a0ec:	40021000 	.word	0x40021000

0800a0f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	23bc      	movs	r3, #188	; 0xbc
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	58d2      	ldr	r2, [r2, r3]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	21ac      	movs	r1, #172	; 0xac
 800a104:	0089      	lsls	r1, r1, #2
 800a106:	468c      	mov	ip, r1
 800a108:	4463      	add	r3, ip
 800a10a:	0019      	movs	r1, r3
 800a10c:	0010      	movs	r0, r2
 800a10e:	f7fe fc83 	bl	8008a18 <USBD_LL_SetupStage>
}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	46bd      	mov	sp, r7
 800a116:	b002      	add	sp, #8
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11a:	b590      	push	{r4, r7, lr}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	000a      	movs	r2, r1
 800a124:	1cfb      	adds	r3, r7, #3
 800a126:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	23bc      	movs	r3, #188	; 0xbc
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	58d4      	ldr	r4, [r2, r3]
 800a130:	1cfb      	adds	r3, r7, #3
 800a132:	781a      	ldrb	r2, [r3, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	23be      	movs	r3, #190	; 0xbe
 800a138:	0059      	lsls	r1, r3, #1
 800a13a:	0013      	movs	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	189b      	adds	r3, r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	18c3      	adds	r3, r0, r3
 800a144:	185b      	adds	r3, r3, r1
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	1cfb      	adds	r3, r7, #3
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	0019      	movs	r1, r3
 800a14e:	0020      	movs	r0, r4
 800a150:	f7fe fcc0 	bl	8008ad4 <USBD_LL_DataOutStage>
}
 800a154:	46c0      	nop			; (mov r8, r8)
 800a156:	46bd      	mov	sp, r7
 800a158:	b003      	add	sp, #12
 800a15a:	bd90      	pop	{r4, r7, pc}

0800a15c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	000a      	movs	r2, r1
 800a166:	1cfb      	adds	r3, r7, #3
 800a168:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	23bc      	movs	r3, #188	; 0xbc
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	58d0      	ldr	r0, [r2, r3]
 800a172:	1cfb      	adds	r3, r7, #3
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	0013      	movs	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	189b      	adds	r3, r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	18cb      	adds	r3, r1, r3
 800a182:	333c      	adds	r3, #60	; 0x3c
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	1cfb      	adds	r3, r7, #3
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	0019      	movs	r1, r3
 800a18c:	f7fe fd24 	bl	8008bd8 <USBD_LL_DataInStage>
}
 800a190:	46c0      	nop			; (mov r8, r8)
 800a192:	46bd      	mov	sp, r7
 800a194:	b002      	add	sp, #8
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	23bc      	movs	r3, #188	; 0xbc
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	58d3      	ldr	r3, [r2, r3]
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f7fe fe5b 	bl	8008e64 <USBD_LL_SOF>
}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b002      	add	sp, #8
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1be:	230f      	movs	r3, #15
 800a1c0:	18fb      	adds	r3, r7, r3
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d001      	beq.n	800a1d2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a1ce:	f7f7 fa79 	bl	80016c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	23bc      	movs	r3, #188	; 0xbc
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	58d2      	ldr	r2, [r2, r3]
 800a1da:	230f      	movs	r3, #15
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	0019      	movs	r1, r3
 800a1e2:	0010      	movs	r0, r2
 800a1e4:	f7fe fdfd 	bl	8008de2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	23bc      	movs	r3, #188	; 0xbc
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	58d3      	ldr	r3, [r2, r3]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f7fe fdae 	bl	8008d52 <USBD_LL_Reset>
}
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	b004      	add	sp, #16
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	23bc      	movs	r3, #188	; 0xbc
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	58d3      	ldr	r3, [r2, r3]
 800a210:	0018      	movs	r0, r3
 800a212:	f7fe fdf7 	bl	8008e04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_PCD_SuspendCallback+0x34>)
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	4b04      	ldr	r3, [pc, #16]	; (800a234 <HAL_PCD_SuspendCallback+0x34>)
 800a224:	2106      	movs	r1, #6
 800a226:	430a      	orrs	r2, r1
 800a228:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a22a:	46c0      	nop			; (mov r8, r8)
 800a22c:	46bd      	mov	sp, r7
 800a22e:	b002      	add	sp, #8
 800a230:	bd80      	pop	{r7, pc}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	e000ed00 	.word	0xe000ed00

0800a238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d007      	beq.n	800a258 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a248:	4b09      	ldr	r3, [pc, #36]	; (800a270 <HAL_PCD_ResumeCallback+0x38>)
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	4b08      	ldr	r3, [pc, #32]	; (800a270 <HAL_PCD_ResumeCallback+0x38>)
 800a24e:	2106      	movs	r1, #6
 800a250:	438a      	bics	r2, r1
 800a252:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a254:	f000 fa44 	bl	800a6e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	23bc      	movs	r3, #188	; 0xbc
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	58d3      	ldr	r3, [r2, r3]
 800a260:	0018      	movs	r0, r3
 800a262:	f7fe fde7 	bl	8008e34 <USBD_LL_Resume>
}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	46bd      	mov	sp, r7
 800a26a:	b002      	add	sp, #8
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	e000ed00 	.word	0xe000ed00

0800a274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a27c:	4a2d      	ldr	r2, [pc, #180]	; (800a334 <USBD_LL_Init+0xc0>)
 800a27e:	23bc      	movs	r3, #188	; 0xbc
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	23b0      	movs	r3, #176	; 0xb0
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4929      	ldr	r1, [pc, #164]	; (800a334 <USBD_LL_Init+0xc0>)
 800a28e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a290:	4b28      	ldr	r3, [pc, #160]	; (800a334 <USBD_LL_Init+0xc0>)
 800a292:	4a29      	ldr	r2, [pc, #164]	; (800a338 <USBD_LL_Init+0xc4>)
 800a294:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a296:	4b27      	ldr	r3, [pc, #156]	; (800a334 <USBD_LL_Init+0xc0>)
 800a298:	2208      	movs	r2, #8
 800a29a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <USBD_LL_Init+0xc0>)
 800a29e:	2202      	movs	r2, #2
 800a2a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <USBD_LL_Init+0xc0>)
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2a8:	4b22      	ldr	r3, [pc, #136]	; (800a334 <USBD_LL_Init+0xc0>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2ae:	4b21      	ldr	r3, [pc, #132]	; (800a334 <USBD_LL_Init+0xc0>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2b4:	4b1f      	ldr	r3, [pc, #124]	; (800a334 <USBD_LL_Init+0xc0>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2ba:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <USBD_LL_Init+0xc0>)
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f7f8 fa2b 	bl	8002718 <HAL_PCD_Init>
 800a2c2:	1e03      	subs	r3, r0, #0
 800a2c4:	d001      	beq.n	800a2ca <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800a2c6:	f7f7 f9fd 	bl	80016c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	23b0      	movs	r3, #176	; 0xb0
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	58d0      	ldr	r0, [r2, r3]
 800a2d2:	2318      	movs	r3, #24
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	f7f9 ffec 	bl	80042b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	23b0      	movs	r3, #176	; 0xb0
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	58d0      	ldr	r0, [r2, r3]
 800a2e4:	2358      	movs	r3, #88	; 0x58
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2180      	movs	r1, #128	; 0x80
 800a2ea:	f7f9 ffe3 	bl	80042b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	23b0      	movs	r3, #176	; 0xb0
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	58d0      	ldr	r0, [r2, r3]
 800a2f6:	23c0      	movs	r3, #192	; 0xc0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2181      	movs	r1, #129	; 0x81
 800a2fc:	f7f9 ffda 	bl	80042b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	23b0      	movs	r3, #176	; 0xb0
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	58d0      	ldr	r0, [r2, r3]
 800a308:	2388      	movs	r3, #136	; 0x88
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	2200      	movs	r2, #0
 800a30e:	2101      	movs	r1, #1
 800a310:	f7f9 ffd0 	bl	80042b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	23b0      	movs	r3, #176	; 0xb0
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	58d0      	ldr	r0, [r2, r3]
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	2200      	movs	r2, #0
 800a322:	2182      	movs	r1, #130	; 0x82
 800a324:	f7f9 ffc6 	bl	80042b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	0018      	movs	r0, r3
 800a32c:	46bd      	mov	sp, r7
 800a32e:	b002      	add	sp, #8
 800a330:	bd80      	pop	{r7, pc}
 800a332:	46c0      	nop			; (mov r8, r8)
 800a334:	20001408 	.word	0x20001408
 800a338:	40005c00 	.word	0x40005c00

0800a33c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a344:	210f      	movs	r1, #15
 800a346:	187b      	adds	r3, r7, r1
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	260e      	movs	r6, #14
 800a34e:	19bb      	adds	r3, r7, r6
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	23b0      	movs	r3, #176	; 0xb0
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	58d3      	ldr	r3, [r2, r3]
 800a35c:	000d      	movs	r5, r1
 800a35e:	187c      	adds	r4, r7, r1
 800a360:	0018      	movs	r0, r3
 800a362:	f7f8 fad9 	bl	8002918 <HAL_PCD_Start>
 800a366:	0003      	movs	r3, r0
 800a368:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36a:	19bc      	adds	r4, r7, r6
 800a36c:	197b      	adds	r3, r7, r5
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	0018      	movs	r0, r3
 800a372:	f000 f9bc 	bl	800a6ee <USBD_Get_USB_Status>
 800a376:	0003      	movs	r3, r0
 800a378:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a37a:	19bb      	adds	r3, r7, r6
 800a37c:	781b      	ldrb	r3, [r3, #0]
}
 800a37e:	0018      	movs	r0, r3
 800a380:	46bd      	mov	sp, r7
 800a382:	b005      	add	sp, #20
 800a384:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a386:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	000c      	movs	r4, r1
 800a390:	0010      	movs	r0, r2
 800a392:	0019      	movs	r1, r3
 800a394:	1cfb      	adds	r3, r7, #3
 800a396:	1c22      	adds	r2, r4, #0
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	1cbb      	adds	r3, r7, #2
 800a39c:	1c02      	adds	r2, r0, #0
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	003b      	movs	r3, r7
 800a3a2:	1c0a      	adds	r2, r1, #0
 800a3a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a6:	260f      	movs	r6, #15
 800a3a8:	19bb      	adds	r3, r7, r6
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ae:	250e      	movs	r5, #14
 800a3b0:	197b      	adds	r3, r7, r5
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	23b0      	movs	r3, #176	; 0xb0
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	58d0      	ldr	r0, [r2, r3]
 800a3be:	19bc      	adds	r4, r7, r6
 800a3c0:	1cbb      	adds	r3, r7, #2
 800a3c2:	781d      	ldrb	r5, [r3, #0]
 800a3c4:	003b      	movs	r3, r7
 800a3c6:	881a      	ldrh	r2, [r3, #0]
 800a3c8:	1cfb      	adds	r3, r7, #3
 800a3ca:	7819      	ldrb	r1, [r3, #0]
 800a3cc:	002b      	movs	r3, r5
 800a3ce:	f7f8 fc38 	bl	8002c42 <HAL_PCD_EP_Open>
 800a3d2:	0003      	movs	r3, r0
 800a3d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d6:	250e      	movs	r5, #14
 800a3d8:	197c      	adds	r4, r7, r5
 800a3da:	19bb      	adds	r3, r7, r6
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f000 f985 	bl	800a6ee <USBD_Get_USB_Status>
 800a3e4:	0003      	movs	r3, r0
 800a3e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a3e8:	197b      	adds	r3, r7, r5
 800a3ea:	781b      	ldrb	r3, [r3, #0]
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b005      	add	sp, #20
 800a3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	000a      	movs	r2, r1
 800a3fe:	1cfb      	adds	r3, r7, #3
 800a400:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a402:	210f      	movs	r1, #15
 800a404:	187b      	adds	r3, r7, r1
 800a406:	2200      	movs	r2, #0
 800a408:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40a:	260e      	movs	r6, #14
 800a40c:	19bb      	adds	r3, r7, r6
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	23b0      	movs	r3, #176	; 0xb0
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	58d2      	ldr	r2, [r2, r3]
 800a41a:	000d      	movs	r5, r1
 800a41c:	187c      	adds	r4, r7, r1
 800a41e:	1cfb      	adds	r3, r7, #3
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	0019      	movs	r1, r3
 800a424:	0010      	movs	r0, r2
 800a426:	f7f8 fc7b 	bl	8002d20 <HAL_PCD_EP_Close>
 800a42a:	0003      	movs	r3, r0
 800a42c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a42e:	19bc      	adds	r4, r7, r6
 800a430:	197b      	adds	r3, r7, r5
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	0018      	movs	r0, r3
 800a436:	f000 f95a 	bl	800a6ee <USBD_Get_USB_Status>
 800a43a:	0003      	movs	r3, r0
 800a43c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a43e:	19bb      	adds	r3, r7, r6
 800a440:	781b      	ldrb	r3, [r3, #0]
}
 800a442:	0018      	movs	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	b005      	add	sp, #20
 800a448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a44a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a44a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	000a      	movs	r2, r1
 800a454:	1cfb      	adds	r3, r7, #3
 800a456:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a458:	210f      	movs	r1, #15
 800a45a:	187b      	adds	r3, r7, r1
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a460:	260e      	movs	r6, #14
 800a462:	19bb      	adds	r3, r7, r6
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	23b0      	movs	r3, #176	; 0xb0
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	58d2      	ldr	r2, [r2, r3]
 800a470:	000d      	movs	r5, r1
 800a472:	187c      	adds	r4, r7, r1
 800a474:	1cfb      	adds	r3, r7, #3
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	0019      	movs	r1, r3
 800a47a:	0010      	movs	r0, r2
 800a47c:	f7f8 fd2d 	bl	8002eda <HAL_PCD_EP_SetStall>
 800a480:	0003      	movs	r3, r0
 800a482:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a484:	19bc      	adds	r4, r7, r6
 800a486:	197b      	adds	r3, r7, r5
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	0018      	movs	r0, r3
 800a48c:	f000 f92f 	bl	800a6ee <USBD_Get_USB_Status>
 800a490:	0003      	movs	r3, r0
 800a492:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a494:	19bb      	adds	r3, r7, r6
 800a496:	781b      	ldrb	r3, [r3, #0]
}
 800a498:	0018      	movs	r0, r3
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b005      	add	sp, #20
 800a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	000a      	movs	r2, r1
 800a4aa:	1cfb      	adds	r3, r7, #3
 800a4ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ae:	210f      	movs	r1, #15
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b6:	260e      	movs	r6, #14
 800a4b8:	19bb      	adds	r3, r7, r6
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	23b0      	movs	r3, #176	; 0xb0
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	58d2      	ldr	r2, [r2, r3]
 800a4c6:	000d      	movs	r5, r1
 800a4c8:	187c      	adds	r4, r7, r1
 800a4ca:	1cfb      	adds	r3, r7, #3
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	0019      	movs	r1, r3
 800a4d0:	0010      	movs	r0, r2
 800a4d2:	f7f8 fd5e 	bl	8002f92 <HAL_PCD_EP_ClrStall>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4da:	19bc      	adds	r4, r7, r6
 800a4dc:	197b      	adds	r3, r7, r5
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f000 f904 	bl	800a6ee <USBD_Get_USB_Status>
 800a4e6:	0003      	movs	r3, r0
 800a4e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a4ea:	19bb      	adds	r3, r7, r6
 800a4ec:	781b      	ldrb	r3, [r3, #0]
}
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b005      	add	sp, #20
 800a4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4f6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	000a      	movs	r2, r1
 800a500:	1cfb      	adds	r3, r7, #3
 800a502:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	23b0      	movs	r3, #176	; 0xb0
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	58d3      	ldr	r3, [r2, r3]
 800a50c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a50e:	1cfb      	adds	r3, r7, #3
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b25b      	sxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	da0d      	bge.n	800a534 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a518:	1cfb      	adds	r3, r7, #3
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	227f      	movs	r2, #127	; 0x7f
 800a51e:	4013      	ands	r3, r2
 800a520:	68f9      	ldr	r1, [r7, #12]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	0013      	movs	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	189b      	adds	r3, r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	18cb      	adds	r3, r1, r3
 800a52e:	3302      	adds	r3, #2
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	e00d      	b.n	800a550 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a534:	1cfb      	adds	r3, r7, #3
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	227f      	movs	r2, #127	; 0x7f
 800a53a:	401a      	ands	r2, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	23b5      	movs	r3, #181	; 0xb5
 800a540:	0059      	lsls	r1, r3, #1
 800a542:	0013      	movs	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	189b      	adds	r3, r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	18c3      	adds	r3, r0, r3
 800a54c:	185b      	adds	r3, r3, r1
 800a54e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a550:	0018      	movs	r0, r3
 800a552:	46bd      	mov	sp, r7
 800a554:	b004      	add	sp, #16
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	000a      	movs	r2, r1
 800a562:	1cfb      	adds	r3, r7, #3
 800a564:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a566:	210f      	movs	r1, #15
 800a568:	187b      	adds	r3, r7, r1
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56e:	260e      	movs	r6, #14
 800a570:	19bb      	adds	r3, r7, r6
 800a572:	2200      	movs	r2, #0
 800a574:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	23b0      	movs	r3, #176	; 0xb0
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	58d2      	ldr	r2, [r2, r3]
 800a57e:	000d      	movs	r5, r1
 800a580:	187c      	adds	r4, r7, r1
 800a582:	1cfb      	adds	r3, r7, #3
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	0019      	movs	r1, r3
 800a588:	0010      	movs	r0, r2
 800a58a:	f7f8 fb2f 	bl	8002bec <HAL_PCD_SetAddress>
 800a58e:	0003      	movs	r3, r0
 800a590:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a592:	19bc      	adds	r4, r7, r6
 800a594:	197b      	adds	r3, r7, r5
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	0018      	movs	r0, r3
 800a59a:	f000 f8a8 	bl	800a6ee <USBD_Get_USB_Status>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a5a2:	19bb      	adds	r3, r7, r6
 800a5a4:	781b      	ldrb	r3, [r3, #0]
}
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	b005      	add	sp, #20
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b0:	b087      	sub	sp, #28
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	0008      	movs	r0, r1
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	0019      	movs	r1, r3
 800a5bc:	230b      	movs	r3, #11
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	1c02      	adds	r2, r0, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
 800a5c4:	2408      	movs	r4, #8
 800a5c6:	193b      	adds	r3, r7, r4
 800a5c8:	1c0a      	adds	r2, r1, #0
 800a5ca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2117      	movs	r1, #23
 800a5ce:	187b      	adds	r3, r7, r1
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d4:	2516      	movs	r5, #22
 800a5d6:	197b      	adds	r3, r7, r5
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	23b0      	movs	r3, #176	; 0xb0
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	58d0      	ldr	r0, [r2, r3]
 800a5e4:	193b      	adds	r3, r7, r4
 800a5e6:	881d      	ldrh	r5, [r3, #0]
 800a5e8:	000e      	movs	r6, r1
 800a5ea:	187c      	adds	r4, r7, r1
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	230b      	movs	r3, #11
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	7819      	ldrb	r1, [r3, #0]
 800a5f4:	002b      	movs	r3, r5
 800a5f6:	f7f8 fc34 	bl	8002e62 <HAL_PCD_EP_Transmit>
 800a5fa:	0003      	movs	r3, r0
 800a5fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5fe:	2516      	movs	r5, #22
 800a600:	197c      	adds	r4, r7, r5
 800a602:	19bb      	adds	r3, r7, r6
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	0018      	movs	r0, r3
 800a608:	f000 f871 	bl	800a6ee <USBD_Get_USB_Status>
 800a60c:	0003      	movs	r3, r0
 800a60e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a610:	197b      	adds	r3, r7, r5
 800a612:	781b      	ldrb	r3, [r3, #0]
}
 800a614:	0018      	movs	r0, r3
 800a616:	46bd      	mov	sp, r7
 800a618:	b007      	add	sp, #28
 800a61a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a61c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	0008      	movs	r0, r1
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	0019      	movs	r1, r3
 800a62a:	230b      	movs	r3, #11
 800a62c:	18fb      	adds	r3, r7, r3
 800a62e:	1c02      	adds	r2, r0, #0
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	2408      	movs	r4, #8
 800a634:	193b      	adds	r3, r7, r4
 800a636:	1c0a      	adds	r2, r1, #0
 800a638:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2117      	movs	r1, #23
 800a63c:	187b      	adds	r3, r7, r1
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a642:	2516      	movs	r5, #22
 800a644:	197b      	adds	r3, r7, r5
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	23b0      	movs	r3, #176	; 0xb0
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	58d0      	ldr	r0, [r2, r3]
 800a652:	193b      	adds	r3, r7, r4
 800a654:	881d      	ldrh	r5, [r3, #0]
 800a656:	000e      	movs	r6, r1
 800a658:	187c      	adds	r4, r7, r1
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	230b      	movs	r3, #11
 800a65e:	18fb      	adds	r3, r7, r3
 800a660:	7819      	ldrb	r1, [r3, #0]
 800a662:	002b      	movs	r3, r5
 800a664:	f7f8 fbad 	bl	8002dc2 <HAL_PCD_EP_Receive>
 800a668:	0003      	movs	r3, r0
 800a66a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a66c:	2516      	movs	r5, #22
 800a66e:	197c      	adds	r4, r7, r5
 800a670:	19bb      	adds	r3, r7, r6
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	0018      	movs	r0, r3
 800a676:	f000 f83a 	bl	800a6ee <USBD_Get_USB_Status>
 800a67a:	0003      	movs	r3, r0
 800a67c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a67e:	197b      	adds	r3, r7, r5
 800a680:	781b      	ldrb	r3, [r3, #0]
}
 800a682:	0018      	movs	r0, r3
 800a684:	46bd      	mov	sp, r7
 800a686:	b007      	add	sp, #28
 800a688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a68a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	000a      	movs	r2, r1
 800a694:	1cfb      	adds	r3, r7, #3
 800a696:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	23b0      	movs	r3, #176	; 0xb0
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	58d2      	ldr	r2, [r2, r3]
 800a6a0:	1cfb      	adds	r3, r7, #3
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	0019      	movs	r1, r3
 800a6a6:	0010      	movs	r0, r2
 800a6a8:	f7f8 fbc2 	bl	8002e30 <HAL_PCD_EP_GetRxCount>
 800a6ac:	0003      	movs	r3, r0
}
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	b002      	add	sp, #8
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6c0:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <USBD_static_malloc+0x14>)
}
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	b002      	add	sp, #8
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	46c0      	nop			; (mov r8, r8)
 800a6cc:	200016fc 	.word	0x200016fc

0800a6d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]

}
 800a6d8:	46c0      	nop			; (mov r8, r8)
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b002      	add	sp, #8
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6e4:	f7f6 fc60 	bl	8000fa8 <SystemClock_Config>
}
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	0002      	movs	r2, r0
 800a6f6:	1dfb      	adds	r3, r7, #7
 800a6f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fa:	230f      	movs	r3, #15
 800a6fc:	18fb      	adds	r3, r7, r3
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a702:	1dfb      	adds	r3, r7, #7
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b03      	cmp	r3, #3
 800a708:	d017      	beq.n	800a73a <USBD_Get_USB_Status+0x4c>
 800a70a:	dc1b      	bgt.n	800a744 <USBD_Get_USB_Status+0x56>
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d00f      	beq.n	800a730 <USBD_Get_USB_Status+0x42>
 800a710:	dc18      	bgt.n	800a744 <USBD_Get_USB_Status+0x56>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <USBD_Get_USB_Status+0x2e>
 800a716:	2b01      	cmp	r3, #1
 800a718:	d005      	beq.n	800a726 <USBD_Get_USB_Status+0x38>
 800a71a:	e013      	b.n	800a744 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a71c:	230f      	movs	r3, #15
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
    break;
 800a724:	e013      	b.n	800a74e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a726:	230f      	movs	r3, #15
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	2202      	movs	r2, #2
 800a72c:	701a      	strb	r2, [r3, #0]
    break;
 800a72e:	e00e      	b.n	800a74e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a730:	230f      	movs	r3, #15
 800a732:	18fb      	adds	r3, r7, r3
 800a734:	2201      	movs	r2, #1
 800a736:	701a      	strb	r2, [r3, #0]
    break;
 800a738:	e009      	b.n	800a74e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a73a:	230f      	movs	r3, #15
 800a73c:	18fb      	adds	r3, r7, r3
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]
    break;
 800a742:	e004      	b.n	800a74e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a744:	230f      	movs	r3, #15
 800a746:	18fb      	adds	r3, r7, r3
 800a748:	2202      	movs	r2, #2
 800a74a:	701a      	strb	r2, [r3, #0]
    break;
 800a74c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a74e:	230f      	movs	r3, #15
 800a750:	18fb      	adds	r3, r7, r3
 800a752:	781b      	ldrb	r3, [r3, #0]
}
 800a754:	0018      	movs	r0, r3
 800a756:	46bd      	mov	sp, r7
 800a758:	b004      	add	sp, #16
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <__errno>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	; (800a764 <__errno+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	20000458 	.word	0x20000458

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2600      	movs	r6, #0
 800a76c:	4d0c      	ldr	r5, [pc, #48]	; (800a7a0 <__libc_init_array+0x38>)
 800a76e:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a770:	1b64      	subs	r4, r4, r5
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	42a6      	cmp	r6, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	2600      	movs	r6, #0
 800a77a:	f000 fc8b 	bl	800b094 <_init>
 800a77e:	4d0a      	ldr	r5, [pc, #40]	; (800a7a8 <__libc_init_array+0x40>)
 800a780:	4c0a      	ldr	r4, [pc, #40]	; (800a7ac <__libc_init_array+0x44>)
 800a782:	1b64      	subs	r4, r4, r5
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	42a6      	cmp	r6, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	00b3      	lsls	r3, r6, #2
 800a78e:	58eb      	ldr	r3, [r5, r3]
 800a790:	4798      	blx	r3
 800a792:	3601      	adds	r6, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	00b3      	lsls	r3, r6, #2
 800a798:	58eb      	ldr	r3, [r5, r3]
 800a79a:	4798      	blx	r3
 800a79c:	3601      	adds	r6, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800b25c 	.word	0x0800b25c
 800a7a4:	0800b25c 	.word	0x0800b25c
 800a7a8:	0800b25c 	.word	0x0800b25c
 800a7ac:	0800b260 	.word	0x0800b260

0800a7b0 <memcpy>:
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d100      	bne.n	800a7ba <memcpy+0xa>
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	5ccc      	ldrb	r4, [r1, r3]
 800a7bc:	54c4      	strb	r4, [r0, r3]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	e7f8      	b.n	800a7b4 <memcpy+0x4>

0800a7c2 <memset>:
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	1882      	adds	r2, r0, r2
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d100      	bne.n	800a7cc <memset+0xa>
 800a7ca:	4770      	bx	lr
 800a7cc:	7019      	strb	r1, [r3, #0]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	e7f9      	b.n	800a7c6 <memset+0x4>
	...

0800a7d4 <siprintf>:
 800a7d4:	b40e      	push	{r1, r2, r3}
 800a7d6:	b500      	push	{lr}
 800a7d8:	490b      	ldr	r1, [pc, #44]	; (800a808 <siprintf+0x34>)
 800a7da:	b09c      	sub	sp, #112	; 0x70
 800a7dc:	ab1d      	add	r3, sp, #116	; 0x74
 800a7de:	9002      	str	r0, [sp, #8]
 800a7e0:	9006      	str	r0, [sp, #24]
 800a7e2:	9107      	str	r1, [sp, #28]
 800a7e4:	9104      	str	r1, [sp, #16]
 800a7e6:	4809      	ldr	r0, [pc, #36]	; (800a80c <siprintf+0x38>)
 800a7e8:	4909      	ldr	r1, [pc, #36]	; (800a810 <siprintf+0x3c>)
 800a7ea:	cb04      	ldmia	r3!, {r2}
 800a7ec:	9105      	str	r1, [sp, #20]
 800a7ee:	6800      	ldr	r0, [r0, #0]
 800a7f0:	a902      	add	r1, sp, #8
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	f000 f870 	bl	800a8d8 <_svfiprintf_r>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9a02      	ldr	r2, [sp, #8]
 800a7fc:	7013      	strb	r3, [r2, #0]
 800a7fe:	b01c      	add	sp, #112	; 0x70
 800a800:	bc08      	pop	{r3}
 800a802:	b003      	add	sp, #12
 800a804:	4718      	bx	r3
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	7fffffff 	.word	0x7fffffff
 800a80c:	20000458 	.word	0x20000458
 800a810:	ffff0208 	.word	0xffff0208

0800a814 <__ssputs_r>:
 800a814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a816:	688e      	ldr	r6, [r1, #8]
 800a818:	b085      	sub	sp, #20
 800a81a:	0007      	movs	r7, r0
 800a81c:	000c      	movs	r4, r1
 800a81e:	9203      	str	r2, [sp, #12]
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	429e      	cmp	r6, r3
 800a824:	d83c      	bhi.n	800a8a0 <__ssputs_r+0x8c>
 800a826:	2390      	movs	r3, #144	; 0x90
 800a828:	898a      	ldrh	r2, [r1, #12]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	421a      	tst	r2, r3
 800a82e:	d034      	beq.n	800a89a <__ssputs_r+0x86>
 800a830:	6909      	ldr	r1, [r1, #16]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	6960      	ldr	r0, [r4, #20]
 800a836:	1a5b      	subs	r3, r3, r1
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	2303      	movs	r3, #3
 800a83c:	4343      	muls	r3, r0
 800a83e:	0fdd      	lsrs	r5, r3, #31
 800a840:	18ed      	adds	r5, r5, r3
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	9802      	ldr	r0, [sp, #8]
 800a846:	3301      	adds	r3, #1
 800a848:	181b      	adds	r3, r3, r0
 800a84a:	106d      	asrs	r5, r5, #1
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	d900      	bls.n	800a852 <__ssputs_r+0x3e>
 800a850:	001d      	movs	r5, r3
 800a852:	0553      	lsls	r3, r2, #21
 800a854:	d532      	bpl.n	800a8bc <__ssputs_r+0xa8>
 800a856:	0029      	movs	r1, r5
 800a858:	0038      	movs	r0, r7
 800a85a:	f000 fb49 	bl	800aef0 <_malloc_r>
 800a85e:	1e06      	subs	r6, r0, #0
 800a860:	d109      	bne.n	800a876 <__ssputs_r+0x62>
 800a862:	230c      	movs	r3, #12
 800a864:	603b      	str	r3, [r7, #0]
 800a866:	2340      	movs	r3, #64	; 0x40
 800a868:	2001      	movs	r0, #1
 800a86a:	89a2      	ldrh	r2, [r4, #12]
 800a86c:	4240      	negs	r0, r0
 800a86e:	4313      	orrs	r3, r2
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	b005      	add	sp, #20
 800a874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a876:	9a02      	ldr	r2, [sp, #8]
 800a878:	6921      	ldr	r1, [r4, #16]
 800a87a:	f7ff ff99 	bl	800a7b0 <memcpy>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	4a14      	ldr	r2, [pc, #80]	; (800a8d4 <__ssputs_r+0xc0>)
 800a882:	401a      	ands	r2, r3
 800a884:	2380      	movs	r3, #128	; 0x80
 800a886:	4313      	orrs	r3, r2
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	6126      	str	r6, [r4, #16]
 800a88e:	18f6      	adds	r6, r6, r3
 800a890:	6026      	str	r6, [r4, #0]
 800a892:	6165      	str	r5, [r4, #20]
 800a894:	9e01      	ldr	r6, [sp, #4]
 800a896:	1aed      	subs	r5, r5, r3
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	429e      	cmp	r6, r3
 800a89e:	d900      	bls.n	800a8a2 <__ssputs_r+0x8e>
 800a8a0:	9e01      	ldr	r6, [sp, #4]
 800a8a2:	0032      	movs	r2, r6
 800a8a4:	9903      	ldr	r1, [sp, #12]
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	f000 faa3 	bl	800adf2 <memmove>
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	1b9b      	subs	r3, r3, r6
 800a8b2:	60a3      	str	r3, [r4, #8]
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	199e      	adds	r6, r3, r6
 800a8b8:	6026      	str	r6, [r4, #0]
 800a8ba:	e7da      	b.n	800a872 <__ssputs_r+0x5e>
 800a8bc:	002a      	movs	r2, r5
 800a8be:	0038      	movs	r0, r7
 800a8c0:	f000 fb8c 	bl	800afdc <_realloc_r>
 800a8c4:	1e06      	subs	r6, r0, #0
 800a8c6:	d1e0      	bne.n	800a88a <__ssputs_r+0x76>
 800a8c8:	0038      	movs	r0, r7
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	f000 faa4 	bl	800ae18 <_free_r>
 800a8d0:	e7c7      	b.n	800a862 <__ssputs_r+0x4e>
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	fffffb7f 	.word	0xfffffb7f

0800a8d8 <_svfiprintf_r>:
 800a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8da:	b0a1      	sub	sp, #132	; 0x84
 800a8dc:	9003      	str	r0, [sp, #12]
 800a8de:	001d      	movs	r5, r3
 800a8e0:	898b      	ldrh	r3, [r1, #12]
 800a8e2:	000f      	movs	r7, r1
 800a8e4:	0016      	movs	r6, r2
 800a8e6:	061b      	lsls	r3, r3, #24
 800a8e8:	d511      	bpl.n	800a90e <_svfiprintf_r+0x36>
 800a8ea:	690b      	ldr	r3, [r1, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10e      	bne.n	800a90e <_svfiprintf_r+0x36>
 800a8f0:	2140      	movs	r1, #64	; 0x40
 800a8f2:	f000 fafd 	bl	800aef0 <_malloc_r>
 800a8f6:	6038      	str	r0, [r7, #0]
 800a8f8:	6138      	str	r0, [r7, #16]
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d105      	bne.n	800a90a <_svfiprintf_r+0x32>
 800a8fe:	230c      	movs	r3, #12
 800a900:	9a03      	ldr	r2, [sp, #12]
 800a902:	3801      	subs	r0, #1
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	b021      	add	sp, #132	; 0x84
 800a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90a:	2340      	movs	r3, #64	; 0x40
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	2300      	movs	r3, #0
 800a910:	ac08      	add	r4, sp, #32
 800a912:	6163      	str	r3, [r4, #20]
 800a914:	3320      	adds	r3, #32
 800a916:	7663      	strb	r3, [r4, #25]
 800a918:	3310      	adds	r3, #16
 800a91a:	76a3      	strb	r3, [r4, #26]
 800a91c:	9507      	str	r5, [sp, #28]
 800a91e:	0035      	movs	r5, r6
 800a920:	782b      	ldrb	r3, [r5, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <_svfiprintf_r+0x52>
 800a926:	2b25      	cmp	r3, #37	; 0x25
 800a928:	d147      	bne.n	800a9ba <_svfiprintf_r+0xe2>
 800a92a:	1bab      	subs	r3, r5, r6
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	42b5      	cmp	r5, r6
 800a930:	d00c      	beq.n	800a94c <_svfiprintf_r+0x74>
 800a932:	0032      	movs	r2, r6
 800a934:	0039      	movs	r1, r7
 800a936:	9803      	ldr	r0, [sp, #12]
 800a938:	f7ff ff6c 	bl	800a814 <__ssputs_r>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d100      	bne.n	800a942 <_svfiprintf_r+0x6a>
 800a940:	e0ae      	b.n	800aaa0 <_svfiprintf_r+0x1c8>
 800a942:	6962      	ldr	r2, [r4, #20]
 800a944:	9b05      	ldr	r3, [sp, #20]
 800a946:	4694      	mov	ip, r2
 800a948:	4463      	add	r3, ip
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	782b      	ldrb	r3, [r5, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d100      	bne.n	800a954 <_svfiprintf_r+0x7c>
 800a952:	e0a5      	b.n	800aaa0 <_svfiprintf_r+0x1c8>
 800a954:	2201      	movs	r2, #1
 800a956:	2300      	movs	r3, #0
 800a958:	4252      	negs	r2, r2
 800a95a:	6062      	str	r2, [r4, #4]
 800a95c:	a904      	add	r1, sp, #16
 800a95e:	3254      	adds	r2, #84	; 0x54
 800a960:	1852      	adds	r2, r2, r1
 800a962:	1c6e      	adds	r6, r5, #1
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	60e3      	str	r3, [r4, #12]
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	7013      	strb	r3, [r2, #0]
 800a96c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a96e:	2205      	movs	r2, #5
 800a970:	7831      	ldrb	r1, [r6, #0]
 800a972:	4854      	ldr	r0, [pc, #336]	; (800aac4 <_svfiprintf_r+0x1ec>)
 800a974:	f000 fa32 	bl	800addc <memchr>
 800a978:	1c75      	adds	r5, r6, #1
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d11f      	bne.n	800a9be <_svfiprintf_r+0xe6>
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	06d3      	lsls	r3, r2, #27
 800a982:	d504      	bpl.n	800a98e <_svfiprintf_r+0xb6>
 800a984:	2353      	movs	r3, #83	; 0x53
 800a986:	a904      	add	r1, sp, #16
 800a988:	185b      	adds	r3, r3, r1
 800a98a:	2120      	movs	r1, #32
 800a98c:	7019      	strb	r1, [r3, #0]
 800a98e:	0713      	lsls	r3, r2, #28
 800a990:	d504      	bpl.n	800a99c <_svfiprintf_r+0xc4>
 800a992:	2353      	movs	r3, #83	; 0x53
 800a994:	a904      	add	r1, sp, #16
 800a996:	185b      	adds	r3, r3, r1
 800a998:	212b      	movs	r1, #43	; 0x2b
 800a99a:	7019      	strb	r1, [r3, #0]
 800a99c:	7833      	ldrb	r3, [r6, #0]
 800a99e:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a0:	d016      	beq.n	800a9d0 <_svfiprintf_r+0xf8>
 800a9a2:	0035      	movs	r5, r6
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	200a      	movs	r0, #10
 800a9a8:	68e3      	ldr	r3, [r4, #12]
 800a9aa:	782a      	ldrb	r2, [r5, #0]
 800a9ac:	1c6e      	adds	r6, r5, #1
 800a9ae:	3a30      	subs	r2, #48	; 0x30
 800a9b0:	2a09      	cmp	r2, #9
 800a9b2:	d94e      	bls.n	800aa52 <_svfiprintf_r+0x17a>
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	d111      	bne.n	800a9dc <_svfiprintf_r+0x104>
 800a9b8:	e017      	b.n	800a9ea <_svfiprintf_r+0x112>
 800a9ba:	3501      	adds	r5, #1
 800a9bc:	e7b0      	b.n	800a920 <_svfiprintf_r+0x48>
 800a9be:	4b41      	ldr	r3, [pc, #260]	; (800aac4 <_svfiprintf_r+0x1ec>)
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	1ac0      	subs	r0, r0, r3
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4083      	lsls	r3, r0
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	002e      	movs	r6, r5
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	e7ce      	b.n	800a96e <_svfiprintf_r+0x96>
 800a9d0:	9b07      	ldr	r3, [sp, #28]
 800a9d2:	1d19      	adds	r1, r3, #4
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	9107      	str	r1, [sp, #28]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	db01      	blt.n	800a9e0 <_svfiprintf_r+0x108>
 800a9dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9de:	e004      	b.n	800a9ea <_svfiprintf_r+0x112>
 800a9e0:	425b      	negs	r3, r3
 800a9e2:	60e3      	str	r3, [r4, #12]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	782b      	ldrb	r3, [r5, #0]
 800a9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a9ee:	d10a      	bne.n	800aa06 <_svfiprintf_r+0x12e>
 800a9f0:	786b      	ldrb	r3, [r5, #1]
 800a9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f4:	d135      	bne.n	800aa62 <_svfiprintf_r+0x18a>
 800a9f6:	9b07      	ldr	r3, [sp, #28]
 800a9f8:	3502      	adds	r5, #2
 800a9fa:	1d1a      	adds	r2, r3, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	9207      	str	r2, [sp, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	db2b      	blt.n	800aa5c <_svfiprintf_r+0x184>
 800aa04:	9309      	str	r3, [sp, #36]	; 0x24
 800aa06:	4e30      	ldr	r6, [pc, #192]	; (800aac8 <_svfiprintf_r+0x1f0>)
 800aa08:	2203      	movs	r2, #3
 800aa0a:	0030      	movs	r0, r6
 800aa0c:	7829      	ldrb	r1, [r5, #0]
 800aa0e:	f000 f9e5 	bl	800addc <memchr>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d006      	beq.n	800aa24 <_svfiprintf_r+0x14c>
 800aa16:	2340      	movs	r3, #64	; 0x40
 800aa18:	1b80      	subs	r0, r0, r6
 800aa1a:	4083      	lsls	r3, r0
 800aa1c:	6822      	ldr	r2, [r4, #0]
 800aa1e:	3501      	adds	r5, #1
 800aa20:	4313      	orrs	r3, r2
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	7829      	ldrb	r1, [r5, #0]
 800aa26:	2206      	movs	r2, #6
 800aa28:	4828      	ldr	r0, [pc, #160]	; (800aacc <_svfiprintf_r+0x1f4>)
 800aa2a:	1c6e      	adds	r6, r5, #1
 800aa2c:	7621      	strb	r1, [r4, #24]
 800aa2e:	f000 f9d5 	bl	800addc <memchr>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d03c      	beq.n	800aab0 <_svfiprintf_r+0x1d8>
 800aa36:	4b26      	ldr	r3, [pc, #152]	; (800aad0 <_svfiprintf_r+0x1f8>)
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d125      	bne.n	800aa88 <_svfiprintf_r+0x1b0>
 800aa3c:	2207      	movs	r2, #7
 800aa3e:	9b07      	ldr	r3, [sp, #28]
 800aa40:	3307      	adds	r3, #7
 800aa42:	4393      	bics	r3, r2
 800aa44:	3308      	adds	r3, #8
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	6963      	ldr	r3, [r4, #20]
 800aa4a:	9a04      	ldr	r2, [sp, #16]
 800aa4c:	189b      	adds	r3, r3, r2
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	e765      	b.n	800a91e <_svfiprintf_r+0x46>
 800aa52:	4343      	muls	r3, r0
 800aa54:	0035      	movs	r5, r6
 800aa56:	2101      	movs	r1, #1
 800aa58:	189b      	adds	r3, r3, r2
 800aa5a:	e7a6      	b.n	800a9aa <_svfiprintf_r+0xd2>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	425b      	negs	r3, r3
 800aa60:	e7d0      	b.n	800aa04 <_svfiprintf_r+0x12c>
 800aa62:	2300      	movs	r3, #0
 800aa64:	200a      	movs	r0, #10
 800aa66:	001a      	movs	r2, r3
 800aa68:	3501      	adds	r5, #1
 800aa6a:	6063      	str	r3, [r4, #4]
 800aa6c:	7829      	ldrb	r1, [r5, #0]
 800aa6e:	1c6e      	adds	r6, r5, #1
 800aa70:	3930      	subs	r1, #48	; 0x30
 800aa72:	2909      	cmp	r1, #9
 800aa74:	d903      	bls.n	800aa7e <_svfiprintf_r+0x1a6>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0c5      	beq.n	800aa06 <_svfiprintf_r+0x12e>
 800aa7a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa7c:	e7c3      	b.n	800aa06 <_svfiprintf_r+0x12e>
 800aa7e:	4342      	muls	r2, r0
 800aa80:	0035      	movs	r5, r6
 800aa82:	2301      	movs	r3, #1
 800aa84:	1852      	adds	r2, r2, r1
 800aa86:	e7f1      	b.n	800aa6c <_svfiprintf_r+0x194>
 800aa88:	ab07      	add	r3, sp, #28
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	003a      	movs	r2, r7
 800aa8e:	0021      	movs	r1, r4
 800aa90:	4b10      	ldr	r3, [pc, #64]	; (800aad4 <_svfiprintf_r+0x1fc>)
 800aa92:	9803      	ldr	r0, [sp, #12]
 800aa94:	e000      	b.n	800aa98 <_svfiprintf_r+0x1c0>
 800aa96:	bf00      	nop
 800aa98:	9004      	str	r0, [sp, #16]
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	d1d3      	bne.n	800aa48 <_svfiprintf_r+0x170>
 800aaa0:	89bb      	ldrh	r3, [r7, #12]
 800aaa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aaa4:	065b      	lsls	r3, r3, #25
 800aaa6:	d400      	bmi.n	800aaaa <_svfiprintf_r+0x1d2>
 800aaa8:	e72d      	b.n	800a906 <_svfiprintf_r+0x2e>
 800aaaa:	2001      	movs	r0, #1
 800aaac:	4240      	negs	r0, r0
 800aaae:	e72a      	b.n	800a906 <_svfiprintf_r+0x2e>
 800aab0:	ab07      	add	r3, sp, #28
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	003a      	movs	r2, r7
 800aab6:	0021      	movs	r1, r4
 800aab8:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <_svfiprintf_r+0x1fc>)
 800aaba:	9803      	ldr	r0, [sp, #12]
 800aabc:	f000 f87c 	bl	800abb8 <_printf_i>
 800aac0:	e7ea      	b.n	800aa98 <_svfiprintf_r+0x1c0>
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	0800b220 	.word	0x0800b220
 800aac8:	0800b226 	.word	0x0800b226
 800aacc:	0800b22a 	.word	0x0800b22a
 800aad0:	00000000 	.word	0x00000000
 800aad4:	0800a815 	.word	0x0800a815

0800aad8 <_printf_common>:
 800aad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aada:	0015      	movs	r5, r2
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	688a      	ldr	r2, [r1, #8]
 800aae0:	690b      	ldr	r3, [r1, #16]
 800aae2:	000c      	movs	r4, r1
 800aae4:	9000      	str	r0, [sp, #0]
 800aae6:	4293      	cmp	r3, r2
 800aae8:	da00      	bge.n	800aaec <_printf_common+0x14>
 800aaea:	0013      	movs	r3, r2
 800aaec:	0022      	movs	r2, r4
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	3243      	adds	r2, #67	; 0x43
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	2a00      	cmp	r2, #0
 800aaf6:	d001      	beq.n	800aafc <_printf_common+0x24>
 800aaf8:	3301      	adds	r3, #1
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	069b      	lsls	r3, r3, #26
 800ab00:	d502      	bpl.n	800ab08 <_printf_common+0x30>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	3302      	adds	r3, #2
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	2306      	movs	r3, #6
 800ab0c:	0017      	movs	r7, r2
 800ab0e:	401f      	ands	r7, r3
 800ab10:	421a      	tst	r2, r3
 800ab12:	d027      	beq.n	800ab64 <_printf_common+0x8c>
 800ab14:	0023      	movs	r3, r4
 800ab16:	3343      	adds	r3, #67	; 0x43
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	1e5a      	subs	r2, r3, #1
 800ab1c:	4193      	sbcs	r3, r2
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	0692      	lsls	r2, r2, #26
 800ab22:	d430      	bmi.n	800ab86 <_printf_common+0xae>
 800ab24:	0022      	movs	r2, r4
 800ab26:	9901      	ldr	r1, [sp, #4]
 800ab28:	9800      	ldr	r0, [sp, #0]
 800ab2a:	9e08      	ldr	r6, [sp, #32]
 800ab2c:	3243      	adds	r2, #67	; 0x43
 800ab2e:	47b0      	blx	r6
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d025      	beq.n	800ab80 <_printf_common+0xa8>
 800ab34:	2306      	movs	r3, #6
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	682a      	ldr	r2, [r5, #0]
 800ab3a:	68e1      	ldr	r1, [r4, #12]
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	4003      	ands	r3, r0
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d103      	bne.n	800ab4c <_printf_common+0x74>
 800ab44:	1a8d      	subs	r5, r1, r2
 800ab46:	43eb      	mvns	r3, r5
 800ab48:	17db      	asrs	r3, r3, #31
 800ab4a:	401d      	ands	r5, r3
 800ab4c:	68a3      	ldr	r3, [r4, #8]
 800ab4e:	6922      	ldr	r2, [r4, #16]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	dd01      	ble.n	800ab58 <_printf_common+0x80>
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	18ed      	adds	r5, r5, r3
 800ab58:	2700      	movs	r7, #0
 800ab5a:	42bd      	cmp	r5, r7
 800ab5c:	d120      	bne.n	800aba0 <_printf_common+0xc8>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	e010      	b.n	800ab84 <_printf_common+0xac>
 800ab62:	3701      	adds	r7, #1
 800ab64:	68e3      	ldr	r3, [r4, #12]
 800ab66:	682a      	ldr	r2, [r5, #0]
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	42bb      	cmp	r3, r7
 800ab6c:	ddd2      	ble.n	800ab14 <_printf_common+0x3c>
 800ab6e:	0022      	movs	r2, r4
 800ab70:	2301      	movs	r3, #1
 800ab72:	9901      	ldr	r1, [sp, #4]
 800ab74:	9800      	ldr	r0, [sp, #0]
 800ab76:	9e08      	ldr	r6, [sp, #32]
 800ab78:	3219      	adds	r2, #25
 800ab7a:	47b0      	blx	r6
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d1f0      	bne.n	800ab62 <_printf_common+0x8a>
 800ab80:	2001      	movs	r0, #1
 800ab82:	4240      	negs	r0, r0
 800ab84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab86:	2030      	movs	r0, #48	; 0x30
 800ab88:	18e1      	adds	r1, r4, r3
 800ab8a:	3143      	adds	r1, #67	; 0x43
 800ab8c:	7008      	strb	r0, [r1, #0]
 800ab8e:	0021      	movs	r1, r4
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	3145      	adds	r1, #69	; 0x45
 800ab94:	7809      	ldrb	r1, [r1, #0]
 800ab96:	18a2      	adds	r2, r4, r2
 800ab98:	3243      	adds	r2, #67	; 0x43
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	7011      	strb	r1, [r2, #0]
 800ab9e:	e7c1      	b.n	800ab24 <_printf_common+0x4c>
 800aba0:	0022      	movs	r2, r4
 800aba2:	2301      	movs	r3, #1
 800aba4:	9901      	ldr	r1, [sp, #4]
 800aba6:	9800      	ldr	r0, [sp, #0]
 800aba8:	9e08      	ldr	r6, [sp, #32]
 800abaa:	321a      	adds	r2, #26
 800abac:	47b0      	blx	r6
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	d0e6      	beq.n	800ab80 <_printf_common+0xa8>
 800abb2:	3701      	adds	r7, #1
 800abb4:	e7d1      	b.n	800ab5a <_printf_common+0x82>
	...

0800abb8 <_printf_i>:
 800abb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abba:	b08b      	sub	sp, #44	; 0x2c
 800abbc:	9206      	str	r2, [sp, #24]
 800abbe:	000a      	movs	r2, r1
 800abc0:	3243      	adds	r2, #67	; 0x43
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	9005      	str	r0, [sp, #20]
 800abc6:	9204      	str	r2, [sp, #16]
 800abc8:	7e0a      	ldrb	r2, [r1, #24]
 800abca:	000c      	movs	r4, r1
 800abcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abce:	2a78      	cmp	r2, #120	; 0x78
 800abd0:	d807      	bhi.n	800abe2 <_printf_i+0x2a>
 800abd2:	2a62      	cmp	r2, #98	; 0x62
 800abd4:	d809      	bhi.n	800abea <_printf_i+0x32>
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	d100      	bne.n	800abdc <_printf_i+0x24>
 800abda:	e0c1      	b.n	800ad60 <_printf_i+0x1a8>
 800abdc:	2a58      	cmp	r2, #88	; 0x58
 800abde:	d100      	bne.n	800abe2 <_printf_i+0x2a>
 800abe0:	e08c      	b.n	800acfc <_printf_i+0x144>
 800abe2:	0026      	movs	r6, r4
 800abe4:	3642      	adds	r6, #66	; 0x42
 800abe6:	7032      	strb	r2, [r6, #0]
 800abe8:	e022      	b.n	800ac30 <_printf_i+0x78>
 800abea:	0010      	movs	r0, r2
 800abec:	3863      	subs	r0, #99	; 0x63
 800abee:	2815      	cmp	r0, #21
 800abf0:	d8f7      	bhi.n	800abe2 <_printf_i+0x2a>
 800abf2:	f7f5 fa89 	bl	8000108 <__gnu_thumb1_case_shi>
 800abf6:	0016      	.short	0x0016
 800abf8:	fff6001f 	.word	0xfff6001f
 800abfc:	fff6fff6 	.word	0xfff6fff6
 800ac00:	001ffff6 	.word	0x001ffff6
 800ac04:	fff6fff6 	.word	0xfff6fff6
 800ac08:	fff6fff6 	.word	0xfff6fff6
 800ac0c:	003600a8 	.word	0x003600a8
 800ac10:	fff6009a 	.word	0xfff6009a
 800ac14:	00b9fff6 	.word	0x00b9fff6
 800ac18:	0036fff6 	.word	0x0036fff6
 800ac1c:	fff6fff6 	.word	0xfff6fff6
 800ac20:	009e      	.short	0x009e
 800ac22:	0026      	movs	r6, r4
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	3642      	adds	r6, #66	; 0x42
 800ac28:	1d11      	adds	r1, r2, #4
 800ac2a:	6019      	str	r1, [r3, #0]
 800ac2c:	6813      	ldr	r3, [r2, #0]
 800ac2e:	7033      	strb	r3, [r6, #0]
 800ac30:	2301      	movs	r3, #1
 800ac32:	e0a7      	b.n	800ad84 <_printf_i+0x1cc>
 800ac34:	6808      	ldr	r0, [r1, #0]
 800ac36:	6819      	ldr	r1, [r3, #0]
 800ac38:	1d0a      	adds	r2, r1, #4
 800ac3a:	0605      	lsls	r5, r0, #24
 800ac3c:	d50b      	bpl.n	800ac56 <_printf_i+0x9e>
 800ac3e:	680d      	ldr	r5, [r1, #0]
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	2d00      	cmp	r5, #0
 800ac44:	da03      	bge.n	800ac4e <_printf_i+0x96>
 800ac46:	232d      	movs	r3, #45	; 0x2d
 800ac48:	9a04      	ldr	r2, [sp, #16]
 800ac4a:	426d      	negs	r5, r5
 800ac4c:	7013      	strb	r3, [r2, #0]
 800ac4e:	4b61      	ldr	r3, [pc, #388]	; (800add4 <_printf_i+0x21c>)
 800ac50:	270a      	movs	r7, #10
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	e01b      	b.n	800ac8e <_printf_i+0xd6>
 800ac56:	680d      	ldr	r5, [r1, #0]
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	0641      	lsls	r1, r0, #25
 800ac5c:	d5f1      	bpl.n	800ac42 <_printf_i+0x8a>
 800ac5e:	b22d      	sxth	r5, r5
 800ac60:	e7ef      	b.n	800ac42 <_printf_i+0x8a>
 800ac62:	680d      	ldr	r5, [r1, #0]
 800ac64:	6819      	ldr	r1, [r3, #0]
 800ac66:	1d08      	adds	r0, r1, #4
 800ac68:	6018      	str	r0, [r3, #0]
 800ac6a:	062e      	lsls	r6, r5, #24
 800ac6c:	d501      	bpl.n	800ac72 <_printf_i+0xba>
 800ac6e:	680d      	ldr	r5, [r1, #0]
 800ac70:	e003      	b.n	800ac7a <_printf_i+0xc2>
 800ac72:	066d      	lsls	r5, r5, #25
 800ac74:	d5fb      	bpl.n	800ac6e <_printf_i+0xb6>
 800ac76:	680d      	ldr	r5, [r1, #0]
 800ac78:	b2ad      	uxth	r5, r5
 800ac7a:	4b56      	ldr	r3, [pc, #344]	; (800add4 <_printf_i+0x21c>)
 800ac7c:	2708      	movs	r7, #8
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	2a6f      	cmp	r2, #111	; 0x6f
 800ac82:	d000      	beq.n	800ac86 <_printf_i+0xce>
 800ac84:	3702      	adds	r7, #2
 800ac86:	0023      	movs	r3, r4
 800ac88:	2200      	movs	r2, #0
 800ac8a:	3343      	adds	r3, #67	; 0x43
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	6863      	ldr	r3, [r4, #4]
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	db03      	blt.n	800ac9e <_printf_i+0xe6>
 800ac96:	2204      	movs	r2, #4
 800ac98:	6821      	ldr	r1, [r4, #0]
 800ac9a:	4391      	bics	r1, r2
 800ac9c:	6021      	str	r1, [r4, #0]
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	d102      	bne.n	800aca8 <_printf_i+0xf0>
 800aca2:	9e04      	ldr	r6, [sp, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00c      	beq.n	800acc2 <_printf_i+0x10a>
 800aca8:	9e04      	ldr	r6, [sp, #16]
 800acaa:	0028      	movs	r0, r5
 800acac:	0039      	movs	r1, r7
 800acae:	f7f5 fabb 	bl	8000228 <__aeabi_uidivmod>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3e01      	subs	r6, #1
 800acb6:	5c5b      	ldrb	r3, [r3, r1]
 800acb8:	7033      	strb	r3, [r6, #0]
 800acba:	002b      	movs	r3, r5
 800acbc:	0005      	movs	r5, r0
 800acbe:	429f      	cmp	r7, r3
 800acc0:	d9f3      	bls.n	800acaa <_printf_i+0xf2>
 800acc2:	2f08      	cmp	r7, #8
 800acc4:	d109      	bne.n	800acda <_printf_i+0x122>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	07db      	lsls	r3, r3, #31
 800acca:	d506      	bpl.n	800acda <_printf_i+0x122>
 800accc:	6863      	ldr	r3, [r4, #4]
 800acce:	6922      	ldr	r2, [r4, #16]
 800acd0:	4293      	cmp	r3, r2
 800acd2:	dc02      	bgt.n	800acda <_printf_i+0x122>
 800acd4:	2330      	movs	r3, #48	; 0x30
 800acd6:	3e01      	subs	r6, #1
 800acd8:	7033      	strb	r3, [r6, #0]
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	1b9b      	subs	r3, r3, r6
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	9b07      	ldr	r3, [sp, #28]
 800ace2:	0021      	movs	r1, r4
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	9805      	ldr	r0, [sp, #20]
 800ace8:	9b06      	ldr	r3, [sp, #24]
 800acea:	aa09      	add	r2, sp, #36	; 0x24
 800acec:	f7ff fef4 	bl	800aad8 <_printf_common>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d14c      	bne.n	800ad8e <_printf_i+0x1d6>
 800acf4:	2001      	movs	r0, #1
 800acf6:	4240      	negs	r0, r0
 800acf8:	b00b      	add	sp, #44	; 0x2c
 800acfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acfc:	3145      	adds	r1, #69	; 0x45
 800acfe:	700a      	strb	r2, [r1, #0]
 800ad00:	4a34      	ldr	r2, [pc, #208]	; (800add4 <_printf_i+0x21c>)
 800ad02:	9203      	str	r2, [sp, #12]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	6821      	ldr	r1, [r4, #0]
 800ad08:	ca20      	ldmia	r2!, {r5}
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	0608      	lsls	r0, r1, #24
 800ad0e:	d516      	bpl.n	800ad3e <_printf_i+0x186>
 800ad10:	07cb      	lsls	r3, r1, #31
 800ad12:	d502      	bpl.n	800ad1a <_printf_i+0x162>
 800ad14:	2320      	movs	r3, #32
 800ad16:	4319      	orrs	r1, r3
 800ad18:	6021      	str	r1, [r4, #0]
 800ad1a:	2710      	movs	r7, #16
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	d1b2      	bne.n	800ac86 <_printf_i+0xce>
 800ad20:	2320      	movs	r3, #32
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	439a      	bics	r2, r3
 800ad26:	6022      	str	r2, [r4, #0]
 800ad28:	e7ad      	b.n	800ac86 <_printf_i+0xce>
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	6809      	ldr	r1, [r1, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	6022      	str	r2, [r4, #0]
 800ad32:	0022      	movs	r2, r4
 800ad34:	2178      	movs	r1, #120	; 0x78
 800ad36:	3245      	adds	r2, #69	; 0x45
 800ad38:	7011      	strb	r1, [r2, #0]
 800ad3a:	4a27      	ldr	r2, [pc, #156]	; (800add8 <_printf_i+0x220>)
 800ad3c:	e7e1      	b.n	800ad02 <_printf_i+0x14a>
 800ad3e:	0648      	lsls	r0, r1, #25
 800ad40:	d5e6      	bpl.n	800ad10 <_printf_i+0x158>
 800ad42:	b2ad      	uxth	r5, r5
 800ad44:	e7e4      	b.n	800ad10 <_printf_i+0x158>
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	680d      	ldr	r5, [r1, #0]
 800ad4a:	1d10      	adds	r0, r2, #4
 800ad4c:	6949      	ldr	r1, [r1, #20]
 800ad4e:	6018      	str	r0, [r3, #0]
 800ad50:	6813      	ldr	r3, [r2, #0]
 800ad52:	062e      	lsls	r6, r5, #24
 800ad54:	d501      	bpl.n	800ad5a <_printf_i+0x1a2>
 800ad56:	6019      	str	r1, [r3, #0]
 800ad58:	e002      	b.n	800ad60 <_printf_i+0x1a8>
 800ad5a:	066d      	lsls	r5, r5, #25
 800ad5c:	d5fb      	bpl.n	800ad56 <_printf_i+0x19e>
 800ad5e:	8019      	strh	r1, [r3, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	9e04      	ldr	r6, [sp, #16]
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	e7bb      	b.n	800ace0 <_printf_i+0x128>
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	1d11      	adds	r1, r2, #4
 800ad6c:	6019      	str	r1, [r3, #0]
 800ad6e:	6816      	ldr	r6, [r2, #0]
 800ad70:	2100      	movs	r1, #0
 800ad72:	0030      	movs	r0, r6
 800ad74:	6862      	ldr	r2, [r4, #4]
 800ad76:	f000 f831 	bl	800addc <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d001      	beq.n	800ad82 <_printf_i+0x1ca>
 800ad7e:	1b80      	subs	r0, r0, r6
 800ad80:	6060      	str	r0, [r4, #4]
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9a04      	ldr	r2, [sp, #16]
 800ad8a:	7013      	strb	r3, [r2, #0]
 800ad8c:	e7a8      	b.n	800ace0 <_printf_i+0x128>
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	0032      	movs	r2, r6
 800ad92:	9906      	ldr	r1, [sp, #24]
 800ad94:	9805      	ldr	r0, [sp, #20]
 800ad96:	9d07      	ldr	r5, [sp, #28]
 800ad98:	47a8      	blx	r5
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d0aa      	beq.n	800acf4 <_printf_i+0x13c>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	079b      	lsls	r3, r3, #30
 800ada2:	d415      	bmi.n	800add0 <_printf_i+0x218>
 800ada4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada6:	68e0      	ldr	r0, [r4, #12]
 800ada8:	4298      	cmp	r0, r3
 800adaa:	daa5      	bge.n	800acf8 <_printf_i+0x140>
 800adac:	0018      	movs	r0, r3
 800adae:	e7a3      	b.n	800acf8 <_printf_i+0x140>
 800adb0:	0022      	movs	r2, r4
 800adb2:	2301      	movs	r3, #1
 800adb4:	9906      	ldr	r1, [sp, #24]
 800adb6:	9805      	ldr	r0, [sp, #20]
 800adb8:	9e07      	ldr	r6, [sp, #28]
 800adba:	3219      	adds	r2, #25
 800adbc:	47b0      	blx	r6
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d098      	beq.n	800acf4 <_printf_i+0x13c>
 800adc2:	3501      	adds	r5, #1
 800adc4:	68e3      	ldr	r3, [r4, #12]
 800adc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	42ab      	cmp	r3, r5
 800adcc:	dcf0      	bgt.n	800adb0 <_printf_i+0x1f8>
 800adce:	e7e9      	b.n	800ada4 <_printf_i+0x1ec>
 800add0:	2500      	movs	r5, #0
 800add2:	e7f7      	b.n	800adc4 <_printf_i+0x20c>
 800add4:	0800b231 	.word	0x0800b231
 800add8:	0800b242 	.word	0x0800b242

0800addc <memchr>:
 800addc:	b2c9      	uxtb	r1, r1
 800adde:	1882      	adds	r2, r0, r2
 800ade0:	4290      	cmp	r0, r2
 800ade2:	d101      	bne.n	800ade8 <memchr+0xc>
 800ade4:	2000      	movs	r0, #0
 800ade6:	4770      	bx	lr
 800ade8:	7803      	ldrb	r3, [r0, #0]
 800adea:	428b      	cmp	r3, r1
 800adec:	d0fb      	beq.n	800ade6 <memchr+0xa>
 800adee:	3001      	adds	r0, #1
 800adf0:	e7f6      	b.n	800ade0 <memchr+0x4>

0800adf2 <memmove>:
 800adf2:	b510      	push	{r4, lr}
 800adf4:	4288      	cmp	r0, r1
 800adf6:	d902      	bls.n	800adfe <memmove+0xc>
 800adf8:	188b      	adds	r3, r1, r2
 800adfa:	4298      	cmp	r0, r3
 800adfc:	d303      	bcc.n	800ae06 <memmove+0x14>
 800adfe:	2300      	movs	r3, #0
 800ae00:	e007      	b.n	800ae12 <memmove+0x20>
 800ae02:	5c8b      	ldrb	r3, [r1, r2]
 800ae04:	5483      	strb	r3, [r0, r2]
 800ae06:	3a01      	subs	r2, #1
 800ae08:	d2fb      	bcs.n	800ae02 <memmove+0x10>
 800ae0a:	bd10      	pop	{r4, pc}
 800ae0c:	5ccc      	ldrb	r4, [r1, r3]
 800ae0e:	54c4      	strb	r4, [r0, r3]
 800ae10:	3301      	adds	r3, #1
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d1fa      	bne.n	800ae0c <memmove+0x1a>
 800ae16:	e7f8      	b.n	800ae0a <memmove+0x18>

0800ae18 <_free_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	0005      	movs	r5, r0
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d010      	beq.n	800ae42 <_free_r+0x2a>
 800ae20:	1f0c      	subs	r4, r1, #4
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	da00      	bge.n	800ae2a <_free_r+0x12>
 800ae28:	18e4      	adds	r4, r4, r3
 800ae2a:	0028      	movs	r0, r5
 800ae2c:	f000 f918 	bl	800b060 <__malloc_lock>
 800ae30:	4a1d      	ldr	r2, [pc, #116]	; (800aea8 <_free_r+0x90>)
 800ae32:	6813      	ldr	r3, [r2, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d105      	bne.n	800ae44 <_free_r+0x2c>
 800ae38:	6063      	str	r3, [r4, #4]
 800ae3a:	6014      	str	r4, [r2, #0]
 800ae3c:	0028      	movs	r0, r5
 800ae3e:	f000 f917 	bl	800b070 <__malloc_unlock>
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d908      	bls.n	800ae5a <_free_r+0x42>
 800ae48:	6821      	ldr	r1, [r4, #0]
 800ae4a:	1860      	adds	r0, r4, r1
 800ae4c:	4283      	cmp	r3, r0
 800ae4e:	d1f3      	bne.n	800ae38 <_free_r+0x20>
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	1841      	adds	r1, r0, r1
 800ae56:	6021      	str	r1, [r4, #0]
 800ae58:	e7ee      	b.n	800ae38 <_free_r+0x20>
 800ae5a:	001a      	movs	r2, r3
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <_free_r+0x4e>
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	d9f9      	bls.n	800ae5a <_free_r+0x42>
 800ae66:	6811      	ldr	r1, [r2, #0]
 800ae68:	1850      	adds	r0, r2, r1
 800ae6a:	42a0      	cmp	r0, r4
 800ae6c:	d10b      	bne.n	800ae86 <_free_r+0x6e>
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1809      	adds	r1, r1, r0
 800ae72:	1850      	adds	r0, r2, r1
 800ae74:	6011      	str	r1, [r2, #0]
 800ae76:	4283      	cmp	r3, r0
 800ae78:	d1e0      	bne.n	800ae3c <_free_r+0x24>
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	1841      	adds	r1, r0, r1
 800ae80:	6011      	str	r1, [r2, #0]
 800ae82:	6053      	str	r3, [r2, #4]
 800ae84:	e7da      	b.n	800ae3c <_free_r+0x24>
 800ae86:	42a0      	cmp	r0, r4
 800ae88:	d902      	bls.n	800ae90 <_free_r+0x78>
 800ae8a:	230c      	movs	r3, #12
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	e7d5      	b.n	800ae3c <_free_r+0x24>
 800ae90:	6821      	ldr	r1, [r4, #0]
 800ae92:	1860      	adds	r0, r4, r1
 800ae94:	4283      	cmp	r3, r0
 800ae96:	d103      	bne.n	800aea0 <_free_r+0x88>
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	1841      	adds	r1, r0, r1
 800ae9e:	6021      	str	r1, [r4, #0]
 800aea0:	6063      	str	r3, [r4, #4]
 800aea2:	6054      	str	r4, [r2, #4]
 800aea4:	e7ca      	b.n	800ae3c <_free_r+0x24>
 800aea6:	46c0      	nop			; (mov r8, r8)
 800aea8:	2000191c 	.word	0x2000191c

0800aeac <sbrk_aligned>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	4e0f      	ldr	r6, [pc, #60]	; (800aeec <sbrk_aligned+0x40>)
 800aeb0:	000d      	movs	r5, r1
 800aeb2:	6831      	ldr	r1, [r6, #0]
 800aeb4:	0004      	movs	r4, r0
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	d102      	bne.n	800aec0 <sbrk_aligned+0x14>
 800aeba:	f000 f8bf 	bl	800b03c <_sbrk_r>
 800aebe:	6030      	str	r0, [r6, #0]
 800aec0:	0029      	movs	r1, r5
 800aec2:	0020      	movs	r0, r4
 800aec4:	f000 f8ba 	bl	800b03c <_sbrk_r>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d00a      	beq.n	800aee2 <sbrk_aligned+0x36>
 800aecc:	2303      	movs	r3, #3
 800aece:	1cc5      	adds	r5, r0, #3
 800aed0:	439d      	bics	r5, r3
 800aed2:	42a8      	cmp	r0, r5
 800aed4:	d007      	beq.n	800aee6 <sbrk_aligned+0x3a>
 800aed6:	1a29      	subs	r1, r5, r0
 800aed8:	0020      	movs	r0, r4
 800aeda:	f000 f8af 	bl	800b03c <_sbrk_r>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d101      	bne.n	800aee6 <sbrk_aligned+0x3a>
 800aee2:	2501      	movs	r5, #1
 800aee4:	426d      	negs	r5, r5
 800aee6:	0028      	movs	r0, r5
 800aee8:	bd70      	pop	{r4, r5, r6, pc}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	20001920 	.word	0x20001920

0800aef0 <_malloc_r>:
 800aef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef2:	2203      	movs	r2, #3
 800aef4:	1ccb      	adds	r3, r1, #3
 800aef6:	4393      	bics	r3, r2
 800aef8:	3308      	adds	r3, #8
 800aefa:	0006      	movs	r6, r0
 800aefc:	001f      	movs	r7, r3
 800aefe:	2b0c      	cmp	r3, #12
 800af00:	d232      	bcs.n	800af68 <_malloc_r+0x78>
 800af02:	270c      	movs	r7, #12
 800af04:	42b9      	cmp	r1, r7
 800af06:	d831      	bhi.n	800af6c <_malloc_r+0x7c>
 800af08:	0030      	movs	r0, r6
 800af0a:	f000 f8a9 	bl	800b060 <__malloc_lock>
 800af0e:	4d32      	ldr	r5, [pc, #200]	; (800afd8 <_malloc_r+0xe8>)
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	001c      	movs	r4, r3
 800af14:	2c00      	cmp	r4, #0
 800af16:	d12e      	bne.n	800af76 <_malloc_r+0x86>
 800af18:	0039      	movs	r1, r7
 800af1a:	0030      	movs	r0, r6
 800af1c:	f7ff ffc6 	bl	800aeac <sbrk_aligned>
 800af20:	0004      	movs	r4, r0
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d11e      	bne.n	800af64 <_malloc_r+0x74>
 800af26:	682c      	ldr	r4, [r5, #0]
 800af28:	0025      	movs	r5, r4
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	d14a      	bne.n	800afc4 <_malloc_r+0xd4>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0029      	movs	r1, r5
 800af32:	18e3      	adds	r3, r4, r3
 800af34:	0030      	movs	r0, r6
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f000 f880 	bl	800b03c <_sbrk_r>
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	4283      	cmp	r3, r0
 800af40:	d143      	bne.n	800afca <_malloc_r+0xda>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	3703      	adds	r7, #3
 800af46:	1aff      	subs	r7, r7, r3
 800af48:	2303      	movs	r3, #3
 800af4a:	439f      	bics	r7, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	2f0c      	cmp	r7, #12
 800af50:	d200      	bcs.n	800af54 <_malloc_r+0x64>
 800af52:	270c      	movs	r7, #12
 800af54:	0039      	movs	r1, r7
 800af56:	0030      	movs	r0, r6
 800af58:	f7ff ffa8 	bl	800aeac <sbrk_aligned>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d034      	beq.n	800afca <_malloc_r+0xda>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	19df      	adds	r7, r3, r7
 800af64:	6027      	str	r7, [r4, #0]
 800af66:	e013      	b.n	800af90 <_malloc_r+0xa0>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dacb      	bge.n	800af04 <_malloc_r+0x14>
 800af6c:	230c      	movs	r3, #12
 800af6e:	2500      	movs	r5, #0
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	0028      	movs	r0, r5
 800af74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	1bd1      	subs	r1, r2, r7
 800af7a:	d420      	bmi.n	800afbe <_malloc_r+0xce>
 800af7c:	290b      	cmp	r1, #11
 800af7e:	d917      	bls.n	800afb0 <_malloc_r+0xc0>
 800af80:	19e2      	adds	r2, r4, r7
 800af82:	6027      	str	r7, [r4, #0]
 800af84:	42a3      	cmp	r3, r4
 800af86:	d111      	bne.n	800afac <_malloc_r+0xbc>
 800af88:	602a      	str	r2, [r5, #0]
 800af8a:	6863      	ldr	r3, [r4, #4]
 800af8c:	6011      	str	r1, [r2, #0]
 800af8e:	6053      	str	r3, [r2, #4]
 800af90:	0030      	movs	r0, r6
 800af92:	0025      	movs	r5, r4
 800af94:	f000 f86c 	bl	800b070 <__malloc_unlock>
 800af98:	2207      	movs	r2, #7
 800af9a:	350b      	adds	r5, #11
 800af9c:	1d23      	adds	r3, r4, #4
 800af9e:	4395      	bics	r5, r2
 800afa0:	1aea      	subs	r2, r5, r3
 800afa2:	429d      	cmp	r5, r3
 800afa4:	d0e5      	beq.n	800af72 <_malloc_r+0x82>
 800afa6:	1b5b      	subs	r3, r3, r5
 800afa8:	50a3      	str	r3, [r4, r2]
 800afaa:	e7e2      	b.n	800af72 <_malloc_r+0x82>
 800afac:	605a      	str	r2, [r3, #4]
 800afae:	e7ec      	b.n	800af8a <_malloc_r+0x9a>
 800afb0:	6862      	ldr	r2, [r4, #4]
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	d101      	bne.n	800afba <_malloc_r+0xca>
 800afb6:	602a      	str	r2, [r5, #0]
 800afb8:	e7ea      	b.n	800af90 <_malloc_r+0xa0>
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	e7e8      	b.n	800af90 <_malloc_r+0xa0>
 800afbe:	0023      	movs	r3, r4
 800afc0:	6864      	ldr	r4, [r4, #4]
 800afc2:	e7a7      	b.n	800af14 <_malloc_r+0x24>
 800afc4:	002c      	movs	r4, r5
 800afc6:	686d      	ldr	r5, [r5, #4]
 800afc8:	e7af      	b.n	800af2a <_malloc_r+0x3a>
 800afca:	230c      	movs	r3, #12
 800afcc:	0030      	movs	r0, r6
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	f000 f84e 	bl	800b070 <__malloc_unlock>
 800afd4:	e7cd      	b.n	800af72 <_malloc_r+0x82>
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	2000191c 	.word	0x2000191c

0800afdc <_realloc_r>:
 800afdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afde:	0007      	movs	r7, r0
 800afe0:	000e      	movs	r6, r1
 800afe2:	0014      	movs	r4, r2
 800afe4:	2900      	cmp	r1, #0
 800afe6:	d105      	bne.n	800aff4 <_realloc_r+0x18>
 800afe8:	0011      	movs	r1, r2
 800afea:	f7ff ff81 	bl	800aef0 <_malloc_r>
 800afee:	0005      	movs	r5, r0
 800aff0:	0028      	movs	r0, r5
 800aff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	d103      	bne.n	800b000 <_realloc_r+0x24>
 800aff8:	f7ff ff0e 	bl	800ae18 <_free_r>
 800affc:	0025      	movs	r5, r4
 800affe:	e7f7      	b.n	800aff0 <_realloc_r+0x14>
 800b000:	f000 f83e 	bl	800b080 <_malloc_usable_size_r>
 800b004:	9001      	str	r0, [sp, #4]
 800b006:	4284      	cmp	r4, r0
 800b008:	d803      	bhi.n	800b012 <_realloc_r+0x36>
 800b00a:	0035      	movs	r5, r6
 800b00c:	0843      	lsrs	r3, r0, #1
 800b00e:	42a3      	cmp	r3, r4
 800b010:	d3ee      	bcc.n	800aff0 <_realloc_r+0x14>
 800b012:	0021      	movs	r1, r4
 800b014:	0038      	movs	r0, r7
 800b016:	f7ff ff6b 	bl	800aef0 <_malloc_r>
 800b01a:	1e05      	subs	r5, r0, #0
 800b01c:	d0e8      	beq.n	800aff0 <_realloc_r+0x14>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	0022      	movs	r2, r4
 800b022:	429c      	cmp	r4, r3
 800b024:	d900      	bls.n	800b028 <_realloc_r+0x4c>
 800b026:	001a      	movs	r2, r3
 800b028:	0031      	movs	r1, r6
 800b02a:	0028      	movs	r0, r5
 800b02c:	f7ff fbc0 	bl	800a7b0 <memcpy>
 800b030:	0031      	movs	r1, r6
 800b032:	0038      	movs	r0, r7
 800b034:	f7ff fef0 	bl	800ae18 <_free_r>
 800b038:	e7da      	b.n	800aff0 <_realloc_r+0x14>
	...

0800b03c <_sbrk_r>:
 800b03c:	2300      	movs	r3, #0
 800b03e:	b570      	push	{r4, r5, r6, lr}
 800b040:	4d06      	ldr	r5, [pc, #24]	; (800b05c <_sbrk_r+0x20>)
 800b042:	0004      	movs	r4, r0
 800b044:	0008      	movs	r0, r1
 800b046:	602b      	str	r3, [r5, #0]
 800b048:	f7f6 fc7c 	bl	8001944 <_sbrk>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	d103      	bne.n	800b058 <_sbrk_r+0x1c>
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d000      	beq.n	800b058 <_sbrk_r+0x1c>
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	20001924 	.word	0x20001924

0800b060 <__malloc_lock>:
 800b060:	b510      	push	{r4, lr}
 800b062:	4802      	ldr	r0, [pc, #8]	; (800b06c <__malloc_lock+0xc>)
 800b064:	f000 f814 	bl	800b090 <__retarget_lock_acquire_recursive>
 800b068:	bd10      	pop	{r4, pc}
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	20001928 	.word	0x20001928

0800b070 <__malloc_unlock>:
 800b070:	b510      	push	{r4, lr}
 800b072:	4802      	ldr	r0, [pc, #8]	; (800b07c <__malloc_unlock+0xc>)
 800b074:	f000 f80d 	bl	800b092 <__retarget_lock_release_recursive>
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	20001928 	.word	0x20001928

0800b080 <_malloc_usable_size_r>:
 800b080:	1f0b      	subs	r3, r1, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	1f18      	subs	r0, r3, #4
 800b086:	2b00      	cmp	r3, #0
 800b088:	da01      	bge.n	800b08e <_malloc_usable_size_r+0xe>
 800b08a:	580b      	ldr	r3, [r1, r0]
 800b08c:	18c0      	adds	r0, r0, r3
 800b08e:	4770      	bx	lr

0800b090 <__retarget_lock_acquire_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_release_recursive>:
 800b092:	4770      	bx	lr

0800b094 <_init>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09a:	bc08      	pop	{r3}
 800b09c:	469e      	mov	lr, r3
 800b09e:	4770      	bx	lr

0800b0a0 <_fini>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr
