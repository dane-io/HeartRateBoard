
HeartSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab44  0800ab44  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab44  0800ab44  0001ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab4c  0800ab4c  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab4c  0800ab4c  0001ab4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab50  0800ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800ab54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  200002e8  0800ae3c  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  0800ae3c  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013804  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c0  00000000  00000000  00033b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00036fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00038060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185cc  00000000  00000000  00038f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015031  00000000  00000000  0005151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e12  00000000  00000000  0006654d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee35f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  000ee3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e8 	.word	0x200002e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a998 	.word	0x0800a998

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002ec 	.word	0x200002ec
 8000104:	0800a998 	.word	0x0800a998

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <TurnOnLED>:
									   A7_Pin,
									   A8_Pin,
									   A9_Pin,
									   A10_Pin};

void TurnOnLED(uint8_t row, uint8_t col) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	1c0a      	adds	r2, r1, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_SET);
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <TurnOnLED+0x54>)
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	58d0      	ldr	r0, [r2, r3]
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <TurnOnLED+0x58>)
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	5ad3      	ldrh	r3, [r2, r3]
 80006b6:	2201      	movs	r2, #1
 80006b8:	0019      	movs	r1, r3
 80006ba:	f001 fe94 	bl	80023e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_RESET);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <TurnOnLED+0x5c>)
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	58d0      	ldr	r0, [r2, r3]
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <TurnOnLED+0x60>)
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	5ad3      	ldrh	r3, [r2, r3]
 80006d2:	2200      	movs	r2, #0
 80006d4:	0019      	movs	r1, r3
 80006d6:	f001 fe86 	bl	80023e6 <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Start(cathode_timers[row], cathode_channels[row]);
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	200000ec 	.word	0x200000ec
 80006ec:	20000090 	.word	0x20000090
 80006f0:	200000b0 	.word	0x200000b0

080006f4 <TurnOffLED>:

void TurnOffLED(uint8_t row, uint8_t col) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0002      	movs	r2, r0
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	1c0a      	adds	r2, r1, #0
 8000704:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_RESET);
 8000706:	1dbb      	adds	r3, r7, #6
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <TurnOffLED+0x54>)
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	58d0      	ldr	r0, [r2, r3]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <TurnOffLED+0x58>)
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	5ad3      	ldrh	r3, [r2, r3]
 800071a:	2200      	movs	r2, #0
 800071c:	0019      	movs	r1, r3
 800071e:	f001 fe62 	bl	80023e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_SET);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <TurnOffLED+0x5c>)
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	58d0      	ldr	r0, [r2, r3]
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TurnOffLED+0x60>)
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	5ad3      	ldrh	r3, [r2, r3]
 8000736:	2201      	movs	r2, #1
 8000738:	0019      	movs	r1, r3
 800073a:	f001 fe54 	bl	80023e6 <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Stop(cathode_timers[row], cathode_channels[row]);
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200000c0 	.word	0x200000c0
 800074c:	200000ec 	.word	0x200000ec
 8000750:	20000090 	.word	0x20000090
 8000754:	200000b0 	.word	0x200000b0

08000758 <SetLEDQueue>:
//led_queue[ROWS*COLUMNS][0] = 0xFF;
volatile uint8_t queue_index = 0;
volatile uint8_t queue_len;

// Make led_queue equal to led_list
void SetLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue, led_list, len*2);
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	001a      	movs	r2, r3
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <SetLEDQueue+0x38>)
 8000772:	0018      	movs	r0, r3
 8000774:	f009 fc9e 	bl	800a0b4 <memcpy>
	//queue_len = sizeof(led_list)/2;
	queue_len = len;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SetLEDQueue+0x3c>)
 800077a:	1cfa      	adds	r2, r7, #3
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	701a      	strb	r2, [r3, #0]
	//led_queue[len][0] = 0xFF;
	//led_queue[len][1] = 0xFF;
	queue_index = 0;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SetLEDQueue+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000324 	.word	0x20000324
 8000794:	200003d7 	.word	0x200003d7
 8000798:	200003d6 	.word	0x200003d6

0800079c <AddToLEDQueue>:

// Concatenate led_list to led_queue
void AddToLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	000a      	movs	r2, r1
 80007a6:	1cfb      	adds	r3, r7, #3
 80007a8:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue+queue_len, led_list, len*2);
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <AddToLEDQueue+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	005a      	lsls	r2, r3, #1
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <AddToLEDQueue+0x48>)
 80007b4:	18d0      	adds	r0, r2, r3
 80007b6:	1cfb      	adds	r3, r7, #3
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	001a      	movs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0019      	movs	r1, r3
 80007c2:	f009 fc77 	bl	800a0b4 <memcpy>
	queue_len += len;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <AddToLEDQueue+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	1cfb      	adds	r3, r7, #3
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <AddToLEDQueue+0x44>)
 80007d6:	701a      	strb	r2, [r3, #0]
	//queue_index = 0;
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200003d7 	.word	0x200003d7
 80007e4:	20000324 	.word	0x20000324

080007e8 <HandleLEDQueue>:

void HandleLEDQueue() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	if (queue_len > 0) {	// Don't do anything unless there's something in the queue
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <HandleLEDQueue+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d05d      	beq.n	80008b2 <HandleLEDQueue+0xca>
		if (queue_index <= 0) {
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HandleLEDQueue+0xd4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11d      	bne.n	800083c <HandleLEDQueue+0x54>
			TurnOffLED(led_queue[queue_index-1+queue_len][0], led_queue[queue_index-1+queue_len][1]);
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <HandleLEDQueue+0xd4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <HandleLEDQueue+0xd0>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	189a      	adds	r2, r3, r2
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HandleLEDQueue+0xd4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3b01      	subs	r3, #1
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <HandleLEDQueue+0xd0>)
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	189b      	adds	r3, r3, r2
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HandleLEDQueue+0xd8>)
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	0019      	movs	r1, r3
 8000836:	f7ff ff5d 	bl	80006f4 <TurnOffLED>
 800083a:	e014      	b.n	8000866 <HandleLEDQueue+0x7e>
		}
		else {
			TurnOffLED(led_queue[queue_index-1][0], led_queue[queue_index-1][1]);
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HandleLEDQueue+0xd4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b2d8      	uxtb	r0, r3
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HandleLEDQueue+0xd4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3b01      	subs	r3, #1
 8000854:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	3301      	adds	r3, #1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	0019      	movs	r1, r3
 8000862:	f7ff ff47 	bl	80006f4 <TurnOffLED>
		}

		TurnOnLED(led_queue[queue_index][0], led_queue[queue_index][1]);
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HandleLEDQueue+0xd4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	001a      	movs	r2, r3
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HandleLEDQueue+0xd4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HandleLEDQueue+0xd8>)
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	18d3      	adds	r3, r2, r3
 8000882:	3301      	adds	r3, #1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	0019      	movs	r1, r3
 800088a:	f7ff ff01 	bl	8000690 <TurnOnLED>

		queue_index++;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HandleLEDQueue+0xd4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HandleLEDQueue+0xd4>)
 800089a:	701a      	strb	r2, [r3, #0]
		if (queue_index >= queue_len) {
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HandleLEDQueue+0xd4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HandleLEDQueue+0xd0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d302      	bcc.n	80008b2 <HandleLEDQueue+0xca>
			queue_index = 0;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HandleLEDQueue+0xd4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200003d7 	.word	0x200003d7
 80008bc:	200003d6 	.word	0x200003d6
 80008c0:	20000324 	.word	0x20000324

080008c4 <PulseHandler>:


volatile uint8_t pulse_step = 0;
volatile int8_t pulse_dir = 1;
void PulseHandler() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	TurnAllOff();
 80008c8:	f000 f8a8 	bl	8000a1c <TurnAllOff>
	SetLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <PulseHandler+0x78>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <PulseHandler+0x7c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	58d2      	ldr	r2, [r2, r3]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <PulseHandler+0x78>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	0019      	movs	r1, r3
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <PulseHandler+0x80>)
 80008e4:	5c5b      	ldrb	r3, [r3, r1]
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f7ff ff35 	bl	8000758 <SetLEDQueue>
	pulse_step += pulse_dir;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <PulseHandler+0x84>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <PulseHandler+0x78>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <PulseHandler+0x78>)
 8000902:	701a      	strb	r2, [r3, #0]
	if (pulse_step >= PULSE_STEPS) {
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <PulseHandler+0x78>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b04      	cmp	r3, #4
 800090c:	d90a      	bls.n	8000924 <PulseHandler+0x60>
		pulse_step--;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <PulseHandler+0x78>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <PulseHandler+0x78>)
 800091a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <PulseHandler+0x84>)
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	701a      	strb	r2, [r3, #0]
	}
	else if (pulse_step == 0) {
		pulse_dir = 1;
	}
}
 8000922:	e007      	b.n	8000934 <PulseHandler+0x70>
	else if (pulse_step == 0) {
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <PulseHandler+0x78>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <PulseHandler+0x70>
		pulse_dir = 1;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <PulseHandler+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200003d8 	.word	0x200003d8
 8000940:	20000074 	.word	0x20000074
 8000944:	20000088 	.word	0x20000088
 8000948:	20000102 	.word	0x20000102

0800094c <PulseHandlerKeepOn>:

void PulseHandlerKeepOn() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000950:	f000 f864 	bl	8000a1c <TurnAllOff>
	if (pulse_step <= 0) {
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <PulseHandlerKeepOn+0x30>
		SetLEDQueue(pulse_step_list[0], pulse_step_sizes[0]);
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f7ff fef5 	bl	8000758 <SetLEDQueue>
		pulse_dir = 1;
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
		pulse_step = 1;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
	else {
		queue_len -= pulse_step_sizes[pulse_step];
		queue_index = 0;
		pulse_step--;
	}
}
 800097a:	e040      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_step >= PULSE_STEPS) {
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b04      	cmp	r3, #4
 8000984:	d906      	bls.n	8000994 <PulseHandlerKeepOn+0x48>
		pulse_step = PULSE_STEPS - 1;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000988:	2204      	movs	r2, #4
 800098a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	e034      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_dir > 0) {
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	dd18      	ble.n	80009d0 <PulseHandlerKeepOn+0x84>
		AddToLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	58d2      	ldr	r2, [r2, r3]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	0019      	movs	r1, r3
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009b6:	5c5b      	ldrb	r3, [r3, r1]
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f7ff feee 	bl	800079c <AddToLEDQueue>
		pulse_step++;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	e016      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
		queue_len -= pulse_step_sizes[pulse_step];
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	001a      	movs	r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009da:	5c9b      	ldrb	r3, [r3, r2]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009e8:	701a      	strb	r2, [r3, #0]
		queue_index = 0;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <PulseHandlerKeepOn+0xcc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
		pulse_step--;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	3b01      	subs	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200003d8 	.word	0x200003d8
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	20000088 	.word	0x20000088
 8000a10:	20000102 	.word	0x20000102
 8000a14:	200003d7 	.word	0x200003d7
 8000a18:	200003d6 	.word	0x200003d6

08000a1c <TurnAllOff>:

void TurnAllOff() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < queue_len; i++) {
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e015      	b.n	8000a56 <TurnAllOff+0x3a>
		TurnOffLED(led_queue[i][0], led_queue[i][1]);
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <TurnAllOff+0x54>)
 8000a30:	0052      	lsls	r2, r2, #1
 8000a32:	5cd3      	ldrb	r3, [r2, r3]
 8000a34:	b2d8      	uxtb	r0, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <TurnAllOff+0x54>)
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	3301      	adds	r3, #1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	0019      	movs	r1, r3
 8000a48:	f7ff fe54 	bl	80006f4 <TurnOffLED>
	for (uint8_t i = 0; i < queue_len; i++) {
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	3201      	adds	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <TurnAllOff+0x58>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	1dfa      	adds	r2, r7, #7
 8000a5e:	7812      	ldrb	r2, [r2, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3e2      	bcc.n	8000a2a <TurnAllOff+0xe>
	}
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000324 	.word	0x20000324
 8000a74:	200003d7 	.word	0x200003d7

08000a78 <ResetIndexes>:

void ResetIndexes() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000a7c:	f7ff ffce 	bl	8000a1c <TurnAllOff>
	queue_len = 0;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <ResetIndexes+0x28>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	queue_index = 0;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <ResetIndexes+0x2c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
	pulse_dir = 1;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <ResetIndexes+0x30>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
	pulse_step = 0;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <ResetIndexes+0x34>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	200003d7 	.word	0x200003d7
 8000aa4:	200003d6 	.word	0x200003d6
 8000aa8:	20000102 	.word	0x20000102
 8000aac:	200003d8 	.word	0x200003d8

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	extern TIM_HandleTypeDef *cathode_timers[ROWS];
	cathode_timers[0] = &htim2;
 8000ab6:	4b96      	ldr	r3, [pc, #600]	; (8000d10 <main+0x260>)
 8000ab8:	4a96      	ldr	r2, [pc, #600]	; (8000d14 <main+0x264>)
 8000aba:	601a      	str	r2, [r3, #0]
	cathode_timers[1] = &htim2;
 8000abc:	4b94      	ldr	r3, [pc, #592]	; (8000d10 <main+0x260>)
 8000abe:	4a95      	ldr	r2, [pc, #596]	; (8000d14 <main+0x264>)
 8000ac0:	605a      	str	r2, [r3, #4]
	cathode_timers[2] = &htim2;
 8000ac2:	4b93      	ldr	r3, [pc, #588]	; (8000d10 <main+0x260>)
 8000ac4:	4a93      	ldr	r2, [pc, #588]	; (8000d14 <main+0x264>)
 8000ac6:	609a      	str	r2, [r3, #8]
	cathode_timers[3] = &htim2;
 8000ac8:	4b91      	ldr	r3, [pc, #580]	; (8000d10 <main+0x260>)
 8000aca:	4a92      	ldr	r2, [pc, #584]	; (8000d14 <main+0x264>)
 8000acc:	60da      	str	r2, [r3, #12]
	cathode_timers[4] = &htim3;
 8000ace:	4b90      	ldr	r3, [pc, #576]	; (8000d10 <main+0x260>)
 8000ad0:	4a91      	ldr	r2, [pc, #580]	; (8000d18 <main+0x268>)
 8000ad2:	611a      	str	r2, [r3, #16]
	cathode_timers[5] = &htim3;
 8000ad4:	4b8e      	ldr	r3, [pc, #568]	; (8000d10 <main+0x260>)
 8000ad6:	4a90      	ldr	r2, [pc, #576]	; (8000d18 <main+0x268>)
 8000ad8:	615a      	str	r2, [r3, #20]
	cathode_timers[6] = &htim3;
 8000ada:	4b8d      	ldr	r3, [pc, #564]	; (8000d10 <main+0x260>)
 8000adc:	4a8e      	ldr	r2, [pc, #568]	; (8000d18 <main+0x268>)
 8000ade:	619a      	str	r2, [r3, #24]
	cathode_timers[7] = &htim3;
 8000ae0:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <main+0x260>)
 8000ae2:	4a8d      	ldr	r2, [pc, #564]	; (8000d18 <main+0x268>)
 8000ae4:	61da      	str	r2, [r3, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fe17 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f941 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 fbbb 	bl	8001268 <MX_GPIO_Init>
  MX_ADC_Init();
 8000af2:	f000 f9b1 	bl	8000e58 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8000af6:	f008 fd7b 	bl	80095f0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000afa:	f000 fa1b 	bl	8000f34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000afe:	f000 fa6b 	bl	8000fd8 <MX_TIM3_Init>
  MX_TIM21_Init();
 8000b02:	f000 fb33 	bl	800116c <MX_TIM21_Init>
  MX_TIM6_Init();
 8000b06:	f000 fabb 	bl	8001080 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000b0a:	f000 faf5 	bl	80010f8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// CHECK FOR BUTT1 PRESS, BUTT1 PRESS AT BOOT MEANS ENTER DFU MODE
	if (HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin) == GPIO_PIN_RESET) {
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	4a82      	ldr	r2, [pc, #520]	; (8000d1c <main+0x26c>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f001 fc48 	bl	80023ac <HAL_GPIO_ReadPin>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d106      	bne.n	8000b2e <main+0x7e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	487d      	ldr	r0, [pc, #500]	; (8000d1c <main+0x26c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	0019      	movs	r1, r3
 8000b2a:	f001 fc5c 	bl	80023e6 <HAL_GPIO_WritePin>
	// Set LED timer periods/duty cycle
	//TIM3->CCR1 = 99;
	//TIM2->CCR1 = 99;

	// Timer to control LED patters
	HAL_TIM_Base_Start_IT(&htim21);
 8000b2e:	4b7c      	ldr	r3, [pc, #496]	; (8000d20 <main+0x270>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f004 fa23 	bl	8004f7c <HAL_TIM_Base_Start_IT>
	//HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);

	// Timer to control button debouncing
	HAL_TIM_Base_Start_IT(&htim6);
 8000b36:	4b7b      	ldr	r3, [pc, #492]	; (8000d24 <main+0x274>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f004 fa1f 	bl	8004f7c <HAL_TIM_Base_Start_IT>

	// Timer to control ADC sampling
	HAL_TIM_Base_Start_IT(&htim7);
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <main+0x278>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f004 fa1b 	bl	8004f7c <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HandleLEDQueue();
 8000b46:	f7ff fe4f 	bl	80007e8 <HandleLEDQueue>
		if (pattern_flag) {
 8000b4a:	4b78      	ldr	r3, [pc, #480]	; (8000d2c <main+0x27c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00f      	beq.n	8000b72 <main+0xc2>
			switch (pattern_select) {
 8000b52:	4b77      	ldr	r3, [pc, #476]	; (8000d30 <main+0x280>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <main+0xb0>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d003      	beq.n	8000b66 <main+0xb6>
 8000b5e:	e005      	b.n	8000b6c <main+0xbc>
			case 0:
				PulseHandler();
 8000b60:	f7ff feb0 	bl	80008c4 <PulseHandler>
				break;
 8000b64:	e002      	b.n	8000b6c <main+0xbc>
			case 1:
				PulseHandlerKeepOn();
 8000b66:	f7ff fef1 	bl	800094c <PulseHandlerKeepOn>
				break;
 8000b6a:	46c0      	nop			; (mov r8, r8)
			}
			pattern_flag = 0;
 8000b6c:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <main+0x27c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag) {
 8000b72:	4b70      	ldr	r3, [pc, #448]	; (8000d34 <main+0x284>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d011      	beq.n	8000b9e <main+0xee>
			pattern_select++;
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <main+0x280>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <main+0x280>)
 8000b84:	701a      	strb	r2, [r3, #0]
			ResetIndexes();
 8000b86:	f7ff ff77 	bl	8000a78 <ResetIndexes>
			if (pattern_select > 1) {
 8000b8a:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <main+0x280>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d902      	bls.n	8000b98 <main+0xe8>
				pattern_select = 0;
 8000b92:	4b67      	ldr	r3, [pc, #412]	; (8000d30 <main+0x280>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
			}
			button_flag = 0;
 8000b98:	4b66      	ldr	r3, [pc, #408]	; (8000d34 <main+0x284>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
		}

		if (sample_flag) {
 8000b9e:	4b66      	ldr	r3, [pc, #408]	; (8000d38 <main+0x288>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0cf      	beq.n	8000b46 <main+0x96>

			HAL_ADC_Start(&hadc);
 8000ba6:	4b65      	ldr	r3, [pc, #404]	; (8000d3c <main+0x28c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ff99 	bl	8001ae0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 8000bae:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <main+0x28c>)
 8000bb0:	2164      	movs	r1, #100	; 0x64
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 ffe8 	bl	8001b88 <HAL_ADC_PollForConversion>
			adc_val = HAL_ADC_GetValue(&hadc);
 8000bb8:	4b60      	ldr	r3, [pc, #384]	; (8000d3c <main+0x28c>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 f880 	bl	8001cc0 <HAL_ADC_GetValue>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <main+0x290>)
 8000bc4:	601a      	str	r2, [r3, #0]
			//char buf[6];
			//sprintf(buf, "%d\r\n", adc_val);
			//CDC_Transmit_FS(buf, 6);

			heartbeat_count++;	// Increment time between beats
 8000bc6:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <main+0x294>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <main+0x294>)
 8000bd0:	801a      	strh	r2, [r3, #0]

			if (low_flag && adc_val >= 2200) {
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <main+0x298>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <main+0x12c>
 8000bda:	e07a      	b.n	8000cd2 <main+0x222>
 8000bdc:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <main+0x290>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a5a      	ldr	r2, [pc, #360]	; (8000d4c <main+0x29c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d800      	bhi.n	8000be8 <main+0x138>
 8000be6:	e074      	b.n	8000cd2 <main+0x222>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	484b      	ldr	r0, [pc, #300]	; (8000d1c <main+0x26c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	f001 fbf8 	bl	80023e6 <HAL_GPIO_WritePin>
				low_flag = 0;
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <main+0x298>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
				high_flag = 1;
 8000bfc:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <main+0x2a0>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]

				// Sampling time:
				uint16_t sample_freq = 16000000 / (TIM7->PSC+1) / (TIM7->ARR+1);	// In Hz
 8000c02:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <main+0x2a4>)
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	3301      	adds	r3, #1
 8000c08:	0019      	movs	r1, r3
 8000c0a:	4853      	ldr	r0, [pc, #332]	; (8000d58 <main+0x2a8>)
 8000c0c:	f7ff fa86 	bl	800011c <__udivsi3>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <main+0x2a4>)
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	3301      	adds	r3, #1
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f7ff fa7d 	bl	800011c <__udivsi3>
 8000c22:	0003      	movs	r3, r0
 8000c24:	001a      	movs	r2, r3
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	801a      	strh	r2, [r3, #0]

				// In Hz = 1 / ( Counts * (1/Fs) ) = Fs / Counts
				heartbeat_freq = sample_freq * 60 / heartbeat_count; // In BPM
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	881a      	ldrh	r2, [r3, #0]
 8000c2e:	0013      	movs	r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	001a      	movs	r2, r3
 8000c38:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <main+0x294>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f7ff faf6 	bl	8000230 <__divsi3>
 8000c44:	0003      	movs	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <main+0x2ac>)
 8000c4a:	801a      	strh	r2, [r3, #0]

				// Limit between 30 BPM and 200 BPM
				if (heartbeat_freq < 30) {
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <main+0x2ac>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	2b1d      	cmp	r3, #29
 8000c52:	d803      	bhi.n	8000c5c <main+0x1ac>
					heartbeat_freq = 30;
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <main+0x2ac>)
 8000c56:	221e      	movs	r2, #30
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	e006      	b.n	8000c6a <main+0x1ba>
				}
				else if (heartbeat_freq > 199){
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <main+0x2ac>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2bc7      	cmp	r3, #199	; 0xc7
 8000c62:	d902      	bls.n	8000c6a <main+0x1ba>
					heartbeat_freq = 199;
 8000c64:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <main+0x2ac>)
 8000c66:	22c7      	movs	r2, #199	; 0xc7
 8000c68:	801a      	strh	r2, [r3, #0]
				}

				char buf[5];
				sprintf(buf, "%d\r\n", heartbeat_freq);
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <main+0x2ac>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	493b      	ldr	r1, [pc, #236]	; (8000d60 <main+0x2b0>)
 8000c72:	003b      	movs	r3, r7
 8000c74:	0018      	movs	r0, r3
 8000c76:	f009 fa2f 	bl	800a0d8 <siprintf>
				CDC_Transmit_FS(buf, 5);
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f008 fd3a 	bl	80096f8 <CDC_Transmit_FS>
					ARR = 16,000,000 / 1600 / (BPM/60)
					ARR = 16,000,000 / 1600 / BPM * 60 / Stages
				 */

				// Range (2221 (30 BPM) to 332 (200 BPM)
				TIM21->ARR = 16000000 / (TIM21->PSC+1) / heartbeat_freq * 60 / pattern_steps[pattern_select] - 1;
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <main+0x2b4>)
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	3301      	adds	r3, #1
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	4832      	ldr	r0, [pc, #200]	; (8000d58 <main+0x2a8>)
 8000c8e:	f7ff fa45 	bl	800011c <__udivsi3>
 8000c92:	0003      	movs	r3, r0
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <main+0x2ac>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f7ff fa3d 	bl	800011c <__udivsi3>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <main+0x280>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <main+0x2b8>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	0019      	movs	r1, r3
 8000cbc:	f7ff fa2e 	bl	800011c <__udivsi3>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <main+0x2b4>)
 8000cc6:	3a01      	subs	r2, #1
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c

				heartbeat_count = 0;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <main+0x294>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
			if (low_flag && adc_val >= 2200) {
 8000cd0:	e016      	b.n	8000d00 <main+0x250>
			}
			else if (high_flag && adc_val <= 2000) {
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <main+0x2a0>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d012      	beq.n	8000d00 <main+0x250>
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <main+0x290>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	23fa      	movs	r3, #250	; 0xfa
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d80c      	bhi.n	8000d00 <main+0x250>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	01db      	lsls	r3, r3, #7
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <main+0x26c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	0019      	movs	r1, r3
 8000cf0:	f001 fb79 	bl	80023e6 <HAL_GPIO_WritePin>
				low_flag = 1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <main+0x298>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
				high_flag = 0;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <main+0x2a0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]



			}

			prev_adc_val = adc_val;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <main+0x290>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <main+0x2bc>)
 8000d06:	601a      	str	r2, [r3, #0]
			sample_flag = 0;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <main+0x288>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
		HandleLEDQueue();
 8000d0e:	e71a      	b.n	8000b46 <main+0x96>
 8000d10:	20000304 	.word	0x20000304
 8000d14:	20000438 	.word	0x20000438
 8000d18:	20000478 	.word	0x20000478
 8000d1c:	50000400 	.word	0x50000400
 8000d20:	20000538 	.word	0x20000538
 8000d24:	200004b8 	.word	0x200004b8
 8000d28:	200004f8 	.word	0x200004f8
 8000d2c:	20000584 	.word	0x20000584
 8000d30:	20000587 	.word	0x20000587
 8000d34:	20000585 	.word	0x20000585
 8000d38:	20000580 	.word	0x20000580
 8000d3c:	200003dc 	.word	0x200003dc
 8000d40:	20000578 	.word	0x20000578
 8000d44:	20000582 	.word	0x20000582
 8000d48:	20000103 	.word	0x20000103
 8000d4c:	00000897 	.word	0x00000897
 8000d50:	20000581 	.word	0x20000581
 8000d54:	40001400 	.word	0x40001400
 8000d58:	00f42400 	.word	0x00f42400
 8000d5c:	20000104 	.word	0x20000104
 8000d60:	0800a9b0 	.word	0x0800a9b0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	0800aa00 	.word	0x0800aa00
 8000d6c:	2000057c 	.word	0x2000057c

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b09d      	sub	sp, #116	; 0x74
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	2438      	movs	r4, #56	; 0x38
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2338      	movs	r3, #56	; 0x38
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f009 f9a0 	bl	800a0c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d86:	2324      	movs	r3, #36	; 0x24
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f009 f998 	bl	800a0c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d96:	003b      	movs	r3, r7
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2324      	movs	r3, #36	; 0x24
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f009 f991 	bl	800a0c6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <SystemClock_Config+0xe0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <SystemClock_Config+0xe4>)
 8000daa:	401a      	ands	r2, r3
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SystemClock_Config+0xe0>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0109      	lsls	r1, r1, #4
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2221      	movs	r2, #33	; 0x21
 8000dba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0252      	lsls	r2, r2, #9
 8000dc2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2201      	movs	r2, #1
 8000dca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2202      	movs	r2, #2
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0252      	lsls	r2, r2, #9
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	0412      	lsls	r2, r2, #16
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	0018      	movs	r0, r3
 8000dec:	f003 f96a 	bl	80040c4 <HAL_RCC_OscConfig>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000df4:	f000 fb26 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	2124      	movs	r1, #36	; 0x24
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2203      	movs	r2, #3
 8000e04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f003 fd25 	bl	800486c <HAL_RCC_ClockConfig>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e26:	f000 fb0d 	bl	8001444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	04d2      	lsls	r2, r2, #19
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	003b      	movs	r3, r7
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f003 ff02 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000e44:	f000 fafe 	bl	8001444 <Error_Handler>
  }
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b01d      	add	sp, #116	; 0x74
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	40007000 	.word	0x40007000
 8000e54:	ffffe7ff 	.word	0xffffe7ff

08000e58 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	003b      	movs	r3, r7
 8000e60:	0018      	movs	r0, r3
 8000e62:	2308      	movs	r3, #8
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f009 f92d 	bl	800a0c6 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <MX_ADC_Init+0xd4>)
 8000e70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e8c:	22c0      	movs	r2, #192	; 0xc0
 8000e8e:	0612      	lsls	r2, r2, #24
 8000e90:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000eac:	2220      	movs	r2, #32
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000eb4:	2221      	movs	r2, #33	; 0x21
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ec2:	22c2      	movs	r2, #194	; 0xc2
 8000ec4:	32ff      	adds	r2, #255	; 0xff
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000eca:	222c      	movs	r2, #44	; 0x2c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fc81 	bl	80017f8 <HAL_ADC_Init>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000efa:	f000 faa3 	bl	8001444 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000efe:	003b      	movs	r3, r7
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <MX_ADC_Init+0xd8>)
 8000f02:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	0152      	lsls	r2, r2, #5
 8000f0a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f0c:	003a      	movs	r2, r7
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_ADC_Init+0xd0>)
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fee0 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 8000f1c:	f000 fa92 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003dc 	.word	0x200003dc
 8000f2c:	40012400 	.word	0x40012400
 8000f30:	10000010 	.word	0x10000010

08000f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2310      	movs	r3, #16
 8000f42:	001a      	movs	r2, r3
 8000f44:	2100      	movs	r1, #0
 8000f46:	f009 f8be 	bl	800a0c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2308      	movs	r3, #8
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f009 f8b7 	bl	800a0c6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	05d2      	lsls	r2, r2, #23
 8000f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f62:	220f      	movs	r2, #15
 8000f64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f6e:	2263      	movs	r2, #99	; 0x63
 8000f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f003 ffbb 	bl	8004efc <HAL_TIM_Base_Init>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f8a:	f000 fa5b 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	2108      	movs	r1, #8
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	0152      	lsls	r2, r2, #5
 8000f96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f98:	187a      	adds	r2, r7, r1
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f004 f9c6 	bl	8005330 <HAL_TIM_ConfigClockSource>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fa8:	f000 fa4c 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb8:	003a      	movs	r2, r7
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_TIM2_Init+0xa0>)
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f004 fca6 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000fc8:	f000 fa3c 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b006      	add	sp, #24
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000438 	.word	0x20000438

08000fd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	2308      	movs	r3, #8
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f009 f86c 	bl	800a0c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	003b      	movs	r3, r7
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f009 f865 	bl	800a0c6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_TIM3_Init+0xa0>)
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <MX_TIM3_Init+0xa4>)
 8001000:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001004:	220f      	movs	r2, #15
 8001006:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM3_Init+0xa0>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001010:	2263      	movs	r2, #99	; 0x63
 8001012:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_TIM3_Init+0xa0>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001022:	0018      	movs	r0, r3
 8001024:	f003 ff6a 	bl	8004efc <HAL_TIM_Base_Init>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800102c:	f000 fa0a 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	2108      	movs	r1, #8
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	0152      	lsls	r2, r2, #5
 8001038:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103a:	187a      	adds	r2, r7, r1
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_TIM3_Init+0xa0>)
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f004 f975 	bl	8005330 <HAL_TIM_ConfigClockSource>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800104a:	f000 f9fb 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	003b      	movs	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105a:	003a      	movs	r2, r7
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_TIM3_Init+0xa0>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f004 fc55 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800106a:	f000 f9eb 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b006      	add	sp, #24
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000478 	.word	0x20000478
 800107c:	40000400 	.word	0x40000400

08001080 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	003b      	movs	r3, r7
 8001088:	0018      	movs	r0, r3
 800108a:	2308      	movs	r3, #8
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f009 f819 	bl	800a0c6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_TIM6_Init+0x6c>)
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <MX_TIM6_Init+0x70>)
 8001098:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_TIM6_Init+0x6c>)
 800109c:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <MX_TIM6_Init+0x74>)
 800109e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_TIM6_Init+0x6c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_TIM6_Init+0x6c>)
 80010a8:	2263      	movs	r2, #99	; 0x63
 80010aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_TIM6_Init+0x6c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_TIM6_Init+0x6c>)
 80010b4:	0018      	movs	r0, r3
 80010b6:	f003 ff21 	bl	8004efc <HAL_TIM_Base_Init>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80010be:	f000 f9c1 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	003b      	movs	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	003b      	movs	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010ce:	003a      	movs	r2, r7
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_TIM6_Init+0x6c>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f004 fc1b 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80010de:	f000 f9b1 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	200004b8 	.word	0x200004b8
 80010f0:	40001000 	.word	0x40001000
 80010f4:	0000063f 	.word	0x0000063f

080010f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	003b      	movs	r3, r7
 8001100:	0018      	movs	r0, r3
 8001102:	2308      	movs	r3, #8
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f008 ffdd 	bl	800a0c6 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM7_Init+0x6c>)
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <MX_TIM7_Init+0x70>)
 8001110:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_TIM7_Init+0x6c>)
 8001114:	2263      	movs	r2, #99	; 0x63
 8001116:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_TIM7_Init+0x6c>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 320-1;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_TIM7_Init+0x6c>)
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	32ff      	adds	r2, #255	; 0xff
 8001124:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_TIM7_Init+0x6c>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_TIM7_Init+0x6c>)
 800112e:	0018      	movs	r0, r3
 8001130:	f003 fee4 	bl	8004efc <HAL_TIM_Base_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8001138:	f000 f984 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	003b      	movs	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	003b      	movs	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001148:	003a      	movs	r2, r7
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_TIM7_Init+0x6c>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f004 fbde 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8001158:	f000 f974 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200004f8 	.word	0x200004f8
 8001168:	40001400 	.word	0x40001400

0800116c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	2318      	movs	r3, #24
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	0018      	movs	r0, r3
 8001178:	2310      	movs	r3, #16
 800117a:	001a      	movs	r2, r3
 800117c:	2100      	movs	r1, #0
 800117e:	f008 ffa2 	bl	800a0c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	2310      	movs	r3, #16
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	0018      	movs	r0, r3
 8001188:	2308      	movs	r3, #8
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f008 ff9a 	bl	800a0c6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	003b      	movs	r3, r7
 8001194:	0018      	movs	r0, r3
 8001196:	2310      	movs	r3, #16
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f008 ff93 	bl	800a0c6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_TIM21_Init+0xec>)
 80011a2:	4a2e      	ldr	r2, [pc, #184]	; (800125c <MX_TIM21_Init+0xf0>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1600-1;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_TIM21_Init+0xec>)
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <MX_TIM21_Init+0xf4>)
 80011aa:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_TIM21_Init+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MX_TIM21_Init+0xec>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <MX_TIM21_Init+0xf8>)
 80011b6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_TIM21_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_TIM21_Init+0xec>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_TIM21_Init+0xec>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f003 fe98 	bl	8004efc <HAL_TIM_Base_Init>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80011d0:	f000 f938 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	2118      	movs	r1, #24
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0152      	lsls	r2, r2, #5
 80011dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80011de:	187a      	adds	r2, r7, r1
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM21_Init+0xec>)
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f004 f8a3 	bl	8005330 <HAL_TIM_ConfigClockSource>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80011ee:	f000 f929 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM21_Init+0xec>)
 80011f4:	0018      	movs	r0, r3
 80011f6:	f003 ff13 	bl	8005020 <HAL_TIM_OC_Init>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80011fe:	f000 f921 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2110      	movs	r1, #16
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001210:	187a      	adds	r2, r7, r1
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_TIM21_Init+0xec>)
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f004 fb7a 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8001220:	f000 f910 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001224:	003b      	movs	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800122a:	003b      	movs	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	003b      	movs	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	003b      	movs	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	0039      	movs	r1, r7
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_TIM21_Init+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	0018      	movs	r0, r3
 8001244:	f004 f81c 	bl	8005280 <HAL_TIM_OC_ConfigChannel>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 800124c:	f000 f8fa 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b00a      	add	sp, #40	; 0x28
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000538 	.word	0x20000538
 800125c:	40010800 	.word	0x40010800
 8001260:	0000063f 	.word	0x0000063f
 8001264:	000003e7 	.word	0x000003e7

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	2414      	movs	r4, #20
 8001270:	193b      	adds	r3, r7, r4
 8001272:	0018      	movs	r0, r3
 8001274:	2314      	movs	r3, #20
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f008 ff24 	bl	800a0c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b42      	ldr	r3, [pc, #264]	; (8001388 <MX_GPIO_Init+0x120>)
 8001280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <MX_GPIO_Init+0x120>)
 8001284:	2104      	movs	r1, #4
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <MX_GPIO_Init+0x120>)
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	2204      	movs	r2, #4
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_GPIO_Init+0x120>)
 8001298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_GPIO_Init+0x120>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <MX_GPIO_Init+0x120>)
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_GPIO_Init+0x120>)
 80012b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_GPIO_Init+0x120>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_GPIO_Init+0x120>)
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	2201      	movs	r2, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_GPIO_Init+0x120>)
 80012c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_GPIO_Init+0x120>)
 80012cc:	2102      	movs	r1, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_GPIO_Init+0x120>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|C2_Pin|C3_Pin
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2201      	movs	r2, #1
 80012e4:	21cf      	movs	r1, #207	; 0xcf
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 f87d 	bl	80023e6 <HAL_GPIO_WritePin>
                          |C4_Pin|C5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	2200      	movs	r2, #0
 80012f2:	2120      	movs	r1, #32
 80012f4:	0018      	movs	r0, r3
 80012f6:	f001 f876 	bl	80023e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C6_Pin|C7_Pin|LED1_Pin, GPIO_PIN_SET);
 80012fa:	4924      	ldr	r1, [pc, #144]	; (800138c <MX_GPIO_Init+0x124>)
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_GPIO_Init+0x128>)
 80012fe:	2201      	movs	r2, #1
 8001300:	0018      	movs	r0, r3
 8001302:	f001 f870 	bl	80023e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|A8_Pin|A9_Pin|A10_Pin
 8001306:	4923      	ldr	r1, [pc, #140]	; (8001394 <MX_GPIO_Init+0x12c>)
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_GPIO_Init+0x128>)
 800130a:	2200      	movs	r2, #0
 800130c:	0018      	movs	r0, r3
 800130e:	f001 f86a 	bl	80023e6 <HAL_GPIO_WritePin>
                          |A1_Pin|A2_Pin|A3_Pin|A4_Pin
                          |A5_Pin|A6_Pin|A7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C1_Pin C2_Pin C3_Pin
                           LEDG_Pin C4_Pin C5_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|C2_Pin|C3_Pin
 8001312:	193b      	adds	r3, r7, r4
 8001314:	22ef      	movs	r2, #239	; 0xef
 8001316:	601a      	str	r2, [r3, #0]
                          |LEDG_Pin|C4_Pin|C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2201      	movs	r2, #1
 800131c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	193a      	adds	r2, r7, r4
 800132c:	23a0      	movs	r3, #160	; 0xa0
 800132e:	05db      	lsls	r3, r3, #23
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 febc 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C6_Pin C7_Pin A0_Pin A8_Pin
                           A9_Pin A10_Pin LED1_Pin A1_Pin
                           A2_Pin A3_Pin A4_Pin A5_Pin
                           A6_Pin A7_Pin */
  GPIO_InitStruct.Pin = C6_Pin|C7_Pin|A0_Pin|A8_Pin
 8001338:	193b      	adds	r3, r7, r4
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <MX_GPIO_Init+0x130>)
 800133c:	601a      	str	r2, [r3, #0]
                          |A9_Pin|A10_Pin|LED1_Pin|A1_Pin
                          |A2_Pin|A3_Pin|A4_Pin|A5_Pin
                          |A6_Pin|A7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2201      	movs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	193b      	adds	r3, r7, r4
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <MX_GPIO_Init+0x128>)
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f000 feaa 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT1_Pin */
  GPIO_InitStruct.Pin = BUTT1_Pin;
 800135c:	0021      	movs	r1, r4
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0192      	lsls	r2, r2, #6
 8001364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT1_GPIO_Port, &GPIO_InitStruct);
 8001372:	187b      	adds	r3, r7, r1
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <MX_GPIO_Init+0x128>)
 8001376:	0019      	movs	r1, r3
 8001378:	0010      	movs	r0, r2
 800137a:	f000 fe99 	bl	80020b0 <HAL_GPIO_Init>

}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b00b      	add	sp, #44	; 0x2c
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	00004003 	.word	0x00004003
 8001390:	50000400 	.word	0x50000400
 8001394:	00001ffc 	.word	0x00001ffc
 8001398:	00005fff 	.word	0x00005fff

0800139c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  // Check if timer to control pattern steps
  if (htim == &htim21)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d103      	bne.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //PulseHandler();
	  pattern_flag = 1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
  }
  // Check if timer to sample ADC
  else if (htim == &htim7) {
	  sample_flag = 1;
  }
}
 80013b2:	e030      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim6) {
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d125      	bne.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x6c>
	  button_state = HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin);
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f000 fff1 	bl	80023ac <HAL_GPIO_ReadPin>
 80013ca:	0003      	movs	r3, r0
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013d0:	701a      	strb	r2, [r3, #0]
	  if (button_state == GPIO_PIN_RESET && button_prev == GPIO_PIN_SET) {
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x54>
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d106      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x54>
		  button_flag = 1;
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
		  button_prev = GPIO_PIN_RESET;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	e012      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  else if (button_state == GPIO_PIN_SET && button_prev == GPIO_PIN_RESET) {
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10e      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
		  button_prev = GPIO_PIN_SET;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	e006      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim7) {
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800140c:	429a      	cmp	r2, r3
 800140e:	d102      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  sample_flag = 1;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	20000538 	.word	0x20000538
 8001424:	20000584 	.word	0x20000584
 8001428:	200004b8 	.word	0x200004b8
 800142c:	50000400 	.word	0x50000400
 8001430:	20000586 	.word	0x20000586
 8001434:	20000106 	.word	0x20000106
 8001438:	20000585 	.word	0x20000585
 800143c:	200004f8 	.word	0x200004f8
 8001440:	20000580 	.word	0x20000580

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_MspInit+0x24>)
 8001456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x24>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_MspInit+0x24>)
 8001462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_MspInit+0x24>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0549      	lsls	r1, r1, #21
 800146a:	430a      	orrs	r2, r1
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	240c      	movs	r4, #12
 8001482:	193b      	adds	r3, r7, r4
 8001484:	0018      	movs	r0, r3
 8001486:	2314      	movs	r3, #20
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	f008 fe1b 	bl	800a0c6 <memset>
  if(hadc->Instance==ADC1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_ADC_MspInit+0x70>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d122      	bne.n	80014e0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_ADC_MspInit+0x74>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_ADC_MspInit+0x74>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0089      	lsls	r1, r1, #2
 80014a4:	430a      	orrs	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_MspInit+0x74>)
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_ADC_MspInit+0x74>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	430a      	orrs	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_ADC_MspInit+0x74>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = HEART_ADC_Pin;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2210      	movs	r2, #16
 80014c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2203      	movs	r2, #3
 80014ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(HEART_ADC_GPIO_Port, &GPIO_InitStruct);
 80014d2:	193a      	adds	r2, r7, r4
 80014d4:	23a0      	movs	r3, #160	; 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	0011      	movs	r1, r2
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 fde8 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b009      	add	sp, #36	; 0x24
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	40012400 	.word	0x40012400
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	05db      	lsls	r3, r3, #23
 8001500:	429a      	cmp	r2, r3
 8001502:	d106      	bne.n	8001512 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 800150a:	2101      	movs	r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001510:	e046      	b.n	80015a0 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <HAL_TIM_Base_MspInit+0xbc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d106      	bne.n	800152a <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 800151e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001522:	2102      	movs	r1, #2
 8001524:	430a      	orrs	r2, r1
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001528:	e03a      	b.n	80015a0 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10e      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 800153a:	2110      	movs	r1, #16
 800153c:	430a      	orrs	r2, r1
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2011      	movs	r0, #17
 8001546:	f000 fd81 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154a:	2011      	movs	r0, #17
 800154c:	f000 fd93 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 8001550:	e026      	b.n	80015a0 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM7)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_TIM_Base_MspInit+0xc4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d10e      	bne.n	800157a <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 800155e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001562:	2120      	movs	r1, #32
 8001564:	430a      	orrs	r2, r1
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2012      	movs	r0, #18
 800156e:	f000 fd6d 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001572:	2012      	movs	r0, #18
 8001574:	f000 fd7f 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 8001578:	e012      	b.n	80015a0 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_TIM_Base_MspInit+0xc8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d10d      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_TIM_Base_MspInit+0xb8>)
 800158a:	2104      	movs	r1, #4
 800158c:	430a      	orrs	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2014      	movs	r0, #20
 8001596:	f000 fd59 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800159a:	2014      	movs	r0, #20
 800159c:	f000 fd6b 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40001000 	.word	0x40001000
 80015b4:	40001400 	.word	0x40001400
 80015b8:	40010800 	.word	0x40010800

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f8ee 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TIM6_DAC_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f003 fd5c 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200004b8 	.word	0x200004b8

08001604 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <TIM7_IRQHandler+0x14>)
 800160a:	0018      	movs	r0, r3
 800160c:	f003 fd50 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	200004f8 	.word	0x200004f8

0800161c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <TIM21_IRQHandler+0x14>)
 8001622:	0018      	movs	r0, r3
 8001624:	f003 fd44 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000538 	.word	0x20000538

08001634 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <USB_IRQHandler+0x14>)
 800163a:	0018      	movs	r0, r3
 800163c:	f001 f816 	bl	800266c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	20001228 	.word	0x20001228

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f008 fcf0 	bl	800a060 <__errno>
 8001680:	0003      	movs	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	2301      	movs	r3, #1
 8001688:	425b      	negs	r3, r3
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	18d2      	adds	r2, r2, r3
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_sbrk+0x64>)
 800169c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b006      	add	sp, #24
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20005000 	.word	0x20005000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	20000588 	.word	0x20000588
 80016b4:	20001750 	.word	0x20001750

080016b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80016c6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c8:	f7ff fff6 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f008 fcbb 	bl	800a06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff f9db 	bl	8000ab0 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
   ldr   r0, =_estack
 80016fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8001708:	0800ab54 	.word	0x0800ab54
  ldr r2, =_sbss
 800170c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8001710:	2000174c 	.word	0x2000174c

08001714 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_COMP_IRQHandler>
	...

08001718 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x3c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Init+0x3c>)
 800172a:	2140      	movs	r1, #64	; 0x40
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f811 	bl	8001758 <HAL_InitTick>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d003      	beq.n	8001742 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e001      	b.n	8001746 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001742:	f7ff fe85 	bl	8001450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	40022000 	.word	0x40022000

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x5c>)
 8001762:	681c      	ldr	r4, [r3, #0]
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	0019      	movs	r1, r3
 800176a:	23fa      	movs	r3, #250	; 0xfa
 800176c:	0098      	lsls	r0, r3, #2
 800176e:	f7fe fcd5 	bl	800011c <__udivsi3>
 8001772:	0003      	movs	r3, r0
 8001774:	0019      	movs	r1, r3
 8001776:	0020      	movs	r0, r4
 8001778:	f7fe fcd0 	bl	800011c <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	0018      	movs	r0, r3
 8001780:	f000 fc89 	bl	8002096 <HAL_SYSTICK_Config>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e00f      	b.n	80017ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d80b      	bhi.n	80017aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	2301      	movs	r3, #1
 8001796:	425b      	negs	r3, r3
 8001798:	2200      	movs	r2, #0
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fc56 	bl	800204c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_InitTick+0x64>)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b003      	add	sp, #12
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	20000108 	.word	0x20000108
 80017b8:	20000110 	.word	0x20000110
 80017bc:	2000010c 	.word	0x2000010c

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	18d2      	adds	r2, r2, r3
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_IncTick+0x20>)
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000110 	.word	0x20000110
 80017e0:	2000058c 	.word	0x2000058c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_GetTick+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	2000058c 	.word	0x2000058c

080017f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e159      	b.n	8001abe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2250      	movs	r2, #80	; 0x50
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fe28 	bl	8001478 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	2210      	movs	r2, #16
 800182e:	4013      	ands	r3, r2
 8001830:	2b10      	cmp	r3, #16
 8001832:	d005      	beq.n	8001840 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2204      	movs	r2, #4
 800183c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800183e:	d00b      	beq.n	8001858 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	2210      	movs	r2, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2250      	movs	r2, #80	; 0x50
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e132      	b.n	8001abe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <HAL_ADC_Init+0x2d0>)
 800185e:	4013      	ands	r3, r2
 8001860:	2202      	movs	r2, #2
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_ADC_Init+0x90>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_ADC_Init+0x90>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_ADC_Init+0x92>
 8001888:	2300      	movs	r3, #0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d149      	bne.n	8001922 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	429a      	cmp	r2, r3
 8001898:	d00b      	beq.n	80018b2 <HAL_ADC_Init+0xba>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d005      	beq.n	80018b2 <HAL_ADC_Init+0xba>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d111      	bne.n	80018d6 <HAL_ADC_Init+0xde>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	0892      	lsrs	r2, r2, #2
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	e014      	b.n	8001900 <HAL_ADC_Init+0x108>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	0892      	lsrs	r2, r2, #2
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	4b79      	ldr	r3, [pc, #484]	; (8001acc <HAL_ADC_Init+0x2d4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b78      	ldr	r3, [pc, #480]	; (8001acc <HAL_ADC_Init+0x2d4>)
 80018ec:	4978      	ldr	r1, [pc, #480]	; (8001ad0 <HAL_ADC_Init+0x2d8>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_ADC_Init+0x2d4>)
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4b74      	ldr	r3, [pc, #464]	; (8001acc <HAL_ADC_Init+0x2d4>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2118      	movs	r1, #24
 800190c:	438a      	bics	r2, r1
 800190e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68d9      	ldr	r1, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_ADC_Init+0x2d4>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b69      	ldr	r3, [pc, #420]	; (8001acc <HAL_ADC_Init+0x2d4>)
 8001928:	496a      	ldr	r1, [pc, #424]	; (8001ad4 <HAL_ADC_Init+0x2dc>)
 800192a:	400a      	ands	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_ADC_Init+0x2d4>)
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001936:	065a      	lsls	r2, r3, #25
 8001938:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_ADC_Init+0x2d4>)
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	d108      	bne.n	800195e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0549      	lsls	r1, r1, #21
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	495b      	ldr	r1, [pc, #364]	; (8001ad8 <HAL_ADC_Init+0x2e0>)
 800196a:	400a      	ands	r2, r1
 800196c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68d9      	ldr	r1, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d101      	bne.n	8001984 <HAL_ADC_Init+0x18c>
 8001980:	2304      	movs	r3, #4
 8001982:	e000      	b.n	8001986 <HAL_ADC_Init+0x18e>
 8001984:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001986:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2020      	movs	r0, #32
 800198c:	5c1b      	ldrb	r3, [r3, r0]
 800198e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001990:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	202c      	movs	r0, #44	; 0x2c
 8001996:	5c1b      	ldrb	r3, [r3, r0]
 8001998:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800199a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80019a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80019a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80019b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019be:	23c2      	movs	r3, #194	; 0xc2
 80019c0:	33ff      	adds	r3, #255	; 0xff
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d00b      	beq.n	80019de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68d9      	ldr	r1, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2221      	movs	r2, #33	; 0x21
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d11a      	bne.n	8001a1e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0249      	lsls	r1, r1, #9
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	e00b      	b.n	8001a1e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	2201      	movs	r2, #1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11f      	bne.n	8001a66 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	492a      	ldr	r1, [pc, #168]	; (8001adc <HAL_ADC_Init+0x2e4>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6919      	ldr	r1, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a44:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001a4a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	e00e      	b.n	8001a84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2107      	movs	r1, #7
 8001a90:	438a      	bics	r2, r1
 8001a92:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6959      	ldr	r1, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	fffffefd 	.word	0xfffffefd
 8001acc:	40012708 	.word	0x40012708
 8001ad0:	ffc3ffff 	.word	0xffc3ffff
 8001ad4:	fdffffff 	.word	0xfdffffff
 8001ad8:	fffe0219 	.word	0xfffe0219
 8001adc:	fffffc03 	.word	0xfffffc03

08001ae0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d138      	bne.n	8001b6e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2250      	movs	r2, #80	; 0x50
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Start+0x2a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e038      	b.n	8001b7c <HAL_ADC_Start+0x9c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2250      	movs	r2, #80	; 0x50
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	18fc      	adds	r4, r7, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 f95f 	bl	8001de4 <ADC_Enable>
 8001b26:	0003      	movs	r3, r0
 8001b28:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d120      	bne.n	8001b76 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_ADC_Start+0xa4>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0052      	lsls	r2, r2, #1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2250      	movs	r2, #80	; 0x50
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	221c      	movs	r2, #28
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2104      	movs	r1, #4
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	e003      	b.n	8001b76 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b6e:	230f      	movs	r3, #15
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b005      	add	sp, #20
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	fffff0fe 	.word	0xfffff0fe

08001b88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e014      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10b      	bne.n	8001bce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	2220      	movs	r2, #32
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2250      	movs	r2, #80	; 0x50
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e072      	b.n	8001cb4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001bce:	230c      	movs	r3, #12
 8001bd0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bd2:	f7ff fe07 	bl	80017e4 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bda:	e01f      	b.n	8001c1c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	d01c      	beq.n	8001c1c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_ADC_PollForConversion+0x70>
 8001be8:	f7ff fdfc 	bl	80017e4 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d211      	bcs.n	8001c1c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	2204      	movs	r2, #4
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2250      	movs	r2, #80	; 0x50
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e04b      	b.n	8001cb4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0d9      	beq.n	8001bdc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d12e      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2220      	movs	r2, #32
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d129      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2208      	movs	r2, #8
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d122      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	d110      	bne.n	8001c8a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	210c      	movs	r1, #12
 8001c74:	438a      	bics	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_ADC_PollForConversion+0x134>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2201      	movs	r2, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
 8001c88:	e00b      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	2220      	movs	r2, #32
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	fffffefe 	.word	0xfffffefe

08001cc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2250      	movs	r2, #80	; 0x50
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e06c      	b.n	8001dca <HAL_ADC_ConfigChannel+0xf2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2250      	movs	r2, #80	; 0x50
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	4013      	ands	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	2220      	movs	r2, #32
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2250      	movs	r2, #80	; 0x50
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e056      	b.n	8001dca <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <HAL_ADC_ConfigChannel+0xfc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d028      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	035b      	lsls	r3, r3, #13
 8001d32:	0b5a      	lsrs	r2, r3, #13
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0409      	lsls	r1, r1, #16
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001d56:	200a      	movs	r0, #10
 8001d58:	f000 f8ac 	bl	8001eb4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	4013      	ands	r3, r2
 8001d66:	d02b      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	03c9      	lsls	r1, r1, #15
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e023      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	035b      	lsls	r3, r3, #13
 8001d84:	0b5b      	lsrs	r3, r3, #13
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	02db      	lsls	r3, r3, #11
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d005      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001da2:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_ADC_ConfigChannel+0x104>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	4013      	ands	r3, r2
 8001db2:	d005      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_ADC_ConfigChannel+0x100>)
 8001dba:	4909      	ldr	r1, [pc, #36]	; (8001de0 <HAL_ADC_ConfigChannel+0x108>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2250      	movs	r2, #80	; 0x50
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	00001001 	.word	0x00001001
 8001dd8:	40012708 	.word	0x40012708
 8001ddc:	ff7fffff 	.word	0xff7fffff
 8001de0:	ffbfffff 	.word	0xffbfffff

08001de4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d108      	bne.n	8001e10 <ADC_Enable+0x2c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <ADC_Enable+0x2c>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <ADC_Enable+0x2e>
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d146      	bne.n	8001ea4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <ADC_Enable+0xcc>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	2210      	movs	r2, #16
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	2201      	movs	r2, #1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e033      	b.n	8001ea6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f000 f830 	bl	8001eb4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e54:	f7ff fcc6 	bl	80017e4 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e5c:	e01b      	b.n	8001e96 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e5e:	f7ff fcc1 	bl	80017e4 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b0a      	cmp	r3, #10
 8001e6a:	d914      	bls.n	8001e96 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00d      	beq.n	8001e96 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	2210      	movs	r2, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d1dc      	bne.n	8001e5e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	80000017 	.word	0x80000017

08001eb4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <ADC_DelayMicroSecond+0x38>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <ADC_DelayMicroSecond+0x3c>)
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe f92a 	bl	800011c <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	001a      	movs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4353      	muls	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001ed2:	e002      	b.n	8001eda <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <ADC_DelayMicroSecond+0x20>
  }
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000108 	.word	0x20000108
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b7f      	cmp	r3, #127	; 0x7f
 8001f06:	d809      	bhi.n	8001f1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	231f      	movs	r3, #31
 8001f10:	401a      	ands	r2, r3
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_EnableIRQ+0x30>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	4091      	lsls	r1, r2
 8001f18:	000a      	movs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
  }
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	0002      	movs	r2, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f3c:	d828      	bhi.n	8001f90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <__NVIC_SetPriority+0xd4>)
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	33c0      	adds	r3, #192	; 0xc0
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	589b      	ldr	r3, [r3, r2]
 8001f4e:	1dfa      	adds	r2, r7, #7
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	0011      	movs	r1, r2
 8001f54:	2203      	movs	r2, #3
 8001f56:	400a      	ands	r2, r1
 8001f58:	00d2      	lsls	r2, r2, #3
 8001f5a:	21ff      	movs	r1, #255	; 0xff
 8001f5c:	4091      	lsls	r1, r2
 8001f5e:	000a      	movs	r2, r1
 8001f60:	43d2      	mvns	r2, r2
 8001f62:	401a      	ands	r2, r3
 8001f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	22ff      	movs	r2, #255	; 0xff
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	0018      	movs	r0, r3
 8001f74:	2303      	movs	r3, #3
 8001f76:	4003      	ands	r3, r0
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7c:	481f      	ldr	r0, [pc, #124]	; (8001ffc <__NVIC_SetPriority+0xd4>)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	430a      	orrs	r2, r1
 8001f88:	33c0      	adds	r3, #192	; 0xc0
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f8e:	e031      	b.n	8001ff4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <__NVIC_SetPriority+0xd8>)
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0019      	movs	r1, r3
 8001f98:	230f      	movs	r3, #15
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	3b08      	subs	r3, #8
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3306      	adds	r3, #6
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1dfa      	adds	r2, r7, #7
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	00d2      	lsls	r2, r2, #3
 8001fb6:	21ff      	movs	r1, #255	; 0xff
 8001fb8:	4091      	lsls	r1, r2
 8001fba:	000a      	movs	r2, r1
 8001fbc:	43d2      	mvns	r2, r2
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	22ff      	movs	r2, #255	; 0xff
 8001fc8:	401a      	ands	r2, r3
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <__NVIC_SetPriority+0xd8>)
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	001c      	movs	r4, r3
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	4023      	ands	r3, r4
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	3306      	adds	r3, #6
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	18c3      	adds	r3, r0, r3
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	045b      	lsls	r3, r3, #17
 8002014:	429a      	cmp	r2, r3
 8002016:	d301      	bcc.n	800201c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002018:	2301      	movs	r3, #1
 800201a:	e010      	b.n	800203e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <SysTick_Config+0x44>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	3a01      	subs	r2, #1
 8002022:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002024:	2301      	movs	r3, #1
 8002026:	425b      	negs	r3, r3
 8002028:	2103      	movs	r1, #3
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff ff7c 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x44>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x44>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	210f      	movs	r1, #15
 8002058:	187b      	adds	r3, r7, r1
 800205a:	1c02      	adds	r2, r0, #0
 800205c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	187b      	adds	r3, r7, r1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b25b      	sxtb	r3, r3
 8002066:	0011      	movs	r1, r2
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	0002      	movs	r2, r0
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b25b      	sxtb	r3, r3
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff ff33 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff ffaf 	bl	8002004 <SysTick_Config>
 80020a6:	0003      	movs	r3, r0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80020c6:	e155      	b.n	8002374 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4091      	lsls	r1, r2
 80020d2:	000a      	movs	r2, r1
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d100      	bne.n	80020e0 <HAL_GPIO_Init+0x30>
 80020de:	e146      	b.n	800236e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	409a      	lsls	r2, r3
 8002106:	0013      	movs	r3, r2
 8002108:	43da      	mvns	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	0013      	movs	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	43da      	mvns	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	2201      	movs	r2, #1
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	4013      	ands	r3, r2
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	43da      	mvns	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	58d3      	ldr	r3, [r2, r3]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2207      	movs	r2, #7
 80021b4:	4013      	ands	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2107      	movs	r1, #7
 80021ce:	400b      	ands	r3, r1
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	401a      	ands	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	23c0      	movs	r3, #192	; 0xc0
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	4013      	ands	r3, r2
 8002228:	d100      	bne.n	800222c <HAL_GPIO_Init+0x17c>
 800222a:	e0a0      	b.n	800236e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222c:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_GPIO_Init+0x2dc>)
 800222e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_GPIO_Init+0x2dc>)
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002238:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_GPIO_Init+0x2e0>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	589b      	ldr	r3, [r3, r2]
 8002244:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	43da      	mvns	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	23a0      	movs	r3, #160	; 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	429a      	cmp	r2, r3
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x1f6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	; (8002394 <HAL_GPIO_Init+0x2e4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x1f2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_GPIO_Init+0x2e8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x1ee>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a48      	ldr	r2, [pc, #288]	; (800239c <HAL_GPIO_Init+0x2ec>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x1ea>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_GPIO_Init+0x2f0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x1e6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x1e2>
 800228e:	2305      	movs	r3, #5
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 8002292:	2306      	movs	r3, #6
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x1f8>
 80022a6:	2300      	movs	r3, #0
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	2103      	movs	r1, #3
 80022ac:	400a      	ands	r2, r1
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2e0>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	035b      	lsls	r3, r3, #13
 80022de:	4013      	ands	r3, r2
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	039b      	lsls	r3, r3, #14
 8002308:	4013      	ands	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	4013      	ands	r3, r2
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43da      	mvns	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	4013      	ands	r3, r2
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x2f8>)
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	40da      	lsrs	r2, r3
 800237c:	1e13      	subs	r3, r2, #0
 800237e:	d000      	beq.n	8002382 <HAL_GPIO_Init+0x2d2>
 8002380:	e6a2      	b.n	80020c8 <HAL_GPIO_Init+0x18>
  }
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b006      	add	sp, #24
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000
 8002394:	50000400 	.word	0x50000400
 8002398:	50000800 	.word	0x50000800
 800239c:	50000c00 	.word	0x50000c00
 80023a0:	50001000 	.word	0x50001000
 80023a4:	50001c00 	.word	0x50001c00
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	000a      	movs	r2, r1
 80023b6:	1cbb      	adds	r3, r7, #2
 80023b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	1cba      	adds	r2, r7, #2
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	4013      	ands	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023c6:	230f      	movs	r3, #15
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e003      	b.n	80023d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d0:	230f      	movs	r3, #15
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023d8:	230f      	movs	r3, #15
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	0008      	movs	r0, r1
 80023f0:	0011      	movs	r1, r2
 80023f2:	1cbb      	adds	r3, r7, #2
 80023f4:	1c02      	adds	r2, r0, #0
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	1c7b      	adds	r3, r7, #1
 80023fa:	1c0a      	adds	r2, r1, #0
 80023fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fe:	1c7b      	adds	r3, r7, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	1cbb      	adds	r3, r7, #2
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800240e:	e003      	b.n	8002418 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002410:	1cbb      	adds	r3, r7, #2
 8002412:	881a      	ldrh	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	b08b      	sub	sp, #44	; 0x2c
 8002424:	af06      	add	r7, sp, #24
 8002426:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0f0      	b.n	8002614 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_PCD_Init+0x1fc>)
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	23aa      	movs	r3, #170	; 0xaa
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	2100      	movs	r1, #0
 8002446:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f007 fab2 	bl	80099b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a72      	ldr	r2, [pc, #456]	; (800261c <HAL_PCD_Init+0x1fc>)
 8002454:	2103      	movs	r1, #3
 8002456:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0018      	movs	r0, r3
 800245e:	f003 facb 	bl	80059f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002462:	230f      	movs	r3, #15
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e049      	b.n	8002500 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800246c:	200f      	movs	r0, #15
 800246e:	183b      	adds	r3, r7, r0
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	0013      	movs	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	189b      	adds	r3, r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	18cb      	adds	r3, r1, r3
 8002480:	3301      	adds	r3, #1
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002486:	183b      	adds	r3, r7, r0
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	0013      	movs	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	189b      	adds	r3, r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	183a      	adds	r2, r7, r0
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800249c:	183b      	adds	r3, r7, r0
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	0013      	movs	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	18cb      	adds	r3, r1, r3
 80024ae:	3303      	adds	r3, #3
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b4:	183b      	adds	r3, r7, r0
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	0013      	movs	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	18cb      	adds	r3, r1, r3
 80024c4:	3338      	adds	r3, #56	; 0x38
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	0013      	movs	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	189b      	adds	r3, r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	18cb      	adds	r3, r1, r3
 80024da:	333c      	adds	r3, #60	; 0x3c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	0013      	movs	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	18cb      	adds	r3, r1, r3
 80024f0:	3340      	adds	r3, #64	; 0x40
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	183b      	adds	r3, r7, r0
 80024fc:	3201      	adds	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	210f      	movs	r1, #15
 8002502:	187b      	adds	r3, r7, r1
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d3ae      	bcc.n	800246c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e056      	b.n	80025c4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002516:	240f      	movs	r4, #15
 8002518:	193b      	adds	r3, r7, r4
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	236a      	movs	r3, #106	; 0x6a
 8002520:	33ff      	adds	r3, #255	; 0xff
 8002522:	0019      	movs	r1, r3
 8002524:	0013      	movs	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	189b      	adds	r3, r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	18c3      	adds	r3, r0, r3
 800252e:	185b      	adds	r3, r3, r1
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	23b4      	movs	r3, #180	; 0xb4
 800253c:	0059      	lsls	r1, r3, #1
 800253e:	0013      	movs	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	189b      	adds	r3, r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	18c3      	adds	r3, r0, r3
 8002548:	185b      	adds	r3, r3, r1
 800254a:	193a      	adds	r2, r7, r4
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002550:	193b      	adds	r3, r7, r4
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	236c      	movs	r3, #108	; 0x6c
 8002558:	33ff      	adds	r3, #255	; 0xff
 800255a:	0019      	movs	r1, r3
 800255c:	0013      	movs	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	189b      	adds	r3, r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	18c3      	adds	r3, r0, r3
 8002566:	185b      	adds	r3, r3, r1
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256c:	193b      	adds	r3, r7, r4
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	23bc      	movs	r3, #188	; 0xbc
 8002574:	0059      	lsls	r1, r3, #1
 8002576:	0013      	movs	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	189b      	adds	r3, r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	18c3      	adds	r3, r0, r3
 8002580:	185b      	adds	r3, r3, r1
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002586:	193b      	adds	r3, r7, r4
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	23be      	movs	r3, #190	; 0xbe
 800258e:	0059      	lsls	r1, r3, #1
 8002590:	0013      	movs	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	189b      	adds	r3, r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	18c3      	adds	r3, r0, r3
 800259a:	185b      	adds	r3, r3, r1
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	23c0      	movs	r3, #192	; 0xc0
 80025a8:	0059      	lsls	r1, r3, #1
 80025aa:	0013      	movs	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	18c3      	adds	r3, r0, r3
 80025b4:	185b      	adds	r3, r3, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	3201      	adds	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	230f      	movs	r3, #15
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3a1      	bcc.n	8002516 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	466a      	mov	r2, sp
 80025da:	0011      	movs	r1, r2
 80025dc:	001a      	movs	r2, r3
 80025de:	3210      	adds	r2, #16
 80025e0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80025e2:	c170      	stmia	r1!, {r4, r5, r6}
 80025e4:	ca30      	ldmia	r2!, {r4, r5}
 80025e6:	c130      	stmia	r1!, {r4, r5}
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 fa1d 	bl	8005a2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_PCD_Init+0x1fc>)
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d103      	bne.n	8002612 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f001 fd23 	bl	8004058 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b005      	add	sp, #20
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	000002a9 	.word	0x000002a9

08002620 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	23aa      	movs	r3, #170	; 0xaa
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_PCD_Start+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e014      	b.n	8002662 <HAL_PCD_Start+0x42>
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	23aa      	movs	r3, #170	; 0xaa
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	2101      	movs	r1, #1
 8002640:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	f003 f9c0 	bl	80059cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0018      	movs	r0, r3
 8002652:	f005 f9c3 	bl	80079dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	23aa      	movs	r3, #170	; 0xaa
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	2100      	movs	r1, #0
 800265e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0018      	movs	r0, r3
 800267a:	f005 f9c5 	bl	8007a08 <USB_ReadInterrupts>
 800267e:	0003      	movs	r3, r0
 8002680:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4013      	ands	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fb62 	bl	8002d58 <PCD_EP_ISR_Handler>

    return;
 8002694:	e11d      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4013      	ands	r3, r2
 800269e:	d015      	beq.n	80026cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2244      	movs	r2, #68	; 0x44
 80026a6:	5a9b      	ldrh	r3, [r3, r2]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	498a      	ldr	r1, [pc, #552]	; (80028d8 <HAL_PCD_IRQHandler+0x26c>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	b291      	uxth	r1, r2
 80026b4:	2244      	movs	r2, #68	; 0x44
 80026b6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f007 f9fd 	bl	8009aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2100      	movs	r1, #0
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f915 	bl	80028f4 <HAL_PCD_SetAddress>

    return;
 80026ca:	e102      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00c      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2244      	movs	r2, #68	; 0x44
 80026dc:	5a9b      	ldrh	r3, [r3, r2]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	497d      	ldr	r1, [pc, #500]	; (80028dc <HAL_PCD_IRQHandler+0x270>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	b291      	uxth	r1, r2
 80026ea:	2244      	movs	r2, #68	; 0x44
 80026ec:	5299      	strh	r1, [r3, r2]

    return;
 80026ee:	e0f0      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	4013      	ands	r3, r2
 80026f8:	d00c      	beq.n	8002714 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2244      	movs	r2, #68	; 0x44
 8002700:	5a9b      	ldrh	r3, [r3, r2]
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4975      	ldr	r1, [pc, #468]	; (80028e0 <HAL_PCD_IRQHandler+0x274>)
 800270a:	400a      	ands	r2, r1
 800270c:	b291      	uxth	r1, r2
 800270e:	2244      	movs	r2, #68	; 0x44
 8002710:	5299      	strh	r1, [r3, r2]

    return;
 8002712:	e0de      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	015b      	lsls	r3, r3, #5
 800271a:	4013      	ands	r3, r2
 800271c:	d038      	beq.n	8002790 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	5a9b      	ldrh	r3, [r3, r2]
 8002726:	b29a      	uxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2104      	movs	r1, #4
 800272e:	438a      	bics	r2, r1
 8002730:	b291      	uxth	r1, r2
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29a      	uxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2108      	movs	r1, #8
 8002746:	438a      	bics	r2, r1
 8002748:	b291      	uxth	r1, r2
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	23b8      	movs	r3, #184	; 0xb8
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d109      	bne.n	800276e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	23b8      	movs	r3, #184	; 0xb8
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	2100      	movs	r1, #0
 8002762:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2100      	movs	r1, #0
 8002768:	0018      	movs	r0, r3
 800276a:	f001 fc9f 	bl	80040ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f007 f9e3 	bl	8009b3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2244      	movs	r2, #68	; 0x44
 800277c:	5a9b      	ldrh	r3, [r3, r2]
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4957      	ldr	r1, [pc, #348]	; (80028e4 <HAL_PCD_IRQHandler+0x278>)
 8002786:	400a      	ands	r2, r1
 8002788:	b291      	uxth	r1, r2
 800278a:	2244      	movs	r2, #68	; 0x44
 800278c:	5299      	strh	r1, [r3, r2]

    return;
 800278e:	e0a0      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d028      	beq.n	80027ec <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	5a9b      	ldrh	r3, [r3, r2]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2108      	movs	r1, #8
 80027aa:	430a      	orrs	r2, r1
 80027ac:	b291      	uxth	r1, r2
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2244      	movs	r2, #68	; 0x44
 80027b8:	5a9b      	ldrh	r3, [r3, r2]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4949      	ldr	r1, [pc, #292]	; (80028e8 <HAL_PCD_IRQHandler+0x27c>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	b291      	uxth	r1, r2
 80027c6:	2244      	movs	r2, #68	; 0x44
 80027c8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	5a9b      	ldrh	r3, [r3, r2]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2104      	movs	r1, #4
 80027da:	430a      	orrs	r2, r1
 80027dc:	b291      	uxth	r1, r2
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f007 f98d 	bl	8009b04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027ea:	e072      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	4013      	ands	r3, r2
 80027f2:	d046      	beq.n	8002882 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2244      	movs	r2, #68	; 0x44
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	438a      	bics	r2, r1
 8002806:	b291      	uxth	r1, r2
 8002808:	2244      	movs	r2, #68	; 0x44
 800280a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	23b8      	movs	r3, #184	; 0xb8
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d12f      	bne.n	8002878 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	5a9b      	ldrh	r3, [r3, r2]
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	430a      	orrs	r2, r1
 800282a:	b291      	uxth	r1, r2
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	5a9b      	ldrh	r3, [r3, r2]
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2108      	movs	r1, #8
 8002840:	430a      	orrs	r2, r1
 8002842:	b291      	uxth	r1, r2
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	23b8      	movs	r3, #184	; 0xb8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	2101      	movs	r1, #1
 8002850:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2254      	movs	r2, #84	; 0x54
 8002858:	5a9b      	ldrh	r3, [r3, r2]
 800285a:	b29b      	uxth	r3, r3
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	223c      	movs	r2, #60	; 0x3c
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	23b9      	movs	r3, #185	; 0xb9
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2101      	movs	r1, #1
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fc1b 	bl	80040ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002876:	e02c      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f007 f942 	bl	8009b04 <HAL_PCD_SuspendCallback>
    return;
 8002880:	e027      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d010      	beq.n	80028ae <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2244      	movs	r2, #68	; 0x44
 8002892:	5a9b      	ldrh	r3, [r3, r2]
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4914      	ldr	r1, [pc, #80]	; (80028ec <HAL_PCD_IRQHandler+0x280>)
 800289c:	400a      	ands	r2, r1
 800289e:	b291      	uxth	r1, r2
 80028a0:	2244      	movs	r2, #68	; 0x44
 80028a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f007 f8f8 	bl	8009a9c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028ac:	e011      	b.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00c      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2244      	movs	r2, #68	; 0x44
 80028be:	5a9b      	ldrh	r3, [r3, r2]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_PCD_IRQHandler+0x284>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	b291      	uxth	r1, r2
 80028cc:	2244      	movs	r2, #68	; 0x44
 80028ce:	5299      	strh	r1, [r3, r2]

    return;
 80028d0:	46c0      	nop			; (mov r8, r8)
  }
}
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	fffffbff 	.word	0xfffffbff
 80028dc:	ffffbfff 	.word	0xffffbfff
 80028e0:	ffffdfff 	.word	0xffffdfff
 80028e4:	ffffefff 	.word	0xffffefff
 80028e8:	fffff7ff 	.word	0xfffff7ff
 80028ec:	fffffdff 	.word	0xfffffdff
 80028f0:	fffffeff 	.word	0xfffffeff

080028f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	000a      	movs	r2, r1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	23aa      	movs	r3, #170	; 0xaa
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_SetAddress+0x1e>
 800290e:	2302      	movs	r3, #2
 8002910:	e017      	b.n	8002942 <HAL_PCD_SetAddress+0x4e>
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	23aa      	movs	r3, #170	; 0xaa
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	2101      	movs	r1, #1
 800291a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1cfa      	adds	r2, r7, #3
 8002920:	2124      	movs	r1, #36	; 0x24
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	1cfb      	adds	r3, r7, #3
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	0019      	movs	r1, r3
 8002930:	0010      	movs	r0, r2
 8002932:	f005 f83f 	bl	80079b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	23aa      	movs	r3, #170	; 0xaa
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	2100      	movs	r1, #0
 800293e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	000c      	movs	r4, r1
 8002954:	0010      	movs	r0, r2
 8002956:	0019      	movs	r1, r3
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	1c22      	adds	r2, r4, #0
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	003b      	movs	r3, r7
 8002960:	1c02      	adds	r2, r0, #0
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	1cbb      	adds	r3, r7, #2
 8002966:	1c0a      	adds	r2, r1, #0
 8002968:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800296a:	230b      	movs	r3, #11
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002972:	1cfb      	adds	r3, r7, #3
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	da0f      	bge.n	800299c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297c:	1cfb      	adds	r3, r7, #3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2207      	movs	r2, #7
 8002982:	4013      	ands	r3, r2
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	0013      	movs	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	189b      	adds	r3, r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	18d3      	adds	r3, r2, r3
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	705a      	strb	r2, [r3, #1]
 800299a:	e00f      	b.n	80029bc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299c:	1cfb      	adds	r3, r7, #3
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2207      	movs	r2, #7
 80029a2:	401a      	ands	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	189b      	adds	r3, r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3369      	adds	r3, #105	; 0x69
 80029ae:	33ff      	adds	r3, #255	; 0xff
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	18d3      	adds	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029bc:	1cfb      	adds	r3, r7, #3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2207      	movs	r2, #7
 80029c2:	4013      	ands	r3, r2
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029ca:	003b      	movs	r3, r7
 80029cc:	881a      	ldrh	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1cba      	adds	r2, r7, #2
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029da:	1cbb      	adds	r3, r7, #2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d102      	bne.n	80029e8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	23aa      	movs	r3, #170	; 0xaa
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_PCD_EP_Open+0xae>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e013      	b.n	8002a20 <HAL_PCD_EP_Open+0xd6>
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	23aa      	movs	r3, #170	; 0xaa
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	2101      	movs	r1, #1
 8002a00:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	0011      	movs	r1, r2
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f003 f836 	bl	8005a7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	23aa      	movs	r3, #170	; 0xaa
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	2100      	movs	r1, #0
 8002a18:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002a1a:	230b      	movs	r3, #11
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b005      	add	sp, #20
 8002a26:	bd90      	pop	{r4, r7, pc}

08002a28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	000a      	movs	r2, r1
 8002a32:	1cfb      	adds	r3, r7, #3
 8002a34:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a36:	1cfb      	adds	r3, r7, #3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da0f      	bge.n	8002a60 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	1cfb      	adds	r3, r7, #3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	0013      	movs	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	705a      	strb	r2, [r3, #1]
 8002a5e:	e00f      	b.n	8002a80 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a60:	1cfb      	adds	r3, r7, #3
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2207      	movs	r2, #7
 8002a66:	401a      	ands	r2, r3
 8002a68:	0013      	movs	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	3369      	adds	r3, #105	; 0x69
 8002a72:	33ff      	adds	r3, #255	; 0xff
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a80:	1cfb      	adds	r3, r7, #3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2207      	movs	r2, #7
 8002a86:	4013      	ands	r3, r2
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	23aa      	movs	r3, #170	; 0xaa
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_PCD_EP_Close+0x76>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e011      	b.n	8002ac2 <HAL_PCD_EP_Close+0x9a>
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	23aa      	movs	r3, #170	; 0xaa
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f003 fb85 	bl	80061c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	23aa      	movs	r3, #170	; 0xaa
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	2100      	movs	r1, #0
 8002abe:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	200b      	movs	r0, #11
 8002ad8:	183b      	adds	r3, r7, r0
 8002ada:	1c0a      	adds	r2, r1, #0
 8002adc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ade:	0001      	movs	r1, r0
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	189b      	adds	r3, r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	3369      	adds	r3, #105	; 0x69
 8002af2:	33ff      	adds	r3, #255	; 0xff
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2207      	movs	r2, #7
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f003 fd09 	bl	8006540 <USB_EPStartXfer>

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	000a      	movs	r2, r1
 8002b42:	1cfb      	adds	r3, r7, #3
 8002b44:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b46:	1cfb      	adds	r3, r7, #3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	23c2      	movs	r3, #194	; 0xc2
 8002b52:	0059      	lsls	r1, r3, #1
 8002b54:	0013      	movs	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	18c3      	adds	r3, r0, r3
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	200b      	movs	r0, #11
 8002b78:	183b      	adds	r3, r7, r0
 8002b7a:	1c0a      	adds	r2, r1, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2207      	movs	r2, #7
 8002b84:	4013      	ands	r3, r2
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	0013      	movs	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2224      	movs	r2, #36	; 0x24
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f003 fcb4 	bl	8006540 <USB_EPStartXfer>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	000a      	movs	r2, r1
 8002bec:	1cfb      	adds	r3, r7, #3
 8002bee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf0:	1cfb      	adds	r3, r7, #3
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d901      	bls.n	8002c04 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e046      	b.n	8002c92 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c04:	1cfb      	adds	r3, r7, #3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0f      	bge.n	8002c2e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	1cfb      	adds	r3, r7, #3
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2207      	movs	r2, #7
 8002c14:	4013      	ands	r3, r2
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	0013      	movs	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	189b      	adds	r3, r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	705a      	strb	r2, [r3, #1]
 8002c2c:	e00d      	b.n	8002c4a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c2e:	1cfb      	adds	r3, r7, #3
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	0013      	movs	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	3369      	adds	r3, #105	; 0x69
 8002c3c:	33ff      	adds	r3, #255	; 0xff
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	1cfb      	adds	r3, r7, #3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2207      	movs	r2, #7
 8002c56:	4013      	ands	r3, r2
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	23aa      	movs	r3, #170	; 0xaa
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_EP_SetStall+0x8c>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e011      	b.n	8002c92 <HAL_PCD_EP_SetStall+0xb0>
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	23aa      	movs	r3, #170	; 0xaa
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	2101      	movs	r1, #1
 8002c76:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f004 fd95 	bl	80077b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	23aa      	movs	r3, #170	; 0xaa
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	1cfb      	adds	r3, r7, #3
 8002ca6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ca8:	1cfb      	adds	r3, r7, #3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	220f      	movs	r2, #15
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d901      	bls.n	8002cbc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e048      	b.n	8002d4e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cbc:	1cfb      	adds	r3, r7, #3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da0f      	bge.n	8002ce6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc6:	1cfb      	adds	r3, r7, #3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2207      	movs	r2, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	18d3      	adds	r3, r2, r3
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	705a      	strb	r2, [r3, #1]
 8002ce4:	e00f      	b.n	8002d06 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	1cfb      	adds	r3, r7, #3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2207      	movs	r2, #7
 8002cec:	401a      	ands	r2, r3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	3369      	adds	r3, #105	; 0x69
 8002cf8:	33ff      	adds	r3, #255	; 0xff
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0c:	1cfb      	adds	r3, r7, #3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2207      	movs	r2, #7
 8002d12:	4013      	ands	r3, r2
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	23aa      	movs	r3, #170	; 0xaa
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_PCD_EP_ClrStall+0x90>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e011      	b.n	8002d4e <HAL_PCD_EP_ClrStall+0xb4>
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	23aa      	movs	r3, #170	; 0xaa
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	2101      	movs	r1, #1
 8002d32:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f004 fd87 	bl	8007850 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	23aa      	movs	r3, #170	; 0xaa
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	2100      	movs	r1, #0
 8002d4a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b096      	sub	sp, #88	; 0x58
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d60:	f000 fbec 	bl	800353c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	204e      	movs	r0, #78	; 0x4e
 8002d6a:	183b      	adds	r3, r7, r0
 8002d6c:	2144      	movs	r1, #68	; 0x44
 8002d6e:	5a52      	ldrh	r2, [r2, r1]
 8002d70:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d72:	183b      	adds	r3, r7, r0
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	244d      	movs	r4, #77	; 0x4d
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	400a      	ands	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d000      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x34>
 8002d8a:	e18f      	b.n	80030ac <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d155      	bne.n	8002e42 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	200e      	movs	r0, #14
 8002da0:	183b      	adds	r3, r7, r0
 8002da2:	49bb      	ldr	r1, [pc, #748]	; (8003090 <PCD_EP_ISR_Handler+0x338>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	183a      	adds	r2, r7, r0
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	49b8      	ldr	r1, [pc, #736]	; (8003094 <PCD_EP_ISR_Handler+0x33c>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	b292      	uxth	r2, r2
 8002db6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3328      	adds	r3, #40	; 0x28
 8002dbc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2250      	movs	r2, #80	; 0x50
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	001a      	movs	r2, r3
 8002dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	18d2      	adds	r2, r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	18d3      	adds	r3, r2, r3
 8002dd8:	4aaf      	ldr	r2, [pc, #700]	; (8003098 <PCD_EP_ISR_Handler+0x340>)
 8002dda:	4694      	mov	ip, r2
 8002ddc:	4463      	add	r3, ip
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	059b      	lsls	r3, r3, #22
 8002de2:	0d9a      	lsrs	r2, r3, #22
 8002de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	18d2      	adds	r2, r2, r3
 8002df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2100      	movs	r1, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f006 fe30 	bl	8009a60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <PCD_EP_ISR_Handler+0xb8>
 8002e0c:	f000 fb96 	bl	800353c <PCD_EP_ISR_Handler+0x7e4>
 8002e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <PCD_EP_ISR_Handler+0xc4>
 8002e18:	f000 fb90 	bl	800353c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	5c9b      	ldrb	r3, [r3, r2]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	4252      	negs	r2, r2
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b291      	uxth	r1, r2
 8002e32:	224c      	movs	r2, #76	; 0x4c
 8002e34:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2224      	movs	r2, #36	; 0x24
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]
 8002e3e:	f000 fb7d 	bl	800353c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3369      	adds	r3, #105	; 0x69
 8002e46:	33ff      	adds	r3, #255	; 0xff
 8002e48:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	214a      	movs	r1, #74	; 0x4a
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d037      	beq.n	8002ed2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2250      	movs	r2, #80	; 0x50
 8002e68:	5a9b      	ldrh	r3, [r3, r2]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	18d2      	adds	r2, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	18d3      	adds	r3, r2, r3
 8002e7c:	4a87      	ldr	r2, [pc, #540]	; (800309c <PCD_EP_ISR_Handler+0x344>)
 8002e7e:	4694      	mov	ip, r2
 8002e80:	4463      	add	r3, ip
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	059b      	lsls	r3, r3, #22
 8002e86:	0d9a      	lsrs	r2, r3, #22
 8002e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	22ac      	movs	r2, #172	; 0xac
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	1899      	adds	r1, r3, r2
 8002e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f004 fe08 	bl	8007ab6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	2010      	movs	r0, #16
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	497b      	ldr	r1, [pc, #492]	; (80030a0 <PCD_EP_ISR_Handler+0x348>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	183a      	adds	r2, r7, r0
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f006 fd92 	bl	80099f4 <HAL_PCD_SetupStageCallback>
 8002ed0:	e334      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ed2:	234a      	movs	r3, #74	; 0x4a
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db00      	blt.n	8002ee0 <PCD_EP_ISR_Handler+0x188>
 8002ede:	e32d      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	201e      	movs	r0, #30
 8002eea:	183b      	adds	r3, r7, r0
 8002eec:	496c      	ldr	r1, [pc, #432]	; (80030a0 <PCD_EP_ISR_Handler+0x348>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	183a      	adds	r2, r7, r0
 8002ef8:	8812      	ldrh	r2, [r2, #0]
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	430a      	orrs	r2, r1
 8002efe:	b292      	uxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2250      	movs	r2, #80	; 0x50
 8002f08:	5a9b      	ldrh	r3, [r3, r2]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	18d2      	adds	r2, r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	4a5f      	ldr	r2, [pc, #380]	; (800309c <PCD_EP_ISR_Handler+0x344>)
 8002f1e:	4694      	mov	ip, r2
 8002f20:	4463      	add	r3, ip
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	059b      	lsls	r3, r3, #22
 8002f26:	0d9a      	lsrs	r2, r3, #22
 8002f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01a      	beq.n	8002f6a <PCD_EP_ISR_Handler+0x212>
 8002f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f004 fdb2 	bl	8007ab6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	18d2      	adds	r2, r2, r3
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2100      	movs	r1, #0
 8002f64:	0018      	movs	r0, r3
 8002f66:	f006 fd5a 	bl	8009a1e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	214a      	movs	r1, #74	; 0x4a
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d000      	beq.n	8002f84 <PCD_EP_ISR_Handler+0x22c>
 8002f82:	e2db      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	23c0      	movs	r3, #192	; 0xc0
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	23c0      	movs	r3, #192	; 0xc0
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d100      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x240>
 8002f96:	e2d1      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2250      	movs	r2, #80	; 0x50
 8002fa4:	5a9b      	ldrh	r3, [r3, r2]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	001a      	movs	r2, r3
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	; (800309c <PCD_EP_ISR_Handler+0x344>)
 8002fb4:	4694      	mov	ip, r2
 8002fb6:	4463      	add	r3, ip
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	059b      	lsls	r3, r3, #22
 8002fc2:	0d9b      	lsrs	r3, r3, #22
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd0:	d91a      	bls.n	8003008 <PCD_EP_ISR_Handler+0x2b0>
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	221f      	movs	r2, #31
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d102      	bne.n	8002fea <PCD_EP_ISR_Handler+0x292>
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <PCD_EP_ISR_Handler+0x33c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b29a      	uxth	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e023      	b.n	8003050 <PCD_EP_ISR_Handler+0x2f8>
 8003008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d108      	bne.n	8003022 <PCD_EP_ISR_Handler+0x2ca>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <PCD_EP_ISR_Handler+0x33c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	b29a      	uxth	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e016      	b.n	8003050 <PCD_EP_ISR_Handler+0x2f8>
 8003022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
 800302a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d002      	beq.n	800303a <PCD_EP_ISR_Handler+0x2e2>
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	3301      	adds	r3, #1
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	b29b      	uxth	r3, r3
 8003044:	029b      	lsls	r3, r3, #10
 8003046:	b29b      	uxth	r3, r3
 8003048:	4313      	orrs	r3, r2
 800304a:	b29a      	uxth	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29a      	uxth	r2, r3
 8003058:	2012      	movs	r0, #18
 800305a:	183b      	adds	r3, r7, r0
 800305c:	4911      	ldr	r1, [pc, #68]	; (80030a4 <PCD_EP_ISR_Handler+0x34c>)
 800305e:	400a      	ands	r2, r1
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	183b      	adds	r3, r7, r0
 8003064:	183a      	adds	r2, r7, r0
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0149      	lsls	r1, r1, #5
 800306c:	404a      	eors	r2, r1
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	183b      	adds	r3, r7, r0
 8003072:	183a      	adds	r2, r7, r0
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0189      	lsls	r1, r1, #6
 800307a:	404a      	eors	r2, r1
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	183a      	adds	r2, r7, r0
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <PCD_EP_ISR_Handler+0x350>)
 8003088:	430a      	orrs	r2, r1
 800308a:	b292      	uxth	r2, r2
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	e255      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
 8003090:	ffff8f0f 	.word	0xffff8f0f
 8003094:	ffff8000 	.word	0xffff8000
 8003098:	00000402 	.word	0x00000402
 800309c:	00000406 	.word	0x00000406
 80030a0:	00000f8f 	.word	0x00000f8f
 80030a4:	ffffbf8f 	.word	0xffffbf8f
 80030a8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	001a      	movs	r2, r3
 80030b2:	204d      	movs	r0, #77	; 0x4d
 80030b4:	183b      	adds	r3, r7, r0
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	18d2      	adds	r2, r2, r3
 80030bc:	214a      	movs	r1, #74	; 0x4a
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2200      	movs	r2, #0
 80030c8:	5e9b      	ldrsh	r3, [r3, r2]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db00      	blt.n	80030d0 <PCD_EP_ISR_Handler+0x378>
 80030ce:	e0fa      	b.n	80032c6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	001a      	movs	r2, r3
 80030d6:	183b      	adds	r3, r7, r0
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	18d3      	adds	r3, r2, r3
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	2448      	movs	r4, #72	; 0x48
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	49d1      	ldr	r1, [pc, #836]	; (800342c <PCD_EP_ISR_Handler+0x6d4>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	001a      	movs	r2, r3
 80030f2:	183b      	adds	r3, r7, r0
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	18d3      	adds	r3, r2, r3
 80030fa:	193a      	adds	r2, r7, r4
 80030fc:	8812      	ldrh	r2, [r2, #0]
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	430a      	orrs	r2, r1
 8003102:	b292      	uxth	r2, r2
 8003104:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003106:	183b      	adds	r3, r7, r0
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	0013      	movs	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	189b      	adds	r3, r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	3369      	adds	r3, #105	; 0x69
 8003114:	33ff      	adds	r3, #255	; 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	18d3      	adds	r3, r2, r3
 800311a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800311c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311e:	7b1b      	ldrb	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d125      	bne.n	8003170 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2250      	movs	r2, #80	; 0x50
 800312a:	5a9b      	ldrh	r3, [r3, r2]
 800312c:	b29b      	uxth	r3, r3
 800312e:	001a      	movs	r2, r3
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	18d2      	adds	r2, r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	4abc      	ldr	r2, [pc, #752]	; (8003430 <PCD_EP_ISR_Handler+0x6d8>)
 8003140:	4694      	mov	ip, r2
 8003142:	4463      	add	r3, ip
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	2450      	movs	r4, #80	; 0x50
 8003148:	193b      	adds	r3, r7, r4
 800314a:	0592      	lsls	r2, r2, #22
 800314c:	0d92      	lsrs	r2, r2, #22
 800314e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003150:	193b      	adds	r3, r7, r4
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d100      	bne.n	800315a <PCD_EP_ISR_Handler+0x402>
 8003158:	e08d      	b.n	8003276 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003160:	6959      	ldr	r1, [r3, #20]
 8003162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003164:	88da      	ldrh	r2, [r3, #6]
 8003166:	193b      	adds	r3, r7, r4
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	f004 fca4 	bl	8007ab6 <USB_ReadPMA>
 800316e:	e082      	b.n	8003276 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	78db      	ldrb	r3, [r3, #3]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d10c      	bne.n	8003192 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003178:	2350      	movs	r3, #80	; 0x50
 800317a:	18fc      	adds	r4, r7, r3
 800317c:	234a      	movs	r3, #74	; 0x4a
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f9ec 	bl	8003564 <HAL_PCD_EP_DB_Receive>
 800318c:	0003      	movs	r3, r0
 800318e:	8023      	strh	r3, [r4, #0]
 8003190:	e071      	b.n	8003276 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	001a      	movs	r2, r3
 8003198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	18d3      	adds	r3, r2, r3
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	2052      	movs	r0, #82	; 0x52
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	49a2      	ldr	r1, [pc, #648]	; (8003434 <PCD_EP_ISR_Handler+0x6dc>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	001a      	movs	r2, r3
 80031b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	18d3      	adds	r3, r2, r3
 80031bc:	183a      	adds	r2, r7, r0
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	499d      	ldr	r1, [pc, #628]	; (8003438 <PCD_EP_ISR_Handler+0x6e0>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	b292      	uxth	r2, r2
 80031c6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	18d3      	adds	r3, r2, r3
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	001a      	movs	r2, r3
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	01db      	lsls	r3, r3, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	d024      	beq.n	800322e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2250      	movs	r2, #80	; 0x50
 80031ea:	5a9b      	ldrh	r3, [r3, r2]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	001a      	movs	r2, r3
 80031f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	18d2      	adds	r2, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	4a8f      	ldr	r2, [pc, #572]	; (800343c <PCD_EP_ISR_Handler+0x6e4>)
 8003200:	4694      	mov	ip, r2
 8003202:	4463      	add	r3, ip
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	2450      	movs	r4, #80	; 0x50
 8003208:	193b      	adds	r3, r7, r4
 800320a:	0592      	lsls	r2, r2, #22
 800320c:	0d92      	lsrs	r2, r2, #22
 800320e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003210:	193b      	adds	r3, r7, r4
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d02e      	beq.n	8003276 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	6959      	ldr	r1, [r3, #20]
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	891a      	ldrh	r2, [r3, #8]
 8003224:	193b      	adds	r3, r7, r4
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f004 fc45 	bl	8007ab6 <USB_ReadPMA>
 800322c:	e023      	b.n	8003276 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2250      	movs	r2, #80	; 0x50
 8003234:	5a9b      	ldrh	r3, [r3, r2]
 8003236:	b29b      	uxth	r3, r3
 8003238:	001a      	movs	r2, r3
 800323a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	18d2      	adds	r2, r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	4a79      	ldr	r2, [pc, #484]	; (8003430 <PCD_EP_ISR_Handler+0x6d8>)
 800324a:	4694      	mov	ip, r2
 800324c:	4463      	add	r3, ip
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	2450      	movs	r4, #80	; 0x50
 8003252:	193b      	adds	r3, r7, r4
 8003254:	0592      	lsls	r2, r2, #22
 8003256:	0d92      	lsrs	r2, r2, #22
 8003258:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800325a:	193b      	adds	r3, r7, r4
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	6959      	ldr	r1, [r3, #20]
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	895a      	ldrh	r2, [r3, #10]
 800326e:	193b      	adds	r3, r7, r4
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	f004 fc20 	bl	8007ab6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	2150      	movs	r1, #80	; 0x50
 800327c:	187b      	adds	r3, r7, r1
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	187b      	adds	r3, r7, r1
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	18d2      	adds	r2, r2, r3
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <PCD_EP_ISR_Handler+0x550>
 800329c:	187b      	adds	r3, r7, r1
 800329e:	881a      	ldrh	r2, [r3, #0]
 80032a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0011      	movs	r1, r2
 80032b0:	0018      	movs	r0, r3
 80032b2:	f006 fbb4 	bl	8009a1e <HAL_PCD_DataOutStageCallback>
 80032b6:	e006      	b.n	80032c6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032be:	0011      	movs	r1, r2
 80032c0:	0018      	movs	r0, r3
 80032c2:	f003 f93d 	bl	8006540 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032c6:	244a      	movs	r4, #74	; 0x4a
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	4013      	ands	r3, r2
 80032d0:	d100      	bne.n	80032d4 <PCD_EP_ISR_Handler+0x57c>
 80032d2:	e133      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80032d4:	204d      	movs	r0, #77	; 0x4d
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	0013      	movs	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	001a      	movs	r2, r3
 80032f0:	183b      	adds	r3, r7, r0
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	2542      	movs	r5, #66	; 0x42
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	494f      	ldr	r1, [pc, #316]	; (8003440 <PCD_EP_ISR_Handler+0x6e8>)
 8003302:	400a      	ands	r2, r1
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	001a      	movs	r2, r3
 800330c:	183b      	adds	r3, r7, r0
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	18d3      	adds	r3, r2, r3
 8003314:	197a      	adds	r2, r7, r5
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	494a      	ldr	r1, [pc, #296]	; (8003444 <PCD_EP_ISR_Handler+0x6ec>)
 800331a:	430a      	orrs	r2, r1
 800331c:	b292      	uxth	r2, r2
 800331e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003322:	78db      	ldrb	r3, [r3, #3]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d000      	beq.n	800332a <PCD_EP_ISR_Handler+0x5d2>
 8003328:	e0af      	b.n	800348a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003332:	7b1b      	ldrb	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <PCD_EP_ISR_Handler+0x5e2>
 8003338:	e09f      	b.n	800347a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800333a:	193b      	adds	r3, r7, r4
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	4013      	ands	r3, r2
 8003342:	d046      	beq.n	80033d2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d125      	bne.n	8003398 <PCD_EP_ISR_Handler+0x640>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2250      	movs	r2, #80	; 0x50
 8003358:	5a9b      	ldrh	r3, [r3, r2]
 800335a:	b29b      	uxth	r3, r3
 800335c:	001a      	movs	r2, r3
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	189b      	adds	r3, r3, r2
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00da      	lsls	r2, r3, #3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	4a33      	ldr	r2, [pc, #204]	; (800343c <PCD_EP_ISR_Handler+0x6e4>)
 8003370:	4694      	mov	ip, r2
 8003372:	4463      	add	r3, ip
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	059b      	lsls	r3, r3, #22
 800337e:	0d9b      	lsrs	r3, r3, #22
 8003380:	b29a      	uxth	r2, r3
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <PCD_EP_ISR_Handler+0x6ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	b29a      	uxth	r2, r3
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e070      	b.n	800347a <PCD_EP_ISR_Handler+0x722>
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d16c      	bne.n	800347a <PCD_EP_ISR_Handler+0x722>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2250      	movs	r2, #80	; 0x50
 80033ac:	5a9b      	ldrh	r3, [r3, r2]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	001a      	movs	r2, r3
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	00da      	lsls	r2, r3, #3
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <PCD_EP_ISR_Handler+0x6e4>)
 80033c4:	4694      	mov	ip, r2
 80033c6:	4463      	add	r3, ip
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2200      	movs	r2, #0
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	e053      	b.n	800347a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d133      	bne.n	8003448 <PCD_EP_ISR_Handler+0x6f0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2250      	movs	r2, #80	; 0x50
 80033ec:	5a9b      	ldrh	r3, [r3, r2]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	001a      	movs	r2, r3
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	00da      	lsls	r2, r3, #3
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <PCD_EP_ISR_Handler+0x6d8>)
 8003404:	4694      	mov	ip, r2
 8003406:	4463      	add	r3, ip
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	059b      	lsls	r3, r3, #22
 8003412:	0d9b      	lsrs	r3, r3, #22
 8003414:	b29a      	uxth	r2, r3
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <PCD_EP_ISR_Handler+0x6ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	b29a      	uxth	r2, r3
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	e026      	b.n	800347a <PCD_EP_ISR_Handler+0x722>
 800342c:	00000f8f 	.word	0x00000f8f
 8003430:	00000406 	.word	0x00000406
 8003434:	ffff8f8f 	.word	0xffff8f8f
 8003438:	ffff80c0 	.word	0xffff80c0
 800343c:	00000402 	.word	0x00000402
 8003440:	ffff8f0f 	.word	0xffff8f0f
 8003444:	ffff8000 	.word	0xffff8000
 8003448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d114      	bne.n	800347a <PCD_EP_ISR_Handler+0x722>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2250      	movs	r2, #80	; 0x50
 8003456:	5a9b      	ldrh	r3, [r3, r2]
 8003458:	b29b      	uxth	r3, r3
 800345a:	001a      	movs	r2, r3
 800345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345e:	189b      	adds	r3, r3, r2
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00da      	lsls	r2, r3, #3
 8003468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <PCD_EP_ISR_Handler+0x804>)
 800346e:	4694      	mov	ip, r2
 8003470:	4463      	add	r3, ip
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	2200      	movs	r2, #0
 8003478:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0011      	movs	r1, r2
 8003482:	0018      	movs	r0, r3
 8003484:	f006 faec 	bl	8009a60 <HAL_PCD_DataInStageCallback>
 8003488:	e058      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800348a:	234a      	movs	r3, #74	; 0x4a
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4013      	ands	r3, r2
 8003496:	d149      	bne.n	800352c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2250      	movs	r2, #80	; 0x50
 800349e:	5a9b      	ldrh	r3, [r3, r2]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	001a      	movs	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	18d2      	adds	r2, r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <PCD_EP_ISR_Handler+0x808>)
 80034b4:	4694      	mov	ip, r2
 80034b6:	4463      	add	r3, ip
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	0592      	lsls	r2, r2, #22
 80034c0:	0d92      	lsrs	r2, r2, #22
 80034c2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d907      	bls.n	80034e0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	619a      	str	r2, [r3, #24]
 80034de:	e002      	b.n	80034e6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f006 fab2 	bl	8009a60 <HAL_PCD_DataInStageCallback>
 80034fc:	e01e      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	187b      	adds	r3, r7, r1
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	18d2      	adds	r2, r2, r3
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	187b      	adds	r3, r7, r1
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	18d2      	adds	r2, r2, r3
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f003 f80b 	bl	8006540 <USB_EPStartXfer>
 800352a:	e007      	b.n	800353c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800352c:	234a      	movs	r3, #74	; 0x4a
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 f930 	bl	800379c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2244      	movs	r2, #68	; 0x44
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21b      	sxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	da01      	bge.n	8003550 <PCD_EP_ISR_Handler+0x7f8>
 800354c:	f7ff fc0a 	bl	8002d64 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b016      	add	sp, #88	; 0x58
 8003558:	bdb0      	pop	{r4, r5, r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	00000406 	.word	0x00000406
 8003560:	00000402 	.word	0x00000402

08003564 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003572:	1dbb      	adds	r3, r7, #6
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	01db      	lsls	r3, r3, #7
 800357a:	4013      	ands	r3, r2
 800357c:	d100      	bne.n	8003580 <HAL_PCD_EP_DB_Receive+0x1c>
 800357e:	e07d      	b.n	800367c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2250      	movs	r2, #80	; 0x50
 8003586:	5a9b      	ldrh	r3, [r3, r2]
 8003588:	b29b      	uxth	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	18d2      	adds	r2, r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	18d3      	adds	r3, r2, r3
 800359a:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <HAL_PCD_EP_DB_Receive+0x220>)
 800359c:	4694      	mov	ip, r2
 800359e:	4463      	add	r3, ip
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	211a      	movs	r1, #26
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	0592      	lsls	r2, r2, #22
 80035a8:	0d92      	lsrs	r2, r2, #22
 80035aa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d307      	bcc.n	80035c8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	e002      	b.n	80035ce <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d121      	bne.n	800361a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	001a      	movs	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	18d3      	adds	r3, r2, r3
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	2018      	movs	r0, #24
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	4966      	ldr	r1, [pc, #408]	; (8003788 <HAL_PCD_EP_DB_Receive+0x224>)
 80035ee:	400a      	ands	r2, r1
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	183b      	adds	r3, r7, r0
 80035f4:	183a      	adds	r2, r7, r0
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	0189      	lsls	r1, r1, #6
 80035fc:	404a      	eors	r2, r1
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	001a      	movs	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	18d3      	adds	r3, r2, r3
 800360e:	183a      	adds	r2, r7, r0
 8003610:	8812      	ldrh	r2, [r2, #0]
 8003612:	495e      	ldr	r1, [pc, #376]	; (800378c <HAL_PCD_EP_DB_Receive+0x228>)
 8003614:	430a      	orrs	r2, r1
 8003616:	b292      	uxth	r2, r2
 8003618:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800361a:	1dbb      	adds	r3, r7, #6
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	4013      	ands	r3, r2
 8003622:	d01a      	beq.n	800365a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	001a      	movs	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29a      	uxth	r2, r3
 8003636:	2016      	movs	r0, #22
 8003638:	183b      	adds	r3, r7, r0
 800363a:	4955      	ldr	r1, [pc, #340]	; (8003790 <HAL_PCD_EP_DB_Receive+0x22c>)
 800363c:	400a      	ands	r2, r1
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	001a      	movs	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	183a      	adds	r2, r7, r0
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	4950      	ldr	r1, [pc, #320]	; (8003794 <HAL_PCD_EP_DB_Receive+0x230>)
 8003654:	430a      	orrs	r2, r1
 8003656:	b292      	uxth	r2, r2
 8003658:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800365a:	241a      	movs	r4, #26
 800365c:	193b      	adds	r3, r7, r4
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d100      	bne.n	8003666 <HAL_PCD_EP_DB_Receive+0x102>
 8003664:	e086      	b.n	8003774 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6959      	ldr	r1, [r3, #20]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	891a      	ldrh	r2, [r3, #8]
 8003672:	193b      	adds	r3, r7, r4
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	f004 fa1e 	bl	8007ab6 <USB_ReadPMA>
 800367a:	e07b      	b.n	8003774 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2250      	movs	r2, #80	; 0x50
 8003682:	5a9b      	ldrh	r3, [r3, r2]
 8003684:	b29b      	uxth	r3, r3
 8003686:	001a      	movs	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	18d2      	adds	r2, r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	4a40      	ldr	r2, [pc, #256]	; (8003798 <HAL_PCD_EP_DB_Receive+0x234>)
 8003698:	4694      	mov	ip, r2
 800369a:	4463      	add	r3, ip
 800369c:	881a      	ldrh	r2, [r3, #0]
 800369e:	211a      	movs	r1, #26
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	0592      	lsls	r2, r2, #22
 80036a4:	0d92      	lsrs	r2, r2, #22
 80036a6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d307      	bcc.n	80036c4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e002      	b.n	80036ca <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d121      	bne.n	8003716 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	001a      	movs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	201e      	movs	r0, #30
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	4927      	ldr	r1, [pc, #156]	; (8003788 <HAL_PCD_EP_DB_Receive+0x224>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	183a      	adds	r2, r7, r0
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	0189      	lsls	r1, r1, #6
 80036f8:	404a      	eors	r2, r1
 80036fa:	801a      	strh	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	001a      	movs	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	183a      	adds	r2, r7, r0
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	491f      	ldr	r1, [pc, #124]	; (800378c <HAL_PCD_EP_DB_Receive+0x228>)
 8003710:	430a      	orrs	r2, r1
 8003712:	b292      	uxth	r2, r2
 8003714:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003716:	1dbb      	adds	r3, r7, #6
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	4013      	ands	r3, r2
 800371e:	d11a      	bne.n	8003756 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	001a      	movs	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	18d3      	adds	r3, r2, r3
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	201c      	movs	r0, #28
 8003734:	183b      	adds	r3, r7, r0
 8003736:	4916      	ldr	r1, [pc, #88]	; (8003790 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003738:	400a      	ands	r2, r1
 800373a:	801a      	strh	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	001a      	movs	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	183a      	adds	r2, r7, r0
 800374c:	8812      	ldrh	r2, [r2, #0]
 800374e:	4911      	ldr	r1, [pc, #68]	; (8003794 <HAL_PCD_EP_DB_Receive+0x230>)
 8003750:	430a      	orrs	r2, r1
 8003752:	b292      	uxth	r2, r2
 8003754:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003756:	241a      	movs	r4, #26
 8003758:	193b      	adds	r3, r7, r4
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	895a      	ldrh	r2, [r3, #10]
 800376c:	193b      	adds	r3, r7, r4
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	f004 f9a1 	bl	8007ab6 <USB_ReadPMA>
    }
  }

  return count;
 8003774:	231a      	movs	r3, #26
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	881b      	ldrh	r3, [r3, #0]
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b009      	add	sp, #36	; 0x24
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	00000402 	.word	0x00000402
 8003788:	ffffbf8f 	.word	0xffffbf8f
 800378c:	ffff8080 	.word	0xffff8080
 8003790:	ffff8f8f 	.word	0xffff8f8f
 8003794:	ffff80c0 	.word	0xffff80c0
 8003798:	00000406 	.word	0x00000406

0800379c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0a4      	sub	sp, #144	; 0x90
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	1dbb      	adds	r3, r7, #6
 80037a8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	4013      	ands	r3, r2
 80037b2:	d100      	bne.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80037b4:	e1e4      	b.n	8003b80 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2250      	movs	r2, #80	; 0x50
 80037bc:	5a9b      	ldrh	r3, [r3, r2]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	001a      	movs	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	18d2      	adds	r2, r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	18d3      	adds	r3, r2, r3
 80037d0:	4ad0      	ldr	r2, [pc, #832]	; (8003b14 <HAL_PCD_EP_DB_Transmit+0x378>)
 80037d2:	4694      	mov	ip, r2
 80037d4:	4463      	add	r3, ip
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	2186      	movs	r1, #134	; 0x86
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	0592      	lsls	r2, r2, #22
 80037de:	0d92      	lsrs	r2, r2, #22
 80037e0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d907      	bls.n	80037fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	619a      	str	r2, [r3, #24]
 80037fc:	e002      	b.n	8003804 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d000      	beq.n	800380e <HAL_PCD_EP_DB_Transmit+0x72>
 800380c:	e0b5      	b.n	800397a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d125      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0xc6>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2250      	movs	r2, #80	; 0x50
 8003822:	5a9b      	ldrh	r3, [r3, r2]
 8003824:	b29b      	uxth	r3, r3
 8003826:	001a      	movs	r2, r3
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	189b      	adds	r3, r3, r2
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	00da      	lsls	r2, r3, #3
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	18d3      	adds	r3, r2, r3
 8003838:	4ab6      	ldr	r2, [pc, #728]	; (8003b14 <HAL_PCD_EP_DB_Transmit+0x378>)
 800383a:	4694      	mov	ip, r2
 800383c:	4463      	add	r3, ip
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	059b      	lsls	r3, r3, #22
 8003848:	0d9b      	lsrs	r3, r3, #22
 800384a:	b29a      	uxth	r2, r3
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4ab0      	ldr	r2, [pc, #704]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003858:	4313      	orrs	r3, r2
 800385a:	b29a      	uxth	r2, r3
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e01b      	b.n	800389a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d117      	bne.n	800389a <HAL_PCD_EP_DB_Transmit+0xfe>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2250      	movs	r2, #80	; 0x50
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	b29b      	uxth	r3, r3
 800387a:	001a      	movs	r2, r3
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	189b      	adds	r3, r3, r2
 8003880:	637b      	str	r3, [r7, #52]	; 0x34
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	00da      	lsls	r2, r3, #3
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	4aa1      	ldr	r2, [pc, #644]	; (8003b14 <HAL_PCD_EP_DB_Transmit+0x378>)
 800388e:	4694      	mov	ip, r2
 8003890:	4463      	add	r3, ip
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	2200      	movs	r2, #0
 8003898:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d125      	bne.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x158>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2250      	movs	r2, #80	; 0x50
 80038b4:	5a9b      	ldrh	r3, [r3, r2]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	001a      	movs	r2, r3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	18d3      	adds	r3, r2, r3
 80038ca:	4a94      	ldr	r2, [pc, #592]	; (8003b1c <HAL_PCD_EP_DB_Transmit+0x380>)
 80038cc:	4694      	mov	ip, r2
 80038ce:	4463      	add	r3, ip
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	059b      	lsls	r3, r3, #22
 80038da:	0d9b      	lsrs	r3, r3, #22
 80038dc:	b29a      	uxth	r2, r3
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4a8b      	ldr	r2, [pc, #556]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e018      	b.n	8003926 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d114      	bne.n	8003926 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2250      	movs	r2, #80	; 0x50
 8003902:	5a9b      	ldrh	r3, [r3, r2]
 8003904:	b29b      	uxth	r3, r3
 8003906:	001a      	movs	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	189b      	adds	r3, r3, r2
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	4a80      	ldr	r2, [pc, #512]	; (8003b1c <HAL_PCD_EP_DB_Transmit+0x380>)
 800391a:	4694      	mov	ip, r2
 800391c:	4463      	add	r3, ip
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2200      	movs	r2, #0
 8003924:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	0011      	movs	r1, r2
 800392e:	0018      	movs	r0, r3
 8003930:	f006 f896 	bl	8009a60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	4013      	ands	r3, r2
 800393e:	d100      	bne.n	8003942 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003940:	e309      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	001a      	movs	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29a      	uxth	r2, r3
 8003954:	2016      	movs	r0, #22
 8003956:	183b      	adds	r3, r7, r0
 8003958:	4971      	ldr	r1, [pc, #452]	; (8003b20 <HAL_PCD_EP_DB_Transmit+0x384>)
 800395a:	400a      	ands	r2, r1
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	001a      	movs	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	18d3      	adds	r3, r2, r3
 800396c:	183a      	adds	r2, r7, r0
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	496c      	ldr	r1, [pc, #432]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x388>)
 8003972:	430a      	orrs	r2, r1
 8003974:	b292      	uxth	r2, r2
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	e2ed      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	01db      	lsls	r3, r3, #7
 8003982:	4013      	ands	r3, r2
 8003984:	d01a      	beq.n	80039bc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	001a      	movs	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	18d3      	adds	r3, r2, r3
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29a      	uxth	r2, r3
 8003998:	208a      	movs	r0, #138	; 0x8a
 800399a:	183b      	adds	r3, r7, r0
 800399c:	4960      	ldr	r1, [pc, #384]	; (8003b20 <HAL_PCD_EP_DB_Transmit+0x384>)
 800399e:	400a      	ands	r2, r1
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	001a      	movs	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	18d3      	adds	r3, r2, r3
 80039b0:	183a      	adds	r2, r7, r0
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	495b      	ldr	r1, [pc, #364]	; (8003b24 <HAL_PCD_EP_DB_Transmit+0x388>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	b292      	uxth	r2, r2
 80039ba:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	5c9b      	ldrb	r3, [r3, r2]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d000      	beq.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80039c6:	e2c6      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	2186      	movs	r1, #134	; 0x86
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	18d2      	adds	r2, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d30c      	bcc.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	218c      	movs	r1, #140	; 0x8c
 80039f8:	187a      	adds	r2, r7, r1
 80039fa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e01a      	b.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003a14:	2386      	movs	r3, #134	; 0x86
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	228c      	movs	r2, #140	; 0x8c
 8003a1c:	18ba      	adds	r2, r7, r2
 8003a1e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]
 8003a28:	e00b      	b.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2224      	movs	r2, #36	; 0x24
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	228c      	movs	r2, #140	; 0x8c
 8003a38:	18ba      	adds	r2, r7, r2
 8003a3a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003a4a:	e06d      	b.n	8003b28 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2250      	movs	r2, #80	; 0x50
 8003a58:	5a9b      	ldrh	r3, [r3, r2]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	189b      	adds	r3, r3, r2
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00da      	lsls	r2, r3, #3
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003a70:	4694      	mov	ip, r2
 8003a72:	4463      	add	r3, ip
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	0d9b      	lsrs	r3, r3, #22
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	228c      	movs	r2, #140	; 0x8c
 8003a88:	18bb      	adds	r3, r7, r2
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8e:	d91a      	bls.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x32a>
 8003a90:	18bb      	adds	r3, r7, r2
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a98:	18bb      	adds	r3, r7, r2
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	221f      	movs	r2, #31
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e04f      	b.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003ac6:	238c      	movs	r3, #140	; 0x8c
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x346>
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	e041      	b.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003ae2:	228c      	movs	r2, #140	; 0x8c
 8003ae4:	18bb      	adds	r3, r7, r2
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	18bb      	adds	r3, r7, r2
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	4013      	ands	r3, r2
 8003af4:	d002      	beq.n	8003afc <HAL_PCD_EP_DB_Transmit+0x360>
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	3301      	adds	r3, #1
 8003afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	e028      	b.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003b14:	00000402 	.word	0x00000402
 8003b18:	ffff8000 	.word	0xffff8000
 8003b1c:	00000406 	.word	0x00000406
 8003b20:	ffff8f8f 	.word	0xffff8f8f
 8003b24:	ffffc080 	.word	0xffffc080
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11a      	bne.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2250      	movs	r2, #80	; 0x50
 8003b3c:	5a9b      	ldrh	r3, [r3, r2]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	001a      	movs	r2, r3
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	647b      	str	r3, [r7, #68]	; 0x44
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	00da      	lsls	r2, r3, #3
 8003b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	4adb      	ldr	r2, [pc, #876]	; (8003ec0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003b54:	4694      	mov	ip, r2
 8003b56:	4463      	add	r3, ip
 8003b58:	643b      	str	r3, [r7, #64]	; 0x40
 8003b5a:	238c      	movs	r3, #140	; 0x8c
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6959      	ldr	r1, [r3, #20]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	891a      	ldrh	r2, [r3, #8]
 8003b72:	238c      	movs	r3, #140	; 0x8c
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f003 ff53 	bl	8007a24 <USB_WritePMA>
 8003b7e:	e1ea      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2250      	movs	r2, #80	; 0x50
 8003b86:	5a9b      	ldrh	r3, [r3, r2]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	18d2      	adds	r2, r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	4aca      	ldr	r2, [pc, #808]	; (8003ec4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003b9c:	4694      	mov	ip, r2
 8003b9e:	4463      	add	r3, ip
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	2186      	movs	r1, #134	; 0x86
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	0592      	lsls	r2, r2, #22
 8003ba8:	0d92      	lsrs	r2, r2, #22
 8003baa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d307      	bcc.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e002      	b.n	8003bce <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d000      	beq.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x43c>
 8003bd6:	e0bb      	b.n	8003d50 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d125      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x490>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2250      	movs	r2, #80	; 0x50
 8003bec:	5a9b      	ldrh	r3, [r3, r2]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bf4:	189b      	adds	r3, r3, r2
 8003bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00da      	lsls	r2, r3, #3
 8003bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	4aaf      	ldr	r2, [pc, #700]	; (8003ec0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003c04:	4694      	mov	ip, r2
 8003c06:	4463      	add	r3, ip
 8003c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	059b      	lsls	r3, r3, #22
 8003c12:	0d9b      	lsrs	r3, r3, #22
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4aa9      	ldr	r2, [pc, #676]	; (8003ec8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e01b      	b.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d117      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	667b      	str	r3, [r7, #100]	; 0x64
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2250      	movs	r2, #80	; 0x50
 8003c40:	5a9b      	ldrh	r3, [r3, r2]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	001a      	movs	r2, r3
 8003c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00da      	lsls	r2, r3, #3
 8003c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	4a9a      	ldr	r2, [pc, #616]	; (8003ec0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003c58:	4694      	mov	ip, r2
 8003c5a:	4463      	add	r3, ip
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c60:	2200      	movs	r2, #0
 8003c62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	677b      	str	r3, [r7, #116]	; 0x74
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d12b      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0x52e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2250      	movs	r2, #80	; 0x50
 8003c7e:	5a9b      	ldrh	r3, [r3, r2]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	001a      	movs	r2, r3
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c92:	18d3      	adds	r3, r2, r3
 8003c94:	4a8b      	ldr	r2, [pc, #556]	; (8003ec4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003c96:	4694      	mov	ip, r2
 8003c98:	4463      	add	r3, ip
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	187a      	adds	r2, r7, r1
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	059b      	lsls	r3, r3, #22
 8003caa:	0d9b      	lsrs	r3, r3, #22
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4a82      	ldr	r2, [pc, #520]	; (8003ec8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e018      	b.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x560>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d114      	bne.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x560>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2250      	movs	r2, #80	; 0x50
 8003cd8:	5a9b      	ldrh	r3, [r3, r2]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	001a      	movs	r2, r3
 8003cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00da      	lsls	r2, r3, #3
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	4a75      	ldr	r2, [pc, #468]	; (8003ec4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003cf0:	4694      	mov	ip, r2
 8003cf2:	4463      	add	r3, ip
 8003cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8003cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f005 feab 	bl	8009a60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d0a:	1dbb      	adds	r3, r7, #6
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	01db      	lsls	r3, r3, #7
 8003d12:	4013      	ands	r3, r2
 8003d14:	d000      	beq.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x57c>
 8003d16:	e11e      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	001a      	movs	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	2088      	movs	r0, #136	; 0x88
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	4967      	ldr	r1, [pc, #412]	; (8003ecc <HAL_PCD_EP_DB_Transmit+0x730>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	001a      	movs	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	183a      	adds	r2, r7, r0
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	4962      	ldr	r1, [pc, #392]	; (8003ed0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	e102      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d50:	1dbb      	adds	r3, r7, #6
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	01db      	lsls	r3, r3, #7
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d11a      	bne.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	001a      	movs	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	204e      	movs	r0, #78	; 0x4e
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	4956      	ldr	r1, [pc, #344]	; (8003ecc <HAL_PCD_EP_DB_Transmit+0x730>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	18d3      	adds	r3, r2, r3
 8003d86:	183a      	adds	r2, r7, r0
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	4951      	ldr	r1, [pc, #324]	; (8003ed0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	b292      	uxth	r2, r2
 8003d90:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2224      	movs	r2, #36	; 0x24
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d000      	beq.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x602>
 8003d9c:	e0db      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	2186      	movs	r1, #134	; 0x86
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	18d2      	adds	r2, r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	18d2      	adds	r2, r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d30c      	bcc.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	218c      	movs	r1, #140	; 0x8c
 8003dce:	187a      	adds	r2, r7, r1
 8003dd0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	621a      	str	r2, [r3, #32]
 8003de0:	e01a      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003dea:	2386      	movs	r3, #134	; 0x86
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	228c      	movs	r2, #140	; 0x8c
 8003df2:	18ba      	adds	r2, r7, r2
 8003df4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2224      	movs	r2, #36	; 0x24
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]
 8003dfe:	e00b      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	228c      	movs	r2, #140	; 0x8c
 8003e06:	18ba      	adds	r2, r7, r2
 8003e08:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d000      	beq.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x68c>
 8003e26:	e06e      	b.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x76a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2250      	movs	r2, #80	; 0x50
 8003e34:	5a9b      	ldrh	r3, [r3, r2]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	001a      	movs	r2, r3
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00da      	lsls	r2, r3, #3
 8003e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003e4c:	4694      	mov	ip, r2
 8003e4e:	4463      	add	r3, ip
 8003e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	059b      	lsls	r3, r3, #22
 8003e5a:	0d9b      	lsrs	r3, r3, #22
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	228c      	movs	r2, #140	; 0x8c
 8003e64:	18bb      	adds	r3, r7, r2
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b3e      	cmp	r3, #62	; 0x3e
 8003e6a:	d91a      	bls.n	8003ea2 <HAL_PCD_EP_DB_Transmit+0x706>
 8003e6c:	18bb      	adds	r3, r7, r2
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e74:	18bb      	adds	r3, r7, r2
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	221f      	movs	r2, #31
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d102      	bne.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8003e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e80:	3b01      	subs	r3, #1
 8003e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	029b      	lsls	r3, r3, #10
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e9e:	801a      	strh	r2, [r3, #0]
 8003ea0:	e04d      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003ea2:	238c      	movs	r3, #140	; 0x8c
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d113      	bne.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x738>
 8003eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	e03f      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	00000402 	.word	0x00000402
 8003ec4:	00000406 	.word	0x00000406
 8003ec8:	ffff8000 	.word	0xffff8000
 8003ecc:	ffff8f8f 	.word	0xffff8f8f
 8003ed0:	ffffc080 	.word	0xffffc080
 8003ed4:	228c      	movs	r2, #140	; 0x8c
 8003ed6:	18bb      	adds	r3, r7, r2
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ede:	18bb      	adds	r3, r7, r2
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d002      	beq.n	8003eee <HAL_PCD_EP_DB_Transmit+0x752>
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eea:	3301      	adds	r3, #1
 8003eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e01b      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d117      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2250      	movs	r2, #80	; 0x50
 8003f14:	5a9b      	ldrh	r3, [r3, r2]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	001a      	movs	r2, r3
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	00da      	lsls	r2, r3, #3
 8003f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003f2c:	4694      	mov	ip, r2
 8003f2e:	4463      	add	r3, ip
 8003f30:	653b      	str	r3, [r7, #80]	; 0x50
 8003f32:	238c      	movs	r3, #140	; 0x8c
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6959      	ldr	r1, [r3, #20]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	895a      	ldrh	r2, [r3, #10]
 8003f4a:	238c      	movs	r3, #140	; 0x8c
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f003 fd67 	bl	8007a24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	18d3      	adds	r3, r2, r3
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	2014      	movs	r0, #20
 8003f6a:	183b      	adds	r3, r7, r0
 8003f6c:	4911      	ldr	r1, [pc, #68]	; (8003fb4 <HAL_PCD_EP_DB_Transmit+0x818>)
 8003f6e:	400a      	ands	r2, r1
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	183b      	adds	r3, r7, r0
 8003f74:	183a      	adds	r2, r7, r0
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	2110      	movs	r1, #16
 8003f7a:	404a      	eors	r2, r1
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	183a      	adds	r2, r7, r0
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	2120      	movs	r1, #32
 8003f86:	404a      	eors	r2, r1
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	001a      	movs	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	18d3      	adds	r3, r2, r3
 8003f98:	183a      	adds	r2, r7, r0
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b024      	add	sp, #144	; 0x90
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	00000406 	.word	0x00000406
 8003fb4:	ffff8fbf 	.word	0xffff8fbf
 8003fb8:	ffff8080 	.word	0xffff8080

08003fbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	0008      	movs	r0, r1
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	240a      	movs	r4, #10
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	1c02      	adds	r2, r0, #0
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	1c0a      	adds	r2, r1, #0
 8003fd8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fda:	0021      	movs	r1, r4
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	2280      	movs	r2, #128	; 0x80
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	2207      	movs	r2, #7
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	0013      	movs	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e00b      	b.n	800401c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004004:	230a      	movs	r3, #10
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	881a      	ldrh	r2, [r3, #0]
 800400a:	0013      	movs	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	189b      	adds	r3, r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	3369      	adds	r3, #105	; 0x69
 8004014:	33ff      	adds	r3, #255	; 0xff
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800401c:	2308      	movs	r3, #8
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	b29a      	uxth	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	80da      	strh	r2, [r3, #6]
 8004034:	e00b      	b.n	800404e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2201      	movs	r2, #1
 800403a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	b29a      	uxth	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b29a      	uxth	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b007      	add	sp, #28
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	23ba      	movs	r3, #186	; 0xba
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	2101      	movs	r1, #1
 800406e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	23b8      	movs	r3, #184	; 0xb8
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	2100      	movs	r1, #0
 8004078:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2254      	movs	r2, #84	; 0x54
 800407e:	5a9b      	ldrh	r3, [r3, r2]
 8004080:	b29b      	uxth	r3, r3
 8004082:	2201      	movs	r2, #1
 8004084:	4313      	orrs	r3, r2
 8004086:	b299      	uxth	r1, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2254      	movs	r2, #84	; 0x54
 800408c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2254      	movs	r2, #84	; 0x54
 8004092:	5a9b      	ldrh	r3, [r3, r2]
 8004094:	b29b      	uxth	r3, r3
 8004096:	2202      	movs	r2, #2
 8004098:	4313      	orrs	r3, r2
 800409a:	b299      	uxth	r1, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2254      	movs	r2, #84	; 0x54
 80040a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	000a      	movs	r2, r1
 80040b6:	1cfb      	adds	r3, r7, #3
 80040b8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f000 fbbf 	bl	8004856 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d8:	4bc9      	ldr	r3, [pc, #804]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	220c      	movs	r2, #12
 80040de:	4013      	ands	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e2:	4bc7      	ldr	r3, [pc, #796]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	025b      	lsls	r3, r3, #9
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	4013      	ands	r3, r2
 80040f6:	d100      	bne.n	80040fa <HAL_RCC_OscConfig+0x36>
 80040f8:	e07e      	b.n	80041f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d007      	beq.n	8004110 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x68>
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	025b      	lsls	r3, r3, #9
 800410c:	429a      	cmp	r2, r3
 800410e:	d10d      	bne.n	800412c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4bbb      	ldr	r3, [pc, #748]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	4013      	ands	r3, r2
 800411a:	d100      	bne.n	800411e <HAL_RCC_OscConfig+0x5a>
 800411c:	e06b      	b.n	80041f6 <HAL_RCC_OscConfig+0x132>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d167      	bne.n	80041f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f000 fb95 	bl	8004856 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	025b      	lsls	r3, r3, #9
 8004134:	429a      	cmp	r2, r3
 8004136:	d107      	bne.n	8004148 <HAL_RCC_OscConfig+0x84>
 8004138:	4bb1      	ldr	r3, [pc, #708]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4bb0      	ldr	r3, [pc, #704]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	0249      	lsls	r1, r1, #9
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e027      	b.n	8004198 <HAL_RCC_OscConfig+0xd4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	02db      	lsls	r3, r3, #11
 8004150:	429a      	cmp	r2, r3
 8004152:	d10e      	bne.n	8004172 <HAL_RCC_OscConfig+0xae>
 8004154:	4baa      	ldr	r3, [pc, #680]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4ba9      	ldr	r3, [pc, #676]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	02c9      	lsls	r1, r1, #11
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4ba7      	ldr	r3, [pc, #668]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4ba6      	ldr	r3, [pc, #664]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0249      	lsls	r1, r1, #9
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e012      	b.n	8004198 <HAL_RCC_OscConfig+0xd4>
 8004172:	4ba3      	ldr	r3, [pc, #652]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4ba2      	ldr	r3, [pc, #648]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004178:	49a2      	ldr	r1, [pc, #648]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800417a:	400a      	ands	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	4ba0      	ldr	r3, [pc, #640]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4b9c      	ldr	r3, [pc, #624]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b9b      	ldr	r3, [pc, #620]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004192:	499d      	ldr	r1, [pc, #628]	; (8004408 <HAL_RCC_OscConfig+0x344>)
 8004194:	400a      	ands	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd fb20 	bl	80017e4 <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a8:	e009      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041aa:	f7fd fb1b 	bl	80017e4 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d902      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	f000 fb4c 	bl	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041be:	4b90      	ldr	r3, [pc, #576]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	4013      	ands	r3, r2
 80041c8:	d0ef      	beq.n	80041aa <HAL_RCC_OscConfig+0xe6>
 80041ca:	e015      	b.n	80041f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fb0a 	bl	80017e4 <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d6:	f7fd fb05 	bl	80017e4 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	; 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e336      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e8:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x112>
 80041f4:	e000      	b.n	80041f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2202      	movs	r2, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	d100      	bne.n	8004204 <HAL_RCC_OscConfig+0x140>
 8004202:	e099      	b.n	8004338 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	2220      	movs	r2, #32
 800420e:	4013      	ands	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004212:	4b7b      	ldr	r3, [pc, #492]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b7a      	ldr	r3, [pc, #488]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004218:	2120      	movs	r1, #32
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	2220      	movs	r2, #32
 8004222:	4393      	bics	r3, r2
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d005      	beq.n	8004238 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d13e      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1ec>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13b      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004238:	4b71      	ldr	r3, [pc, #452]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	4013      	ands	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_RCC_OscConfig+0x188>
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e304      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a6e      	ldr	r2, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x348>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	4b68      	ldr	r3, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004262:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2209      	movs	r2, #9
 8004268:	4393      	bics	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	4b64      	ldr	r3, [pc, #400]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004274:	f000 fc42 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004278:	0001      	movs	r1, r0
 800427a:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	220f      	movs	r2, #15
 8004282:	4013      	ands	r3, r2
 8004284:	4a62      	ldr	r2, [pc, #392]	; (8004410 <HAL_RCC_OscConfig+0x34c>)
 8004286:	5cd3      	ldrb	r3, [r2, r3]
 8004288:	000a      	movs	r2, r1
 800428a:	40da      	lsrs	r2, r3
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x350>)
 800428e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x354>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2513      	movs	r5, #19
 8004296:	197c      	adds	r4, r7, r5
 8004298:	0018      	movs	r0, r3
 800429a:	f7fd fa5d 	bl	8001758 <HAL_InitTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042a2:	197b      	adds	r3, r7, r5
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d046      	beq.n	8004338 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80042aa:	197b      	adds	r3, r7, r5
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	e2d2      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d027      	beq.n	8004306 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2209      	movs	r2, #9
 80042bc:	4393      	bics	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd fa8c 	bl	80017e4 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d2:	f7fd fa87 	bl	80017e4 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e2b8      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e4:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2204      	movs	r2, #4
 80042ea:	4013      	ands	r3, r2
 80042ec:	d0f1      	beq.n	80042d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a46      	ldr	r2, [pc, #280]	; (800440c <HAL_RCC_OscConfig+0x348>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	e018      	b.n	8004338 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800430c:	2101      	movs	r1, #1
 800430e:	438a      	bics	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fd fa67 	bl	80017e4 <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fd fa62 	bl	80017e4 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e293      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800432e:	4b34      	ldr	r3, [pc, #208]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2204      	movs	r2, #4
 8004334:	4013      	ands	r3, r2
 8004336:	d1f1      	bne.n	800431c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2210      	movs	r2, #16
 800433e:	4013      	ands	r3, r2
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x280>
 8004342:	e0a2      	b.n	800448a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d140      	bne.n	80043cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4013      	ands	r3, r2
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x29e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e279      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4a2d      	ldr	r2, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x358>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004370:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	0a19      	lsrs	r1, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	061a      	lsls	r2, r3, #24
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	0b5b      	lsrs	r3, r3, #13
 8004390:	3301      	adds	r3, #1
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	0212      	lsls	r2, r2, #8
 8004396:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	210f      	movs	r1, #15
 80043a0:	400b      	ands	r3, r1
 80043a2:	491b      	ldr	r1, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x34c>)
 80043a4:	5ccb      	ldrb	r3, [r1, r3]
 80043a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x350>)
 80043aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80043ac:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RCC_OscConfig+0x354>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2513      	movs	r5, #19
 80043b2:	197c      	adds	r4, r7, r5
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7fd f9cf 	bl	8001758 <HAL_InitTick>
 80043ba:	0003      	movs	r3, r0
 80043bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043be:	197b      	adds	r3, r7, r5
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d061      	beq.n	800448a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80043c6:	197b      	adds	r3, r7, r5
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	e244      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d040      	beq.n	8004456 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_OscConfig+0x33c>)
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	0049      	lsls	r1, r1, #1
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fd f9ff 	bl	80017e4 <HAL_GetTick>
 80043e6:	0003      	movs	r3, r0
 80043e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ea:	e019      	b.n	8004420 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ec:	f7fd f9fa 	bl	80017e4 <HAL_GetTick>
 80043f0:	0002      	movs	r2, r0
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d912      	bls.n	8004420 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e22b      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	40021000 	.word	0x40021000
 8004404:	fffeffff 	.word	0xfffeffff
 8004408:	fffbffff 	.word	0xfffbffff
 800440c:	ffffe0ff 	.word	0xffffe0ff
 8004410:	0800aa04 	.word	0x0800aa04
 8004414:	20000108 	.word	0x20000108
 8004418:	2000010c 	.word	0x2000010c
 800441c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004420:	4bca      	ldr	r3, [pc, #808]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4013      	ands	r3, r2
 800442a:	d0df      	beq.n	80043ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442c:	4bc7      	ldr	r3, [pc, #796]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4ac7      	ldr	r2, [pc, #796]	; (8004750 <HAL_RCC_OscConfig+0x68c>)
 8004432:	4013      	ands	r3, r2
 8004434:	0019      	movs	r1, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443a:	4bc4      	ldr	r3, [pc, #784]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800443c:	430a      	orrs	r2, r1
 800443e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004440:	4bc2      	ldr	r3, [pc, #776]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	0a19      	lsrs	r1, r3, #8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	061a      	lsls	r2, r3, #24
 800444e:	4bbf      	ldr	r3, [pc, #764]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	e019      	b.n	800448a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004456:	4bbd      	ldr	r3, [pc, #756]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4bbc      	ldr	r3, [pc, #752]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800445c:	49bd      	ldr	r1, [pc, #756]	; (8004754 <HAL_RCC_OscConfig+0x690>)
 800445e:	400a      	ands	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fd f9bf 	bl	80017e4 <HAL_GetTick>
 8004466:	0003      	movs	r3, r0
 8004468:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800446c:	f7fd f9ba 	bl	80017e4 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1eb      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800447e:	4bb3      	ldr	r3, [pc, #716]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4013      	ands	r3, r2
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2208      	movs	r2, #8
 8004490:	4013      	ands	r3, r2
 8004492:	d036      	beq.n	8004502 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d019      	beq.n	80044d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449c:	4bab      	ldr	r3, [pc, #684]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800449e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a0:	4baa      	ldr	r3, [pc, #680]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80044a2:	2101      	movs	r1, #1
 80044a4:	430a      	orrs	r2, r1
 80044a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fd f99c 	bl	80017e4 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fd f997 	bl	80017e4 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1c8      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044c4:	4ba1      	ldr	r3, [pc, #644]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	d0f1      	beq.n	80044b2 <HAL_RCC_OscConfig+0x3ee>
 80044ce:	e018      	b.n	8004502 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d0:	4b9e      	ldr	r3, [pc, #632]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80044d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d4:	4b9d      	ldr	r3, [pc, #628]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	438a      	bics	r2, r1
 80044da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fd f982 	bl	80017e4 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fd f97d 	bl	80017e4 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e1ae      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f8:	4b94      	ldr	r3, [pc, #592]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	2202      	movs	r2, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d1f1      	bne.n	80044e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	d100      	bne.n	800450e <HAL_RCC_OscConfig+0x44a>
 800450c:	e0ae      	b.n	800466c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2023      	movs	r0, #35	; 0x23
 8004510:	183b      	adds	r3, r7, r0
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b8d      	ldr	r3, [pc, #564]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	055b      	lsls	r3, r3, #21
 800451e:	4013      	ands	r3, r2
 8004520:	d109      	bne.n	8004536 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	4b8a      	ldr	r3, [pc, #552]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	4b89      	ldr	r3, [pc, #548]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	0549      	lsls	r1, r1, #21
 800452c:	430a      	orrs	r2, r1
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004530:	183b      	adds	r3, r7, r0
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x694>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4013      	ands	r3, r2
 8004540:	d11a      	bne.n	8004578 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b85      	ldr	r3, [pc, #532]	; (8004758 <HAL_RCC_OscConfig+0x694>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b84      	ldr	r3, [pc, #528]	; (8004758 <HAL_RCC_OscConfig+0x694>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0049      	lsls	r1, r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004550:	f7fd f948 	bl	80017e4 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7fd f943 	bl	80017e4 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e174      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCC_OscConfig+0x694>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x4d0>
 8004584:	4b71      	ldr	r3, [pc, #452]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004588:	4b70      	ldr	r3, [pc, #448]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800458a:	2180      	movs	r1, #128	; 0x80
 800458c:	0049      	lsls	r1, r1, #1
 800458e:	430a      	orrs	r2, r1
 8004590:	651a      	str	r2, [r3, #80]	; 0x50
 8004592:	e031      	b.n	80045f8 <HAL_RCC_OscConfig+0x534>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_OscConfig+0x4f2>
 800459c:	4b6b      	ldr	r3, [pc, #428]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800459e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a0:	4b6a      	ldr	r3, [pc, #424]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045a2:	496c      	ldr	r1, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x690>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	651a      	str	r2, [r3, #80]	; 0x50
 80045a8:	4b68      	ldr	r3, [pc, #416]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ac:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045ae:	496b      	ldr	r1, [pc, #428]	; (800475c <HAL_RCC_OscConfig+0x698>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50
 80045b4:	e020      	b.n	80045f8 <HAL_RCC_OscConfig+0x534>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	23a0      	movs	r3, #160	; 0xa0
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10e      	bne.n	80045e0 <HAL_RCC_OscConfig+0x51c>
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	00c9      	lsls	r1, r1, #3
 80045cc:	430a      	orrs	r2, r1
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
 80045d0:	4b5e      	ldr	r3, [pc, #376]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d4:	4b5d      	ldr	r3, [pc, #372]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	0049      	lsls	r1, r1, #1
 80045da:	430a      	orrs	r2, r1
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0x534>
 80045e0:	4b5a      	ldr	r3, [pc, #360]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045e6:	495b      	ldr	r1, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x690>)
 80045e8:	400a      	ands	r2, r1
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50
 80045ec:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f0:	4b56      	ldr	r3, [pc, #344]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80045f2:	495a      	ldr	r1, [pc, #360]	; (800475c <HAL_RCC_OscConfig+0x698>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fd f8f0 	bl	80017e4 <HAL_GetTick>
 8004604:	0003      	movs	r3, r0
 8004606:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004608:	e009      	b.n	800461e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fd f8eb 	bl	80017e4 <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x69c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e11b      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d0ef      	beq.n	800460a <HAL_RCC_OscConfig+0x546>
 800462a:	e014      	b.n	8004656 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7fd f8da 	bl	80017e4 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004634:	e009      	b.n	800464a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd f8d5 	bl	80017e4 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	4a47      	ldr	r2, [pc, #284]	; (8004760 <HAL_RCC_OscConfig+0x69c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e105      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800464a:	4b40      	ldr	r3, [pc, #256]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800464c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d1ef      	bne.n	8004636 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004656:	2323      	movs	r3, #35	; 0x23
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004660:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004666:	493f      	ldr	r1, [pc, #252]	; (8004764 <HAL_RCC_OscConfig+0x6a0>)
 8004668:	400a      	ands	r2, r1
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2220      	movs	r2, #32
 8004672:	4013      	ands	r3, r2
 8004674:	d049      	beq.n	800470a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d026      	beq.n	80046cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004684:	2101      	movs	r1, #1
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800468c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004690:	2101      	movs	r1, #1
 8004692:	430a      	orrs	r2, r1
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
 8004696:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCC_OscConfig+0x6a4>)
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_RCC_OscConfig+0x6a4>)
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	0189      	lsls	r1, r1, #6
 80046a0:	430a      	orrs	r2, r1
 80046a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fd f89e 	bl	80017e4 <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ae:	f7fd f899 	bl	80017e4 <HAL_GetTick>
 80046b2:	0002      	movs	r2, r0
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0ca      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c0:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2202      	movs	r2, #2
 80046c6:	4013      	ands	r3, r2
 80046c8:	d0f1      	beq.n	80046ae <HAL_RCC_OscConfig+0x5ea>
 80046ca:	e01e      	b.n	800470a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_OscConfig+0x688>)
 80046d2:	2101      	movs	r1, #1
 80046d4:	438a      	bics	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <HAL_RCC_OscConfig+0x6a4>)
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <HAL_RCC_OscConfig+0x6a4>)
 80046de:	4923      	ldr	r1, [pc, #140]	; (800476c <HAL_RCC_OscConfig+0x6a8>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd f87e 	bl	80017e4 <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ee:	f7fd f879 	bl	80017e4 <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0aa      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2202      	movs	r2, #2
 8004706:	4013      	ands	r3, r2
 8004708:	d1f1      	bne.n	80046ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d100      	bne.n	8004714 <HAL_RCC_OscConfig+0x650>
 8004712:	e09f      	b.n	8004854 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d100      	bne.n	800471c <HAL_RCC_OscConfig+0x658>
 800471a:	e078      	b.n	800480e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	2b02      	cmp	r3, #2
 8004722:	d159      	bne.n	80047d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x688>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x688>)
 800472a:	4911      	ldr	r1, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x6ac>)
 800472c:	400a      	ands	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd f858 	bl	80017e4 <HAL_GetTick>
 8004734:	0003      	movs	r3, r0
 8004736:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd f853 	bl	80017e4 <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d915      	bls.n	8004774 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e084      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
 800474c:	40021000 	.word	0x40021000
 8004750:	ffff1fff 	.word	0xffff1fff
 8004754:	fffffeff 	.word	0xfffffeff
 8004758:	40007000 	.word	0x40007000
 800475c:	fffffbff 	.word	0xfffffbff
 8004760:	00001388 	.word	0x00001388
 8004764:	efffffff 	.word	0xefffffff
 8004768:	40010000 	.word	0x40010000
 800476c:	ffffdfff 	.word	0xffffdfff
 8004770:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	049b      	lsls	r3, r3, #18
 800477c:	4013      	ands	r3, r2
 800477e:	d1dc      	bne.n	800473a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004780:	4b37      	ldr	r3, [pc, #220]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_RCC_OscConfig+0x7a0>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	431a      	orrs	r2, r3
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 800479c:	430a      	orrs	r2, r1
 800479e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 80047a6:	2180      	movs	r1, #128	; 0x80
 80047a8:	0449      	lsls	r1, r1, #17
 80047aa:	430a      	orrs	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd f819 	bl	80017e4 <HAL_GetTick>
 80047b2:	0003      	movs	r3, r0
 80047b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fd f814 	bl	80017e4 <HAL_GetTick>
 80047bc:	0002      	movs	r2, r0
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e045      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047ca:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	049b      	lsls	r3, r3, #18
 80047d2:	4013      	ands	r3, r2
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x6f4>
 80047d6:	e03d      	b.n	8004854 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 80047de:	4922      	ldr	r1, [pc, #136]	; (8004868 <HAL_RCC_OscConfig+0x7a4>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fc fffe 	bl	80017e4 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fc fff9 	bl	80017e4 <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e02a      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	049b      	lsls	r3, r3, #18
 8004808:	4013      	ands	r3, r2
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x72a>
 800480c:	e022      	b.n	8004854 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e01d      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_RCC_OscConfig+0x79c>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	401a      	ands	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	429a      	cmp	r2, r3
 800482e:	d10f      	bne.n	8004850 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	23f0      	movs	r3, #240	; 0xf0
 8004834:	039b      	lsls	r3, r3, #14
 8004836:	401a      	ands	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	23c0      	movs	r3, #192	; 0xc0
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b00a      	add	sp, #40	; 0x28
 800485c:	bdb0      	pop	{r4, r5, r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	40021000 	.word	0x40021000
 8004864:	ff02ffff 	.word	0xff02ffff
 8004868:	feffffff 	.word	0xfeffffff

0800486c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e128      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b96      	ldr	r3, [pc, #600]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	4013      	ands	r3, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d91e      	bls.n	80048cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b93      	ldr	r3, [pc, #588]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4393      	bics	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	4b90      	ldr	r3, [pc, #576]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048a0:	f7fc ffa0 	bl	80017e4 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a8:	e009      	b.n	80048be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048aa:	f7fc ff9b 	bl	80017e4 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	4a8a      	ldr	r2, [pc, #552]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e109      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b87      	ldr	r3, [pc, #540]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1ee      	bne.n	80048aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2202      	movs	r2, #2
 80048d2:	4013      	ands	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d6:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	22f0      	movs	r2, #240	; 0xf0
 80048dc:	4393      	bics	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4b7f      	ldr	r3, [pc, #508]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	d100      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x8a>
 80048f4:	e089      	b.n	8004a0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048fe:	4b79      	ldr	r3, [pc, #484]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	4013      	ands	r3, r2
 8004908:	d120      	bne.n	800494c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0e1      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004916:	4b73      	ldr	r3, [pc, #460]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	049b      	lsls	r3, r3, #18
 800491e:	4013      	ands	r3, r2
 8004920:	d114      	bne.n	800494c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0d5      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492e:	4b6d      	ldr	r3, [pc, #436]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2204      	movs	r2, #4
 8004934:	4013      	ands	r3, r2
 8004936:	d109      	bne.n	800494c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0ca      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800493c:	4b69      	ldr	r3, [pc, #420]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0c2      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2203      	movs	r2, #3
 8004952:	4393      	bics	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b62      	ldr	r3, [pc, #392]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 800495c:	430a      	orrs	r2, r1
 800495e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004960:	f7fc ff40 	bl	80017e4 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d111      	bne.n	8004994 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004970:	e009      	b.n	8004986 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004972:	f7fc ff37 	bl	80017e4 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0a5      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004986:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	220c      	movs	r2, #12
 800498c:	4013      	ands	r3, r2
 800498e:	2b08      	cmp	r3, #8
 8004990:	d1ef      	bne.n	8004972 <HAL_RCC_ClockConfig+0x106>
 8004992:	e03a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d111      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	e009      	b.n	80049b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499e:	f7fc ff21 	bl	80017e4 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	4a4d      	ldr	r2, [pc, #308]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e08f      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b2:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	220c      	movs	r2, #12
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d1ef      	bne.n	800499e <HAL_RCC_ClockConfig+0x132>
 80049be:	e024      	b.n	8004a0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11b      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c8:	e009      	b.n	80049de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ca:	f7fc ff0b 	bl	80017e4 <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	4a42      	ldr	r2, [pc, #264]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e079      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	220c      	movs	r2, #12
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d1ef      	bne.n	80049ca <HAL_RCC_ClockConfig+0x15e>
 80049ea:	e00e      	b.n	8004a0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7fc fefa 	bl	80017e4 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	4a3a      	ldr	r2, [pc, #232]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e068      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a00:	4b38      	ldr	r3, [pc, #224]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	220c      	movs	r2, #12
 8004a06:	4013      	ands	r3, r2
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4013      	ands	r3, r2
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d21e      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4393      	bics	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a2a:	f7fc fedb 	bl	80017e4 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	e009      	b.n	8004a48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fc fed6 	bl	80017e4 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <HAL_RCC_ClockConfig+0x274>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e044      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_ClockConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d1ee      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x27c>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_RCC_ClockConfig+0x280>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a90:	430a      	orrs	r2, r1
 8004a92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a94:	f000 f832 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004a98:	0001      	movs	r1, r0
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_RCC_ClockConfig+0x278>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <HAL_RCC_ClockConfig+0x284>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	40da      	lsrs	r2, r3
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <HAL_RCC_ClockConfig+0x288>)
 8004aae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <HAL_RCC_ClockConfig+0x28c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	250b      	movs	r5, #11
 8004ab6:	197c      	adds	r4, r7, r5
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fc fe4d 	bl	8001758 <HAL_InitTick>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ac2:	197b      	adds	r3, r7, r5
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	40022000 	.word	0x40022000
 8004ae0:	00001388 	.word	0x00001388
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	fffff8ff 	.word	0xfffff8ff
 8004aec:	ffffc7ff 	.word	0xffffc7ff
 8004af0:	0800aa04 	.word	0x0800aa04
 8004af4:	20000108 	.word	0x20000108
 8004af8:	2000010c 	.word	0x2000010c

08004afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b5b0      	push	{r4, r5, r7, lr}
 8004afe:	b08e      	sub	sp, #56	; 0x38
 8004b00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b02:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d014      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x40>
 8004b12:	d900      	bls.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1a>
 8004b14:	e07b      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x112>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x24>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1e:	e076      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b20:	4b44      	ldr	r3, [pc, #272]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2210      	movs	r2, #16
 8004b26:	4013      	ands	r3, r2
 8004b28:	d002      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004b2a:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004b2e:	e07c      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004b30:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b34:	e079      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b3a:	e076      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	0c9a      	lsrs	r2, r3, #18
 8004b40:	230f      	movs	r3, #15
 8004b42:	401a      	ands	r2, r3
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x144>)
 8004b46:	5c9b      	ldrb	r3, [r3, r2]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	0d9a      	lsrs	r2, r3, #22
 8004b4e:	2303      	movs	r3, #3
 8004b50:	4013      	ands	r3, r2
 8004b52:	3301      	adds	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	025b      	lsls	r3, r3, #9
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d01a      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	f7fb fc69 	bl	8000448 <__aeabi_lmul>
 8004b76:	0002      	movs	r2, r0
 8004b78:	000b      	movs	r3, r1
 8004b7a:	0010      	movs	r0, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f7fb fc3d 	bl	8000408 <__aeabi_uldivmod>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	000b      	movs	r3, r1
 8004b92:	0013      	movs	r3, r2
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e037      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d01a      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	68b8      	ldr	r0, [r7, #8]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	f7fb fc49 	bl	8000448 <__aeabi_lmul>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	000b      	movs	r3, r1
 8004bba:	0010      	movs	r0, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f7fb fc1d 	bl	8000408 <__aeabi_uldivmod>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	000b      	movs	r3, r1
 8004bd2:	0013      	movs	r3, r2
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	e017      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	0018      	movs	r0, r3
 8004bdc:	2300      	movs	r3, #0
 8004bde:	0019      	movs	r1, r3
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004be2:	2300      	movs	r3, #0
 8004be4:	f7fb fc30 	bl	8000448 <__aeabi_lmul>
 8004be8:	0002      	movs	r2, r0
 8004bea:	000b      	movs	r3, r1
 8004bec:	0010      	movs	r0, r2
 8004bee:	0019      	movs	r1, r3
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	001c      	movs	r4, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	001d      	movs	r5, r3
 8004bf8:	0022      	movs	r2, r4
 8004bfa:	002b      	movs	r3, r5
 8004bfc:	f7fb fc04 	bl	8000408 <__aeabi_uldivmod>
 8004c00:	0002      	movs	r2, r0
 8004c02:	000b      	movs	r3, r1
 8004c04:	0013      	movs	r3, r2
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c0c:	e00d      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	0b5b      	lsrs	r3, r3, #13
 8004c14:	2207      	movs	r2, #7
 8004c16:	4013      	ands	r3, r2
 8004c18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	0212      	lsls	r2, r2, #8
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b00e      	add	sp, #56	; 0x38
 8004c32:	bdb0      	pop	{r4, r5, r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	003d0900 	.word	0x003d0900
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	0800aa14 	.word	0x0800aa14

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004c4c:	2017      	movs	r0, #23
 8004c4e:	183b      	adds	r3, r7, r0
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d100      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004c5e:	e0c7      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c60:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	055b      	lsls	r3, r3, #21
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b98      	ldr	r3, [pc, #608]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c70:	4b97      	ldr	r3, [pc, #604]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	0549      	lsls	r1, r1, #21
 8004c76:	430a      	orrs	r2, r1
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c7a:	183b      	adds	r3, r7, r0
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	4b94      	ldr	r3, [pc, #592]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d11a      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8c:	4b91      	ldr	r3, [pc, #580]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b90      	ldr	r3, [pc, #576]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0049      	lsls	r1, r1, #1
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fc fda3 	bl	80017e4 <HAL_GetTick>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fc fd9e 	bl	80017e4 <HAL_GetTick>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e107      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b87      	ldr	r3, [pc, #540]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004cc2:	4b83      	ldr	r3, [pc, #524]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	23c0      	movs	r3, #192	; 0xc0
 8004cc8:	039b      	lsls	r3, r3, #14
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	23c0      	movs	r3, #192	; 0xc0
 8004cd4:	039b      	lsls	r3, r3, #14
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d013      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	23c0      	movs	r3, #192	; 0xc0
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	23c0      	movs	r3, #192	; 0xc0
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10a      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cf0:	4b77      	ldr	r3, [pc, #476]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e0df      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d06:	4b72      	ldr	r3, [pc, #456]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0a:	23c0      	movs	r3, #192	; 0xc0
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03b      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	23c0      	movs	r3, #192	; 0xc0
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	4013      	ands	r3, r2
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d033      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d02e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d32:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d36:	4a68      	ldr	r2, [pc, #416]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d40:	4b63      	ldr	r3, [pc, #396]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	0309      	lsls	r1, r1, #12
 8004d46:	430a      	orrs	r2, r1
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4a:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d4e:	4b60      	ldr	r3, [pc, #384]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d50:	4962      	ldr	r1, [pc, #392]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004d52:	400a      	ands	r2, r1
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004d56:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d014      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fc fd3d 	bl	80017e4 <HAL_GetTick>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d6e:	e009      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fc fd38 	bl	80017e4 <HAL_GetTick>
 8004d74:	0002      	movs	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	4a59      	ldr	r2, [pc, #356]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e0a0      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d84:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0ef      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2220      	movs	r2, #32
 8004d96:	4013      	ands	r3, r2
 8004d98:	d01f      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	029b      	lsls	r3, r3, #10
 8004da2:	401a      	ands	r2, r3
 8004da4:	23c0      	movs	r3, #192	; 0xc0
 8004da6:	029b      	lsls	r3, r3, #10
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d10c      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004dac:	4b48      	ldr	r3, [pc, #288]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a4c      	ldr	r2, [pc, #304]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	23c0      	movs	r3, #192	; 0xc0
 8004dbc:	039b      	lsls	r3, r3, #14
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	23c0      	movs	r3, #192	; 0xc0
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dda:	2317      	movs	r3, #23
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de4:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dea:	493f      	ldr	r1, [pc, #252]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004dec:	400a      	ands	r2, r1
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	2203      	movs	r2, #3
 8004e00:	4393      	bics	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	220c      	movs	r2, #12
 8004e1e:	4393      	bics	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2204      	movs	r2, #4
 8004e32:	4013      	ands	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e36:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	4013      	ands	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e78:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e84:	430a      	orrs	r2, r1
 8004e86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2240      	movs	r2, #64	; 0x40
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	4013      	ands	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb4:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b006      	add	sp, #24
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	fffcffff 	.word	0xfffcffff
 8004edc:	fff7ffff 	.word	0xfff7ffff
 8004ee0:	00001388 	.word	0x00001388
 8004ee4:	ffcfffff 	.word	0xffcfffff
 8004ee8:	efffffff 	.word	0xefffffff
 8004eec:	fffff3ff 	.word	0xfffff3ff
 8004ef0:	ffffcfff 	.word	0xffffcfff
 8004ef4:	fbffffff 	.word	0xfbffffff
 8004ef8:	fff3ffff 	.word	0xfff3ffff

08004efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e032      	b.n	8004f74 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2239      	movs	r2, #57	; 0x39
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2238      	movs	r2, #56	; 0x38
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fc fae3 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2239      	movs	r2, #57	; 0x39
 8004f2e:	2102      	movs	r1, #2
 8004f30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	0010      	movs	r0, r2
 8004f3e:	f000 faeb 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	223e      	movs	r2, #62	; 0x3e
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	223a      	movs	r2, #58	; 0x3a
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	223b      	movs	r2, #59	; 0x3b
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	223c      	movs	r2, #60	; 0x3c
 8004f5e:	2101      	movs	r1, #1
 8004f60:	5499      	strb	r1, [r3, r2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	223d      	movs	r2, #61	; 0x3d
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2239      	movs	r2, #57	; 0x39
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2239      	movs	r2, #57	; 0x39
 8004f88:	5c9b      	ldrb	r3, [r3, r2]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e03b      	b.n	800500c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2239      	movs	r2, #57	; 0x39
 8004f98:	2102      	movs	r1, #2
 8004f9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	05db      	lsls	r3, r3, #23
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d00e      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0x5a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <HAL_TIM_Base_Start_IT+0x98>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0x5a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIM_Base_Start_IT+0x5a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a12      	ldr	r2, [pc, #72]	; (800501c <HAL_TIM_Base_Start_IT+0xa0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2207      	movs	r2, #7
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d010      	beq.n	800500a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	e007      	b.n	800500a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	0018      	movs	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40000400 	.word	0x40000400
 8005018:	40010800 	.word	0x40010800
 800501c:	40011400 	.word	0x40011400

08005020 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e032      	b.n	8005098 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2239      	movs	r2, #57	; 0x39
 8005036:	5c9b      	ldrb	r3, [r3, r2]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2238      	movs	r2, #56	; 0x38
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f829 	bl	80050a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2239      	movs	r2, #57	; 0x39
 8005052:	2102      	movs	r1, #2
 8005054:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	0019      	movs	r1, r3
 8005060:	0010      	movs	r0, r2
 8005062:	f000 fa59 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	223e      	movs	r2, #62	; 0x3e
 800506a:	2101      	movs	r1, #1
 800506c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	223a      	movs	r2, #58	; 0x3a
 8005072:	2101      	movs	r1, #1
 8005074:	5499      	strb	r1, [r3, r2]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	223b      	movs	r2, #59	; 0x3b
 800507a:	2101      	movs	r1, #1
 800507c:	5499      	strb	r1, [r3, r2]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	223c      	movs	r2, #60	; 0x3c
 8005082:	2101      	movs	r1, #1
 8005084:	5499      	strb	r1, [r3, r2]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	223d      	movs	r2, #61	; 0x3d
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2239      	movs	r2, #57	; 0x39
 8005092:	2101      	movs	r1, #1
 8005094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d124      	bne.n	8005110 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2202      	movs	r2, #2
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d11d      	bne.n	8005110 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2203      	movs	r2, #3
 80050da:	4252      	negs	r2, r2
 80050dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2203      	movs	r2, #3
 80050ec:	4013      	ands	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 f9f8 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e007      	b.n	800510a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 f9eb 	bl	80054d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	0018      	movs	r0, r3
 8005106:	f000 f9f7 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	2b04      	cmp	r3, #4
 800511c:	d125      	bne.n	800516a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2204      	movs	r2, #4
 8005126:	4013      	ands	r3, r2
 8005128:	2b04      	cmp	r3, #4
 800512a:	d11e      	bne.n	800516a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2205      	movs	r2, #5
 8005132:	4252      	negs	r2, r2
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	23c0      	movs	r3, #192	; 0xc0
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4013      	ands	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f9cb 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 8005152:	e007      	b.n	8005164 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 f9be 	bl	80054d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f9ca 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2208      	movs	r2, #8
 8005172:	4013      	ands	r3, r2
 8005174:	2b08      	cmp	r3, #8
 8005176:	d124      	bne.n	80051c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2208      	movs	r2, #8
 8005180:	4013      	ands	r3, r2
 8005182:	2b08      	cmp	r3, #8
 8005184:	d11d      	bne.n	80051c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2209      	movs	r2, #9
 800518c:	4252      	negs	r2, r2
 800518e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2204      	movs	r2, #4
 8005194:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	2203      	movs	r2, #3
 800519e:	4013      	ands	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f99f 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e007      	b.n	80051bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 f992 	bl	80054d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f99e 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2210      	movs	r2, #16
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d125      	bne.n	800521c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2210      	movs	r2, #16
 80051d8:	4013      	ands	r3, r2
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d11e      	bne.n	800521c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2211      	movs	r2, #17
 80051e4:	4252      	negs	r2, r2
 80051e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2208      	movs	r2, #8
 80051ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	23c0      	movs	r3, #192	; 0xc0
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f972 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 8005204:	e007      	b.n	8005216 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f000 f965 	bl	80054d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	0018      	movs	r0, r3
 8005212:	f000 f971 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2201      	movs	r2, #1
 8005224:	4013      	ands	r3, r2
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10f      	bne.n	800524a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2202      	movs	r2, #2
 800523e:	4252      	negs	r2, r2
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0018      	movs	r0, r3
 8005246:	f7fc f8a9 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2240      	movs	r2, #64	; 0x40
 8005252:	4013      	ands	r3, r2
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d10f      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	4013      	ands	r3, r2
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d108      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2241      	movs	r2, #65	; 0x41
 800526c:	4252      	negs	r2, r2
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	0018      	movs	r0, r3
 8005274:	f000 f948 	bl	8005508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005278:	46c0      	nop			; (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800528c:	2317      	movs	r3, #23
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2238      	movs	r2, #56	; 0x38
 8005298:	5c9b      	ldrb	r3, [r3, r2]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_OC_ConfigChannel+0x22>
 800529e:	2302      	movs	r3, #2
 80052a0:	e042      	b.n	8005328 <HAL_TIM_OC_ConfigChannel+0xa8>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2238      	movs	r2, #56	; 0x38
 80052a6:	2101      	movs	r1, #1
 80052a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d027      	beq.n	8005300 <HAL_TIM_OC_ConfigChannel+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d82c      	bhi.n	8005310 <HAL_TIM_OC_ConfigChannel+0x90>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d019      	beq.n	80052f0 <HAL_TIM_OC_ConfigChannel+0x70>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d826      	bhi.n	8005310 <HAL_TIM_OC_ConfigChannel+0x90>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_TIM_OC_ConfigChannel+0x50>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d008      	beq.n	80052e0 <HAL_TIM_OC_ConfigChannel+0x60>
 80052ce:	e01f      	b.n	8005310 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0011      	movs	r1, r2
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 f97b 	bl	80055d4 <TIM_OC1_SetConfig>
      break;
 80052de:	e01c      	b.n	800531a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f9af 	bl	800564c <TIM_OC2_SetConfig>
      break;
 80052ee:	e014      	b.n	800531a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f9e9 	bl	80056d0 <TIM_OC3_SetConfig>
      break;
 80052fe:	e00c      	b.n	800531a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	0011      	movs	r1, r2
 8005308:	0018      	movs	r0, r3
 800530a:	f000 fa21 	bl	8005750 <TIM_OC4_SetConfig>
      break;
 800530e:	e004      	b.n	800531a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005310:	2317      	movs	r3, #23
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
      break;
 8005318:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2238      	movs	r2, #56	; 0x38
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]

  return status;
 8005322:	2317      	movs	r3, #23
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	781b      	ldrb	r3, [r3, #0]
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b006      	add	sp, #24
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	230f      	movs	r3, #15
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2238      	movs	r2, #56	; 0x38
 8005346:	5c9b      	ldrb	r3, [r3, r2]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIM_ConfigClockSource+0x20>
 800534c:	2302      	movs	r3, #2
 800534e:	e0bc      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x19a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2238      	movs	r2, #56	; 0x38
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2239      	movs	r2, #57	; 0x39
 800535c:	2102      	movs	r1, #2
 800535e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2277      	movs	r2, #119	; 0x77
 800536c:	4393      	bics	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a58      	ldr	r2, [pc, #352]	; (80054d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005374:	4013      	ands	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2280      	movs	r2, #128	; 0x80
 8005386:	0192      	lsls	r2, r2, #6
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xde>
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	0192      	lsls	r2, r2, #6
 8005390:	4293      	cmp	r3, r2
 8005392:	d900      	bls.n	8005396 <HAL_TIM_ConfigClockSource+0x66>
 8005394:	e088      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 8005396:	2280      	movs	r2, #128	; 0x80
 8005398:	0152      	lsls	r2, r2, #5
 800539a:	4293      	cmp	r3, r2
 800539c:	d100      	bne.n	80053a0 <HAL_TIM_ConfigClockSource+0x70>
 800539e:	e088      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x182>
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	0152      	lsls	r2, r2, #5
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d900      	bls.n	80053aa <HAL_TIM_ConfigClockSource+0x7a>
 80053a8:	e07e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053aa:	2b70      	cmp	r3, #112	; 0x70
 80053ac:	d018      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xb0>
 80053ae:	d900      	bls.n	80053b2 <HAL_TIM_ConfigClockSource+0x82>
 80053b0:	e07a      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053b2:	2b60      	cmp	r3, #96	; 0x60
 80053b4:	d04f      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x126>
 80053b6:	d900      	bls.n	80053ba <HAL_TIM_ConfigClockSource+0x8a>
 80053b8:	e076      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053ba:	2b50      	cmp	r3, #80	; 0x50
 80053bc:	d03b      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x106>
 80053be:	d900      	bls.n	80053c2 <HAL_TIM_ConfigClockSource+0x92>
 80053c0:	e072      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d057      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x146>
 80053c6:	d900      	bls.n	80053ca <HAL_TIM_ConfigClockSource+0x9a>
 80053c8:	e06e      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053ca:	2b30      	cmp	r3, #48	; 0x30
 80053cc:	d063      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x166>
 80053ce:	d86b      	bhi.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d060      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x166>
 80053d4:	d868      	bhi.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d05d      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x166>
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d05b      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x166>
 80053de:	e063      	b.n	80054a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 fa6e 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2277      	movs	r2, #119	; 0x77
 8005400:	4313      	orrs	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e052      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f000 fa57 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	01c9      	lsls	r1, r1, #7
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
      break;
 8005434:	e03e      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	001a      	movs	r2, r3
 8005444:	f000 f9ca 	bl	80057dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2150      	movs	r1, #80	; 0x50
 800544e:	0018      	movs	r0, r3
 8005450:	f000 fa24 	bl	800589c <TIM_ITRx_SetConfig>
      break;
 8005454:	e02e      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	001a      	movs	r2, r3
 8005464:	f000 f9e8 	bl	8005838 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2160      	movs	r1, #96	; 0x60
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fa14 	bl	800589c <TIM_ITRx_SetConfig>
      break;
 8005474:	e01e      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	001a      	movs	r2, r3
 8005484:	f000 f9aa 	bl	80057dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2140      	movs	r1, #64	; 0x40
 800548e:	0018      	movs	r0, r3
 8005490:	f000 fa04 	bl	800589c <TIM_ITRx_SetConfig>
      break;
 8005494:	e00e      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	0019      	movs	r1, r3
 80054a0:	0010      	movs	r0, r2
 80054a2:	f000 f9fb 	bl	800589c <TIM_ITRx_SetConfig>
      break;
 80054a6:	e005      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80054a8:	230f      	movs	r3, #15
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
      break;
 80054b0:	e000      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80054b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2239      	movs	r2, #57	; 0x39
 80054b8:	2101      	movs	r1, #1
 80054ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2238      	movs	r2, #56	; 0x38
 80054c0:	2100      	movs	r1, #0
 80054c2:	5499      	strb	r1, [r3, r2]

  return status;
 80054c4:	230f      	movs	r3, #15
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	781b      	ldrb	r3, [r3, #0]
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	ffff00ff 	.word	0xffff00ff

080054d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	05db      	lsls	r3, r3, #23
 800552e:	429a      	cmp	r2, r3
 8005530:	d00b      	beq.n	800554a <TIM_Base_SetConfig+0x32>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <TIM_Base_SetConfig+0xac>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_Base_SetConfig+0x32>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <TIM_Base_SetConfig+0xb0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_Base_SetConfig+0x32>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_Base_SetConfig+0xb4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2270      	movs	r2, #112	; 0x70
 800554e:	4393      	bics	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	05db      	lsls	r3, r3, #23
 8005562:	429a      	cmp	r2, r3
 8005564:	d00b      	beq.n	800557e <TIM_Base_SetConfig+0x66>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_Base_SetConfig+0xac>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_Base_SetConfig+0x66>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_Base_SetConfig+0xb0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_Base_SetConfig+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_Base_SetConfig+0xb4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <TIM_Base_SetConfig+0xb8>)
 8005582:	4013      	ands	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	4393      	bics	r3, r2
 8005596:	001a      	movs	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	615a      	str	r2, [r3, #20]
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b004      	add	sp, #16
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40010800 	.word	0x40010800
 80055cc:	40011400 	.word	0x40011400
 80055d0:	fffffcff 	.word	0xfffffcff

080055d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4393      	bics	r3, r2
 80055e6:	001a      	movs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2270      	movs	r2, #112	; 0x70
 8005602:	4393      	bics	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2203      	movs	r2, #3
 800560a:	4393      	bics	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2202      	movs	r2, #2
 800561c:	4393      	bics	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b006      	add	sp, #24
 800564a:	bd80      	pop	{r7, pc}

0800564c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	2210      	movs	r2, #16
 800565c:	4393      	bics	r3, r2
 800565e:	001a      	movs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <TIM_OC2_SetConfig+0x7c>)
 800567a:	4013      	ands	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a12      	ldr	r2, [pc, #72]	; (80056cc <TIM_OC2_SetConfig+0x80>)
 8005682:	4013      	ands	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2220      	movs	r2, #32
 8005696:	4393      	bics	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b006      	add	sp, #24
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	ffff8fff 	.word	0xffff8fff
 80056cc:	fffffcff 	.word	0xfffffcff

080056d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <TIM_OC3_SetConfig+0x78>)
 80056e0:	401a      	ands	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2270      	movs	r2, #112	; 0x70
 80056fc:	4393      	bics	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2203      	movs	r2, #3
 8005704:	4393      	bics	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <TIM_OC3_SetConfig+0x7c>)
 8005716:	4013      	ands	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b006      	add	sp, #24
 8005746:	bd80      	pop	{r7, pc}
 8005748:	fffffeff 	.word	0xfffffeff
 800574c:	fffffdff 	.word	0xfffffdff

08005750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <TIM_OC4_SetConfig+0x7c>)
 8005760:	401a      	ands	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <TIM_OC4_SetConfig+0x80>)
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <TIM_OC4_SetConfig+0x84>)
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <TIM_OC4_SetConfig+0x88>)
 8005798:	4013      	ands	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b006      	add	sp, #24
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	ffffefff 	.word	0xffffefff
 80057d0:	ffff8fff 	.word	0xffff8fff
 80057d4:	fffffcff 	.word	0xfffffcff
 80057d8:	ffffdfff 	.word	0xffffdfff

080057dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	2201      	movs	r2, #1
 80057f4:	4393      	bics	r3, r2
 80057f6:	001a      	movs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	22f0      	movs	r2, #240	; 0xf0
 8005806:	4393      	bics	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	220a      	movs	r2, #10
 8005818:	4393      	bics	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	621a      	str	r2, [r3, #32]
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	b006      	add	sp, #24
 8005836:	bd80      	pop	{r7, pc}

08005838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	2210      	movs	r2, #16
 800584a:	4393      	bics	r3, r2
 800584c:	001a      	movs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <TIM_TI2_ConfigInputStage+0x60>)
 8005862:	4013      	ands	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	22a0      	movs	r2, #160	; 0xa0
 8005874:	4393      	bics	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b006      	add	sp, #24
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	ffff0fff 	.word	0xffff0fff

0800589c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2270      	movs	r2, #112	; 0x70
 80058b0:	4393      	bics	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	2207      	movs	r2, #7
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	609a      	str	r2, [r3, #8]
}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b004      	add	sp, #16
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <TIM_ETR_SetConfig+0x3c>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b006      	add	sp, #24
 800590a:	bd80      	pop	{r7, pc}
 800590c:	ffff00ff 	.word	0xffff00ff

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2238      	movs	r2, #56	; 0x38
 800591e:	5c9b      	ldrb	r3, [r3, r2]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e047      	b.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2238      	movs	r2, #56	; 0x38
 800592c:	2101      	movs	r1, #1
 800592e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2239      	movs	r2, #57	; 0x39
 8005934:	2102      	movs	r1, #2
 8005936:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2270      	movs	r2, #112	; 0x70
 800594c:	4393      	bics	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	05db      	lsls	r3, r3, #23
 800596a:	429a      	cmp	r2, r3
 800596c:	d00e      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	4393      	bics	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	4313      	orrs	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2239      	movs	r2, #57	; 0x39
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2238      	movs	r2, #56	; 0x38
 80059b2:	2100      	movs	r1, #0
 80059b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40010800 	.word	0x40010800
 80059c8:	40011400 	.word	0x40011400

080059cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2244      	movs	r2, #68	; 0x44
 80059d8:	2100      	movs	r1, #0
 80059da:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <USB_EnableGlobalInt+0x28>)
 80059de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	b299      	uxth	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2240      	movs	r2, #64	; 0x40
 80059e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b004      	add	sp, #16
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	0000bf80 	.word	0x0000bf80

080059f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <USB_DisableGlobalInt+0x30>)
 8005a02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2240      	movs	r2, #64	; 0x40
 8005a08:	5a9b      	ldrh	r3, [r3, r2]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	43d2      	mvns	r2, r2
 8005a12:	b292      	uxth	r2, r2
 8005a14:	4013      	ands	r3, r2
 8005a16:	b299      	uxth	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2240      	movs	r2, #64	; 0x40
 8005a1c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	0018      	movs	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	b004      	add	sp, #16
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	0000bf80 	.word	0x0000bf80

08005a2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	2004      	movs	r0, #4
 8005a38:	2410      	movs	r4, #16
 8005a3a:	1900      	adds	r0, r0, r4
 8005a3c:	2408      	movs	r4, #8
 8005a3e:	46a4      	mov	ip, r4
 8005a40:	44bc      	add	ip, r7
 8005a42:	4460      	add	r0, ip
 8005a44:	6001      	str	r1, [r0, #0]
 8005a46:	6042      	str	r2, [r0, #4]
 8005a48:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2240      	movs	r2, #64	; 0x40
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2240      	movs	r2, #64	; 0x40
 8005a56:	2100      	movs	r1, #0
 8005a58:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2244      	movs	r2, #68	; 0x44
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2250      	movs	r2, #80	; 0x50
 8005a66:	2100      	movs	r1, #0
 8005a68:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b003      	add	sp, #12
 8005a72:	bc90      	pop	{r4, r7}
 8005a74:	bc08      	pop	{r3}
 8005a76:	b004      	add	sp, #16
 8005a78:	4718      	bx	r3
	...

08005a7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b09c      	sub	sp, #112	; 0x70
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a86:	236f      	movs	r3, #111	; 0x6f
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	18d3      	adds	r3, r2, r3
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	236c      	movs	r3, #108	; 0x6c
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	49a3      	ldr	r1, [pc, #652]	; (8005d30 <USB_ActivateEndpoint+0x2b4>)
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	78db      	ldrb	r3, [r3, #3]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d017      	beq.n	8005ade <USB_ActivateEndpoint+0x62>
 8005aae:	dc28      	bgt.n	8005b02 <USB_ActivateEndpoint+0x86>
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d00e      	beq.n	8005ad2 <USB_ActivateEndpoint+0x56>
 8005ab4:	dc25      	bgt.n	8005b02 <USB_ActivateEndpoint+0x86>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <USB_ActivateEndpoint+0x44>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d018      	beq.n	8005af0 <USB_ActivateEndpoint+0x74>
 8005abe:	e020      	b.n	8005b02 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ac0:	226c      	movs	r2, #108	; 0x6c
 8005ac2:	18bb      	adds	r3, r7, r2
 8005ac4:	18ba      	adds	r2, r7, r2
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0089      	lsls	r1, r1, #2
 8005acc:	430a      	orrs	r2, r1
 8005ace:	801a      	strh	r2, [r3, #0]
      break;
 8005ad0:	e01c      	b.n	8005b0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005ad2:	226c      	movs	r2, #108	; 0x6c
 8005ad4:	18bb      	adds	r3, r7, r2
 8005ad6:	18ba      	adds	r2, r7, r2
 8005ad8:	8812      	ldrh	r2, [r2, #0]
 8005ada:	801a      	strh	r2, [r3, #0]
      break;
 8005adc:	e016      	b.n	8005b0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ade:	226c      	movs	r2, #108	; 0x6c
 8005ae0:	18bb      	adds	r3, r7, r2
 8005ae2:	18ba      	adds	r2, r7, r2
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	21c0      	movs	r1, #192	; 0xc0
 8005ae8:	00c9      	lsls	r1, r1, #3
 8005aea:	430a      	orrs	r2, r1
 8005aec:	801a      	strh	r2, [r3, #0]
      break;
 8005aee:	e00d      	b.n	8005b0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005af0:	226c      	movs	r2, #108	; 0x6c
 8005af2:	18bb      	adds	r3, r7, r2
 8005af4:	18ba      	adds	r2, r7, r2
 8005af6:	8812      	ldrh	r2, [r2, #0]
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	00c9      	lsls	r1, r1, #3
 8005afc:	430a      	orrs	r2, r1
 8005afe:	801a      	strh	r2, [r3, #0]
      break;
 8005b00:	e004      	b.n	8005b0c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005b02:	236f      	movs	r3, #111	; 0x6f
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
      break;
 8005b0a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	18d3      	adds	r3, r2, r3
 8005b16:	226c      	movs	r2, #108	; 0x6c
 8005b18:	18ba      	adds	r2, r7, r2
 8005b1a:	8812      	ldrh	r2, [r2, #0]
 8005b1c:	4985      	ldr	r1, [pc, #532]	; (8005d34 <USB_ActivateEndpoint+0x2b8>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	18d3      	adds	r3, r2, r3
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b21b      	sxth	r3, r3
 8005b34:	4a80      	ldr	r2, [pc, #512]	; (8005d38 <USB_ActivateEndpoint+0x2bc>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	b21a      	sxth	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b21b      	sxth	r3, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	b21a      	sxth	r2, r3
 8005b44:	2166      	movs	r1, #102	; 0x66
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	18d3      	adds	r3, r2, r3
 8005b54:	187a      	adds	r2, r7, r1
 8005b56:	8812      	ldrh	r2, [r2, #0]
 8005b58:	4976      	ldr	r1, [pc, #472]	; (8005d34 <USB_ActivateEndpoint+0x2b8>)
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	7b1b      	ldrb	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d000      	beq.n	8005b6a <USB_ActivateEndpoint+0xee>
 8005b68:	e178      	b.n	8005e5c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d100      	bne.n	8005b74 <USB_ActivateEndpoint+0xf8>
 8005b72:	e07a      	b.n	8005c6a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2250      	movs	r2, #80	; 0x50
 8005b7c:	5a9b      	ldrh	r3, [r3, r2]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	001a      	movs	r2, r3
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	189b      	adds	r3, r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	00da      	lsls	r2, r3, #3
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	18d3      	adds	r3, r2, r3
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	00d2      	lsls	r2, r2, #3
 8005b96:	4694      	mov	ip, r2
 8005b98:	4463      	add	r3, ip
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	88db      	ldrh	r3, [r3, #6]
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	18db      	adds	r3, r3, r3
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	18d2      	adds	r2, r2, r3
 8005bb6:	2112      	movs	r1, #18
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	8812      	ldrh	r2, [r2, #0]
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d016      	beq.n	8005bf6 <USB_ActivateEndpoint+0x17a>
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	18d3      	adds	r3, r2, r3
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	183b      	adds	r3, r7, r0
 8005bda:	4957      	ldr	r1, [pc, #348]	; (8005d38 <USB_ActivateEndpoint+0x2bc>)
 8005bdc:	400a      	ands	r2, r1
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	183a      	adds	r2, r7, r0
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	4953      	ldr	r1, [pc, #332]	; (8005d3c <USB_ActivateEndpoint+0x2c0>)
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	78db      	ldrb	r3, [r3, #3]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d01d      	beq.n	8005c3a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	200c      	movs	r0, #12
 8005c0e:	183b      	adds	r3, r7, r0
 8005c10:	494b      	ldr	r1, [pc, #300]	; (8005d40 <USB_ActivateEndpoint+0x2c4>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	183b      	adds	r3, r7, r0
 8005c18:	183a      	adds	r2, r7, r0
 8005c1a:	8812      	ldrh	r2, [r2, #0]
 8005c1c:	2120      	movs	r1, #32
 8005c1e:	404a      	eors	r2, r1
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	183a      	adds	r2, r7, r0
 8005c2e:	8812      	ldrh	r2, [r2, #0]
 8005c30:	4940      	ldr	r1, [pc, #256]	; (8005d34 <USB_ActivateEndpoint+0x2b8>)
 8005c32:	430a      	orrs	r2, r1
 8005c34:	b292      	uxth	r2, r2
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e2b4      	b.n	80061a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	18d3      	adds	r3, r2, r3
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	200e      	movs	r0, #14
 8005c4a:	183b      	adds	r3, r7, r0
 8005c4c:	493c      	ldr	r1, [pc, #240]	; (8005d40 <USB_ActivateEndpoint+0x2c4>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	18d3      	adds	r3, r2, r3
 8005c5c:	183a      	adds	r2, r7, r0
 8005c5e:	8812      	ldrh	r2, [r2, #0]
 8005c60:	4934      	ldr	r1, [pc, #208]	; (8005d34 <USB_ActivateEndpoint+0x2b8>)
 8005c62:	430a      	orrs	r2, r1
 8005c64:	b292      	uxth	r2, r2
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e29c      	b.n	80061a4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2250      	movs	r2, #80	; 0x50
 8005c72:	5a9b      	ldrh	r3, [r3, r2]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	001a      	movs	r2, r3
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	00da      	lsls	r2, r3, #3
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	18d3      	adds	r3, r2, r3
 8005c88:	4a2e      	ldr	r2, [pc, #184]	; (8005d44 <USB_ActivateEndpoint+0x2c8>)
 8005c8a:	4694      	mov	ip, r2
 8005c8c:	4463      	add	r3, ip
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	88db      	ldrh	r3, [r3, #6]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	18db      	adds	r3, r3, r3
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2250      	movs	r2, #80	; 0x50
 8005ca8:	5a9b      	ldrh	r3, [r3, r2]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	001a      	movs	r2, r3
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	189b      	adds	r3, r3, r2
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	00da      	lsls	r2, r3, #3
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <USB_ActivateEndpoint+0x2cc>)
 8005cc0:	4694      	mov	ip, r2
 8005cc2:	4463      	add	r3, ip
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	059b      	lsls	r3, r3, #22
 8005cce:	0d9b      	lsrs	r3, r3, #22
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b3e      	cmp	r3, #62	; 0x3e
 8005cdc:	d91a      	bls.n	8005d14 <USB_ActivateEndpoint+0x298>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	221f      	movs	r2, #31
 8005cec:	4013      	ands	r3, r2
 8005cee:	d102      	bne.n	8005cf6 <USB_ActivateEndpoint+0x27a>
 8005cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <USB_ActivateEndpoint+0x2d0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e034      	b.n	8005d7e <USB_ActivateEndpoint+0x302>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d119      	bne.n	8005d50 <USB_ActivateEndpoint+0x2d4>
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <USB_ActivateEndpoint+0x2d0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	e027      	b.n	8005d7e <USB_ActivateEndpoint+0x302>
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	ffff898f 	.word	0xffff898f
 8005d34:	ffff8080 	.word	0xffff8080
 8005d38:	ffff8f8f 	.word	0xffff8f8f
 8005d3c:	ffff80c0 	.word	0xffff80c0
 8005d40:	ffff8fbf 	.word	0xffff8fbf
 8005d44:	00000404 	.word	0x00000404
 8005d48:	00000406 	.word	0x00000406
 8005d4c:	ffff8000 	.word	0xffff8000
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d002      	beq.n	8005d68 <USB_ActivateEndpoint+0x2ec>
 8005d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d64:	3301      	adds	r3, #1
 8005d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	18d2      	adds	r2, r2, r3
 8005d88:	2122      	movs	r1, #34	; 0x22
 8005d8a:	187b      	adds	r3, r7, r1
 8005d8c:	8812      	ldrh	r2, [r2, #0]
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	881a      	ldrh	r2, [r3, #0]
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	01db      	lsls	r3, r3, #7
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d016      	beq.n	8005dca <USB_ActivateEndpoint+0x34e>
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	2020      	movs	r0, #32
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	49dd      	ldr	r1, [pc, #884]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 8005db0:	400a      	ands	r2, r1
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	183a      	adds	r2, r7, r0
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	49d9      	ldr	r1, [pc, #868]	; (8006128 <USB_ActivateEndpoint+0x6ac>)
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d125      	bne.n	8005e1e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	18d3      	adds	r3, r2, r3
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	201c      	movs	r0, #28
 8005de2:	183b      	adds	r3, r7, r0
 8005de4:	49d1      	ldr	r1, [pc, #836]	; (800612c <USB_ActivateEndpoint+0x6b0>)
 8005de6:	400a      	ands	r2, r1
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	183b      	adds	r3, r7, r0
 8005dec:	183a      	adds	r2, r7, r0
 8005dee:	8812      	ldrh	r2, [r2, #0]
 8005df0:	2180      	movs	r1, #128	; 0x80
 8005df2:	0149      	lsls	r1, r1, #5
 8005df4:	404a      	eors	r2, r1
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	183a      	adds	r2, r7, r0
 8005dfc:	8812      	ldrh	r2, [r2, #0]
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	0189      	lsls	r1, r1, #6
 8005e02:	404a      	eors	r2, r1
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	18d3      	adds	r3, r2, r3
 8005e10:	183a      	adds	r2, r7, r0
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	49c6      	ldr	r1, [pc, #792]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 8005e16:	430a      	orrs	r2, r1
 8005e18:	b292      	uxth	r2, r2
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e1c2      	b.n	80061a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	201e      	movs	r0, #30
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	49be      	ldr	r1, [pc, #760]	; (800612c <USB_ActivateEndpoint+0x6b0>)
 8005e32:	400a      	ands	r2, r1
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	183b      	adds	r3, r7, r0
 8005e38:	183a      	adds	r2, r7, r0
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	0189      	lsls	r1, r1, #6
 8005e40:	404a      	eors	r2, r1
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	18d3      	adds	r3, r2, r3
 8005e4e:	183a      	adds	r2, r7, r0
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	49b7      	ldr	r1, [pc, #732]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 8005e54:	430a      	orrs	r2, r1
 8005e56:	b292      	uxth	r2, r2
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e1a3      	b.n	80061a4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d117      	bne.n	8005e94 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	2062      	movs	r0, #98	; 0x62
 8005e74:	183b      	adds	r3, r7, r0
 8005e76:	49ab      	ldr	r1, [pc, #684]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 8005e78:	400a      	ands	r2, r1
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	183a      	adds	r2, r7, r0
 8005e88:	8812      	ldrh	r2, [r2, #0]
 8005e8a:	49aa      	ldr	r1, [pc, #680]	; (8006134 <USB_ActivateEndpoint+0x6b8>)
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e016      	b.n	8005ec2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	18d3      	adds	r3, r2, r3
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	2064      	movs	r0, #100	; 0x64
 8005ea4:	183b      	adds	r3, r7, r0
 8005ea6:	49a4      	ldr	r1, [pc, #656]	; (8006138 <USB_ActivateEndpoint+0x6bc>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	18d3      	adds	r3, r2, r3
 8005eb6:	183a      	adds	r2, r7, r0
 8005eb8:	8812      	ldrh	r2, [r2, #0]
 8005eba:	499d      	ldr	r1, [pc, #628]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2250      	movs	r2, #80	; 0x50
 8005eca:	5a9b      	ldrh	r3, [r3, r2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	001a      	movs	r2, r3
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed2:	189b      	adds	r3, r3, r2
 8005ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	00da      	lsls	r2, r3, #3
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	18d3      	adds	r3, r2, r3
 8005ee0:	2280      	movs	r2, #128	; 0x80
 8005ee2:	00d2      	lsls	r2, r2, #3
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	4463      	add	r3, ip
 8005ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	891b      	ldrh	r3, [r3, #8]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	18db      	adds	r3, r3, r3
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	657b      	str	r3, [r7, #84]	; 0x54
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2250      	movs	r2, #80	; 0x50
 8005f02:	5a9b      	ldrh	r3, [r3, r2]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	001a      	movs	r2, r3
 8005f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	18d3      	adds	r3, r2, r3
 8005f18:	4a88      	ldr	r2, [pc, #544]	; (800613c <USB_ActivateEndpoint+0x6c0>)
 8005f1a:	4694      	mov	ip, r2
 8005f1c:	4463      	add	r3, ip
 8005f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	895b      	ldrh	r3, [r3, #10]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	18db      	adds	r3, r3, r3
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d000      	beq.n	8005f3a <USB_ActivateEndpoint+0x4be>
 8005f38:	e087      	b.n	800604a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	18d2      	adds	r2, r2, r3
 8005f44:	2140      	movs	r1, #64	; 0x40
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	8812      	ldrh	r2, [r2, #0]
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	01db      	lsls	r3, r3, #7
 8005f54:	4013      	ands	r3, r2
 8005f56:	d016      	beq.n	8005f86 <USB_ActivateEndpoint+0x50a>
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	18d3      	adds	r3, r2, r3
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	203e      	movs	r0, #62	; 0x3e
 8005f68:	183b      	adds	r3, r7, r0
 8005f6a:	496e      	ldr	r1, [pc, #440]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 8005f6c:	400a      	ands	r2, r1
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	18d3      	adds	r3, r2, r3
 8005f7a:	183a      	adds	r2, r7, r0
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	496a      	ldr	r1, [pc, #424]	; (8006128 <USB_ActivateEndpoint+0x6ac>)
 8005f80:	430a      	orrs	r2, r1
 8005f82:	b292      	uxth	r2, r2
 8005f84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	18d2      	adds	r2, r2, r3
 8005f90:	213c      	movs	r1, #60	; 0x3c
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	8812      	ldrh	r2, [r2, #0]
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	2240      	movs	r2, #64	; 0x40
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d016      	beq.n	8005fd0 <USB_ActivateEndpoint+0x554>
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	18d3      	adds	r3, r2, r3
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	203a      	movs	r0, #58	; 0x3a
 8005fb2:	183b      	adds	r3, r7, r0
 8005fb4:	495b      	ldr	r1, [pc, #364]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	18d3      	adds	r3, r2, r3
 8005fc4:	183a      	adds	r2, r7, r0
 8005fc6:	8812      	ldrh	r2, [r2, #0]
 8005fc8:	495d      	ldr	r1, [pc, #372]	; (8006140 <USB_ActivateEndpoint+0x6c4>)
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	b292      	uxth	r2, r2
 8005fce:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	2038      	movs	r0, #56	; 0x38
 8005fe0:	183b      	adds	r3, r7, r0
 8005fe2:	4952      	ldr	r1, [pc, #328]	; (800612c <USB_ActivateEndpoint+0x6b0>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	183b      	adds	r3, r7, r0
 8005fea:	183a      	adds	r2, r7, r0
 8005fec:	8812      	ldrh	r2, [r2, #0]
 8005fee:	2180      	movs	r1, #128	; 0x80
 8005ff0:	0149      	lsls	r1, r1, #5
 8005ff2:	404a      	eors	r2, r1
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	183b      	adds	r3, r7, r0
 8005ff8:	183a      	adds	r2, r7, r0
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	0189      	lsls	r1, r1, #6
 8006000:	404a      	eors	r2, r1
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	183a      	adds	r2, r7, r0
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	4947      	ldr	r1, [pc, #284]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 8006014:	430a      	orrs	r2, r1
 8006016:	b292      	uxth	r2, r2
 8006018:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29a      	uxth	r2, r3
 8006028:	2036      	movs	r0, #54	; 0x36
 800602a:	183b      	adds	r3, r7, r0
 800602c:	4945      	ldr	r1, [pc, #276]	; (8006144 <USB_ActivateEndpoint+0x6c8>)
 800602e:	400a      	ands	r2, r1
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	183a      	adds	r2, r7, r0
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	493b      	ldr	r1, [pc, #236]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 8006042:	430a      	orrs	r2, r1
 8006044:	b292      	uxth	r2, r2
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e0ac      	b.n	80061a4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	18d2      	adds	r2, r2, r3
 8006054:	214e      	movs	r1, #78	; 0x4e
 8006056:	187b      	adds	r3, r7, r1
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	187b      	adds	r3, r7, r1
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4013      	ands	r3, r2
 8006066:	d016      	beq.n	8006096 <USB_ActivateEndpoint+0x61a>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	18d3      	adds	r3, r2, r3
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29a      	uxth	r2, r3
 8006076:	204c      	movs	r0, #76	; 0x4c
 8006078:	183b      	adds	r3, r7, r0
 800607a:	492a      	ldr	r1, [pc, #168]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 800607c:	400a      	ands	r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	18d3      	adds	r3, r2, r3
 800608a:	183a      	adds	r2, r7, r0
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	4926      	ldr	r1, [pc, #152]	; (8006128 <USB_ActivateEndpoint+0x6ac>)
 8006090:	430a      	orrs	r2, r1
 8006092:	b292      	uxth	r2, r2
 8006094:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	18d2      	adds	r2, r2, r3
 80060a0:	214a      	movs	r1, #74	; 0x4a
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	8812      	ldrh	r2, [r2, #0]
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	4013      	ands	r3, r2
 80060b0:	d016      	beq.n	80060e0 <USB_ActivateEndpoint+0x664>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	2048      	movs	r0, #72	; 0x48
 80060c2:	183b      	adds	r3, r7, r0
 80060c4:	4917      	ldr	r1, [pc, #92]	; (8006124 <USB_ActivateEndpoint+0x6a8>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	183a      	adds	r2, r7, r0
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	4919      	ldr	r1, [pc, #100]	; (8006140 <USB_ActivateEndpoint+0x6c4>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	b292      	uxth	r2, r2
 80060de:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	78db      	ldrb	r3, [r3, #3]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d02f      	beq.n	8006148 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	2044      	movs	r0, #68	; 0x44
 80060f8:	183b      	adds	r3, r7, r0
 80060fa:	4912      	ldr	r1, [pc, #72]	; (8006144 <USB_ActivateEndpoint+0x6c8>)
 80060fc:	400a      	ands	r2, r1
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	183b      	adds	r3, r7, r0
 8006102:	183a      	adds	r2, r7, r0
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	2120      	movs	r1, #32
 8006108:	404a      	eors	r2, r1
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	18d3      	adds	r3, r2, r3
 8006116:	183a      	adds	r2, r7, r0
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	4905      	ldr	r1, [pc, #20]	; (8006130 <USB_ActivateEndpoint+0x6b4>)
 800611c:	430a      	orrs	r2, r1
 800611e:	b292      	uxth	r2, r2
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e028      	b.n	8006176 <USB_ActivateEndpoint+0x6fa>
 8006124:	ffff8f8f 	.word	0xffff8f8f
 8006128:	ffffc080 	.word	0xffffc080
 800612c:	ffffbf8f 	.word	0xffffbf8f
 8006130:	ffff8080 	.word	0xffff8080
 8006134:	ffff8180 	.word	0xffff8180
 8006138:	ffff8e8f 	.word	0xffff8e8f
 800613c:	00000404 	.word	0x00000404
 8006140:	ffff80c0 	.word	0xffff80c0
 8006144:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	18d3      	adds	r3, r2, r3
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29a      	uxth	r2, r3
 8006156:	2046      	movs	r0, #70	; 0x46
 8006158:	183b      	adds	r3, r7, r0
 800615a:	4916      	ldr	r1, [pc, #88]	; (80061b4 <USB_ActivateEndpoint+0x738>)
 800615c:	400a      	ands	r2, r1
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	183a      	adds	r2, r7, r0
 800616c:	8812      	ldrh	r2, [r2, #0]
 800616e:	4912      	ldr	r1, [pc, #72]	; (80061b8 <USB_ActivateEndpoint+0x73c>)
 8006170:	430a      	orrs	r2, r1
 8006172:	b292      	uxth	r2, r2
 8006174:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29a      	uxth	r2, r3
 8006184:	2042      	movs	r0, #66	; 0x42
 8006186:	183b      	adds	r3, r7, r0
 8006188:	490c      	ldr	r1, [pc, #48]	; (80061bc <USB_ActivateEndpoint+0x740>)
 800618a:	400a      	ands	r2, r1
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	18d3      	adds	r3, r2, r3
 8006198:	183a      	adds	r2, r7, r0
 800619a:	8812      	ldrh	r2, [r2, #0]
 800619c:	4906      	ldr	r1, [pc, #24]	; (80061b8 <USB_ActivateEndpoint+0x73c>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	b292      	uxth	r2, r2
 80061a2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061a4:	236f      	movs	r3, #111	; 0x6f
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	781b      	ldrb	r3, [r3, #0]
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b01c      	add	sp, #112	; 0x70
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	ffff8fbf 	.word	0xffff8fbf
 80061b8:	ffff8080 	.word	0xffff8080
 80061bc:	ffffbf8f 	.word	0xffffbf8f

080061c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	7b1b      	ldrb	r3, [r3, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d000      	beq.n	80061d4 <USB_DeactivateEndpoint+0x14>
 80061d2:	e07e      	b.n	80062d2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d03c      	beq.n	8006256 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	18d2      	adds	r2, r2, r3
 80061e6:	210c      	movs	r1, #12
 80061e8:	187b      	adds	r3, r7, r1
 80061ea:	8812      	ldrh	r2, [r2, #0]
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	187b      	adds	r3, r7, r1
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	2240      	movs	r2, #64	; 0x40
 80061f4:	4013      	ands	r3, r2
 80061f6:	d016      	beq.n	8006226 <USB_DeactivateEndpoint+0x66>
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	18d3      	adds	r3, r2, r3
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29a      	uxth	r2, r3
 8006206:	200a      	movs	r0, #10
 8006208:	183b      	adds	r3, r7, r0
 800620a:	49c7      	ldr	r1, [pc, #796]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 800620c:	400a      	ands	r2, r1
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	18d3      	adds	r3, r2, r3
 800621a:	183a      	adds	r2, r7, r0
 800621c:	8812      	ldrh	r2, [r2, #0]
 800621e:	49c3      	ldr	r1, [pc, #780]	; (800652c <USB_DeactivateEndpoint+0x36c>)
 8006220:	430a      	orrs	r2, r1
 8006222:	b292      	uxth	r2, r2
 8006224:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	18d3      	adds	r3, r2, r3
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	2008      	movs	r0, #8
 8006236:	183b      	adds	r3, r7, r0
 8006238:	49bd      	ldr	r1, [pc, #756]	; (8006530 <USB_DeactivateEndpoint+0x370>)
 800623a:	400a      	ands	r2, r1
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	18d3      	adds	r3, r2, r3
 8006248:	183a      	adds	r2, r7, r0
 800624a:	8812      	ldrh	r2, [r2, #0]
 800624c:	49b9      	ldr	r1, [pc, #740]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 800624e:	430a      	orrs	r2, r1
 8006250:	b292      	uxth	r2, r2
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e163      	b.n	800651e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	18d2      	adds	r2, r2, r3
 8006260:	2112      	movs	r1, #18
 8006262:	187b      	adds	r3, r7, r1
 8006264:	8812      	ldrh	r2, [r2, #0]
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	187b      	adds	r3, r7, r1
 800626a:	881a      	ldrh	r2, [r3, #0]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	01db      	lsls	r3, r3, #7
 8006270:	4013      	ands	r3, r2
 8006272:	d016      	beq.n	80062a2 <USB_DeactivateEndpoint+0xe2>
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	18d3      	adds	r3, r2, r3
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	2010      	movs	r0, #16
 8006284:	183b      	adds	r3, r7, r0
 8006286:	49a8      	ldr	r1, [pc, #672]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 8006288:	400a      	ands	r2, r1
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	18d3      	adds	r3, r2, r3
 8006296:	183a      	adds	r2, r7, r0
 8006298:	8812      	ldrh	r2, [r2, #0]
 800629a:	49a7      	ldr	r1, [pc, #668]	; (8006538 <USB_DeactivateEndpoint+0x378>)
 800629c:	430a      	orrs	r2, r1
 800629e:	b292      	uxth	r2, r2
 80062a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	18d3      	adds	r3, r2, r3
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	200e      	movs	r0, #14
 80062b2:	183b      	adds	r3, r7, r0
 80062b4:	49a1      	ldr	r1, [pc, #644]	; (800653c <USB_DeactivateEndpoint+0x37c>)
 80062b6:	400a      	ands	r2, r1
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	18d3      	adds	r3, r2, r3
 80062c4:	183a      	adds	r2, r7, r0
 80062c6:	8812      	ldrh	r2, [r2, #0]
 80062c8:	499a      	ldr	r1, [pc, #616]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 80062ca:	430a      	orrs	r2, r1
 80062cc:	b292      	uxth	r2, r2
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e125      	b.n	800651e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d000      	beq.n	80062dc <USB_DeactivateEndpoint+0x11c>
 80062da:	e090      	b.n	80063fe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	18d2      	adds	r2, r2, r3
 80062e6:	2120      	movs	r1, #32
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	01db      	lsls	r3, r3, #7
 80062f6:	4013      	ands	r3, r2
 80062f8:	d016      	beq.n	8006328 <USB_DeactivateEndpoint+0x168>
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	201e      	movs	r0, #30
 800630a:	183b      	adds	r3, r7, r0
 800630c:	4986      	ldr	r1, [pc, #536]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 800630e:	400a      	ands	r2, r1
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	18d3      	adds	r3, r2, r3
 800631c:	183a      	adds	r2, r7, r0
 800631e:	8812      	ldrh	r2, [r2, #0]
 8006320:	4985      	ldr	r1, [pc, #532]	; (8006538 <USB_DeactivateEndpoint+0x378>)
 8006322:	430a      	orrs	r2, r1
 8006324:	b292      	uxth	r2, r2
 8006326:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	18d2      	adds	r2, r2, r3
 8006332:	211c      	movs	r1, #28
 8006334:	187b      	adds	r3, r7, r1
 8006336:	8812      	ldrh	r2, [r2, #0]
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	187b      	adds	r3, r7, r1
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	4013      	ands	r3, r2
 8006342:	d016      	beq.n	8006372 <USB_DeactivateEndpoint+0x1b2>
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	18d3      	adds	r3, r2, r3
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29a      	uxth	r2, r3
 8006352:	201a      	movs	r0, #26
 8006354:	183b      	adds	r3, r7, r0
 8006356:	4974      	ldr	r1, [pc, #464]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 8006358:	400a      	ands	r2, r1
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	18d3      	adds	r3, r2, r3
 8006366:	183a      	adds	r2, r7, r0
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	4970      	ldr	r1, [pc, #448]	; (800652c <USB_DeactivateEndpoint+0x36c>)
 800636c:	430a      	orrs	r2, r1
 800636e:	b292      	uxth	r2, r2
 8006370:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	18d3      	adds	r3, r2, r3
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29a      	uxth	r2, r3
 8006380:	2018      	movs	r0, #24
 8006382:	183b      	adds	r3, r7, r0
 8006384:	4968      	ldr	r1, [pc, #416]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 8006386:	400a      	ands	r2, r1
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	18d3      	adds	r3, r2, r3
 8006394:	183a      	adds	r2, r7, r0
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	4964      	ldr	r1, [pc, #400]	; (800652c <USB_DeactivateEndpoint+0x36c>)
 800639a:	430a      	orrs	r2, r1
 800639c:	b292      	uxth	r2, r2
 800639e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	18d3      	adds	r3, r2, r3
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	2016      	movs	r0, #22
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	4962      	ldr	r1, [pc, #392]	; (800653c <USB_DeactivateEndpoint+0x37c>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	801a      	strh	r2, [r3, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	18d3      	adds	r3, r2, r3
 80063c2:	183a      	adds	r2, r7, r0
 80063c4:	8812      	ldrh	r2, [r2, #0]
 80063c6:	495b      	ldr	r1, [pc, #364]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 80063c8:	430a      	orrs	r2, r1
 80063ca:	b292      	uxth	r2, r2
 80063cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	18d3      	adds	r3, r2, r3
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	2014      	movs	r0, #20
 80063de:	183b      	adds	r3, r7, r0
 80063e0:	4953      	ldr	r1, [pc, #332]	; (8006530 <USB_DeactivateEndpoint+0x370>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	18d3      	adds	r3, r2, r3
 80063f0:	183a      	adds	r2, r7, r0
 80063f2:	8812      	ldrh	r2, [r2, #0]
 80063f4:	494f      	ldr	r1, [pc, #316]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 80063f6:	430a      	orrs	r2, r1
 80063f8:	b292      	uxth	r2, r2
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	e08f      	b.n	800651e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	18d2      	adds	r2, r2, r3
 8006408:	212e      	movs	r1, #46	; 0x2e
 800640a:	187b      	adds	r3, r7, r1
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	187b      	adds	r3, r7, r1
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	01db      	lsls	r3, r3, #7
 8006418:	4013      	ands	r3, r2
 800641a:	d016      	beq.n	800644a <USB_DeactivateEndpoint+0x28a>
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29a      	uxth	r2, r3
 800642a:	202c      	movs	r0, #44	; 0x2c
 800642c:	183b      	adds	r3, r7, r0
 800642e:	493e      	ldr	r1, [pc, #248]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 8006430:	400a      	ands	r2, r1
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	18d3      	adds	r3, r2, r3
 800643e:	183a      	adds	r2, r7, r0
 8006440:	8812      	ldrh	r2, [r2, #0]
 8006442:	493d      	ldr	r1, [pc, #244]	; (8006538 <USB_DeactivateEndpoint+0x378>)
 8006444:	430a      	orrs	r2, r1
 8006446:	b292      	uxth	r2, r2
 8006448:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	18d2      	adds	r2, r2, r3
 8006454:	212a      	movs	r1, #42	; 0x2a
 8006456:	187b      	adds	r3, r7, r1
 8006458:	8812      	ldrh	r2, [r2, #0]
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	187b      	adds	r3, r7, r1
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	2240      	movs	r2, #64	; 0x40
 8006462:	4013      	ands	r3, r2
 8006464:	d016      	beq.n	8006494 <USB_DeactivateEndpoint+0x2d4>
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	18d3      	adds	r3, r2, r3
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29a      	uxth	r2, r3
 8006474:	2028      	movs	r0, #40	; 0x28
 8006476:	183b      	adds	r3, r7, r0
 8006478:	492b      	ldr	r1, [pc, #172]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 800647a:	400a      	ands	r2, r1
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	18d3      	adds	r3, r2, r3
 8006488:	183a      	adds	r2, r7, r0
 800648a:	8812      	ldrh	r2, [r2, #0]
 800648c:	4927      	ldr	r1, [pc, #156]	; (800652c <USB_DeactivateEndpoint+0x36c>)
 800648e:	430a      	orrs	r2, r1
 8006490:	b292      	uxth	r2, r2
 8006492:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	18d3      	adds	r3, r2, r3
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	2026      	movs	r0, #38	; 0x26
 80064a4:	183b      	adds	r3, r7, r0
 80064a6:	4920      	ldr	r1, [pc, #128]	; (8006528 <USB_DeactivateEndpoint+0x368>)
 80064a8:	400a      	ands	r2, r1
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	18d3      	adds	r3, r2, r3
 80064b6:	183a      	adds	r2, r7, r0
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	491f      	ldr	r1, [pc, #124]	; (8006538 <USB_DeactivateEndpoint+0x378>)
 80064bc:	430a      	orrs	r2, r1
 80064be:	b292      	uxth	r2, r2
 80064c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	18d3      	adds	r3, r2, r3
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	2024      	movs	r0, #36	; 0x24
 80064d2:	183b      	adds	r3, r7, r0
 80064d4:	4916      	ldr	r1, [pc, #88]	; (8006530 <USB_DeactivateEndpoint+0x370>)
 80064d6:	400a      	ands	r2, r1
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	18d3      	adds	r3, r2, r3
 80064e4:	183a      	adds	r2, r7, r0
 80064e6:	8812      	ldrh	r2, [r2, #0]
 80064e8:	4912      	ldr	r1, [pc, #72]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 80064ea:	430a      	orrs	r2, r1
 80064ec:	b292      	uxth	r2, r2
 80064ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	2022      	movs	r0, #34	; 0x22
 8006500:	183b      	adds	r3, r7, r0
 8006502:	490e      	ldr	r1, [pc, #56]	; (800653c <USB_DeactivateEndpoint+0x37c>)
 8006504:	400a      	ands	r2, r1
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	183a      	adds	r2, r7, r0
 8006514:	8812      	ldrh	r2, [r2, #0]
 8006516:	4907      	ldr	r1, [pc, #28]	; (8006534 <USB_DeactivateEndpoint+0x374>)
 8006518:	430a      	orrs	r2, r1
 800651a:	b292      	uxth	r2, r2
 800651c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b00c      	add	sp, #48	; 0x30
 8006526:	bd80      	pop	{r7, pc}
 8006528:	ffff8f8f 	.word	0xffff8f8f
 800652c:	ffff80c0 	.word	0xffff80c0
 8006530:	ffff8fbf 	.word	0xffff8fbf
 8006534:	ffff8080 	.word	0xffff8080
 8006538:	ffffc080 	.word	0xffffc080
 800653c:	ffffbf8f 	.word	0xffffbf8f

08006540 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b0c3      	sub	sp, #268	; 0x10c
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d001      	beq.n	8006556 <USB_EPStartXfer+0x16>
 8006552:	f000 fd2d 	bl	8006fb0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	d905      	bls.n	800656e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	1d7a      	adds	r2, r7, #5
 8006568:	32ff      	adds	r2, #255	; 0xff
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e004      	b.n	8006578 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	1d7a      	adds	r2, r7, #5
 8006574:	32ff      	adds	r2, #255	; 0xff
 8006576:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	7b1b      	ldrb	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d125      	bne.n	80065cc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6959      	ldr	r1, [r3, #20]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	88da      	ldrh	r2, [r3, #6]
 8006588:	1d7b      	adds	r3, r7, #5
 800658a:	33ff      	adds	r3, #255	; 0xff
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fa47 	bl	8007a24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2250      	movs	r2, #80	; 0x50
 800659e:	5a9b      	ldrh	r3, [r3, r2]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	001a      	movs	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	00da      	lsls	r2, r3, #3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	18d3      	adds	r3, r2, r3
 80065b4:	4ad7      	ldr	r2, [pc, #860]	; (8006914 <USB_EPStartXfer+0x3d4>)
 80065b6:	4694      	mov	ip, r2
 80065b8:	4463      	add	r3, ip
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	1d7b      	adds	r3, r7, #5
 80065be:	33ff      	adds	r3, #255	; 0xff
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	f000 fccd 	bl	8006f66 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	78db      	ldrb	r3, [r3, #3]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d000      	beq.n	80065d6 <USB_EPStartXfer+0x96>
 80065d4:	e362      	b.n	8006c9c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d800      	bhi.n	80065e4 <USB_EPStartXfer+0xa4>
 80065e2:	e309      	b.n	8006bf8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	2056      	movs	r0, #86	; 0x56
 80065f4:	183b      	adds	r3, r7, r0
 80065f6:	49c8      	ldr	r1, [pc, #800]	; (8006918 <USB_EPStartXfer+0x3d8>)
 80065f8:	400a      	ands	r2, r1
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	18d3      	adds	r3, r2, r3
 8006606:	183a      	adds	r2, r7, r0
 8006608:	8812      	ldrh	r2, [r2, #0]
 800660a:	49c4      	ldr	r1, [pc, #784]	; (800691c <USB_EPStartXfer+0x3dc>)
 800660c:	430a      	orrs	r2, r1
 800660e:	b292      	uxth	r2, r2
 8006610:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	1d7b      	adds	r3, r7, #5
 8006618:	33ff      	adds	r3, #255	; 0xff
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	18d3      	adds	r3, r2, r3
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	001a      	movs	r2, r3
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	4013      	ands	r3, r2
 8006636:	d100      	bne.n	800663a <USB_EPStartXfer+0xfa>
 8006638:	e176      	b.n	8006928 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	633b      	str	r3, [r7, #48]	; 0x30
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d000      	beq.n	8006648 <USB_EPStartXfer+0x108>
 8006646:	e074      	b.n	8006732 <USB_EPStartXfer+0x1f2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2250      	movs	r2, #80	; 0x50
 8006650:	5a9b      	ldrh	r3, [r3, r2]
 8006652:	b29b      	uxth	r3, r3
 8006654:	001a      	movs	r2, r3
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	189b      	adds	r3, r3, r2
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	00da      	lsls	r2, r3, #3
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	18d3      	adds	r3, r2, r3
 8006666:	4aae      	ldr	r2, [pc, #696]	; (8006920 <USB_EPStartXfer+0x3e0>)
 8006668:	4694      	mov	ip, r2
 800666a:	4463      	add	r3, ip
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	059b      	lsls	r3, r3, #22
 8006676:	0d9b      	lsrs	r3, r3, #22
 8006678:	b29a      	uxth	r2, r3
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	1d7b      	adds	r3, r7, #5
 8006680:	33ff      	adds	r3, #255	; 0xff
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b3e      	cmp	r3, #62	; 0x3e
 8006686:	d924      	bls.n	80066d2 <USB_EPStartXfer+0x192>
 8006688:	1d7b      	adds	r3, r7, #5
 800668a:	33ff      	adds	r3, #255	; 0xff
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	1c7a      	adds	r2, r7, #1
 8006692:	32ff      	adds	r2, #255	; 0xff
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	1d7b      	adds	r3, r7, #5
 8006698:	33ff      	adds	r3, #255	; 0xff
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	221f      	movs	r2, #31
 800669e:	4013      	ands	r3, r2
 80066a0:	d106      	bne.n	80066b0 <USB_EPStartXfer+0x170>
 80066a2:	1c7b      	adds	r3, r7, #1
 80066a4:	33ff      	adds	r3, #255	; 0xff
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	1c7a      	adds	r2, r7, #1
 80066ac:	32ff      	adds	r2, #255	; 0xff
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	1c7b      	adds	r3, r7, #1
 80066b8:	33ff      	adds	r3, #255	; 0xff
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	4a97      	ldr	r2, [pc, #604]	; (8006924 <USB_EPStartXfer+0x3e4>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e04a      	b.n	8006768 <USB_EPStartXfer+0x228>
 80066d2:	1d7b      	adds	r3, r7, #5
 80066d4:	33ff      	adds	r3, #255	; 0xff
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d108      	bne.n	80066ee <USB_EPStartXfer+0x1ae>
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	4a90      	ldr	r2, [pc, #576]	; (8006924 <USB_EPStartXfer+0x3e4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e03c      	b.n	8006768 <USB_EPStartXfer+0x228>
 80066ee:	1d7b      	adds	r3, r7, #5
 80066f0:	33ff      	adds	r3, #255	; 0xff
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	1c7a      	adds	r2, r7, #1
 80066f8:	32ff      	adds	r2, #255	; 0xff
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	1d7b      	adds	r3, r7, #5
 80066fe:	33ff      	adds	r3, #255	; 0xff
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	4013      	ands	r3, r2
 8006706:	d006      	beq.n	8006716 <USB_EPStartXfer+0x1d6>
 8006708:	1c7b      	adds	r3, r7, #1
 800670a:	33ff      	adds	r3, #255	; 0xff
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	1c7a      	adds	r2, r7, #1
 8006712:	32ff      	adds	r2, #255	; 0xff
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29a      	uxth	r2, r3
 800671c:	1c7b      	adds	r3, r7, #1
 800671e:	33ff      	adds	r3, #255	; 0xff
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	029b      	lsls	r3, r3, #10
 8006726:	b29b      	uxth	r3, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e01a      	b.n	8006768 <USB_EPStartXfer+0x228>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d116      	bne.n	8006768 <USB_EPStartXfer+0x228>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2250      	movs	r2, #80	; 0x50
 800673e:	5a9b      	ldrh	r3, [r3, r2]
 8006740:	b29b      	uxth	r3, r3
 8006742:	001a      	movs	r2, r3
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	189b      	adds	r3, r3, r2
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	18d3      	adds	r3, r2, r3
 8006754:	4a72      	ldr	r2, [pc, #456]	; (8006920 <USB_EPStartXfer+0x3e0>)
 8006756:	4694      	mov	ip, r2
 8006758:	4463      	add	r3, ip
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675c:	1d7b      	adds	r3, r7, #5
 800675e:	33ff      	adds	r3, #255	; 0xff
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	b29a      	uxth	r2, r3
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006768:	2076      	movs	r0, #118	; 0x76
 800676a:	183b      	adds	r3, r7, r0
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	8952      	ldrh	r2, [r2, #10]
 8006770:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6959      	ldr	r1, [r3, #20]
 8006776:	1d7b      	adds	r3, r7, #5
 8006778:	33ff      	adds	r3, #255	; 0xff
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	b29c      	uxth	r4, r3
 800677e:	183b      	adds	r3, r7, r0
 8006780:	881a      	ldrh	r2, [r3, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	0023      	movs	r3, r4
 8006786:	f001 f94d 	bl	8007a24 <USB_WritePMA>
            ep->xfer_buff += len;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	1d7b      	adds	r3, r7, #5
 8006790:	33ff      	adds	r3, #255	; 0xff
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	18d2      	adds	r2, r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6a1a      	ldr	r2, [r3, #32]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d908      	bls.n	80067b8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	1d7b      	adds	r3, r7, #5
 80067ac:	33ff      	adds	r3, #255	; 0xff
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	621a      	str	r2, [r3, #32]
 80067b6:	e007      	b.n	80067c8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	1d7a      	adds	r2, r7, #5
 80067be:	32ff      	adds	r2, #255	; 0xff
 80067c0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2200      	movs	r2, #0
 80067c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d000      	beq.n	80067d2 <USB_EPStartXfer+0x292>
 80067d0:	e070      	b.n	80068b4 <USB_EPStartXfer+0x374>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2250      	movs	r2, #80	; 0x50
 80067da:	5a9b      	ldrh	r3, [r3, r2]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	001a      	movs	r2, r3
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	189b      	adds	r3, r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	00da      	lsls	r2, r3, #3
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	18d3      	adds	r3, r2, r3
 80067f0:	4a48      	ldr	r2, [pc, #288]	; (8006914 <USB_EPStartXfer+0x3d4>)
 80067f2:	4694      	mov	ip, r2
 80067f4:	4463      	add	r3, ip
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	059b      	lsls	r3, r3, #22
 8006800:	0d9b      	lsrs	r3, r3, #22
 8006802:	b29a      	uxth	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	1d7b      	adds	r3, r7, #5
 800680a:	33ff      	adds	r3, #255	; 0xff
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b3e      	cmp	r3, #62	; 0x3e
 8006810:	d922      	bls.n	8006858 <USB_EPStartXfer+0x318>
 8006812:	1d7b      	adds	r3, r7, #5
 8006814:	33ff      	adds	r3, #255	; 0xff
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	21fc      	movs	r1, #252	; 0xfc
 800681c:	187a      	adds	r2, r7, r1
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	1d7b      	adds	r3, r7, #5
 8006822:	33ff      	adds	r3, #255	; 0xff
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	221f      	movs	r2, #31
 8006828:	4013      	ands	r3, r2
 800682a:	d104      	bne.n	8006836 <USB_EPStartXfer+0x2f6>
 800682c:	187b      	adds	r3, r7, r1
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3b01      	subs	r3, #1
 8006832:	187a      	adds	r2, r7, r1
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29a      	uxth	r2, r3
 800683c:	23fc      	movs	r3, #252	; 0xfc
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	b29b      	uxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b29b      	uxth	r3, r3
 800684c:	4a35      	ldr	r2, [pc, #212]	; (8006924 <USB_EPStartXfer+0x3e4>)
 800684e:	4313      	orrs	r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e04a      	b.n	80068ee <USB_EPStartXfer+0x3ae>
 8006858:	1d7b      	adds	r3, r7, #5
 800685a:	33ff      	adds	r3, #255	; 0xff
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d108      	bne.n	8006874 <USB_EPStartXfer+0x334>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	4a2e      	ldr	r2, [pc, #184]	; (8006924 <USB_EPStartXfer+0x3e4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	b29a      	uxth	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	e03c      	b.n	80068ee <USB_EPStartXfer+0x3ae>
 8006874:	1d7b      	adds	r3, r7, #5
 8006876:	33ff      	adds	r3, #255	; 0xff
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	21fc      	movs	r1, #252	; 0xfc
 800687e:	187a      	adds	r2, r7, r1
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	1d7b      	adds	r3, r7, #5
 8006884:	33ff      	adds	r3, #255	; 0xff
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	4013      	ands	r3, r2
 800688c:	d004      	beq.n	8006898 <USB_EPStartXfer+0x358>
 800688e:	187b      	adds	r3, r7, r1
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	187a      	adds	r2, r7, r1
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	23fc      	movs	r3, #252	; 0xfc
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e01c      	b.n	80068ee <USB_EPStartXfer+0x3ae>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d118      	bne.n	80068ee <USB_EPStartXfer+0x3ae>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2250      	movs	r2, #80	; 0x50
 80068c4:	5a9b      	ldrh	r3, [r3, r2]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	001a      	movs	r2, r3
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	00da      	lsls	r2, r3, #3
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	4a0e      	ldr	r2, [pc, #56]	; (8006914 <USB_EPStartXfer+0x3d4>)
 80068dc:	4694      	mov	ip, r2
 80068de:	4463      	add	r3, ip
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	1d7b      	adds	r3, r7, #5
 80068e4:	33ff      	adds	r3, #255	; 0xff
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068ee:	2076      	movs	r0, #118	; 0x76
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	8912      	ldrh	r2, [r2, #8]
 80068f6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	6959      	ldr	r1, [r3, #20]
 80068fc:	1d7b      	adds	r3, r7, #5
 80068fe:	33ff      	adds	r3, #255	; 0xff
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	b29c      	uxth	r4, r3
 8006904:	183b      	adds	r3, r7, r0
 8006906:	881a      	ldrh	r2, [r3, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	0023      	movs	r3, r4
 800690c:	f001 f88a 	bl	8007a24 <USB_WritePMA>
 8006910:	e329      	b.n	8006f66 <USB_EPStartXfer+0xa26>
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	00000402 	.word	0x00000402
 8006918:	ffff8f8f 	.word	0xffff8f8f
 800691c:	ffff8180 	.word	0xffff8180
 8006920:	00000406 	.word	0x00000406
 8006924:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d000      	beq.n	8006932 <USB_EPStartXfer+0x3f2>
 8006930:	e070      	b.n	8006a14 <USB_EPStartXfer+0x4d4>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2250      	movs	r2, #80	; 0x50
 800693a:	5a9b      	ldrh	r3, [r3, r2]
 800693c:	b29b      	uxth	r3, r3
 800693e:	001a      	movs	r2, r3
 8006940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006942:	189b      	adds	r3, r3, r2
 8006944:	64bb      	str	r3, [r7, #72]	; 0x48
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	00da      	lsls	r2, r3, #3
 800694c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694e:	18d3      	adds	r3, r2, r3
 8006950:	4acd      	ldr	r2, [pc, #820]	; (8006c88 <USB_EPStartXfer+0x748>)
 8006952:	4694      	mov	ip, r2
 8006954:	4463      	add	r3, ip
 8006956:	647b      	str	r3, [r7, #68]	; 0x44
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	059b      	lsls	r3, r3, #22
 8006960:	0d9b      	lsrs	r3, r3, #22
 8006962:	b29a      	uxth	r2, r3
 8006964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	1d7b      	adds	r3, r7, #5
 800696a:	33ff      	adds	r3, #255	; 0xff
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b3e      	cmp	r3, #62	; 0x3e
 8006970:	d922      	bls.n	80069b8 <USB_EPStartXfer+0x478>
 8006972:	1d7b      	adds	r3, r7, #5
 8006974:	33ff      	adds	r3, #255	; 0xff
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	21f8      	movs	r1, #248	; 0xf8
 800697c:	187a      	adds	r2, r7, r1
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	1d7b      	adds	r3, r7, #5
 8006982:	33ff      	adds	r3, #255	; 0xff
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	221f      	movs	r2, #31
 8006988:	4013      	ands	r3, r2
 800698a:	d104      	bne.n	8006996 <USB_EPStartXfer+0x456>
 800698c:	187b      	adds	r3, r7, r1
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	187a      	adds	r2, r7, r1
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29a      	uxth	r2, r3
 800699c:	23f8      	movs	r3, #248	; 0xf8
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4ab7      	ldr	r2, [pc, #732]	; (8006c8c <USB_EPStartXfer+0x74c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	e04a      	b.n	8006a4e <USB_EPStartXfer+0x50e>
 80069b8:	1d7b      	adds	r3, r7, #5
 80069ba:	33ff      	adds	r3, #255	; 0xff
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <USB_EPStartXfer+0x494>
 80069c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4ab0      	ldr	r2, [pc, #704]	; (8006c8c <USB_EPStartXfer+0x74c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e03c      	b.n	8006a4e <USB_EPStartXfer+0x50e>
 80069d4:	1d7b      	adds	r3, r7, #5
 80069d6:	33ff      	adds	r3, #255	; 0xff
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	21f8      	movs	r1, #248	; 0xf8
 80069de:	187a      	adds	r2, r7, r1
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	1d7b      	adds	r3, r7, #5
 80069e4:	33ff      	adds	r3, #255	; 0xff
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2201      	movs	r2, #1
 80069ea:	4013      	ands	r3, r2
 80069ec:	d004      	beq.n	80069f8 <USB_EPStartXfer+0x4b8>
 80069ee:	187b      	adds	r3, r7, r1
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	187a      	adds	r2, r7, r1
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	23f8      	movs	r3, #248	; 0xf8
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e01c      	b.n	8006a4e <USB_EPStartXfer+0x50e>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d118      	bne.n	8006a4e <USB_EPStartXfer+0x50e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2250      	movs	r2, #80	; 0x50
 8006a24:	5a9b      	ldrh	r3, [r3, r2]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	001a      	movs	r2, r3
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2c:	189b      	adds	r3, r3, r2
 8006a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00da      	lsls	r2, r3, #3
 8006a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a38:	18d3      	adds	r3, r2, r3
 8006a3a:	4a93      	ldr	r2, [pc, #588]	; (8006c88 <USB_EPStartXfer+0x748>)
 8006a3c:	4694      	mov	ip, r2
 8006a3e:	4463      	add	r3, ip
 8006a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a42:	1d7b      	adds	r3, r7, #5
 8006a44:	33ff      	adds	r3, #255	; 0xff
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a4e:	2076      	movs	r0, #118	; 0x76
 8006a50:	183b      	adds	r3, r7, r0
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	8912      	ldrh	r2, [r2, #8]
 8006a56:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6959      	ldr	r1, [r3, #20]
 8006a5c:	1d7b      	adds	r3, r7, #5
 8006a5e:	33ff      	adds	r3, #255	; 0xff
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b29c      	uxth	r4, r3
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	881a      	ldrh	r2, [r3, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	0023      	movs	r3, r4
 8006a6c:	f000 ffda 	bl	8007a24 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	1d7b      	adds	r3, r7, #5
 8006a76:	33ff      	adds	r3, #255	; 0xff
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	18d2      	adds	r2, r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d908      	bls.n	8006a9e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	1d7b      	adds	r3, r7, #5
 8006a92:	33ff      	adds	r3, #255	; 0xff
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	e007      	b.n	8006aae <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	1d7a      	adds	r2, r7, #5
 8006aa4:	32ff      	adds	r2, #255	; 0xff
 8006aa6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d000      	beq.n	8006abc <USB_EPStartXfer+0x57c>
 8006aba:	e070      	b.n	8006b9e <USB_EPStartXfer+0x65e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2250      	movs	r2, #80	; 0x50
 8006ac4:	5a9b      	ldrh	r3, [r3, r2]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	001a      	movs	r2, r3
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00da      	lsls	r2, r3, #3
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	18d3      	adds	r3, r2, r3
 8006ada:	4a6d      	ldr	r2, [pc, #436]	; (8006c90 <USB_EPStartXfer+0x750>)
 8006adc:	4694      	mov	ip, r2
 8006ade:	4463      	add	r3, ip
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	059b      	lsls	r3, r3, #22
 8006aea:	0d9b      	lsrs	r3, r3, #22
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	1d7b      	adds	r3, r7, #5
 8006af4:	33ff      	adds	r3, #255	; 0xff
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b3e      	cmp	r3, #62	; 0x3e
 8006afa:	d922      	bls.n	8006b42 <USB_EPStartXfer+0x602>
 8006afc:	1d7b      	adds	r3, r7, #5
 8006afe:	33ff      	adds	r3, #255	; 0xff
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	21f4      	movs	r1, #244	; 0xf4
 8006b06:	187a      	adds	r2, r7, r1
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	1d7b      	adds	r3, r7, #5
 8006b0c:	33ff      	adds	r3, #255	; 0xff
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	221f      	movs	r2, #31
 8006b12:	4013      	ands	r3, r2
 8006b14:	d104      	bne.n	8006b20 <USB_EPStartXfer+0x5e0>
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	187a      	adds	r2, r7, r1
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	23f4      	movs	r3, #244	; 0xf4
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4a55      	ldr	r2, [pc, #340]	; (8006c8c <USB_EPStartXfer+0x74c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	e048      	b.n	8006bd4 <USB_EPStartXfer+0x694>
 8006b42:	1d7b      	adds	r3, r7, #5
 8006b44:	33ff      	adds	r3, #255	; 0xff
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d108      	bne.n	8006b5e <USB_EPStartXfer+0x61e>
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4a4e      	ldr	r2, [pc, #312]	; (8006c8c <USB_EPStartXfer+0x74c>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e03a      	b.n	8006bd4 <USB_EPStartXfer+0x694>
 8006b5e:	1d7b      	adds	r3, r7, #5
 8006b60:	33ff      	adds	r3, #255	; 0xff
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	21f4      	movs	r1, #244	; 0xf4
 8006b68:	187a      	adds	r2, r7, r1
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	1d7b      	adds	r3, r7, #5
 8006b6e:	33ff      	adds	r3, #255	; 0xff
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	4013      	ands	r3, r2
 8006b76:	d004      	beq.n	8006b82 <USB_EPStartXfer+0x642>
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	187a      	adds	r2, r7, r1
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	23f4      	movs	r3, #244	; 0xf4
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	029b      	lsls	r3, r3, #10
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e01a      	b.n	8006bd4 <USB_EPStartXfer+0x694>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d116      	bne.n	8006bd4 <USB_EPStartXfer+0x694>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2250      	movs	r2, #80	; 0x50
 8006baa:	5a9b      	ldrh	r3, [r3, r2]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	001a      	movs	r2, r3
 8006bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	00da      	lsls	r2, r3, #3
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbe:	18d3      	adds	r3, r2, r3
 8006bc0:	4a33      	ldr	r2, [pc, #204]	; (8006c90 <USB_EPStartXfer+0x750>)
 8006bc2:	4694      	mov	ip, r2
 8006bc4:	4463      	add	r3, ip
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc8:	1d7b      	adds	r3, r7, #5
 8006bca:	33ff      	adds	r3, #255	; 0xff
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bd4:	2076      	movs	r0, #118	; 0x76
 8006bd6:	183b      	adds	r3, r7, r0
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	8952      	ldrh	r2, [r2, #10]
 8006bdc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6959      	ldr	r1, [r3, #20]
 8006be2:	1d7b      	adds	r3, r7, #5
 8006be4:	33ff      	adds	r3, #255	; 0xff
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	b29c      	uxth	r4, r3
 8006bea:	183b      	adds	r3, r7, r0
 8006bec:	881a      	ldrh	r2, [r3, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	0023      	movs	r3, r4
 8006bf2:	f000 ff17 	bl	8007a24 <USB_WritePMA>
 8006bf6:	e1b6      	b.n	8006f66 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	1d7a      	adds	r2, r7, #5
 8006bfe:	32ff      	adds	r2, #255	; 0xff
 8006c00:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	18d3      	adds	r3, r2, r3
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	2062      	movs	r0, #98	; 0x62
 8006c12:	183b      	adds	r3, r7, r0
 8006c14:	491f      	ldr	r1, [pc, #124]	; (8006c94 <USB_EPStartXfer+0x754>)
 8006c16:	400a      	ands	r2, r1
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	18d3      	adds	r3, r2, r3
 8006c24:	183a      	adds	r2, r7, r0
 8006c26:	8812      	ldrh	r2, [r2, #0]
 8006c28:	491b      	ldr	r1, [pc, #108]	; (8006c98 <USB_EPStartXfer+0x758>)
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2250      	movs	r2, #80	; 0x50
 8006c38:	5a9b      	ldrh	r3, [r3, r2]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	001a      	movs	r2, r3
 8006c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	00da      	lsls	r2, r3, #3
 8006c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4c:	18d3      	adds	r3, r2, r3
 8006c4e:	4a0e      	ldr	r2, [pc, #56]	; (8006c88 <USB_EPStartXfer+0x748>)
 8006c50:	4694      	mov	ip, r2
 8006c52:	4463      	add	r3, ip
 8006c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c56:	1d7b      	adds	r3, r7, #5
 8006c58:	33ff      	adds	r3, #255	; 0xff
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c62:	2076      	movs	r0, #118	; 0x76
 8006c64:	183b      	adds	r3, r7, r0
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	8912      	ldrh	r2, [r2, #8]
 8006c6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	6959      	ldr	r1, [r3, #20]
 8006c70:	1d7b      	adds	r3, r7, #5
 8006c72:	33ff      	adds	r3, #255	; 0xff
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	b29c      	uxth	r4, r3
 8006c78:	183b      	adds	r3, r7, r0
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	0023      	movs	r3, r4
 8006c80:	f000 fed0 	bl	8007a24 <USB_WritePMA>
 8006c84:	e16f      	b.n	8006f66 <USB_EPStartXfer+0xa26>
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	00000402 	.word	0x00000402
 8006c8c:	ffff8000 	.word	0xffff8000
 8006c90:	00000406 	.word	0x00000406
 8006c94:	ffff8e8f 	.word	0xffff8e8f
 8006c98:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	1d7b      	adds	r3, r7, #5
 8006ca2:	33ff      	adds	r3, #255	; 0xff
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18d3      	adds	r3, r2, r3
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	001a      	movs	r2, r3
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d100      	bne.n	8006cc4 <USB_EPStartXfer+0x784>
 8006cc2:	e0a4      	b.n	8006e0e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d000      	beq.n	8006cd2 <USB_EPStartXfer+0x792>
 8006cd0:	e070      	b.n	8006db4 <USB_EPStartXfer+0x874>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2250      	movs	r2, #80	; 0x50
 8006cda:	5a9b      	ldrh	r3, [r3, r2]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	001a      	movs	r2, r3
 8006ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	00da      	lsls	r2, r3, #3
 8006cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cee:	18d3      	adds	r3, r2, r3
 8006cf0:	4abc      	ldr	r2, [pc, #752]	; (8006fe4 <USB_EPStartXfer+0xaa4>)
 8006cf2:	4694      	mov	ip, r2
 8006cf4:	4463      	add	r3, ip
 8006cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	059b      	lsls	r3, r3, #22
 8006d00:	0d9b      	lsrs	r3, r3, #22
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	1d7b      	adds	r3, r7, #5
 8006d0a:	33ff      	adds	r3, #255	; 0xff
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d10:	d922      	bls.n	8006d58 <USB_EPStartXfer+0x818>
 8006d12:	1d7b      	adds	r3, r7, #5
 8006d14:	33ff      	adds	r3, #255	; 0xff
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	21f0      	movs	r1, #240	; 0xf0
 8006d1c:	187a      	adds	r2, r7, r1
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	1d7b      	adds	r3, r7, #5
 8006d22:	33ff      	adds	r3, #255	; 0xff
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	221f      	movs	r2, #31
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d104      	bne.n	8006d36 <USB_EPStartXfer+0x7f6>
 8006d2c:	187b      	adds	r3, r7, r1
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	187a      	adds	r2, r7, r1
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	23f0      	movs	r3, #240	; 0xf0
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	029b      	lsls	r3, r3, #10
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4aa6      	ldr	r2, [pc, #664]	; (8006fe8 <USB_EPStartXfer+0xaa8>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e048      	b.n	8006dea <USB_EPStartXfer+0x8aa>
 8006d58:	1d7b      	adds	r3, r7, #5
 8006d5a:	33ff      	adds	r3, #255	; 0xff
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d108      	bne.n	8006d74 <USB_EPStartXfer+0x834>
 8006d62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4a9f      	ldr	r2, [pc, #636]	; (8006fe8 <USB_EPStartXfer+0xaa8>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e03a      	b.n	8006dea <USB_EPStartXfer+0x8aa>
 8006d74:	1d7b      	adds	r3, r7, #5
 8006d76:	33ff      	adds	r3, #255	; 0xff
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	21f0      	movs	r1, #240	; 0xf0
 8006d7e:	187a      	adds	r2, r7, r1
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	1d7b      	adds	r3, r7, #5
 8006d84:	33ff      	adds	r3, #255	; 0xff
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d004      	beq.n	8006d98 <USB_EPStartXfer+0x858>
 8006d8e:	187b      	adds	r3, r7, r1
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	187a      	adds	r2, r7, r1
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	23f0      	movs	r3, #240	; 0xf0
 8006da0:	18fb      	adds	r3, r7, r3
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e01a      	b.n	8006dea <USB_EPStartXfer+0x8aa>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d116      	bne.n	8006dea <USB_EPStartXfer+0x8aa>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2250      	movs	r2, #80	; 0x50
 8006dc0:	5a9b      	ldrh	r3, [r3, r2]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	001a      	movs	r2, r3
 8006dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	673b      	str	r3, [r7, #112]	; 0x70
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	00da      	lsls	r2, r3, #3
 8006dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd4:	18d3      	adds	r3, r2, r3
 8006dd6:	4a83      	ldr	r2, [pc, #524]	; (8006fe4 <USB_EPStartXfer+0xaa4>)
 8006dd8:	4694      	mov	ip, r2
 8006dda:	4463      	add	r3, ip
 8006ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dde:	1d7b      	adds	r3, r7, #5
 8006de0:	33ff      	adds	r3, #255	; 0xff
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006dea:	2076      	movs	r0, #118	; 0x76
 8006dec:	183b      	adds	r3, r7, r0
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	8952      	ldrh	r2, [r2, #10]
 8006df2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6959      	ldr	r1, [r3, #20]
 8006df8:	1d7b      	adds	r3, r7, #5
 8006dfa:	33ff      	adds	r3, #255	; 0xff
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	b29c      	uxth	r4, r3
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	0023      	movs	r3, r4
 8006e08:	f000 fe0c 	bl	8007a24 <USB_WritePMA>
 8006e0c:	e0ab      	b.n	8006f66 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d000      	beq.n	8006e18 <USB_EPStartXfer+0x8d8>
 8006e16:	e070      	b.n	8006efa <USB_EPStartXfer+0x9ba>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2250      	movs	r2, #80	; 0x50
 8006e20:	5a9b      	ldrh	r3, [r3, r2]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	001a      	movs	r2, r3
 8006e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	00da      	lsls	r2, r3, #3
 8006e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	4a6d      	ldr	r2, [pc, #436]	; (8006fec <USB_EPStartXfer+0xaac>)
 8006e38:	4694      	mov	ip, r2
 8006e3a:	4463      	add	r3, ip
 8006e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	059b      	lsls	r3, r3, #22
 8006e46:	0d9b      	lsrs	r3, r3, #22
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	1d7b      	adds	r3, r7, #5
 8006e50:	33ff      	adds	r3, #255	; 0xff
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b3e      	cmp	r3, #62	; 0x3e
 8006e56:	d922      	bls.n	8006e9e <USB_EPStartXfer+0x95e>
 8006e58:	1d7b      	adds	r3, r7, #5
 8006e5a:	33ff      	adds	r3, #255	; 0xff
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	21ec      	movs	r1, #236	; 0xec
 8006e62:	187a      	adds	r2, r7, r1
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	1d7b      	adds	r3, r7, #5
 8006e68:	33ff      	adds	r3, #255	; 0xff
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	221f      	movs	r2, #31
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d104      	bne.n	8006e7c <USB_EPStartXfer+0x93c>
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	187a      	adds	r2, r7, r1
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	23ec      	movs	r3, #236	; 0xec
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4a55      	ldr	r2, [pc, #340]	; (8006fe8 <USB_EPStartXfer+0xaa8>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e052      	b.n	8006f44 <USB_EPStartXfer+0xa04>
 8006e9e:	1d7b      	adds	r3, r7, #5
 8006ea0:	33ff      	adds	r3, #255	; 0xff
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <USB_EPStartXfer+0x97a>
 8006ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4a4e      	ldr	r2, [pc, #312]	; (8006fe8 <USB_EPStartXfer+0xaa8>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e044      	b.n	8006f44 <USB_EPStartXfer+0xa04>
 8006eba:	1d7b      	adds	r3, r7, #5
 8006ebc:	33ff      	adds	r3, #255	; 0xff
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	21ec      	movs	r1, #236	; 0xec
 8006ec4:	187a      	adds	r2, r7, r1
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	1d7b      	adds	r3, r7, #5
 8006eca:	33ff      	adds	r3, #255	; 0xff
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	d004      	beq.n	8006ede <USB_EPStartXfer+0x99e>
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	187a      	adds	r2, r7, r1
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	23ec      	movs	r3, #236	; 0xec
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e024      	b.n	8006f44 <USB_EPStartXfer+0xa04>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d120      	bne.n	8006f44 <USB_EPStartXfer+0xa04>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2184      	movs	r1, #132	; 0x84
 8006f06:	187a      	adds	r2, r7, r1
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2250      	movs	r2, #80	; 0x50
 8006f0e:	5a9b      	ldrh	r3, [r3, r2]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	001a      	movs	r2, r3
 8006f14:	187b      	adds	r3, r7, r1
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	187a      	adds	r2, r7, r1
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	00da      	lsls	r2, r3, #3
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	4a30      	ldr	r2, [pc, #192]	; (8006fec <USB_EPStartXfer+0xaac>)
 8006f2c:	4694      	mov	ip, r2
 8006f2e:	4463      	add	r3, ip
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	187a      	adds	r2, r7, r1
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	1d7b      	adds	r3, r7, #5
 8006f38:	33ff      	adds	r3, #255	; 0xff
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	187b      	adds	r3, r7, r1
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f44:	2076      	movs	r0, #118	; 0x76
 8006f46:	183b      	adds	r3, r7, r0
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	8912      	ldrh	r2, [r2, #8]
 8006f4c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6959      	ldr	r1, [r3, #20]
 8006f52:	1d7b      	adds	r3, r7, #5
 8006f54:	33ff      	adds	r3, #255	; 0xff
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b29c      	uxth	r4, r3
 8006f5a:	183b      	adds	r3, r7, r0
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	0023      	movs	r3, r4
 8006f62:	f000 fd5f 	bl	8007a24 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	200a      	movs	r0, #10
 8006f76:	183b      	adds	r3, r7, r0
 8006f78:	491d      	ldr	r1, [pc, #116]	; (8006ff0 <USB_EPStartXfer+0xab0>)
 8006f7a:	400a      	ands	r2, r1
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	183b      	adds	r3, r7, r0
 8006f80:	183a      	adds	r2, r7, r0
 8006f82:	8812      	ldrh	r2, [r2, #0]
 8006f84:	2110      	movs	r1, #16
 8006f86:	404a      	eors	r2, r1
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	183b      	adds	r3, r7, r0
 8006f8c:	183a      	adds	r2, r7, r0
 8006f8e:	8812      	ldrh	r2, [r2, #0]
 8006f90:	2120      	movs	r1, #32
 8006f92:	404a      	eors	r2, r1
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	18d3      	adds	r3, r2, r3
 8006fa0:	183a      	adds	r2, r7, r0
 8006fa2:	8812      	ldrh	r2, [r2, #0]
 8006fa4:	4913      	ldr	r1, [pc, #76]	; (8006ff4 <USB_EPStartXfer+0xab4>)
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	f000 fbf4 	bl	8007798 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d000      	beq.n	8006fba <USB_EPStartXfer+0xa7a>
 8006fb8:	e0a9      	b.n	800710e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d918      	bls.n	8006ff8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	1d7a      	adds	r2, r7, #5
 8006fcc:	32ff      	adds	r2, #255	; 0xff
 8006fce:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	1d7b      	adds	r3, r7, #5
 8006fd6:	33ff      	adds	r3, #255	; 0xff
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	619a      	str	r2, [r3, #24]
 8006fe0:	e012      	b.n	8007008 <USB_EPStartXfer+0xac8>
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	00000406 	.word	0x00000406
 8006fe8:	ffff8000 	.word	0xffff8000
 8006fec:	00000402 	.word	0x00000402
 8006ff0:	ffff8fbf 	.word	0xffff8fbf
 8006ff4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	1d7a      	adds	r2, r7, #5
 8006ffe:	32ff      	adds	r2, #255	; 0xff
 8007000:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2200      	movs	r2, #0
 8007006:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2190      	movs	r1, #144	; 0x90
 800700c:	187a      	adds	r2, r7, r1
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2250      	movs	r2, #80	; 0x50
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	b29b      	uxth	r3, r3
 8007018:	001a      	movs	r2, r3
 800701a:	187b      	adds	r3, r7, r1
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	189b      	adds	r3, r3, r2
 8007020:	187a      	adds	r2, r7, r1
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	00da      	lsls	r2, r3, #3
 800702a:	187b      	adds	r3, r7, r1
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	18d3      	adds	r3, r2, r3
 8007030:	4acf      	ldr	r2, [pc, #828]	; (8007370 <USB_EPStartXfer+0xe30>)
 8007032:	4694      	mov	ip, r2
 8007034:	4463      	add	r3, ip
 8007036:	218c      	movs	r1, #140	; 0x8c
 8007038:	187a      	adds	r2, r7, r1
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	187b      	adds	r3, r7, r1
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	059b      	lsls	r3, r3, #22
 8007046:	0d9b      	lsrs	r3, r3, #22
 8007048:	b29a      	uxth	r2, r3
 800704a:	187b      	adds	r3, r7, r1
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	1d7b      	adds	r3, r7, #5
 8007052:	33ff      	adds	r3, #255	; 0xff
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b3e      	cmp	r3, #62	; 0x3e
 8007058:	d925      	bls.n	80070a6 <USB_EPStartXfer+0xb66>
 800705a:	1d7b      	adds	r3, r7, #5
 800705c:	33ff      	adds	r3, #255	; 0xff
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	21e8      	movs	r1, #232	; 0xe8
 8007064:	187a      	adds	r2, r7, r1
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	1d7b      	adds	r3, r7, #5
 800706a:	33ff      	adds	r3, #255	; 0xff
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	221f      	movs	r2, #31
 8007070:	4013      	ands	r3, r2
 8007072:	d104      	bne.n	800707e <USB_EPStartXfer+0xb3e>
 8007074:	187b      	adds	r3, r7, r1
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	187a      	adds	r2, r7, r1
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	218c      	movs	r1, #140	; 0x8c
 8007080:	187b      	adds	r3, r7, r1
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29a      	uxth	r2, r3
 8007088:	23e8      	movs	r3, #232	; 0xe8
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b29b      	uxth	r3, r3
 8007098:	4ab6      	ldr	r2, [pc, #728]	; (8007374 <USB_EPStartXfer+0xe34>)
 800709a:	4313      	orrs	r3, r2
 800709c:	b29a      	uxth	r2, r3
 800709e:	187b      	adds	r3, r7, r1
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	e353      	b.n	800774e <USB_EPStartXfer+0x120e>
 80070a6:	1d7b      	adds	r3, r7, #5
 80070a8:	33ff      	adds	r3, #255	; 0xff
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <USB_EPStartXfer+0xb88>
 80070b0:	218c      	movs	r1, #140	; 0x8c
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4aae      	ldr	r2, [pc, #696]	; (8007374 <USB_EPStartXfer+0xe34>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	b29a      	uxth	r2, r3
 80070c0:	187b      	adds	r3, r7, r1
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e342      	b.n	800774e <USB_EPStartXfer+0x120e>
 80070c8:	1d7b      	adds	r3, r7, #5
 80070ca:	33ff      	adds	r3, #255	; 0xff
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	21e8      	movs	r1, #232	; 0xe8
 80070d2:	187a      	adds	r2, r7, r1
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	1d7b      	adds	r3, r7, #5
 80070d8:	33ff      	adds	r3, #255	; 0xff
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2201      	movs	r2, #1
 80070de:	4013      	ands	r3, r2
 80070e0:	d004      	beq.n	80070ec <USB_EPStartXfer+0xbac>
 80070e2:	187b      	adds	r3, r7, r1
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	187a      	adds	r2, r7, r1
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	218c      	movs	r1, #140	; 0x8c
 80070ee:	187b      	adds	r3, r7, r1
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	23e8      	movs	r3, #232	; 0xe8
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	029b      	lsls	r3, r3, #10
 8007100:	b29b      	uxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	b29a      	uxth	r2, r3
 8007106:	187b      	adds	r3, r7, r1
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	e31f      	b.n	800774e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	78db      	ldrb	r3, [r3, #3]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d000      	beq.n	8007118 <USB_EPStartXfer+0xbd8>
 8007116:	e191      	b.n	800743c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d000      	beq.n	8007122 <USB_EPStartXfer+0xbe2>
 8007120:	e07c      	b.n	800721c <USB_EPStartXfer+0xcdc>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	21ac      	movs	r1, #172	; 0xac
 8007126:	187a      	adds	r2, r7, r1
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2250      	movs	r2, #80	; 0x50
 800712e:	5a9b      	ldrh	r3, [r3, r2]
 8007130:	b29b      	uxth	r3, r3
 8007132:	001a      	movs	r2, r3
 8007134:	187b      	adds	r3, r7, r1
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	189b      	adds	r3, r3, r2
 800713a:	187a      	adds	r2, r7, r1
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	00da      	lsls	r2, r3, #3
 8007144:	187b      	adds	r3, r7, r1
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	18d3      	adds	r3, r2, r3
 800714a:	4a8b      	ldr	r2, [pc, #556]	; (8007378 <USB_EPStartXfer+0xe38>)
 800714c:	4694      	mov	ip, r2
 800714e:	4463      	add	r3, ip
 8007150:	21a8      	movs	r1, #168	; 0xa8
 8007152:	187a      	adds	r2, r7, r1
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	187b      	adds	r3, r7, r1
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	059b      	lsls	r3, r3, #22
 8007160:	0d9b      	lsrs	r3, r3, #22
 8007162:	b29a      	uxth	r2, r3
 8007164:	187b      	adds	r3, r7, r1
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b3e      	cmp	r3, #62	; 0x3e
 8007170:	d923      	bls.n	80071ba <USB_EPStartXfer+0xc7a>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	21e4      	movs	r1, #228	; 0xe4
 800717a:	187a      	adds	r2, r7, r1
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	221f      	movs	r2, #31
 8007184:	4013      	ands	r3, r2
 8007186:	d104      	bne.n	8007192 <USB_EPStartXfer+0xc52>
 8007188:	187b      	adds	r3, r7, r1
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	187a      	adds	r2, r7, r1
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	21a8      	movs	r1, #168	; 0xa8
 8007194:	187b      	adds	r3, r7, r1
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29a      	uxth	r2, r3
 800719c:	23e4      	movs	r3, #228	; 0xe4
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4a71      	ldr	r2, [pc, #452]	; (8007374 <USB_EPStartXfer+0xe34>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e054      	b.n	8007264 <USB_EPStartXfer+0xd24>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <USB_EPStartXfer+0xc9a>
 80071c2:	21a8      	movs	r1, #168	; 0xa8
 80071c4:	187b      	adds	r3, r7, r1
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4a69      	ldr	r2, [pc, #420]	; (8007374 <USB_EPStartXfer+0xe34>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e044      	b.n	8007264 <USB_EPStartXfer+0xd24>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	21e4      	movs	r1, #228	; 0xe4
 80071e2:	187a      	adds	r2, r7, r1
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2201      	movs	r2, #1
 80071ec:	4013      	ands	r3, r2
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0xcba>
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	187a      	adds	r2, r7, r1
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	21a8      	movs	r1, #168	; 0xa8
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29a      	uxth	r2, r3
 8007204:	23e4      	movs	r3, #228	; 0xe4
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	b29b      	uxth	r3, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	b29a      	uxth	r2, r3
 8007214:	187b      	adds	r3, r7, r1
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e023      	b.n	8007264 <USB_EPStartXfer+0xd24>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d11f      	bne.n	8007264 <USB_EPStartXfer+0xd24>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	21b4      	movs	r1, #180	; 0xb4
 8007228:	187a      	adds	r2, r7, r1
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2250      	movs	r2, #80	; 0x50
 8007230:	5a9b      	ldrh	r3, [r3, r2]
 8007232:	b29b      	uxth	r3, r3
 8007234:	001a      	movs	r2, r3
 8007236:	187b      	adds	r3, r7, r1
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	189b      	adds	r3, r3, r2
 800723c:	187a      	adds	r2, r7, r1
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	00da      	lsls	r2, r3, #3
 8007246:	187b      	adds	r3, r7, r1
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	18d3      	adds	r3, r2, r3
 800724c:	4a4a      	ldr	r2, [pc, #296]	; (8007378 <USB_EPStartXfer+0xe38>)
 800724e:	4694      	mov	ip, r2
 8007250:	4463      	add	r3, ip
 8007252:	21b0      	movs	r1, #176	; 0xb0
 8007254:	187a      	adds	r2, r7, r1
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	b29a      	uxth	r2, r3
 800725e:	187b      	adds	r3, r7, r1
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	22a4      	movs	r2, #164	; 0xa4
 8007268:	18ba      	adds	r2, r7, r2
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d000      	beq.n	8007276 <USB_EPStartXfer+0xd36>
 8007274:	e082      	b.n	800737c <USB_EPStartXfer+0xe3c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	219c      	movs	r1, #156	; 0x9c
 800727a:	187a      	adds	r2, r7, r1
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2250      	movs	r2, #80	; 0x50
 8007282:	5a9b      	ldrh	r3, [r3, r2]
 8007284:	b29b      	uxth	r3, r3
 8007286:	001a      	movs	r2, r3
 8007288:	187b      	adds	r3, r7, r1
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	189b      	adds	r3, r3, r2
 800728e:	187a      	adds	r2, r7, r1
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	00da      	lsls	r2, r3, #3
 8007298:	187b      	adds	r3, r7, r1
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	18d3      	adds	r3, r2, r3
 800729e:	4a34      	ldr	r2, [pc, #208]	; (8007370 <USB_EPStartXfer+0xe30>)
 80072a0:	4694      	mov	ip, r2
 80072a2:	4463      	add	r3, ip
 80072a4:	2198      	movs	r1, #152	; 0x98
 80072a6:	187a      	adds	r2, r7, r1
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	059b      	lsls	r3, r3, #22
 80072b4:	0d9b      	lsrs	r3, r3, #22
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	187b      	adds	r3, r7, r1
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	801a      	strh	r2, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b3e      	cmp	r3, #62	; 0x3e
 80072c4:	d923      	bls.n	800730e <USB_EPStartXfer+0xdce>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	21e0      	movs	r1, #224	; 0xe0
 80072ce:	187a      	adds	r2, r7, r1
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	221f      	movs	r2, #31
 80072d8:	4013      	ands	r3, r2
 80072da:	d104      	bne.n	80072e6 <USB_EPStartXfer+0xda6>
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	187a      	adds	r2, r7, r1
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	2198      	movs	r1, #152	; 0x98
 80072e8:	187b      	adds	r3, r7, r1
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	23e0      	movs	r3, #224	; 0xe0
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <USB_EPStartXfer+0xe34>)
 8007302:	4313      	orrs	r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	187b      	adds	r3, r7, r1
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e057      	b.n	80073be <USB_EPStartXfer+0xe7e>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <USB_EPStartXfer+0xdee>
 8007316:	2198      	movs	r1, #152	; 0x98
 8007318:	187b      	adds	r3, r7, r1
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	4a14      	ldr	r2, [pc, #80]	; (8007374 <USB_EPStartXfer+0xe34>)
 8007322:	4313      	orrs	r3, r2
 8007324:	b29a      	uxth	r2, r3
 8007326:	187b      	adds	r3, r7, r1
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e047      	b.n	80073be <USB_EPStartXfer+0xe7e>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	21e0      	movs	r1, #224	; 0xe0
 8007336:	187a      	adds	r2, r7, r1
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2201      	movs	r2, #1
 8007340:	4013      	ands	r3, r2
 8007342:	d004      	beq.n	800734e <USB_EPStartXfer+0xe0e>
 8007344:	187b      	adds	r3, r7, r1
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	187a      	adds	r2, r7, r1
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	2198      	movs	r1, #152	; 0x98
 8007350:	187b      	adds	r3, r7, r1
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	23e0      	movs	r3, #224	; 0xe0
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	029b      	lsls	r3, r3, #10
 8007362:	b29b      	uxth	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	b29a      	uxth	r2, r3
 8007368:	187b      	adds	r3, r7, r1
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e026      	b.n	80073be <USB_EPStartXfer+0xe7e>
 8007370:	00000406 	.word	0x00000406
 8007374:	ffff8000 	.word	0xffff8000
 8007378:	00000402 	.word	0x00000402
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d11c      	bne.n	80073be <USB_EPStartXfer+0xe7e>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2250      	movs	r2, #80	; 0x50
 8007388:	5a9b      	ldrh	r3, [r3, r2]
 800738a:	b29b      	uxth	r3, r3
 800738c:	001a      	movs	r2, r3
 800738e:	21a4      	movs	r1, #164	; 0xa4
 8007390:	187b      	adds	r3, r7, r1
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	189b      	adds	r3, r3, r2
 8007396:	187a      	adds	r2, r7, r1
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	18d3      	adds	r3, r2, r3
 80073a6:	4ad2      	ldr	r2, [pc, #840]	; (80076f0 <USB_EPStartXfer+0x11b0>)
 80073a8:	4694      	mov	ip, r2
 80073aa:	4463      	add	r3, ip
 80073ac:	21a0      	movs	r1, #160	; 0xa0
 80073ae:	187a      	adds	r2, r7, r1
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	187b      	adds	r3, r7, r1
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d100      	bne.n	80073c8 <USB_EPStartXfer+0xe88>
 80073c6:	e1c2      	b.n	800774e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	18d2      	adds	r2, r2, r3
 80073d2:	2196      	movs	r1, #150	; 0x96
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	8812      	ldrh	r2, [r2, #0]
 80073d8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073da:	187b      	adds	r3, r7, r1
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	01db      	lsls	r3, r3, #7
 80073e2:	4013      	ands	r3, r2
 80073e4:	d004      	beq.n	80073f0 <USB_EPStartXfer+0xeb0>
 80073e6:	187b      	adds	r3, r7, r1
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	2240      	movs	r2, #64	; 0x40
 80073ec:	4013      	ands	r3, r2
 80073ee:	d10d      	bne.n	800740c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073f0:	2196      	movs	r1, #150	; 0x96
 80073f2:	187b      	adds	r3, r7, r1
 80073f4:	881a      	ldrh	r2, [r3, #0]
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	01db      	lsls	r3, r3, #7
 80073fa:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073fc:	d000      	beq.n	8007400 <USB_EPStartXfer+0xec0>
 80073fe:	e1a6      	b.n	800774e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007400:	187b      	adds	r3, r7, r1
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	2240      	movs	r2, #64	; 0x40
 8007406:	4013      	ands	r3, r2
 8007408:	d000      	beq.n	800740c <USB_EPStartXfer+0xecc>
 800740a:	e1a0      	b.n	800774e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	18d3      	adds	r3, r2, r3
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b29a      	uxth	r2, r3
 800741a:	2094      	movs	r0, #148	; 0x94
 800741c:	183b      	adds	r3, r7, r0
 800741e:	49b5      	ldr	r1, [pc, #724]	; (80076f4 <USB_EPStartXfer+0x11b4>)
 8007420:	400a      	ands	r2, r1
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	18d3      	adds	r3, r2, r3
 800742e:	183a      	adds	r2, r7, r0
 8007430:	8812      	ldrh	r2, [r2, #0]
 8007432:	49b1      	ldr	r1, [pc, #708]	; (80076f8 <USB_EPStartXfer+0x11b8>)
 8007434:	430a      	orrs	r2, r1
 8007436:	b292      	uxth	r2, r2
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	e188      	b.n	800774e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	78db      	ldrb	r3, [r3, #3]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d000      	beq.n	8007446 <USB_EPStartXfer+0xf06>
 8007444:	e181      	b.n	800774a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	429a      	cmp	r2, r3
 8007450:	d90d      	bls.n	800746e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	1d7a      	adds	r2, r7, #5
 8007458:	32ff      	adds	r2, #255	; 0xff
 800745a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	1d7b      	adds	r3, r7, #5
 8007462:	33ff      	adds	r3, #255	; 0xff
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	619a      	str	r2, [r3, #24]
 800746c:	e007      	b.n	800747e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	1d7a      	adds	r2, r7, #5
 8007474:	32ff      	adds	r2, #255	; 0xff
 8007476:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d000      	beq.n	8007488 <USB_EPStartXfer+0xf48>
 8007486:	e082      	b.n	800758e <USB_EPStartXfer+0x104e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	21cc      	movs	r1, #204	; 0xcc
 800748c:	187a      	adds	r2, r7, r1
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2250      	movs	r2, #80	; 0x50
 8007494:	5a9b      	ldrh	r3, [r3, r2]
 8007496:	b29b      	uxth	r3, r3
 8007498:	001a      	movs	r2, r3
 800749a:	187b      	adds	r3, r7, r1
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	187a      	adds	r2, r7, r1
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	00da      	lsls	r2, r3, #3
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	18d3      	adds	r3, r2, r3
 80074b0:	4a92      	ldr	r2, [pc, #584]	; (80076fc <USB_EPStartXfer+0x11bc>)
 80074b2:	4694      	mov	ip, r2
 80074b4:	4463      	add	r3, ip
 80074b6:	21c8      	movs	r1, #200	; 0xc8
 80074b8:	187a      	adds	r2, r7, r1
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	187b      	adds	r3, r7, r1
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	059b      	lsls	r3, r3, #22
 80074c6:	0d9b      	lsrs	r3, r3, #22
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	187b      	adds	r3, r7, r1
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	1d7b      	adds	r3, r7, #5
 80074d2:	33ff      	adds	r3, #255	; 0xff
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b3e      	cmp	r3, #62	; 0x3e
 80074d8:	d925      	bls.n	8007526 <USB_EPStartXfer+0xfe6>
 80074da:	1d7b      	adds	r3, r7, #5
 80074dc:	33ff      	adds	r3, #255	; 0xff
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	21dc      	movs	r1, #220	; 0xdc
 80074e4:	187a      	adds	r2, r7, r1
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	1d7b      	adds	r3, r7, #5
 80074ea:	33ff      	adds	r3, #255	; 0xff
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	221f      	movs	r2, #31
 80074f0:	4013      	ands	r3, r2
 80074f2:	d104      	bne.n	80074fe <USB_EPStartXfer+0xfbe>
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	187a      	adds	r2, r7, r1
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	21c8      	movs	r1, #200	; 0xc8
 8007500:	187b      	adds	r3, r7, r1
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29a      	uxth	r2, r3
 8007508:	23dc      	movs	r3, #220	; 0xdc
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29b      	uxth	r3, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	b29b      	uxth	r3, r3
 8007518:	4a79      	ldr	r2, [pc, #484]	; (8007700 <USB_EPStartXfer+0x11c0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	b29a      	uxth	r2, r3
 800751e:	187b      	adds	r3, r7, r1
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	e058      	b.n	80075d8 <USB_EPStartXfer+0x1098>
 8007526:	1d7b      	adds	r3, r7, #5
 8007528:	33ff      	adds	r3, #255	; 0xff
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10b      	bne.n	8007548 <USB_EPStartXfer+0x1008>
 8007530:	21c8      	movs	r1, #200	; 0xc8
 8007532:	187b      	adds	r3, r7, r1
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	4a71      	ldr	r2, [pc, #452]	; (8007700 <USB_EPStartXfer+0x11c0>)
 800753c:	4313      	orrs	r3, r2
 800753e:	b29a      	uxth	r2, r3
 8007540:	187b      	adds	r3, r7, r1
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e047      	b.n	80075d8 <USB_EPStartXfer+0x1098>
 8007548:	1d7b      	adds	r3, r7, #5
 800754a:	33ff      	adds	r3, #255	; 0xff
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	21dc      	movs	r1, #220	; 0xdc
 8007552:	187a      	adds	r2, r7, r1
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	1d7b      	adds	r3, r7, #5
 8007558:	33ff      	adds	r3, #255	; 0xff
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2201      	movs	r2, #1
 800755e:	4013      	ands	r3, r2
 8007560:	d004      	beq.n	800756c <USB_EPStartXfer+0x102c>
 8007562:	187b      	adds	r3, r7, r1
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	187a      	adds	r2, r7, r1
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	21c8      	movs	r1, #200	; 0xc8
 800756e:	187b      	adds	r3, r7, r1
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	23dc      	movs	r3, #220	; 0xdc
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	029b      	lsls	r3, r3, #10
 8007580:	b29b      	uxth	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	b29a      	uxth	r2, r3
 8007586:	187b      	adds	r3, r7, r1
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e024      	b.n	80075d8 <USB_EPStartXfer+0x1098>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d120      	bne.n	80075d8 <USB_EPStartXfer+0x1098>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	21d4      	movs	r1, #212	; 0xd4
 800759a:	187a      	adds	r2, r7, r1
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2250      	movs	r2, #80	; 0x50
 80075a2:	5a9b      	ldrh	r3, [r3, r2]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	001a      	movs	r2, r3
 80075a8:	187b      	adds	r3, r7, r1
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	189b      	adds	r3, r3, r2
 80075ae:	187a      	adds	r2, r7, r1
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00da      	lsls	r2, r3, #3
 80075b8:	187b      	adds	r3, r7, r1
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	18d3      	adds	r3, r2, r3
 80075be:	4a4f      	ldr	r2, [pc, #316]	; (80076fc <USB_EPStartXfer+0x11bc>)
 80075c0:	4694      	mov	ip, r2
 80075c2:	4463      	add	r3, ip
 80075c4:	21d0      	movs	r1, #208	; 0xd0
 80075c6:	187a      	adds	r2, r7, r1
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	1d7b      	adds	r3, r7, #5
 80075cc:	33ff      	adds	r3, #255	; 0xff
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	187b      	adds	r3, r7, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	22c4      	movs	r2, #196	; 0xc4
 80075dc:	18ba      	adds	r2, r7, r2
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d000      	beq.n	80075ea <USB_EPStartXfer+0x10aa>
 80075e8:	e08c      	b.n	8007704 <USB_EPStartXfer+0x11c4>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	21bc      	movs	r1, #188	; 0xbc
 80075ee:	187a      	adds	r2, r7, r1
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2250      	movs	r2, #80	; 0x50
 80075f6:	5a9b      	ldrh	r3, [r3, r2]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	001a      	movs	r2, r3
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	189b      	adds	r3, r3, r2
 8007602:	187a      	adds	r2, r7, r1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	00da      	lsls	r2, r3, #3
 800760c:	187b      	adds	r3, r7, r1
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	18d3      	adds	r3, r2, r3
 8007612:	4a37      	ldr	r2, [pc, #220]	; (80076f0 <USB_EPStartXfer+0x11b0>)
 8007614:	4694      	mov	ip, r2
 8007616:	4463      	add	r3, ip
 8007618:	21b8      	movs	r1, #184	; 0xb8
 800761a:	187a      	adds	r2, r7, r1
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	187b      	adds	r3, r7, r1
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	059b      	lsls	r3, r3, #22
 8007628:	0d9b      	lsrs	r3, r3, #22
 800762a:	b29a      	uxth	r2, r3
 800762c:	187b      	adds	r3, r7, r1
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	1d7b      	adds	r3, r7, #5
 8007634:	33ff      	adds	r3, #255	; 0xff
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b3e      	cmp	r3, #62	; 0x3e
 800763a:	d925      	bls.n	8007688 <USB_EPStartXfer+0x1148>
 800763c:	1d7b      	adds	r3, r7, #5
 800763e:	33ff      	adds	r3, #255	; 0xff
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	21d8      	movs	r1, #216	; 0xd8
 8007646:	187a      	adds	r2, r7, r1
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	1d7b      	adds	r3, r7, #5
 800764c:	33ff      	adds	r3, #255	; 0xff
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	221f      	movs	r2, #31
 8007652:	4013      	ands	r3, r2
 8007654:	d104      	bne.n	8007660 <USB_EPStartXfer+0x1120>
 8007656:	187b      	adds	r3, r7, r1
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3b01      	subs	r3, #1
 800765c:	187a      	adds	r2, r7, r1
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	21b8      	movs	r1, #184	; 0xb8
 8007662:	187b      	adds	r3, r7, r1
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29a      	uxth	r2, r3
 800766a:	23d8      	movs	r3, #216	; 0xd8
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	029b      	lsls	r3, r3, #10
 8007674:	b29b      	uxth	r3, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	b29b      	uxth	r3, r3
 800767a:	4a21      	ldr	r2, [pc, #132]	; (8007700 <USB_EPStartXfer+0x11c0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	b29a      	uxth	r2, r3
 8007680:	187b      	adds	r3, r7, r1
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e062      	b.n	800774e <USB_EPStartXfer+0x120e>
 8007688:	1d7b      	adds	r3, r7, #5
 800768a:	33ff      	adds	r3, #255	; 0xff
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <USB_EPStartXfer+0x116a>
 8007692:	21b8      	movs	r1, #184	; 0xb8
 8007694:	187b      	adds	r3, r7, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	4a18      	ldr	r2, [pc, #96]	; (8007700 <USB_EPStartXfer+0x11c0>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	187b      	adds	r3, r7, r1
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	e051      	b.n	800774e <USB_EPStartXfer+0x120e>
 80076aa:	1d7b      	adds	r3, r7, #5
 80076ac:	33ff      	adds	r3, #255	; 0xff
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	21d8      	movs	r1, #216	; 0xd8
 80076b4:	187a      	adds	r2, r7, r1
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	1d7b      	adds	r3, r7, #5
 80076ba:	33ff      	adds	r3, #255	; 0xff
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2201      	movs	r2, #1
 80076c0:	4013      	ands	r3, r2
 80076c2:	d004      	beq.n	80076ce <USB_EPStartXfer+0x118e>
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	187a      	adds	r2, r7, r1
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	21b8      	movs	r1, #184	; 0xb8
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	23d8      	movs	r3, #216	; 0xd8
 80076da:	18fb      	adds	r3, r7, r3
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	029b      	lsls	r3, r3, #10
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	187b      	adds	r3, r7, r1
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e02e      	b.n	800774e <USB_EPStartXfer+0x120e>
 80076f0:	00000406 	.word	0x00000406
 80076f4:	ffff8f8f 	.word	0xffff8f8f
 80076f8:	ffff80c0 	.word	0xffff80c0
 80076fc:	00000402 	.word	0x00000402
 8007700:	ffff8000 	.word	0xffff8000
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d120      	bne.n	800774e <USB_EPStartXfer+0x120e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2250      	movs	r2, #80	; 0x50
 8007710:	5a9b      	ldrh	r3, [r3, r2]
 8007712:	b29b      	uxth	r3, r3
 8007714:	001a      	movs	r2, r3
 8007716:	21c4      	movs	r1, #196	; 0xc4
 8007718:	187b      	adds	r3, r7, r1
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	189b      	adds	r3, r3, r2
 800771e:	187a      	adds	r2, r7, r1
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	00da      	lsls	r2, r3, #3
 8007728:	187b      	adds	r3, r7, r1
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	18d3      	adds	r3, r2, r3
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <USB_EPStartXfer+0x1264>)
 8007730:	4694      	mov	ip, r2
 8007732:	4463      	add	r3, ip
 8007734:	21c0      	movs	r1, #192	; 0xc0
 8007736:	187a      	adds	r2, r7, r1
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	1d7b      	adds	r3, r7, #5
 800773c:	33ff      	adds	r3, #255	; 0xff
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b29a      	uxth	r2, r3
 8007742:	187b      	adds	r3, r7, r1
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	e001      	b.n	800774e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e025      	b.n	800779a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	18d3      	adds	r3, r2, r3
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29a      	uxth	r2, r3
 800775c:	208a      	movs	r0, #138	; 0x8a
 800775e:	183b      	adds	r3, r7, r0
 8007760:	4911      	ldr	r1, [pc, #68]	; (80077a8 <USB_EPStartXfer+0x1268>)
 8007762:	400a      	ands	r2, r1
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	183b      	adds	r3, r7, r0
 8007768:	183a      	adds	r2, r7, r0
 800776a:	8812      	ldrh	r2, [r2, #0]
 800776c:	2180      	movs	r1, #128	; 0x80
 800776e:	0149      	lsls	r1, r1, #5
 8007770:	404a      	eors	r2, r1
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	183b      	adds	r3, r7, r0
 8007776:	183a      	adds	r2, r7, r0
 8007778:	8812      	ldrh	r2, [r2, #0]
 800777a:	2180      	movs	r1, #128	; 0x80
 800777c:	0189      	lsls	r1, r1, #6
 800777e:	404a      	eors	r2, r1
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	18d3      	adds	r3, r2, r3
 800778c:	183a      	adds	r2, r7, r0
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	4906      	ldr	r1, [pc, #24]	; (80077ac <USB_EPStartXfer+0x126c>)
 8007792:	430a      	orrs	r2, r1
 8007794:	b292      	uxth	r2, r2
 8007796:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	0018      	movs	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	b043      	add	sp, #268	; 0x10c
 80077a0:	bd90      	pop	{r4, r7, pc}
 80077a2:	46c0      	nop			; (mov r8, r8)
 80077a4:	00000406 	.word	0x00000406
 80077a8:	ffffbf8f 	.word	0xffffbf8f
 80077ac:	ffff8080 	.word	0xffff8080

080077b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01d      	beq.n	80077fe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	18d3      	adds	r3, r2, r3
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	200c      	movs	r0, #12
 80077d2:	183b      	adds	r3, r7, r0
 80077d4:	491b      	ldr	r1, [pc, #108]	; (8007844 <USB_EPSetStall+0x94>)
 80077d6:	400a      	ands	r2, r1
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	183a      	adds	r2, r7, r0
 80077de:	8812      	ldrh	r2, [r2, #0]
 80077e0:	2110      	movs	r1, #16
 80077e2:	404a      	eors	r2, r1
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	18d3      	adds	r3, r2, r3
 80077f0:	183a      	adds	r2, r7, r0
 80077f2:	8812      	ldrh	r2, [r2, #0]
 80077f4:	4914      	ldr	r1, [pc, #80]	; (8007848 <USB_EPSetStall+0x98>)
 80077f6:	430a      	orrs	r2, r1
 80077f8:	b292      	uxth	r2, r2
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e01d      	b.n	800783a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	18d3      	adds	r3, r2, r3
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29a      	uxth	r2, r3
 800780c:	200e      	movs	r0, #14
 800780e:	183b      	adds	r3, r7, r0
 8007810:	490e      	ldr	r1, [pc, #56]	; (800784c <USB_EPSetStall+0x9c>)
 8007812:	400a      	ands	r2, r1
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	183b      	adds	r3, r7, r0
 8007818:	183a      	adds	r2, r7, r0
 800781a:	8812      	ldrh	r2, [r2, #0]
 800781c:	2180      	movs	r1, #128	; 0x80
 800781e:	0149      	lsls	r1, r1, #5
 8007820:	404a      	eors	r2, r1
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	18d3      	adds	r3, r2, r3
 800782e:	183a      	adds	r2, r7, r0
 8007830:	8812      	ldrh	r2, [r2, #0]
 8007832:	4905      	ldr	r1, [pc, #20]	; (8007848 <USB_EPSetStall+0x98>)
 8007834:	430a      	orrs	r2, r1
 8007836:	b292      	uxth	r2, r2
 8007838:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	0018      	movs	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	b004      	add	sp, #16
 8007842:	bd80      	pop	{r7, pc}
 8007844:	ffff8fbf 	.word	0xffff8fbf
 8007848:	ffff8080 	.word	0xffff8080
 800784c:	ffffbf8f 	.word	0xffffbf8f

08007850 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	7b1b      	ldrb	r3, [r3, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d000      	beq.n	8007864 <USB_EPClearStall+0x14>
 8007862:	e095      	b.n	8007990 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d046      	beq.n	80078fa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	18d2      	adds	r2, r2, r3
 8007876:	2110      	movs	r1, #16
 8007878:	187b      	adds	r3, r7, r1
 800787a:	8812      	ldrh	r2, [r2, #0]
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	187b      	adds	r3, r7, r1
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	4013      	ands	r3, r2
 8007886:	d016      	beq.n	80078b6 <USB_EPClearStall+0x66>
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	18d3      	adds	r3, r2, r3
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	200e      	movs	r0, #14
 8007898:	183b      	adds	r3, r7, r0
 800789a:	4940      	ldr	r1, [pc, #256]	; (800799c <USB_EPClearStall+0x14c>)
 800789c:	400a      	ands	r2, r1
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	18d3      	adds	r3, r2, r3
 80078aa:	183a      	adds	r2, r7, r0
 80078ac:	8812      	ldrh	r2, [r2, #0]
 80078ae:	493c      	ldr	r1, [pc, #240]	; (80079a0 <USB_EPClearStall+0x150>)
 80078b0:	430a      	orrs	r2, r1
 80078b2:	b292      	uxth	r2, r2
 80078b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	78db      	ldrb	r3, [r3, #3]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d068      	beq.n	8007990 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	18d3      	adds	r3, r2, r3
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	200c      	movs	r0, #12
 80078ce:	183b      	adds	r3, r7, r0
 80078d0:	4934      	ldr	r1, [pc, #208]	; (80079a4 <USB_EPClearStall+0x154>)
 80078d2:	400a      	ands	r2, r1
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	183b      	adds	r3, r7, r0
 80078d8:	183a      	adds	r2, r7, r0
 80078da:	8812      	ldrh	r2, [r2, #0]
 80078dc:	2120      	movs	r1, #32
 80078de:	404a      	eors	r2, r1
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	18d3      	adds	r3, r2, r3
 80078ec:	183a      	adds	r2, r7, r0
 80078ee:	8812      	ldrh	r2, [r2, #0]
 80078f0:	492d      	ldr	r1, [pc, #180]	; (80079a8 <USB_EPClearStall+0x158>)
 80078f2:	430a      	orrs	r2, r1
 80078f4:	b292      	uxth	r2, r2
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e04a      	b.n	8007990 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	18d2      	adds	r2, r2, r3
 8007904:	2116      	movs	r1, #22
 8007906:	187b      	adds	r3, r7, r1
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	187b      	adds	r3, r7, r1
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	2380      	movs	r3, #128	; 0x80
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	4013      	ands	r3, r2
 8007916:	d016      	beq.n	8007946 <USB_EPClearStall+0xf6>
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	18d3      	adds	r3, r2, r3
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29a      	uxth	r2, r3
 8007926:	2014      	movs	r0, #20
 8007928:	183b      	adds	r3, r7, r0
 800792a:	491c      	ldr	r1, [pc, #112]	; (800799c <USB_EPClearStall+0x14c>)
 800792c:	400a      	ands	r2, r1
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	18d3      	adds	r3, r2, r3
 800793a:	183a      	adds	r2, r7, r0
 800793c:	8812      	ldrh	r2, [r2, #0]
 800793e:	491b      	ldr	r1, [pc, #108]	; (80079ac <USB_EPClearStall+0x15c>)
 8007940:	430a      	orrs	r2, r1
 8007942:	b292      	uxth	r2, r2
 8007944:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	18d3      	adds	r3, r2, r3
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	2012      	movs	r0, #18
 8007956:	183b      	adds	r3, r7, r0
 8007958:	4915      	ldr	r1, [pc, #84]	; (80079b0 <USB_EPClearStall+0x160>)
 800795a:	400a      	ands	r2, r1
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	183b      	adds	r3, r7, r0
 8007960:	183a      	adds	r2, r7, r0
 8007962:	8812      	ldrh	r2, [r2, #0]
 8007964:	2180      	movs	r1, #128	; 0x80
 8007966:	0149      	lsls	r1, r1, #5
 8007968:	404a      	eors	r2, r1
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	183b      	adds	r3, r7, r0
 800796e:	183a      	adds	r2, r7, r0
 8007970:	8812      	ldrh	r2, [r2, #0]
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	0189      	lsls	r1, r1, #6
 8007976:	404a      	eors	r2, r1
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	18d3      	adds	r3, r2, r3
 8007984:	183a      	adds	r2, r7, r0
 8007986:	8812      	ldrh	r2, [r2, #0]
 8007988:	4907      	ldr	r1, [pc, #28]	; (80079a8 <USB_EPClearStall+0x158>)
 800798a:	430a      	orrs	r2, r1
 800798c:	b292      	uxth	r2, r2
 800798e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	b006      	add	sp, #24
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	ffff8f8f 	.word	0xffff8f8f
 80079a0:	ffff80c0 	.word	0xffff80c0
 80079a4:	ffff8fbf 	.word	0xffff8fbf
 80079a8:	ffff8080 	.word	0xffff8080
 80079ac:	ffffc080 	.word	0xffffc080
 80079b0:	ffffbf8f 	.word	0xffffbf8f

080079b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	000a      	movs	r2, r1
 80079be:	1cfb      	adds	r3, r7, #3
 80079c0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80079c2:	1cfb      	adds	r3, r7, #3
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	224c      	movs	r2, #76	; 0x4c
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	0018      	movs	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b002      	add	sp, #8
 80079da:	bd80      	pop	{r7, pc}

080079dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2258      	movs	r2, #88	; 0x58
 80079e8:	5a9b      	ldrh	r3, [r3, r2]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <USB_DevConnect+0x28>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b299      	uxth	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2258      	movs	r2, #88	; 0x58
 80079f6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	0018      	movs	r0, r3
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b002      	add	sp, #8
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	ffff8000 	.word	0xffff8000

08007a08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2244      	movs	r2, #68	; 0x44
 8007a14:	5a9b      	ldrh	r3, [r3, r2]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
}
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b004      	add	sp, #16
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	0019      	movs	r1, r3
 8007a30:	1dbb      	adds	r3, r7, #6
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	1d3b      	adds	r3, r7, #4
 8007a36:	1c0a      	adds	r2, r1, #0
 8007a38:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a3a:	1d3b      	adds	r3, r7, #4
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a4c:	1dbb      	adds	r3, r7, #6
 8007a4e:	881a      	ldrh	r2, [r3, #0]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	00d2      	lsls	r2, r2, #3
 8007a58:	4694      	mov	ip, r2
 8007a5a:	4463      	add	r3, ip
 8007a5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	e020      	b.n	8007aa6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	2112      	movs	r1, #18
 8007a6a:	187b      	adds	r3, r7, r1
 8007a6c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	3301      	adds	r3, #1
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	b21a      	sxth	r2, r3
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	5e1b      	ldrsh	r3, [r3, r0]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b21a      	sxth	r2, r3
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	187a      	adds	r2, r7, r1
 8007a8a:	8812      	ldrh	r2, [r2, #0]
 8007a8c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	3302      	adds	r3, #2
 8007a92:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1db      	bne.n	8007a64 <USB_WritePMA+0x40>
  }
}
 8007aac:	46c0      	nop			; (mov r8, r8)
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b00a      	add	sp, #40	; 0x28
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b08a      	sub	sp, #40	; 0x28
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	1dbb      	adds	r3, r7, #6
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	1d3b      	adds	r3, r7, #4
 8007ac8:	1c0a      	adds	r2, r1, #0
 8007aca:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	085b      	lsrs	r3, r3, #1
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ade:	1dbb      	adds	r3, r7, #6
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	2280      	movs	r2, #128	; 0x80
 8007ae8:	00d2      	lsls	r2, r2, #3
 8007aea:	4694      	mov	ip, r2
 8007aec:	4463      	add	r3, ip
 8007aee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
 8007af4:	e018      	b.n	8007b28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	3302      	adds	r3, #2
 8007b02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	3b01      	subs	r3, #1
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e3      	bne.n	8007af6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	2201      	movs	r2, #1
 8007b34:	4013      	ands	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	701a      	strb	r2, [r3, #0]
  }
}
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b00a      	add	sp, #40	; 0x28
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	000a      	movs	r2, r1
 8007b5e:	1cfb      	adds	r3, r7, #3
 8007b60:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007b62:	230f      	movs	r3, #15
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c1b      	ldrb	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d116      	bne.n	8007ba0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b72:	2380      	movs	r3, #128	; 0x80
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	2181      	movs	r1, #129	; 0x81
 8007b7c:	f002 f885 	bl	8009c8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b86:	2380      	movs	r3, #128	; 0x80
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	2101      	movs	r1, #1
 8007b90:	f002 f87b 	bl	8009c8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	23b6      	movs	r3, #182	; 0xb6
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	50d1      	str	r1, [r2, r3]
 8007b9e:	e013      	b.n	8007bc8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	2340      	movs	r3, #64	; 0x40
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	2181      	movs	r1, #129	; 0x81
 8007ba8:	f002 f86f 	bl	8009c8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	2101      	movs	r1, #1
 8007bba:	f002 f866 	bl	8009c8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	23b6      	movs	r3, #182	; 0xb6
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	2308      	movs	r3, #8
 8007bcc:	2203      	movs	r2, #3
 8007bce:	2182      	movs	r1, #130	; 0x82
 8007bd0:	f002 f85b 	bl	8009c8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bda:	2387      	movs	r3, #135	; 0x87
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f002 f9ec 	bl	8009fbc <USBD_static_malloc>
 8007be4:	0001      	movs	r1, r0
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	23ae      	movs	r3, #174	; 0xae
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	23ae      	movs	r3, #174	; 0xae
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	58d3      	ldr	r3, [r2, r3]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d104      	bne.n	8007c04 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8007bfa:	230f      	movs	r3, #15
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	2201      	movs	r2, #1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	e02c      	b.n	8007c5e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	23ae      	movs	r3, #174	; 0xae
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	58d3      	ldr	r3, [r2, r3]
 8007c0c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	23af      	movs	r3, #175	; 0xaf
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	58d3      	ldr	r3, [r2, r3]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	2385      	movs	r3, #133	; 0x85
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	2100      	movs	r1, #0
 8007c22:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	2386      	movs	r3, #134	; 0x86
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7c1b      	ldrb	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	2381      	movs	r3, #129	; 0x81
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	58d2      	ldr	r2, [r2, r3]
 8007c3e:	2380      	movs	r3, #128	; 0x80
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	2101      	movs	r1, #1
 8007c46:	f002 f96b 	bl	8009f20 <USBD_LL_PrepareReceive>
 8007c4a:	e008      	b.n	8007c5e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	2381      	movs	r3, #129	; 0x81
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	58d2      	ldr	r2, [r2, r3]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	2340      	movs	r3, #64	; 0x40
 8007c58:	2101      	movs	r1, #1
 8007c5a:	f002 f961 	bl	8009f20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007c5e:	230f      	movs	r3, #15
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	781b      	ldrb	r3, [r3, #0]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	000a      	movs	r2, r1
 8007c76:	1cfb      	adds	r3, r7, #3
 8007c78:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007c7a:	230f      	movs	r3, #15
 8007c7c:	18fb      	adds	r3, r7, r3
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2181      	movs	r1, #129	; 0x81
 8007c86:	0018      	movs	r0, r3
 8007c88:	f002 f836 	bl	8009cf8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2101      	movs	r1, #1
 8007c96:	0018      	movs	r0, r3
 8007c98:	f002 f82e 	bl	8009cf8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	23b6      	movs	r3, #182	; 0xb6
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2182      	movs	r1, #130	; 0x82
 8007caa:	0018      	movs	r0, r3
 8007cac:	f002 f824 	bl	8009cf8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	23ae      	movs	r3, #174	; 0xae
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	58d3      	ldr	r3, [r2, r3]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d011      	beq.n	8007ce6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	23af      	movs	r3, #175	; 0xaf
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	58d3      	ldr	r3, [r2, r3]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	23ae      	movs	r3, #174	; 0xae
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	58d3      	ldr	r3, [r2, r3]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f002 f97c 	bl	8009fd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	23ae      	movs	r3, #174	; 0xae
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8007ce6:	230f      	movs	r3, #15
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	781b      	ldrb	r3, [r3, #0]
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b004      	add	sp, #16
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	23ae      	movs	r3, #174	; 0xae
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	58d3      	ldr	r3, [r2, r3]
 8007d06:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d08:	230f      	movs	r3, #15
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8007d10:	230c      	movs	r3, #12
 8007d12:	18fb      	adds	r3, r7, r3
 8007d14:	2200      	movs	r2, #0
 8007d16:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007d18:	2317      	movs	r3, #23
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	001a      	movs	r2, r3
 8007d26:	2360      	movs	r3, #96	; 0x60
 8007d28:	4013      	ands	r3, r2
 8007d2a:	d03d      	beq.n	8007da8 <USBD_CDC_Setup+0xb4>
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d000      	beq.n	8007d32 <USBD_CDC_Setup+0x3e>
 8007d30:	e094      	b.n	8007e5c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d02b      	beq.n	8007d92 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b25b      	sxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da12      	bge.n	8007d6a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	23af      	movs	r3, #175	; 0xaf
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	58d3      	ldr	r3, [r2, r3]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007d52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	88d2      	ldrh	r2, [r2, #6]
 8007d58:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d5a:	6939      	ldr	r1, [r7, #16]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	88da      	ldrh	r2, [r3, #6]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	0018      	movs	r0, r3
 8007d64:	f001 fbb2 	bl	80094cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d68:	e083      	b.n	8007e72 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	7859      	ldrb	r1, [r3, #1]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88db      	ldrh	r3, [r3, #6]
 8007d7a:	b2d9      	uxtb	r1, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4a40      	ldr	r2, [pc, #256]	; (8007e80 <USBD_CDC_Setup+0x18c>)
 8007d80:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d82:	6939      	ldr	r1, [r7, #16]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	88da      	ldrh	r2, [r3, #6]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f001 fbd1 	bl	8009532 <USBD_CtlPrepareRx>
      break;
 8007d90:	e06f      	b.n	8007e72 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	23af      	movs	r3, #175	; 0xaf
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	58d3      	ldr	r3, [r2, r3]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	7850      	ldrb	r0, [r2, #1]
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	4798      	blx	r3
      break;
 8007da6:	e064      	b.n	8007e72 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	d037      	beq.n	8007e20 <USBD_CDC_Setup+0x12c>
 8007db0:	dc47      	bgt.n	8007e42 <USBD_CDC_Setup+0x14e>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <USBD_CDC_Setup+0xc8>
 8007db6:	2b0a      	cmp	r3, #10
 8007db8:	d019      	beq.n	8007dee <USBD_CDC_Setup+0xfa>
 8007dba:	e042      	b.n	8007e42 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	23a7      	movs	r3, #167	; 0xa7
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	5cd3      	ldrb	r3, [r2, r3]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d107      	bne.n	8007dd8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007dc8:	230c      	movs	r3, #12
 8007dca:	18f9      	adds	r1, r7, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f001 fb7b 	bl	80094cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dd6:	e040      	b.n	8007e5a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	0011      	movs	r1, r2
 8007dde:	0018      	movs	r0, r3
 8007de0:	f001 faf6 	bl	80093d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007de4:	2317      	movs	r3, #23
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	2202      	movs	r2, #2
 8007dea:	701a      	strb	r2, [r3, #0]
          break;
 8007dec:	e035      	b.n	8007e5a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	23a7      	movs	r3, #167	; 0xa7
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	5cd3      	ldrb	r3, [r2, r3]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d107      	bne.n	8007e0a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dfa:	230f      	movs	r3, #15
 8007dfc:	18f9      	adds	r1, r7, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	0018      	movs	r0, r3
 8007e04:	f001 fb62 	bl	80094cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e08:	e027      	b.n	8007e5a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	0011      	movs	r1, r2
 8007e10:	0018      	movs	r0, r3
 8007e12:	f001 fadd 	bl	80093d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e16:	2317      	movs	r3, #23
 8007e18:	18fb      	adds	r3, r7, r3
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	701a      	strb	r2, [r3, #0]
          break;
 8007e1e:	e01c      	b.n	8007e5a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	23a7      	movs	r3, #167	; 0xa7
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	5cd3      	ldrb	r3, [r2, r3]
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d015      	beq.n	8007e58 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0011      	movs	r1, r2
 8007e32:	0018      	movs	r0, r3
 8007e34:	f001 facc 	bl	80093d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e38:	2317      	movs	r3, #23
 8007e3a:	18fb      	adds	r3, r7, r3
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007e40:	e00a      	b.n	8007e58 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	0011      	movs	r1, r2
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f001 fac1 	bl	80093d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4e:	2317      	movs	r3, #23
 8007e50:	18fb      	adds	r3, r7, r3
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]
          break;
 8007e56:	e000      	b.n	8007e5a <USBD_CDC_Setup+0x166>
          break;
 8007e58:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007e5a:	e00a      	b.n	8007e72 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	0011      	movs	r1, r2
 8007e62:	0018      	movs	r0, r3
 8007e64:	f001 fab4 	bl	80093d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e68:	2317      	movs	r3, #23
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	701a      	strb	r2, [r3, #0]
      break;
 8007e70:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007e72:	2317      	movs	r3, #23
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	781b      	ldrb	r3, [r3, #0]
}
 8007e78:	0018      	movs	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b006      	add	sp, #24
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	00000201 	.word	0x00000201

08007e84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	000a      	movs	r2, r1
 8007e8e:	1cfb      	adds	r3, r7, #3
 8007e90:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	23ae      	movs	r3, #174	; 0xae
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	58d3      	ldr	r3, [r2, r3]
 8007e9a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	23b0      	movs	r3, #176	; 0xb0
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	58d3      	ldr	r3, [r2, r3]
 8007ea4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	23ae      	movs	r3, #174	; 0xae
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	58d3      	ldr	r3, [r2, r3]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03e      	beq.n	8007f30 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007eb2:	1cfb      	adds	r3, r7, #3
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	0013      	movs	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	18cb      	adds	r3, r1, r3
 8007ec2:	331c      	adds	r3, #28
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02b      	beq.n	8007f22 <USBD_CDC_DataIn+0x9e>
 8007eca:	1cfb      	adds	r3, r7, #3
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	0013      	movs	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	18cb      	adds	r3, r1, r3
 8007eda:	331c      	adds	r3, #28
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	1cfb      	adds	r3, r7, #3
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	0013      	movs	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	189b      	adds	r3, r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	18cb      	adds	r3, r1, r3
 8007eee:	3338      	adds	r3, #56	; 0x38
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	f7f8 f998 	bl	8000228 <__aeabi_uidivmod>
 8007ef8:	1e0b      	subs	r3, r1, #0
 8007efa:	d112      	bne.n	8007f22 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007efc:	1cfb      	adds	r3, r7, #3
 8007efe:	781a      	ldrb	r2, [r3, #0]
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	0013      	movs	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	18cb      	adds	r3, r1, r3
 8007f0c:	331c      	adds	r3, #28
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f12:	1cfb      	adds	r3, r7, #3
 8007f14:	7819      	ldrb	r1, [r3, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f001 ffc9 	bl	8009eb2 <USBD_LL_Transmit>
 8007f20:	e004      	b.n	8007f2c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	2385      	movs	r3, #133	; 0x85
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	2100      	movs	r1, #0
 8007f2a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	0018      	movs	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	b004      	add	sp, #16
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	000a      	movs	r2, r1
 8007f44:	1cfb      	adds	r3, r7, #3
 8007f46:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	23ae      	movs	r3, #174	; 0xae
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	58d3      	ldr	r3, [r2, r3]
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f52:	1cfb      	adds	r3, r7, #3
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	0011      	movs	r1, r2
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f002 f817 	bl	8009f8e <USBD_LL_GetRxDataSize>
 8007f60:	0001      	movs	r1, r0
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	2383      	movs	r3, #131	; 0x83
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	23ae      	movs	r3, #174	; 0xae
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	58d3      	ldr	r3, [r2, r3]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d011      	beq.n	8007f9a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	23af      	movs	r3, #175	; 0xaf
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	58d3      	ldr	r3, [r2, r3]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68f9      	ldr	r1, [r7, #12]
 8007f82:	2381      	movs	r3, #129	; 0x81
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	58c8      	ldr	r0, [r1, r3]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2183      	movs	r1, #131	; 0x83
 8007f8c:	0089      	lsls	r1, r1, #2
 8007f8e:	468c      	mov	ip, r1
 8007f90:	4463      	add	r3, ip
 8007f92:	0019      	movs	r1, r3
 8007f94:	4790      	blx	r2

    return USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e000      	b.n	8007f9c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8007f9a:	2302      	movs	r3, #2
  }
}
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b004      	add	sp, #16
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	23ae      	movs	r3, #174	; 0xae
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	58d3      	ldr	r3, [r2, r3]
 8007fb4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	23af      	movs	r3, #175	; 0xaf
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	58d3      	ldr	r3, [r2, r3]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d019      	beq.n	8007ff6 <USBD_CDC_EP0_RxReady+0x52>
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
 8007fca:	2bff      	cmp	r3, #255	; 0xff
 8007fcc:	d013      	beq.n	8007ff6 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	23af      	movs	r3, #175	; 0xaf
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	58d3      	ldr	r3, [r2, r3]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	0092      	lsls	r2, r2, #2
 8007fde:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8007fe0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4c06      	ldr	r4, [pc, #24]	; (8008000 <USBD_CDC_EP0_RxReady+0x5c>)
 8007fe6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	21ff      	movs	r1, #255	; 0xff
 8007ff4:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b005      	add	sp, #20
 8007ffe:	bd90      	pop	{r4, r7, pc}
 8008000:	00000201 	.word	0x00000201

08008004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2243      	movs	r2, #67	; 0x43
 8008010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008012:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	b002      	add	sp, #8
 800801a:	bd80      	pop	{r7, pc}
 800801c:	2000019c 	.word	0x2000019c

08008020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2243      	movs	r2, #67	; 0x43
 800802c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800802e:	4b02      	ldr	r3, [pc, #8]	; (8008038 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8008030:	0018      	movs	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	b002      	add	sp, #8
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000158 	.word	0x20000158

0800803c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2243      	movs	r2, #67	; 0x43
 8008048:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800804a:	4b02      	ldr	r3, [pc, #8]	; (8008054 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b002      	add	sp, #8
 8008052:	bd80      	pop	{r7, pc}
 8008054:	200001e0 	.word	0x200001e0

08008058 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	220a      	movs	r2, #10
 8008064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008066:	4b02      	ldr	r3, [pc, #8]	; (8008070 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b002      	add	sp, #8
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000114 	.word	0x20000114

08008074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800807e:	200f      	movs	r0, #15
 8008080:	183b      	adds	r3, r7, r0
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	23af      	movs	r3, #175	; 0xaf
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8008096:	183b      	adds	r3, r7, r0
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800809c:	230f      	movs	r3, #15
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	781b      	ldrb	r3, [r3, #0]
}
 80080a2:	0018      	movs	r0, r3
 80080a4:	46bd      	mov	sp, r7
 80080a6:	b004      	add	sp, #16
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	1dbb      	adds	r3, r7, #6
 80080b6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	23ae      	movs	r3, #174	; 0xae
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	58d3      	ldr	r3, [r2, r3]
 80080c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	2382      	movs	r3, #130	; 0x82
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80080cc:	1dbb      	adds	r3, r7, #6
 80080ce:	8819      	ldrh	r1, [r3, #0]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	2384      	movs	r3, #132	; 0x84
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	0018      	movs	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	b006      	add	sp, #24
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	23ae      	movs	r3, #174	; 0xae
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	58d3      	ldr	r3, [r2, r3]
 80080f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	2381      	movs	r3, #129	; 0x81
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	0018      	movs	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	b004      	add	sp, #16
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	23ae      	movs	r3, #174	; 0xae
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	58d3      	ldr	r3, [r2, r3]
 800811a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	23ae      	movs	r3, #174	; 0xae
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	58d3      	ldr	r3, [r2, r3]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d022      	beq.n	800816e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	2385      	movs	r3, #133	; 0x85
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	58d3      	ldr	r3, [r2, r3]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11a      	bne.n	800816a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	2385      	movs	r3, #133	; 0x85
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	2101      	movs	r1, #1
 800813c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	2384      	movs	r3, #132	; 0x84
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	58d2      	ldr	r2, [r2, r3]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	2382      	movs	r3, #130	; 0x82
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	2384      	movs	r3, #132	; 0x84
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800815a:	b29b      	uxth	r3, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	000a      	movs	r2, r1
 8008160:	2181      	movs	r1, #129	; 0x81
 8008162:	f001 fea6 	bl	8009eb2 <USBD_LL_Transmit>

      return USBD_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	e002      	b.n	8008170 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800816e:	2302      	movs	r3, #2
  }
}
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	b004      	add	sp, #16
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	23ae      	movs	r3, #174	; 0xae
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	58d3      	ldr	r3, [r2, r3]
 8008188:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	23ae      	movs	r3, #174	; 0xae
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	58d3      	ldr	r3, [r2, r3]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d019      	beq.n	80081ca <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	7c1b      	ldrb	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	2381      	movs	r3, #129	; 0x81
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	58d2      	ldr	r2, [r2, r3]
 80081a6:	2380      	movs	r3, #128	; 0x80
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	2101      	movs	r1, #1
 80081ae:	f001 feb7 	bl	8009f20 <USBD_LL_PrepareReceive>
 80081b2:	e008      	b.n	80081c6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	2381      	movs	r3, #129	; 0x81
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	58d2      	ldr	r2, [r2, r3]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	2340      	movs	r3, #64	; 0x40
 80081c0:	2101      	movs	r1, #1
 80081c2:	f001 fead 	bl	8009f20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b004      	add	sp, #16
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	1dfb      	adds	r3, r7, #7
 80081e0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081e8:	2302      	movs	r3, #2
 80081ea:	e020      	b.n	800822e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	23ad      	movs	r3, #173	; 0xad
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	58d3      	ldr	r3, [r2, r3]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	23ad      	movs	r3, #173	; 0xad
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	2100      	movs	r1, #0
 8008200:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	23ac      	movs	r3, #172	; 0xac
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	23a7      	movs	r3, #167	; 0xa7
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	2101      	movs	r1, #1
 800821a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1dfa      	adds	r2, r7, #7
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0018      	movs	r0, r3
 8008228:	f001 fca6 	bl	8009b78 <USBD_LL_Init>

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b004      	add	sp, #16
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008240:	200f      	movs	r0, #15
 8008242:	183b      	adds	r3, r7, r0
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	23ad      	movs	r3, #173	; 0xad
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008258:	183b      	adds	r3, r7, r0
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e003      	b.n	8008268 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008260:	230f      	movs	r3, #15
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	2202      	movs	r2, #2
 8008266:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008268:	230f      	movs	r3, #15
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	781b      	ldrb	r3, [r3, #0]
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b004      	add	sp, #16
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	0018      	movs	r0, r3
 8008282:	f001 fcdd 	bl	8009c40 <USBD_LL_Start>

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	0018      	movs	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	0018      	movs	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	b002      	add	sp, #8
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082a2:	b590      	push	{r4, r7, lr}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	000a      	movs	r2, r1
 80082ac:	1cfb      	adds	r3, r7, #3
 80082ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082b0:	240f      	movs	r4, #15
 80082b2:	193b      	adds	r3, r7, r4
 80082b4:	2202      	movs	r2, #2
 80082b6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	23ad      	movs	r3, #173	; 0xad
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	58d3      	ldr	r3, [r2, r3]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00e      	beq.n	80082e2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	23ad      	movs	r3, #173	; 0xad
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	58d3      	ldr	r3, [r2, r3]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	1cfa      	adds	r2, r7, #3
 80082d0:	7811      	ldrb	r1, [r2, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	0010      	movs	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	1e03      	subs	r3, r0, #0
 80082da:	d102      	bne.n	80082e2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80082dc:	193b      	adds	r3, r7, r4
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80082e2:	230f      	movs	r3, #15
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	781b      	ldrb	r3, [r3, #0]
}
 80082e8:	0018      	movs	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b005      	add	sp, #20
 80082ee:	bd90      	pop	{r4, r7, pc}

080082f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	000a      	movs	r2, r1
 80082fa:	1cfb      	adds	r3, r7, #3
 80082fc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	23ad      	movs	r3, #173	; 0xad
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	58d3      	ldr	r3, [r2, r3]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	1cfa      	adds	r2, r7, #3
 800830a:	7811      	ldrb	r1, [r2, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	0010      	movs	r0, r2
 8008310:	4798      	blx	r3

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	0018      	movs	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	b002      	add	sp, #8
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	22aa      	movs	r2, #170	; 0xaa
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	4694      	mov	ip, r2
 800832e:	4463      	add	r3, ip
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	0011      	movs	r1, r2
 8008334:	0018      	movs	r0, r3
 8008336:	f001 f810 	bl	800935a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	23a5      	movs	r3, #165	; 0xa5
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	2101      	movs	r1, #1
 8008342:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a23      	ldr	r2, [pc, #140]	; (80083d4 <USBD_LL_SetupStage+0xb8>)
 8008348:	5a9b      	ldrh	r3, [r3, r2]
 800834a:	0019      	movs	r1, r3
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	23a6      	movs	r3, #166	; 0xa6
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	23aa      	movs	r3, #170	; 0xaa
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	5cd3      	ldrb	r3, [r2, r3]
 800835c:	001a      	movs	r2, r3
 800835e:	231f      	movs	r3, #31
 8008360:	4013      	ands	r3, r2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d019      	beq.n	800839a <USBD_LL_SetupStage+0x7e>
 8008366:	d822      	bhi.n	80083ae <USBD_LL_SetupStage+0x92>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <USBD_LL_SetupStage+0x56>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d00a      	beq.n	8008386 <USBD_LL_SetupStage+0x6a>
 8008370:	e01d      	b.n	80083ae <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	22aa      	movs	r2, #170	; 0xaa
 8008376:	0092      	lsls	r2, r2, #2
 8008378:	189a      	adds	r2, r3, r2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0011      	movs	r1, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f000 fa10 	bl	80087a4 <USBD_StdDevReq>
      break;
 8008384:	e020      	b.n	80083c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	22aa      	movs	r2, #170	; 0xaa
 800838a:	0092      	lsls	r2, r2, #2
 800838c:	189a      	adds	r2, r3, r2
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	0011      	movs	r1, r2
 8008392:	0018      	movs	r0, r3
 8008394:	f000 fa78 	bl	8008888 <USBD_StdItfReq>
      break;
 8008398:	e016      	b.n	80083c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	22aa      	movs	r2, #170	; 0xaa
 800839e:	0092      	lsls	r2, r2, #2
 80083a0:	189a      	adds	r2, r3, r2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	0011      	movs	r1, r2
 80083a6:	0018      	movs	r0, r3
 80083a8:	f000 fac5 	bl	8008936 <USBD_StdEPReq>
      break;
 80083ac:	e00c      	b.n	80083c8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	23aa      	movs	r3, #170	; 0xaa
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	5cd3      	ldrb	r3, [r2, r3]
 80083b6:	227f      	movs	r2, #127	; 0x7f
 80083b8:	4393      	bics	r3, r2
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	0011      	movs	r1, r2
 80083c0:	0018      	movs	r0, r3
 80083c2:	f001 fcc4 	bl	8009d4e <USBD_LL_StallEP>
      break;
 80083c6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	0018      	movs	r0, r3
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b002      	add	sp, #8
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	000002ae 	.word	0x000002ae

080083d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	200b      	movs	r0, #11
 80083e4:	183b      	adds	r3, r7, r0
 80083e6:	1c0a      	adds	r2, r1, #0
 80083e8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d154      	bne.n	800849c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3355      	adds	r3, #85	; 0x55
 80083f6:	33ff      	adds	r3, #255	; 0xff
 80083f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	23a5      	movs	r3, #165	; 0xa5
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	58d3      	ldr	r3, [r2, r3]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d139      	bne.n	800847a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	429a      	cmp	r2, r3
 8008410:	d919      	bls.n	8008446 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008428:	429a      	cmp	r2, r3
 800842a:	d203      	bcs.n	8008434 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008430:	b29b      	uxth	r3, r3
 8008432:	e002      	b.n	800843a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008438:	b29b      	uxth	r3, r3
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	001a      	movs	r2, r3
 8008440:	f001 f89b 	bl	800957a <USBD_CtlContinueRx>
 8008444:	e045      	b.n	80084d2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	23ad      	movs	r3, #173	; 0xad
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	58d3      	ldr	r3, [r2, r3]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	23a7      	movs	r3, #167	; 0xa7
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800845c:	2b03      	cmp	r3, #3
 800845e:	d107      	bne.n	8008470 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	23ad      	movs	r3, #173	; 0xad
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	58d3      	ldr	r3, [r2, r3]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	0010      	movs	r0, r2
 800846e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0018      	movs	r0, r3
 8008474:	f001 f894 	bl	80095a0 <USBD_CtlSendStatus>
 8008478:	e02b      	b.n	80084d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	23a5      	movs	r3, #165	; 0xa5
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	58d3      	ldr	r3, [r2, r3]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d125      	bne.n	80084d2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	23a5      	movs	r3, #165	; 0xa5
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	2100      	movs	r1, #0
 800848e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2100      	movs	r1, #0
 8008494:	0018      	movs	r0, r3
 8008496:	f001 fc5a 	bl	8009d4e <USBD_LL_StallEP>
 800849a:	e01a      	b.n	80084d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	23ad      	movs	r3, #173	; 0xad
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	58d3      	ldr	r3, [r2, r3]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d011      	beq.n	80084ce <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	23a7      	movs	r3, #167	; 0xa7
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d10b      	bne.n	80084ce <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	23ad      	movs	r3, #173	; 0xad
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	58d3      	ldr	r3, [r2, r3]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	220b      	movs	r2, #11
 80084c2:	18ba      	adds	r2, r7, r2
 80084c4:	7811      	ldrb	r1, [r2, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	0010      	movs	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	e001      	b.n	80084d2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084ce:	2302      	movs	r3, #2
 80084d0:	e000      	b.n	80084d4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	0018      	movs	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b006      	add	sp, #24
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	200b      	movs	r0, #11
 80084e8:	183b      	adds	r3, r7, r0
 80084ea:	1c0a      	adds	r2, r1, #0
 80084ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d000      	beq.n	80084f8 <USBD_LL_DataInStage+0x1c>
 80084f6:	e08e      	b.n	8008616 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3314      	adds	r3, #20
 80084fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	23a5      	movs	r3, #165	; 0xa5
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	58d3      	ldr	r3, [r2, r3]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d164      	bne.n	80085d4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d915      	bls.n	8008542 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	b29a      	uxth	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	0018      	movs	r0, r3
 8008530:	f000 ffec 	bl	800950c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	2300      	movs	r3, #0
 8008538:	2200      	movs	r2, #0
 800853a:	2100      	movs	r1, #0
 800853c:	f001 fcf0 	bl	8009f20 <USBD_LL_PrepareReceive>
 8008540:	e059      	b.n	80085f6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	0019      	movs	r1, r3
 800854c:	0010      	movs	r0, r2
 800854e:	f7f7 fe6b 	bl	8000228 <__aeabi_uidivmod>
 8008552:	1e0b      	subs	r3, r1, #0
 8008554:	d11f      	bne.n	8008596 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800855e:	429a      	cmp	r2, r3
 8008560:	d319      	bcc.n	8008596 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	23a6      	movs	r3, #166	; 0xa6
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800856e:	429a      	cmp	r2, r3
 8008570:	d211      	bcs.n	8008596 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	2100      	movs	r1, #0
 8008578:	0018      	movs	r0, r3
 800857a:	f000 ffc7 	bl	800950c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	23a6      	movs	r3, #166	; 0xa6
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	2100      	movs	r1, #0
 8008586:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	2300      	movs	r3, #0
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	f001 fcc6 	bl	8009f20 <USBD_LL_PrepareReceive>
 8008594:	e02f      	b.n	80085f6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	23ad      	movs	r3, #173	; 0xad
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	58d3      	ldr	r3, [r2, r3]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00d      	beq.n	80085c0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	23a7      	movs	r3, #167	; 0xa7
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d107      	bne.n	80085c0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	23ad      	movs	r3, #173	; 0xad
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	58d3      	ldr	r3, [r2, r3]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	0010      	movs	r0, r2
 80085be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	0018      	movs	r0, r3
 80085c6:	f001 fbc2 	bl	8009d4e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0018      	movs	r0, r3
 80085ce:	f000 fffb 	bl	80095c8 <USBD_CtlReceiveStatus>
 80085d2:	e010      	b.n	80085f6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	23a5      	movs	r3, #165	; 0xa5
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	58d3      	ldr	r3, [r2, r3]
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d005      	beq.n	80085ec <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	23a5      	movs	r3, #165	; 0xa5
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	0018      	movs	r0, r3
 80085f2:	f001 fbac 	bl	8009d4e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	23a8      	movs	r3, #168	; 0xa8
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	5cd3      	ldrb	r3, [r2, r3]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d124      	bne.n	800864c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	0018      	movs	r0, r3
 8008606:	f7ff fe43 	bl	8008290 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	23a8      	movs	r3, #168	; 0xa8
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	2100      	movs	r1, #0
 8008612:	54d1      	strb	r1, [r2, r3]
 8008614:	e01a      	b.n	800864c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	23ad      	movs	r3, #173	; 0xad
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	58d3      	ldr	r3, [r2, r3]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d011      	beq.n	8008648 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	23a7      	movs	r3, #167	; 0xa7
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800862c:	2b03      	cmp	r3, #3
 800862e:	d10b      	bne.n	8008648 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	23ad      	movs	r3, #173	; 0xad
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	58d3      	ldr	r3, [r2, r3]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	220b      	movs	r2, #11
 800863c:	18ba      	adds	r2, r7, r2
 800863e:	7811      	ldrb	r1, [r2, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	0010      	movs	r0, r2
 8008644:	4798      	blx	r3
 8008646:	e001      	b.n	800864c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008648:	2302      	movs	r3, #2
 800864a:	e000      	b.n	800864e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b006      	add	sp, #24
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	2200      	movs	r2, #0
 8008664:	2100      	movs	r1, #0
 8008666:	f001 fb10 	bl	8009c8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	23ac      	movs	r3, #172	; 0xac
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	2101      	movs	r1, #1
 8008672:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	23b2      	movs	r3, #178	; 0xb2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	2140      	movs	r1, #64	; 0x40
 800867c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	2200      	movs	r2, #0
 8008684:	2180      	movs	r1, #128	; 0x80
 8008686:	f001 fb00 	bl	8009c8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2240      	movs	r2, #64	; 0x40
 8008694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	23a7      	movs	r3, #167	; 0xa7
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	2101      	movs	r1, #1
 800869e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	23a5      	movs	r3, #165	; 0xa5
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	2100      	movs	r1, #0
 80086a8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	23a9      	movs	r3, #169	; 0xa9
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	2100      	movs	r1, #0
 80086b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	23ae      	movs	r3, #174	; 0xae
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	58d3      	ldr	r3, [r2, r3]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	23ad      	movs	r3, #173	; 0xad
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	58d3      	ldr	r3, [r2, r3]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	b2d9      	uxtb	r1, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	0018      	movs	r0, r3
 80086da:	4790      	blx	r2
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	0018      	movs	r0, r3
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b002      	add	sp, #8
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	000a      	movs	r2, r1
 80086f0:	1cfb      	adds	r3, r7, #3
 80086f2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	1cfa      	adds	r2, r7, #3
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	23a7      	movs	r3, #167	; 0xa7
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	5cd1      	ldrb	r1, [r2, r3]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a06      	ldr	r2, [pc, #24]	; (8008734 <USBD_LL_Suspend+0x2c>)
 800871c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	23a7      	movs	r3, #167	; 0xa7
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	2104      	movs	r1, #4
 8008726:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	0018      	movs	r0, r3
 800872c:	46bd      	mov	sp, r7
 800872e:	b002      	add	sp, #8
 8008730:	bd80      	pop	{r7, pc}
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	0000029d 	.word	0x0000029d

08008738 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	23a7      	movs	r3, #167	; 0xa7
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	5cd3      	ldrb	r3, [r2, r3]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d106      	bne.n	800875a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a05      	ldr	r2, [pc, #20]	; (8008764 <USBD_LL_Resume+0x2c>)
 8008750:	5c99      	ldrb	r1, [r3, r2]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	23a7      	movs	r3, #167	; 0xa7
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	0018      	movs	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	b002      	add	sp, #8
 8008762:	bd80      	pop	{r7, pc}
 8008764:	0000029d 	.word	0x0000029d

08008768 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	23a7      	movs	r3, #167	; 0xa7
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	5cd3      	ldrb	r3, [r2, r3]
 8008778:	2b03      	cmp	r3, #3
 800877a:	d10e      	bne.n	800879a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	23ad      	movs	r3, #173	; 0xad
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	58d3      	ldr	r3, [r2, r3]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	23ad      	movs	r3, #173	; 0xad
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	58d3      	ldr	r3, [r2, r3]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	0010      	movs	r0, r2
 8008798:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	0018      	movs	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	b002      	add	sp, #8
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	230f      	movs	r3, #15
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	001a      	movs	r2, r3
 80087bc:	2360      	movs	r3, #96	; 0x60
 80087be:	4013      	ands	r3, r2
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d004      	beq.n	80087ce <USBD_StdDevReq+0x2a>
 80087c4:	d84f      	bhi.n	8008866 <USBD_StdDevReq+0xc2>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <USBD_StdDevReq+0x3e>
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d14b      	bne.n	8008866 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	23ad      	movs	r3, #173	; 0xad
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	58d3      	ldr	r3, [r2, r3]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	0010      	movs	r0, r2
 80087de:	4798      	blx	r3
      break;
 80087e0:	e048      	b.n	8008874 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b09      	cmp	r3, #9
 80087e8:	d835      	bhi.n	8008856 <USBD_StdDevReq+0xb2>
 80087ea:	009a      	lsls	r2, r3, #2
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <USBD_StdDevReq+0xe0>)
 80087ee:	18d3      	adds	r3, r2, r3
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0011      	movs	r1, r2
 80087fa:	0018      	movs	r0, r3
 80087fc:	f000 fa52 	bl	8008ca4 <USBD_GetDescriptor>
          break;
 8008800:	e030      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	0011      	movs	r1, r2
 8008808:	0018      	movs	r0, r3
 800880a:	f000 fbfd 	bl	8009008 <USBD_SetAddress>
          break;
 800880e:	e029      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	0011      	movs	r1, r2
 8008816:	0018      	movs	r0, r3
 8008818:	f000 fc4a 	bl	80090b0 <USBD_SetConfig>
          break;
 800881c:	e022      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	0011      	movs	r1, r2
 8008824:	0018      	movs	r0, r3
 8008826:	f000 fce7 	bl	80091f8 <USBD_GetConfig>
          break;
 800882a:	e01b      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	0011      	movs	r1, r2
 8008832:	0018      	movs	r0, r3
 8008834:	f000 fd1b 	bl	800926e <USBD_GetStatus>
          break;
 8008838:	e014      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f000 fd4e 	bl	80092e2 <USBD_SetFeature>
          break;
 8008846:	e00d      	b.n	8008864 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	0011      	movs	r1, r2
 800884e:	0018      	movs	r0, r3
 8008850:	f000 fd5d 	bl	800930e <USBD_ClrFeature>
          break;
 8008854:	e006      	b.n	8008864 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	0011      	movs	r1, r2
 800885c:	0018      	movs	r0, r3
 800885e:	f000 fdb7 	bl	80093d0 <USBD_CtlError>
          break;
 8008862:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008864:	e006      	b.n	8008874 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0011      	movs	r1, r2
 800886c:	0018      	movs	r0, r3
 800886e:	f000 fdaf 	bl	80093d0 <USBD_CtlError>
      break;
 8008872:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008874:	230f      	movs	r3, #15
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	781b      	ldrb	r3, [r3, #0]
}
 800887a:	0018      	movs	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	b004      	add	sp, #16
 8008880:	bd80      	pop	{r7, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	0800aa20 	.word	0x0800aa20

08008888 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008888:	b5b0      	push	{r4, r5, r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008892:	230f      	movs	r3, #15
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	001a      	movs	r2, r3
 80088a0:	2360      	movs	r3, #96	; 0x60
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d004      	beq.n	80088b2 <USBD_StdItfReq+0x2a>
 80088a8:	d839      	bhi.n	800891e <USBD_StdItfReq+0x96>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <USBD_StdItfReq+0x2a>
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d135      	bne.n	800891e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	23a7      	movs	r3, #167	; 0xa7
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	5cd3      	ldrb	r3, [r2, r3]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d825      	bhi.n	800890c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	889b      	ldrh	r3, [r3, #4]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d819      	bhi.n	80088fe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	23ad      	movs	r3, #173	; 0xad
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	58d3      	ldr	r3, [r2, r3]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	250f      	movs	r5, #15
 80088d6:	197c      	adds	r4, r7, r5
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	0010      	movs	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	0003      	movs	r3, r0
 80088e2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	88db      	ldrh	r3, [r3, #6]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d116      	bne.n	800891a <USBD_StdItfReq+0x92>
 80088ec:	197b      	adds	r3, r7, r5
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d112      	bne.n	800891a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	0018      	movs	r0, r3
 80088f8:	f000 fe52 	bl	80095a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088fc:	e00d      	b.n	800891a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	0011      	movs	r1, r2
 8008904:	0018      	movs	r0, r3
 8008906:	f000 fd63 	bl	80093d0 <USBD_CtlError>
          break;
 800890a:	e006      	b.n	800891a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	0011      	movs	r1, r2
 8008912:	0018      	movs	r0, r3
 8008914:	f000 fd5c 	bl	80093d0 <USBD_CtlError>
          break;
 8008918:	e000      	b.n	800891c <USBD_StdItfReq+0x94>
          break;
 800891a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800891c:	e006      	b.n	800892c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	0011      	movs	r1, r2
 8008924:	0018      	movs	r0, r3
 8008926:	f000 fd53 	bl	80093d0 <USBD_CtlError>
      break;
 800892a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	0018      	movs	r0, r3
 8008930:	46bd      	mov	sp, r7
 8008932:	b004      	add	sp, #16
 8008934:	bdb0      	pop	{r4, r5, r7, pc}

08008936 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008936:	b5b0      	push	{r4, r5, r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008940:	230f      	movs	r3, #15
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	889a      	ldrh	r2, [r3, #4]
 800894c:	230e      	movs	r3, #14
 800894e:	18fb      	adds	r3, r7, r3
 8008950:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	001a      	movs	r2, r3
 8008958:	2360      	movs	r3, #96	; 0x60
 800895a:	4013      	ands	r3, r2
 800895c:	2b40      	cmp	r3, #64	; 0x40
 800895e:	d006      	beq.n	800896e <USBD_StdEPReq+0x38>
 8008960:	d900      	bls.n	8008964 <USBD_StdEPReq+0x2e>
 8008962:	e190      	b.n	8008c86 <USBD_StdEPReq+0x350>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00c      	beq.n	8008982 <USBD_StdEPReq+0x4c>
 8008968:	2b20      	cmp	r3, #32
 800896a:	d000      	beq.n	800896e <USBD_StdEPReq+0x38>
 800896c:	e18b      	b.n	8008c86 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	23ad      	movs	r3, #173	; 0xad
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	58d3      	ldr	r3, [r2, r3]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	0010      	movs	r0, r2
 800897e:	4798      	blx	r3
      break;
 8008980:	e188      	b.n	8008c94 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	001a      	movs	r2, r3
 8008988:	2360      	movs	r3, #96	; 0x60
 800898a:	4013      	ands	r3, r2
 800898c:	2b20      	cmp	r3, #32
 800898e:	d10f      	bne.n	80089b0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	23ad      	movs	r3, #173	; 0xad
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	58d3      	ldr	r3, [r2, r3]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	250f      	movs	r5, #15
 800899c:	197c      	adds	r4, r7, r5
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	0010      	movs	r0, r2
 80089a4:	4798      	blx	r3
 80089a6:	0003      	movs	r3, r0
 80089a8:	7023      	strb	r3, [r4, #0]

        return ret;
 80089aa:	197b      	adds	r3, r7, r5
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	e174      	b.n	8008c9a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d007      	beq.n	80089c8 <USBD_StdEPReq+0x92>
 80089b8:	dd00      	ble.n	80089bc <USBD_StdEPReq+0x86>
 80089ba:	e15c      	b.n	8008c76 <USBD_StdEPReq+0x340>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d100      	bne.n	80089c2 <USBD_StdEPReq+0x8c>
 80089c0:	e092      	b.n	8008ae8 <USBD_StdEPReq+0x1b2>
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d04b      	beq.n	8008a5e <USBD_StdEPReq+0x128>
 80089c6:	e156      	b.n	8008c76 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	23a7      	movs	r3, #167	; 0xa7
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	5cd3      	ldrb	r3, [r2, r3]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d002      	beq.n	80089da <USBD_StdEPReq+0xa4>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d01d      	beq.n	8008a14 <USBD_StdEPReq+0xde>
 80089d8:	e039      	b.n	8008a4e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089da:	220e      	movs	r2, #14
 80089dc:	18bb      	adds	r3, r7, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <USBD_StdEPReq+0xd0>
 80089e4:	18bb      	adds	r3, r7, r2
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	d00c      	beq.n	8008a06 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	18bb      	adds	r3, r7, r2
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	0011      	movs	r1, r2
 80089f4:	0018      	movs	r0, r3
 80089f6:	f001 f9aa 	bl	8009d4e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2180      	movs	r1, #128	; 0x80
 80089fe:	0018      	movs	r0, r3
 8008a00:	f001 f9a5 	bl	8009d4e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a04:	e02a      	b.n	8008a5c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 fcdf 	bl	80093d0 <USBD_CtlError>
              break;
 8008a12:	e023      	b.n	8008a5c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	885b      	ldrh	r3, [r3, #2]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d113      	bne.n	8008a44 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008a1c:	220e      	movs	r2, #14
 8008a1e:	18bb      	adds	r3, r7, r2
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00e      	beq.n	8008a44 <USBD_StdEPReq+0x10e>
 8008a26:	18bb      	adds	r3, r7, r2
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b80      	cmp	r3, #128	; 0x80
 8008a2c:	d00a      	beq.n	8008a44 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	88db      	ldrh	r3, [r3, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a36:	18bb      	adds	r3, r7, r2
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	0011      	movs	r1, r2
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f001 f985 	bl	8009d4e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	0018      	movs	r0, r3
 8008a48:	f000 fdaa 	bl	80095a0 <USBD_CtlSendStatus>

              break;
 8008a4c:	e006      	b.n	8008a5c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	0011      	movs	r1, r2
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 fcbb 	bl	80093d0 <USBD_CtlError>
              break;
 8008a5a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008a5c:	e112      	b.n	8008c84 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	23a7      	movs	r3, #167	; 0xa7
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	5cd3      	ldrb	r3, [r2, r3]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d002      	beq.n	8008a70 <USBD_StdEPReq+0x13a>
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d01d      	beq.n	8008aaa <USBD_StdEPReq+0x174>
 8008a6e:	e032      	b.n	8008ad6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a70:	220e      	movs	r2, #14
 8008a72:	18bb      	adds	r3, r7, r2
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d010      	beq.n	8008a9c <USBD_StdEPReq+0x166>
 8008a7a:	18bb      	adds	r3, r7, r2
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d00c      	beq.n	8008a9c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a82:	18bb      	adds	r3, r7, r2
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	0011      	movs	r1, r2
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f001 f95f 	bl	8009d4e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	0018      	movs	r0, r3
 8008a96:	f001 f95a 	bl	8009d4e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a9a:	e024      	b.n	8008ae6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0011      	movs	r1, r2
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 fc94 	bl	80093d0 <USBD_CtlError>
              break;
 8008aa8:	e01d      	b.n	8008ae6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d118      	bne.n	8008ae4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ab2:	210e      	movs	r1, #14
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	227f      	movs	r2, #127	; 0x7f
 8008aba:	4013      	ands	r3, r2
 8008abc:	d006      	beq.n	8008acc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	0011      	movs	r1, r2
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f001 f96c 	bl	8009da4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f000 fd66 	bl	80095a0 <USBD_CtlSendStatus>
              }
              break;
 8008ad4:	e006      	b.n	8008ae4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	0011      	movs	r1, r2
 8008adc:	0018      	movs	r0, r3
 8008ade:	f000 fc77 	bl	80093d0 <USBD_CtlError>
              break;
 8008ae2:	e000      	b.n	8008ae6 <USBD_StdEPReq+0x1b0>
              break;
 8008ae4:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008ae6:	e0cd      	b.n	8008c84 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	23a7      	movs	r3, #167	; 0xa7
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	5cd3      	ldrb	r3, [r2, r3]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d002      	beq.n	8008afa <USBD_StdEPReq+0x1c4>
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d03c      	beq.n	8008b72 <USBD_StdEPReq+0x23c>
 8008af8:	e0b5      	b.n	8008c66 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008afa:	220e      	movs	r2, #14
 8008afc:	18bb      	adds	r3, r7, r2
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <USBD_StdEPReq+0x1e4>
 8008b04:	18bb      	adds	r3, r7, r2
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b80      	cmp	r3, #128	; 0x80
 8008b0a:	d006      	beq.n	8008b1a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	0011      	movs	r1, r2
 8008b12:	0018      	movs	r0, r3
 8008b14:	f000 fc5c 	bl	80093d0 <USBD_CtlError>
                break;
 8008b18:	e0ac      	b.n	8008c74 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b1a:	220e      	movs	r2, #14
 8008b1c:	18bb      	adds	r3, r7, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	b25b      	sxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	da0c      	bge.n	8008b40 <USBD_StdEPReq+0x20a>
 8008b26:	18bb      	adds	r3, r7, r2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	227f      	movs	r2, #127	; 0x7f
 8008b2c:	401a      	ands	r2, r3
 8008b2e:	0013      	movs	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	189b      	adds	r3, r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	3310      	adds	r3, #16
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	18d3      	adds	r3, r2, r3
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	e00d      	b.n	8008b5c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b40:	230e      	movs	r3, #14
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	227f      	movs	r2, #127	; 0x7f
 8008b48:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4a:	0013      	movs	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	189b      	adds	r3, r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	3351      	adds	r3, #81	; 0x51
 8008b54:	33ff      	adds	r3, #255	; 0xff
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f000 fcae 	bl	80094cc <USBD_CtlSendData>
              break;
 8008b70:	e080      	b.n	8008c74 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b72:	220e      	movs	r2, #14
 8008b74:	18bb      	adds	r3, r7, r2
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da14      	bge.n	8008ba8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b7e:	18bb      	adds	r3, r7, r2
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	220f      	movs	r2, #15
 8008b84:	401a      	ands	r2, r3
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	0013      	movs	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	189b      	adds	r3, r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	18cb      	adds	r3, r1, r3
 8008b92:	3318      	adds	r3, #24
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d11e      	bne.n	8008bd8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f000 fc15 	bl	80093d0 <USBD_CtlError>
                  break;
 8008ba6:	e065      	b.n	8008c74 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ba8:	230e      	movs	r3, #14
 8008baa:	18fb      	adds	r3, r7, r3
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	220f      	movs	r2, #15
 8008bb0:	401a      	ands	r2, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	23ac      	movs	r3, #172	; 0xac
 8008bb6:	0059      	lsls	r1, r3, #1
 8008bb8:	0013      	movs	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	189b      	adds	r3, r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	18c3      	adds	r3, r0, r3
 8008bc2:	185b      	adds	r3, r3, r1
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0011      	movs	r1, r2
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f000 fbfd 	bl	80093d0 <USBD_CtlError>
                  break;
 8008bd6:	e04d      	b.n	8008c74 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd8:	220e      	movs	r2, #14
 8008bda:	18bb      	adds	r3, r7, r2
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0c      	bge.n	8008bfe <USBD_StdEPReq+0x2c8>
 8008be4:	18bb      	adds	r3, r7, r2
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	227f      	movs	r2, #127	; 0x7f
 8008bea:	401a      	ands	r2, r3
 8008bec:	0013      	movs	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	189b      	adds	r3, r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	3310      	adds	r3, #16
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	18d3      	adds	r3, r2, r3
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	e00d      	b.n	8008c1a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bfe:	230e      	movs	r3, #14
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	227f      	movs	r2, #127	; 0x7f
 8008c06:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c08:	0013      	movs	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	189b      	adds	r3, r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	3351      	adds	r3, #81	; 0x51
 8008c12:	33ff      	adds	r3, #255	; 0xff
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	18d3      	adds	r3, r2, r3
 8008c18:	3304      	adds	r3, #4
 8008c1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c1c:	220e      	movs	r2, #14
 8008c1e:	18bb      	adds	r3, r7, r2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <USBD_StdEPReq+0x2f8>
 8008c26:	18bb      	adds	r3, r7, r2
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	d103      	bne.n	8008c36 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	e010      	b.n	8008c58 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c36:	230e      	movs	r3, #14
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f001 f8da 	bl	8009dfa <USBD_LL_IsStallEP>
 8008c46:	1e03      	subs	r3, r0, #0
 8008c48:	d003      	beq.n	8008c52 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	e002      	b.n	8008c58 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f000 fc34 	bl	80094cc <USBD_CtlSendData>
              break;
 8008c64:	e006      	b.n	8008c74 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	0011      	movs	r1, r2
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f000 fbaf 	bl	80093d0 <USBD_CtlError>
              break;
 8008c72:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008c74:	e006      	b.n	8008c84 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	0011      	movs	r1, r2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f000 fba7 	bl	80093d0 <USBD_CtlError>
          break;
 8008c82:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008c84:	e006      	b.n	8008c94 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f000 fb9f 	bl	80093d0 <USBD_CtlError>
      break;
 8008c92:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008c94:	230f      	movs	r3, #15
 8008c96:	18fb      	adds	r3, r7, r3
 8008c98:	781b      	ldrb	r3, [r3, #0]
}
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	b004      	add	sp, #16
 8008ca0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ca4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cae:	2308      	movs	r3, #8
 8008cb0:	18fb      	adds	r3, r7, r3
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cba:	230b      	movs	r3, #11
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	885b      	ldrh	r3, [r3, #2]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b07      	cmp	r3, #7
 8008ccc:	d900      	bls.n	8008cd0 <USBD_GetDescriptor+0x2c>
 8008cce:	e159      	b.n	8008f84 <USBD_GetDescriptor+0x2e0>
 8008cd0:	009a      	lsls	r2, r3, #2
 8008cd2:	4bcb      	ldr	r3, [pc, #812]	; (8009000 <USBD_GetDescriptor+0x35c>)
 8008cd4:	18d3      	adds	r3, r2, r3
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	23ac      	movs	r3, #172	; 0xac
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	58d3      	ldr	r3, [r2, r3]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	2108      	movs	r1, #8
 8008cea:	1879      	adds	r1, r7, r1
 8008cec:	0010      	movs	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	60fb      	str	r3, [r7, #12]
      break;
 8008cf4:	e153      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7c1b      	ldrb	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10f      	bne.n	8008d1e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	23ad      	movs	r3, #173	; 0xad
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	58d3      	ldr	r3, [r2, r3]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	2208      	movs	r2, #8
 8008d0a:	18ba      	adds	r2, r7, r2
 8008d0c:	0010      	movs	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	0003      	movs	r3, r0
 8008d12:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	2202      	movs	r2, #2
 8008d1a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d1c:	e13f      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	23ad      	movs	r3, #173	; 0xad
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	58d3      	ldr	r3, [r2, r3]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	2208      	movs	r2, #8
 8008d2a:	18ba      	adds	r2, r7, r2
 8008d2c:	0010      	movs	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	0003      	movs	r3, r0
 8008d32:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	2202      	movs	r2, #2
 8008d3a:	701a      	strb	r2, [r3, #0]
      break;
 8008d3c:	e12f      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b05      	cmp	r3, #5
 8008d46:	d900      	bls.n	8008d4a <USBD_GetDescriptor+0xa6>
 8008d48:	e0d0      	b.n	8008eec <USBD_GetDescriptor+0x248>
 8008d4a:	009a      	lsls	r2, r3, #2
 8008d4c:	4bad      	ldr	r3, [pc, #692]	; (8009004 <USBD_GetDescriptor+0x360>)
 8008d4e:	18d3      	adds	r3, r2, r3
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	23ac      	movs	r3, #172	; 0xac
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	58d3      	ldr	r3, [r2, r3]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	23ac      	movs	r3, #172	; 0xac
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	58d3      	ldr	r3, [r2, r3]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	2108      	movs	r1, #8
 8008d72:	1879      	adds	r1, r7, r1
 8008d74:	0010      	movs	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	0003      	movs	r3, r0
 8008d7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7c:	e0c3      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	0011      	movs	r1, r2
 8008d84:	0018      	movs	r0, r3
 8008d86:	f000 fb23 	bl	80093d0 <USBD_CtlError>
            err++;
 8008d8a:	210b      	movs	r1, #11
 8008d8c:	187b      	adds	r3, r7, r1
 8008d8e:	781a      	ldrb	r2, [r3, #0]
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	3201      	adds	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
          break;
 8008d96:	e0b6      	b.n	8008f06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	23ac      	movs	r3, #172	; 0xac
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	58d3      	ldr	r3, [r2, r3]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00d      	beq.n	8008dc2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	23ac      	movs	r3, #172	; 0xac
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	58d3      	ldr	r3, [r2, r3]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	2108      	movs	r1, #8
 8008db6:	1879      	adds	r1, r7, r1
 8008db8:	0010      	movs	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	0003      	movs	r3, r0
 8008dbe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc0:	e0a1      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	0011      	movs	r1, r2
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f000 fb01 	bl	80093d0 <USBD_CtlError>
            err++;
 8008dce:	210b      	movs	r1, #11
 8008dd0:	187b      	adds	r3, r7, r1
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	187b      	adds	r3, r7, r1
 8008dd6:	3201      	adds	r2, #1
 8008dd8:	701a      	strb	r2, [r3, #0]
          break;
 8008dda:	e094      	b.n	8008f06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	23ac      	movs	r3, #172	; 0xac
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	58d3      	ldr	r3, [r2, r3]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00d      	beq.n	8008e06 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	23ac      	movs	r3, #172	; 0xac
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	58d3      	ldr	r3, [r2, r3]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	7c12      	ldrb	r2, [r2, #16]
 8008df8:	2108      	movs	r1, #8
 8008dfa:	1879      	adds	r1, r7, r1
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	0003      	movs	r3, r0
 8008e02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e04:	e07f      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	0011      	movs	r1, r2
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f000 fadf 	bl	80093d0 <USBD_CtlError>
            err++;
 8008e12:	210b      	movs	r1, #11
 8008e14:	187b      	adds	r3, r7, r1
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	187b      	adds	r3, r7, r1
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	701a      	strb	r2, [r3, #0]
          break;
 8008e1e:	e072      	b.n	8008f06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	23ac      	movs	r3, #172	; 0xac
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	58d3      	ldr	r3, [r2, r3]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	23ac      	movs	r3, #172	; 0xac
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	58d3      	ldr	r3, [r2, r3]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	2108      	movs	r1, #8
 8008e3e:	1879      	adds	r1, r7, r1
 8008e40:	0010      	movs	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	0003      	movs	r3, r0
 8008e46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e48:	e05d      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0011      	movs	r1, r2
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 fabd 	bl	80093d0 <USBD_CtlError>
            err++;
 8008e56:	210b      	movs	r1, #11
 8008e58:	187b      	adds	r3, r7, r1
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	187b      	adds	r3, r7, r1
 8008e5e:	3201      	adds	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]
          break;
 8008e62:	e050      	b.n	8008f06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	23ac      	movs	r3, #172	; 0xac
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	58d3      	ldr	r3, [r2, r3]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00d      	beq.n	8008e8e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	23ac      	movs	r3, #172	; 0xac
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	58d3      	ldr	r3, [r2, r3]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7c12      	ldrb	r2, [r2, #16]
 8008e80:	2108      	movs	r1, #8
 8008e82:	1879      	adds	r1, r7, r1
 8008e84:	0010      	movs	r0, r2
 8008e86:	4798      	blx	r3
 8008e88:	0003      	movs	r3, r0
 8008e8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8c:	e03b      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	0011      	movs	r1, r2
 8008e94:	0018      	movs	r0, r3
 8008e96:	f000 fa9b 	bl	80093d0 <USBD_CtlError>
            err++;
 8008e9a:	210b      	movs	r1, #11
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	3201      	adds	r2, #1
 8008ea4:	701a      	strb	r2, [r3, #0]
          break;
 8008ea6:	e02e      	b.n	8008f06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	23ac      	movs	r3, #172	; 0xac
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	58d3      	ldr	r3, [r2, r3]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00d      	beq.n	8008ed2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	23ac      	movs	r3, #172	; 0xac
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	58d3      	ldr	r3, [r2, r3]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	2108      	movs	r1, #8
 8008ec6:	1879      	adds	r1, r7, r1
 8008ec8:	0010      	movs	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	0003      	movs	r3, r0
 8008ece:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed0:	e019      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f000 fa79 	bl	80093d0 <USBD_CtlError>
            err++;
 8008ede:	210b      	movs	r1, #11
 8008ee0:	187b      	adds	r3, r7, r1
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	187b      	adds	r3, r7, r1
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	701a      	strb	r2, [r3, #0]
          break;
 8008eea:	e00c      	b.n	8008f06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	0011      	movs	r1, r2
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f000 fa6c 	bl	80093d0 <USBD_CtlError>
          err++;
 8008ef8:	210b      	movs	r1, #11
 8008efa:	187b      	adds	r3, r7, r1
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	187b      	adds	r3, r7, r1
 8008f00:	3201      	adds	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008f04:	e04b      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>
 8008f06:	e04a      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7c1b      	ldrb	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10b      	bne.n	8008f28 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	23ad      	movs	r3, #173	; 0xad
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	58d3      	ldr	r3, [r2, r3]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	18ba      	adds	r2, r7, r2
 8008f1e:	0010      	movs	r0, r2
 8008f20:	4798      	blx	r3
 8008f22:	0003      	movs	r3, r0
 8008f24:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f26:	e03a      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	0011      	movs	r1, r2
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f000 fa4e 	bl	80093d0 <USBD_CtlError>
        err++;
 8008f34:	210b      	movs	r1, #11
 8008f36:	187b      	adds	r3, r7, r1
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	187b      	adds	r3, r7, r1
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
      break;
 8008f40:	e02d      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7c1b      	ldrb	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10f      	bne.n	8008f6a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	23ad      	movs	r3, #173	; 0xad
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	58d3      	ldr	r3, [r2, r3]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	2208      	movs	r2, #8
 8008f56:	18ba      	adds	r2, r7, r2
 8008f58:	0010      	movs	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	0003      	movs	r3, r0
 8008f5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	2207      	movs	r2, #7
 8008f66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f68:	e019      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	0011      	movs	r1, r2
 8008f70:	0018      	movs	r0, r3
 8008f72:	f000 fa2d 	bl	80093d0 <USBD_CtlError>
        err++;
 8008f76:	210b      	movs	r1, #11
 8008f78:	187b      	adds	r3, r7, r1
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	187b      	adds	r3, r7, r1
 8008f7e:	3201      	adds	r2, #1
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e00c      	b.n	8008f9e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f000 fa20 	bl	80093d0 <USBD_CtlError>
      err++;
 8008f90:	210b      	movs	r1, #11
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	187b      	adds	r3, r7, r1
 8008f98:	3201      	adds	r2, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
      break;
 8008f9c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008f9e:	230b      	movs	r3, #11
 8008fa0:	18fb      	adds	r3, r7, r3
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d127      	bne.n	8008ff8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fa8:	2108      	movs	r1, #8
 8008faa:	187b      	adds	r3, r7, r1
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d019      	beq.n	8008fe6 <USBD_GetDescriptor+0x342>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	88db      	ldrh	r3, [r3, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d015      	beq.n	8008fe6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88da      	ldrh	r2, [r3, #6]
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	1c18      	adds	r0, r3, #0
 8008fc4:	1c11      	adds	r1, r2, #0
 8008fc6:	b28a      	uxth	r2, r1
 8008fc8:	b283      	uxth	r3, r0
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d900      	bls.n	8008fd0 <USBD_GetDescriptor+0x32c>
 8008fce:	1c01      	adds	r1, r0, #0
 8008fd0:	b28a      	uxth	r2, r1
 8008fd2:	2108      	movs	r1, #8
 8008fd4:	187b      	adds	r3, r7, r1
 8008fd6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	881a      	ldrh	r2, [r3, #0]
 8008fdc:	68f9      	ldr	r1, [r7, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f000 fa73 	bl	80094cc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	88db      	ldrh	r3, [r3, #6]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f000 fad5 	bl	80095a0 <USBD_CtlSendStatus>
 8008ff6:	e000      	b.n	8008ffa <USBD_GetDescriptor+0x356>
    return;
 8008ff8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	b004      	add	sp, #16
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	0800aa48 	.word	0x0800aa48
 8009004:	0800aa68 	.word	0x0800aa68

08009008 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009008:	b590      	push	{r4, r7, lr}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	889b      	ldrh	r3, [r3, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d13d      	bne.n	8009096 <USBD_SetAddress+0x8e>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d139      	bne.n	8009096 <USBD_SetAddress+0x8e>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	2b7f      	cmp	r3, #127	; 0x7f
 8009028:	d835      	bhi.n	8009096 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	885b      	ldrh	r3, [r3, #2]
 800902e:	b2da      	uxtb	r2, r3
 8009030:	230f      	movs	r3, #15
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	217f      	movs	r1, #127	; 0x7f
 8009036:	400a      	ands	r2, r1
 8009038:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	23a7      	movs	r3, #167	; 0xa7
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	5cd3      	ldrb	r3, [r2, r3]
 8009042:	2b03      	cmp	r3, #3
 8009044:	d106      	bne.n	8009054 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	0011      	movs	r1, r2
 800904c:	0018      	movs	r0, r3
 800904e:	f000 f9bf 	bl	80093d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009052:	e027      	b.n	80090a4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	240f      	movs	r4, #15
 8009058:	193a      	adds	r2, r7, r4
 800905a:	4914      	ldr	r1, [pc, #80]	; (80090ac <USBD_SetAddress+0xa4>)
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009060:	193b      	adds	r3, r7, r4
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	0011      	movs	r1, r2
 8009068:	0018      	movs	r0, r3
 800906a:	f000 fef7 	bl	8009e5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	0018      	movs	r0, r3
 8009072:	f000 fa95 	bl	80095a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009076:	193b      	adds	r3, r7, r4
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	23a7      	movs	r3, #167	; 0xa7
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	2102      	movs	r1, #2
 8009086:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009088:	e00c      	b.n	80090a4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	23a7      	movs	r3, #167	; 0xa7
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	2101      	movs	r1, #1
 8009092:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009094:	e006      	b.n	80090a4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f000 f997 	bl	80093d0 <USBD_CtlError>
  }
}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	46c0      	nop			; (mov r8, r8)
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b005      	add	sp, #20
 80090aa:	bd90      	pop	{r4, r7, pc}
 80090ac:	0000029e 	.word	0x0000029e

080090b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	4b4c      	ldr	r3, [pc, #304]	; (80091f4 <USBD_SetConfig+0x144>)
 80090c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090c4:	4b4b      	ldr	r3, [pc, #300]	; (80091f4 <USBD_SetConfig+0x144>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d906      	bls.n	80090da <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	0011      	movs	r1, r2
 80090d2:	0018      	movs	r0, r3
 80090d4:	f000 f97c 	bl	80093d0 <USBD_CtlError>
 80090d8:	e088      	b.n	80091ec <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	23a7      	movs	r3, #167	; 0xa7
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	5cd3      	ldrb	r3, [r2, r3]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d002      	beq.n	80090ec <USBD_SetConfig+0x3c>
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d029      	beq.n	800913e <USBD_SetConfig+0x8e>
 80090ea:	e071      	b.n	80091d0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090ec:	4b41      	ldr	r3, [pc, #260]	; (80091f4 <USBD_SetConfig+0x144>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01f      	beq.n	8009134 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80090f4:	4b3f      	ldr	r3, [pc, #252]	; (80091f4 <USBD_SetConfig+0x144>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	001a      	movs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	23a7      	movs	r3, #167	; 0xa7
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	2103      	movs	r1, #3
 8009106:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009108:	4b3a      	ldr	r3, [pc, #232]	; (80091f4 <USBD_SetConfig+0x144>)
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f7ff f8c6 	bl	80082a2 <USBD_SetClassConfig>
 8009116:	0003      	movs	r3, r0
 8009118:	2b02      	cmp	r3, #2
 800911a:	d106      	bne.n	800912a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	0011      	movs	r1, r2
 8009122:	0018      	movs	r0, r3
 8009124:	f000 f954 	bl	80093d0 <USBD_CtlError>
            return;
 8009128:	e060      	b.n	80091ec <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0018      	movs	r0, r3
 800912e:	f000 fa37 	bl	80095a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009132:	e05b      	b.n	80091ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	0018      	movs	r0, r3
 8009138:	f000 fa32 	bl	80095a0 <USBD_CtlSendStatus>
        break;
 800913c:	e056      	b.n	80091ec <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800913e:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <USBD_SetConfig+0x144>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d115      	bne.n	8009172 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	23a7      	movs	r3, #167	; 0xa7
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	2102      	movs	r1, #2
 800914e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <USBD_SetConfig+0x144>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	001a      	movs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800915a:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <USBD_SetConfig+0x144>)
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	0011      	movs	r1, r2
 8009162:	0018      	movs	r0, r3
 8009164:	f7ff f8c4 	bl	80082f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	0018      	movs	r0, r3
 800916c:	f000 fa18 	bl	80095a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009170:	e03c      	b.n	80091ec <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8009172:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <USBD_SetConfig+0x144>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	001a      	movs	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d022      	beq.n	80091c6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	0011      	movs	r1, r2
 800918a:	0018      	movs	r0, r3
 800918c:	f7ff f8b0 	bl	80082f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009190:	4b18      	ldr	r3, [pc, #96]	; (80091f4 <USBD_SetConfig+0x144>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	001a      	movs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <USBD_SetConfig+0x144>)
 800919c:	781a      	ldrb	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0011      	movs	r1, r2
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7ff f87d 	bl	80082a2 <USBD_SetClassConfig>
 80091a8:	0003      	movs	r3, r0
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d106      	bne.n	80091bc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 f90b 	bl	80093d0 <USBD_CtlError>
            return;
 80091ba:	e017      	b.n	80091ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	0018      	movs	r0, r3
 80091c0:	f000 f9ee 	bl	80095a0 <USBD_CtlSendStatus>
        break;
 80091c4:	e012      	b.n	80091ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	0018      	movs	r0, r3
 80091ca:	f000 f9e9 	bl	80095a0 <USBD_CtlSendStatus>
        break;
 80091ce:	e00d      	b.n	80091ec <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	0011      	movs	r1, r2
 80091d6:	0018      	movs	r0, r3
 80091d8:	f000 f8fa 	bl	80093d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <USBD_SetConfig+0x144>)
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	0011      	movs	r1, r2
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7ff f883 	bl	80082f0 <USBD_ClrClassConfig>
        break;
 80091ea:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b002      	add	sp, #8
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	20000590 	.word	0x20000590

080091f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d006      	beq.n	8009218 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	0011      	movs	r1, r2
 8009210:	0018      	movs	r0, r3
 8009212:	f000 f8dd 	bl	80093d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009216:	e026      	b.n	8009266 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	23a7      	movs	r3, #167	; 0xa7
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	5cd3      	ldrb	r3, [r2, r3]
 8009220:	2b02      	cmp	r3, #2
 8009222:	dc02      	bgt.n	800922a <USBD_GetConfig+0x32>
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc03      	bgt.n	8009230 <USBD_GetConfig+0x38>
 8009228:	e016      	b.n	8009258 <USBD_GetConfig+0x60>
 800922a:	2b03      	cmp	r3, #3
 800922c:	d00c      	beq.n	8009248 <USBD_GetConfig+0x50>
 800922e:	e013      	b.n	8009258 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3308      	adds	r3, #8
 800923a:	0019      	movs	r1, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	0018      	movs	r0, r3
 8009242:	f000 f943 	bl	80094cc <USBD_CtlSendData>
        break;
 8009246:	e00e      	b.n	8009266 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	0018      	movs	r0, r3
 8009252:	f000 f93b 	bl	80094cc <USBD_CtlSendData>
        break;
 8009256:	e006      	b.n	8009266 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f000 f8b6 	bl	80093d0 <USBD_CtlError>
        break;
 8009264:	46c0      	nop			; (mov r8, r8)
}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	46bd      	mov	sp, r7
 800926a:	b002      	add	sp, #8
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	23a7      	movs	r3, #167	; 0xa7
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	5cd3      	ldrb	r3, [r2, r3]
 8009280:	3b01      	subs	r3, #1
 8009282:	2b02      	cmp	r3, #2
 8009284:	d822      	bhi.n	80092cc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d006      	beq.n	800929c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f000 f89b 	bl	80093d0 <USBD_CtlError>
        break;
 800929a:	e01e      	b.n	80092da <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	23a9      	movs	r3, #169	; 0xa9
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	58d3      	ldr	r3, [r2, r3]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2202      	movs	r2, #2
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	330c      	adds	r3, #12
 80092be:	0019      	movs	r1, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f000 f901 	bl	80094cc <USBD_CtlSendData>
      break;
 80092ca:	e006      	b.n	80092da <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	0011      	movs	r1, r2
 80092d2:	0018      	movs	r0, r3
 80092d4:	f000 f87c 	bl	80093d0 <USBD_CtlError>
      break;
 80092d8:	46c0      	nop			; (mov r8, r8)
  }
}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	46bd      	mov	sp, r7
 80092de:	b002      	add	sp, #8
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	885b      	ldrh	r3, [r3, #2]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d108      	bne.n	8009306 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	23a9      	movs	r3, #169	; 0xa9
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	2101      	movs	r1, #1
 80092fc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0018      	movs	r0, r3
 8009302:	f000 f94d 	bl	80095a0 <USBD_CtlSendStatus>
  }
}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	46bd      	mov	sp, r7
 800930a:	b002      	add	sp, #8
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	23a7      	movs	r3, #167	; 0xa7
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	5cd3      	ldrb	r3, [r2, r3]
 8009320:	3b01      	subs	r3, #1
 8009322:	2b02      	cmp	r3, #2
 8009324:	d80d      	bhi.n	8009342 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	885b      	ldrh	r3, [r3, #2]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d110      	bne.n	8009350 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	23a9      	movs	r3, #169	; 0xa9
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	2100      	movs	r1, #0
 8009336:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	0018      	movs	r0, r3
 800933c:	f000 f930 	bl	80095a0 <USBD_CtlSendStatus>
      }
      break;
 8009340:	e006      	b.n	8009350 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f000 f841 	bl	80093d0 <USBD_CtlError>
      break;
 800934e:	e000      	b.n	8009352 <USBD_ClrFeature+0x44>
      break;
 8009350:	46c0      	nop			; (mov r8, r8)
  }
}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	46bd      	mov	sp, r7
 8009356:	b002      	add	sp, #8
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781a      	ldrb	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	785a      	ldrb	r2, [r3, #1]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	3302      	adds	r3, #2
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	b29a      	uxth	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	3303      	adds	r3, #3
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	b29b      	uxth	r3, r3
 8009388:	18d3      	adds	r3, r2, r3
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	3304      	adds	r3, #4
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b29a      	uxth	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	3305      	adds	r3, #5
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	18d3      	adds	r3, r2, r3
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	3306      	adds	r3, #6
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	3307      	adds	r3, #7
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	b29b      	uxth	r3, r3
 80093c0:	18d3      	adds	r3, r2, r3
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	80da      	strh	r2, [r3, #6]

}
 80093c8:	46c0      	nop			; (mov r8, r8)
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b002      	add	sp, #8
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	0018      	movs	r0, r3
 80093e0:	f000 fcb5 	bl	8009d4e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2100      	movs	r1, #0
 80093e8:	0018      	movs	r0, r3
 80093ea:	f000 fcb0 	bl	8009d4e <USBD_LL_StallEP>
}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b002      	add	sp, #8
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093f6:	b590      	push	{r4, r7, lr}
 80093f8:	b087      	sub	sp, #28
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009402:	2417      	movs	r4, #23
 8009404:	193b      	adds	r3, r7, r4
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03c      	beq.n	800948a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	0018      	movs	r0, r3
 8009414:	f000 f83d 	bl	8009492 <USBD_GetLen>
 8009418:	0003      	movs	r3, r0
 800941a:	3301      	adds	r3, #1
 800941c:	b29b      	uxth	r3, r3
 800941e:	18db      	adds	r3, r3, r3
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009426:	193b      	adds	r3, r7, r4
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	193a      	adds	r2, r7, r4
 800942c:	1c59      	adds	r1, r3, #1
 800942e:	7011      	strb	r1, [r2, #0]
 8009430:	001a      	movs	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	189b      	adds	r3, r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800943c:	193b      	adds	r3, r7, r4
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	193a      	adds	r2, r7, r4
 8009442:	1c59      	adds	r1, r3, #1
 8009444:	7011      	strb	r1, [r2, #0]
 8009446:	001a      	movs	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	189b      	adds	r3, r3, r2
 800944c:	2203      	movs	r2, #3
 800944e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009450:	e017      	b.n	8009482 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	60fa      	str	r2, [r7, #12]
 8009458:	2417      	movs	r4, #23
 800945a:	193a      	adds	r2, r7, r4
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	1939      	adds	r1, r7, r4
 8009460:	1c50      	adds	r0, r2, #1
 8009462:	7008      	strb	r0, [r1, #0]
 8009464:	0011      	movs	r1, r2
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	1852      	adds	r2, r2, r1
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800946e:	193b      	adds	r3, r7, r4
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	193a      	adds	r2, r7, r4
 8009474:	1c59      	adds	r1, r3, #1
 8009476:	7011      	strb	r1, [r2, #0]
 8009478:	001a      	movs	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	189b      	adds	r3, r3, r2
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e3      	bne.n	8009452 <USBD_GetString+0x5c>
    }
  }
}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	46bd      	mov	sp, r7
 800948e:	b007      	add	sp, #28
 8009490:	bd90      	pop	{r4, r7, pc}

08009492 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800949a:	230f      	movs	r3, #15
 800949c:	18fb      	adds	r3, r7, r3
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80094a2:	e008      	b.n	80094b6 <USBD_GetLen+0x24>
  {
    len++;
 80094a4:	210f      	movs	r1, #15
 80094a6:	187b      	adds	r3, r7, r1
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	187b      	adds	r3, r7, r1
 80094ac:	3201      	adds	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
    buf++;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3301      	adds	r3, #1
 80094b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f2      	bne.n	80094a4 <USBD_GetLen+0x12>
  }

  return len;
 80094be:	230f      	movs	r3, #15
 80094c0:	18fb      	adds	r3, r7, r3
 80094c2:	781b      	ldrb	r3, [r3, #0]
}
 80094c4:	0018      	movs	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b004      	add	sp, #16
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	1dbb      	adds	r3, r7, #6
 80094d8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	23a5      	movs	r3, #165	; 0xa5
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	2102      	movs	r1, #2
 80094e2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80094e4:	1dbb      	adds	r3, r7, #6
 80094e6:	881a      	ldrh	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80094ec:	1dbb      	adds	r3, r7, #6
 80094ee:	881a      	ldrh	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094f4:	1dbb      	adds	r3, r7, #6
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	2100      	movs	r1, #0
 80094fe:	f000 fcd8 	bl	8009eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	0018      	movs	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	b004      	add	sp, #16
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	1dbb      	adds	r3, r7, #6
 8009518:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800951a:	1dbb      	adds	r3, r7, #6
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	2100      	movs	r1, #0
 8009524:	f000 fcc5 	bl	8009eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	0018      	movs	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	b004      	add	sp, #16
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	1dbb      	adds	r3, r7, #6
 800953e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	23a5      	movs	r3, #165	; 0xa5
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	2103      	movs	r1, #3
 8009548:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800954a:	1dbb      	adds	r3, r7, #6
 800954c:	8819      	ldrh	r1, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	23ae      	movs	r3, #174	; 0xae
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8009556:	1dbb      	adds	r3, r7, #6
 8009558:	8819      	ldrh	r1, [r3, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	23b0      	movs	r3, #176	; 0xb0
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009562:	1dbb      	adds	r3, r7, #6
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	2100      	movs	r1, #0
 800956c:	f000 fcd8 	bl	8009f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	0018      	movs	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	b004      	add	sp, #16
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	1dbb      	adds	r3, r7, #6
 8009586:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009588:	1dbb      	adds	r3, r7, #6
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	2100      	movs	r1, #0
 8009592:	f000 fcc5 	bl	8009f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	0018      	movs	r0, r3
 800959a:	46bd      	mov	sp, r7
 800959c:	b004      	add	sp, #16
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	23a5      	movs	r3, #165	; 0xa5
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	2104      	movs	r1, #4
 80095b0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	2300      	movs	r3, #0
 80095b6:	2200      	movs	r2, #0
 80095b8:	2100      	movs	r1, #0
 80095ba:	f000 fc7a 	bl	8009eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	0018      	movs	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b002      	add	sp, #8
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	23a5      	movs	r3, #165	; 0xa5
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	2105      	movs	r1, #5
 80095d8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	2300      	movs	r3, #0
 80095de:	2200      	movs	r2, #0
 80095e0:	2100      	movs	r1, #0
 80095e2:	f000 fc9d 	bl	8009f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	0018      	movs	r0, r3
 80095ea:	46bd      	mov	sp, r7
 80095ec:	b002      	add	sp, #8
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095f4:	4914      	ldr	r1, [pc, #80]	; (8009648 <MX_USB_DEVICE_Init+0x58>)
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <MX_USB_DEVICE_Init+0x5c>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7fe fdea 	bl	80081d4 <USBD_Init>
 8009600:	1e03      	subs	r3, r0, #0
 8009602:	d001      	beq.n	8009608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009604:	f7f7 ff1e 	bl	8001444 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009608:	4a11      	ldr	r2, [pc, #68]	; (8009650 <MX_USB_DEVICE_Init+0x60>)
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <MX_USB_DEVICE_Init+0x5c>)
 800960c:	0011      	movs	r1, r2
 800960e:	0018      	movs	r0, r3
 8009610:	f7fe fe11 	bl	8008236 <USBD_RegisterClass>
 8009614:	1e03      	subs	r3, r0, #0
 8009616:	d001      	beq.n	800961c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009618:	f7f7 ff14 	bl	8001444 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800961c:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <MX_USB_DEVICE_Init+0x64>)
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <MX_USB_DEVICE_Init+0x5c>)
 8009620:	0011      	movs	r1, r2
 8009622:	0018      	movs	r0, r3
 8009624:	f7fe fd26 	bl	8008074 <USBD_CDC_RegisterInterface>
 8009628:	1e03      	subs	r3, r0, #0
 800962a:	d001      	beq.n	8009630 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800962c:	f7f7 ff0a 	bl	8001444 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009630:	4b06      	ldr	r3, [pc, #24]	; (800964c <MX_USB_DEVICE_Init+0x5c>)
 8009632:	0018      	movs	r0, r3
 8009634:	f7fe fe1f 	bl	8008276 <USBD_Start>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d001      	beq.n	8009640 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800963c:	f7f7 ff02 	bl	8001444 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009640:	46c0      	nop			; (mov r8, r8)
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	20000234 	.word	0x20000234
 800964c:	20000594 	.word	0x20000594
 8009650:	20000120 	.word	0x20000120
 8009654:	20000224 	.word	0x20000224

08009658 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800965c:	4907      	ldr	r1, [pc, #28]	; (800967c <CDC_Init_FS+0x24>)
 800965e:	4b08      	ldr	r3, [pc, #32]	; (8009680 <CDC_Init_FS+0x28>)
 8009660:	2200      	movs	r2, #0
 8009662:	0018      	movs	r0, r3
 8009664:	f7fe fd21 	bl	80080aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009668:	4a06      	ldr	r2, [pc, #24]	; (8009684 <CDC_Init_FS+0x2c>)
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <CDC_Init_FS+0x28>)
 800966c:	0011      	movs	r1, r2
 800966e:	0018      	movs	r0, r3
 8009670:	f7fe fd37 	bl	80080e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009674:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009676:	0018      	movs	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20000c40 	.word	0x20000c40
 8009680:	20000594 	.word	0x20000594
 8009684:	20000858 	.word	0x20000858

08009688 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800968c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800968e:	0018      	movs	r0, r3
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6039      	str	r1, [r7, #0]
 800969c:	0011      	movs	r1, r2
 800969e:	1dfb      	adds	r3, r7, #7
 80096a0:	1c02      	adds	r2, r0, #0
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	1d3b      	adds	r3, r7, #4
 80096a6:	1c0a      	adds	r2, r1, #0
 80096a8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096aa:	1dfb      	adds	r3, r7, #7
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b23      	cmp	r3, #35	; 0x23
 80096b0:	d804      	bhi.n	80096bc <CDC_Control_FS+0x28>
 80096b2:	009a      	lsls	r2, r3, #2
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <CDC_Control_FS+0x34>)
 80096b6:	18d3      	adds	r3, r2, r3
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096bc:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80096be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096c0:	0018      	movs	r0, r3
 80096c2:	46bd      	mov	sp, r7
 80096c4:	b002      	add	sp, #8
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0800aa80 	.word	0x0800aa80

080096cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <CDC_Receive_FS+0x28>)
 80096da:	0011      	movs	r1, r2
 80096dc:	0018      	movs	r0, r3
 80096de:	f7fe fd00 	bl	80080e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096e2:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <CDC_Receive_FS+0x28>)
 80096e4:	0018      	movs	r0, r3
 80096e6:	f7fe fd47 	bl	8008178 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ec:	0018      	movs	r0, r3
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b002      	add	sp, #8
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000594 	.word	0x20000594

080096f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096f8:	b5b0      	push	{r4, r5, r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	000a      	movs	r2, r1
 8009702:	1cbb      	adds	r3, r7, #2
 8009704:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009706:	230f      	movs	r3, #15
 8009708:	18fb      	adds	r3, r7, r3
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800970e:	4a11      	ldr	r2, [pc, #68]	; (8009754 <CDC_Transmit_FS+0x5c>)
 8009710:	23ae      	movs	r3, #174	; 0xae
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	58d3      	ldr	r3, [r2, r3]
 8009716:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	2385      	movs	r3, #133	; 0x85
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	58d3      	ldr	r3, [r2, r3]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009724:	2301      	movs	r3, #1
 8009726:	e010      	b.n	800974a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009728:	1cbb      	adds	r3, r7, #2
 800972a:	881a      	ldrh	r2, [r3, #0]
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <CDC_Transmit_FS+0x5c>)
 8009730:	0018      	movs	r0, r3
 8009732:	f7fe fcba 	bl	80080aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009736:	250f      	movs	r5, #15
 8009738:	197c      	adds	r4, r7, r5
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <CDC_Transmit_FS+0x5c>)
 800973c:	0018      	movs	r0, r3
 800973e:	f7fe fce4 	bl	800810a <USBD_CDC_TransmitPacket>
 8009742:	0003      	movs	r3, r0
 8009744:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8009746:	197b      	adds	r3, r7, r5
 8009748:	781b      	ldrb	r3, [r3, #0]
}
 800974a:	0018      	movs	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	b004      	add	sp, #16
 8009750:	bdb0      	pop	{r4, r5, r7, pc}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	20000594 	.word	0x20000594

08009758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	0002      	movs	r2, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	1dfb      	adds	r3, r7, #7
 8009764:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2212      	movs	r2, #18
 800976a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b002      	add	sp, #8
 8009774:	bd80      	pop	{r7, pc}
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	20000250 	.word	0x20000250

0800977c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	0002      	movs	r2, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	1dfb      	adds	r3, r7, #7
 8009788:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2204      	movs	r2, #4
 800978e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009792:	0018      	movs	r0, r3
 8009794:	46bd      	mov	sp, r7
 8009796:	b002      	add	sp, #8
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	20000264 	.word	0x20000264

080097a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	0002      	movs	r2, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	1dfb      	adds	r3, r7, #7
 80097ac:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80097ae:	1dfb      	adds	r3, r7, #7
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4908      	ldr	r1, [pc, #32]	; (80097dc <USBD_FS_ProductStrDescriptor+0x3c>)
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <USBD_FS_ProductStrDescriptor+0x40>)
 80097bc:	0018      	movs	r0, r3
 80097be:	f7ff fe1a 	bl	80093f6 <USBD_GetString>
 80097c2:	e005      	b.n	80097d0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	4905      	ldr	r1, [pc, #20]	; (80097dc <USBD_FS_ProductStrDescriptor+0x3c>)
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <USBD_FS_ProductStrDescriptor+0x40>)
 80097ca:	0018      	movs	r0, r3
 80097cc:	f7ff fe13 	bl	80093f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80097d2:	0018      	movs	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	b002      	add	sp, #8
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	20001028 	.word	0x20001028
 80097e0:	0800a9b8 	.word	0x0800a9b8

080097e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	0002      	movs	r2, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	1dfb      	adds	r3, r7, #7
 80097f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	4904      	ldr	r1, [pc, #16]	; (8009808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097f6:	4b05      	ldr	r3, [pc, #20]	; (800980c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80097f8:	0018      	movs	r0, r3
 80097fa:	f7ff fdfc 	bl	80093f6 <USBD_GetString>
  return USBD_StrDesc;
 80097fe:	4b02      	ldr	r3, [pc, #8]	; (8009808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b002      	add	sp, #8
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20001028 	.word	0x20001028
 800980c:	0800a9d0 	.word	0x0800a9d0

08009810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	0002      	movs	r2, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	1dfb      	adds	r3, r7, #7
 800981c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	221a      	movs	r2, #26
 8009822:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009824:	f000 f84c 	bl	80098c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800982a:	0018      	movs	r0, r3
 800982c:	46bd      	mov	sp, r7
 800982e:	b002      	add	sp, #8
 8009830:	bd80      	pop	{r7, pc}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	20000268 	.word	0x20000268

08009838 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	0002      	movs	r2, r0
 8009840:	6039      	str	r1, [r7, #0]
 8009842:	1dfb      	adds	r3, r7, #7
 8009844:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009846:	1dfb      	adds	r3, r7, #7
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4908      	ldr	r1, [pc, #32]	; (8009874 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009854:	0018      	movs	r0, r3
 8009856:	f7ff fdce 	bl	80093f6 <USBD_GetString>
 800985a:	e005      	b.n	8009868 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	4905      	ldr	r1, [pc, #20]	; (8009874 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009862:	0018      	movs	r0, r3
 8009864:	f7ff fdc7 	bl	80093f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009868:	4b02      	ldr	r3, [pc, #8]	; (8009874 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b002      	add	sp, #8
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	20001028 	.word	0x20001028
 8009878:	0800a9e4 	.word	0x0800a9e4

0800987c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	0002      	movs	r2, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	1dfb      	adds	r3, r7, #7
 8009888:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800988a:	1dfb      	adds	r3, r7, #7
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4908      	ldr	r1, [pc, #32]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009898:	0018      	movs	r0, r3
 800989a:	f7ff fdac 	bl	80093f6 <USBD_GetString>
 800989e:	e005      	b.n	80098ac <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	4905      	ldr	r1, [pc, #20]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80098a4:	4b05      	ldr	r3, [pc, #20]	; (80098bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff fda5 	bl	80093f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80098ae:	0018      	movs	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b002      	add	sp, #8
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	20001028 	.word	0x20001028
 80098bc:	0800a9f0 	.word	0x0800a9f0

080098c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <Get_SerialNum+0x48>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098cc:	4b0f      	ldr	r3, [pc, #60]	; (800990c <Get_SerialNum+0x4c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098d2:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <Get_SerialNum+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	18d3      	adds	r3, r2, r3
 80098de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098e6:	490b      	ldr	r1, [pc, #44]	; (8009914 <Get_SerialNum+0x54>)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2208      	movs	r2, #8
 80098ec:	0018      	movs	r0, r3
 80098ee:	f000 f815 	bl	800991c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098f2:	4909      	ldr	r1, [pc, #36]	; (8009918 <Get_SerialNum+0x58>)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2204      	movs	r2, #4
 80098f8:	0018      	movs	r0, r3
 80098fa:	f000 f80f 	bl	800991c <IntToUnicode>
  }
}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	46bd      	mov	sp, r7
 8009902:	b004      	add	sp, #16
 8009904:	bd80      	pop	{r7, pc}
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	1ff80050 	.word	0x1ff80050
 800990c:	1ff80054 	.word	0x1ff80054
 8009910:	1ff80058 	.word	0x1ff80058
 8009914:	2000026a 	.word	0x2000026a
 8009918:	2000027a 	.word	0x2000027a

0800991c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	1dfb      	adds	r3, r7, #7
 8009928:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800992a:	2117      	movs	r1, #23
 800992c:	187b      	adds	r3, r7, r1
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009932:	187b      	adds	r3, r7, r1
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e02f      	b.n	800999a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0f1b      	lsrs	r3, r3, #28
 800993e:	2b09      	cmp	r3, #9
 8009940:	d80d      	bhi.n	800995e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	0f1b      	lsrs	r3, r3, #28
 8009946:	b2da      	uxtb	r2, r3
 8009948:	2317      	movs	r3, #23
 800994a:	18fb      	adds	r3, r7, r3
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	0019      	movs	r1, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	185b      	adds	r3, r3, r1
 8009956:	3230      	adds	r2, #48	; 0x30
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e00c      	b.n	8009978 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	0f1b      	lsrs	r3, r3, #28
 8009962:	b2da      	uxtb	r2, r3
 8009964:	2317      	movs	r3, #23
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	0019      	movs	r1, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	185b      	adds	r3, r3, r1
 8009972:	3237      	adds	r2, #55	; 0x37
 8009974:	b2d2      	uxtb	r2, r2
 8009976:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800997e:	2117      	movs	r1, #23
 8009980:	187b      	adds	r3, r7, r1
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	3301      	adds	r3, #1
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	18d3      	adds	r3, r2, r3
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009990:	187b      	adds	r3, r7, r1
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	187b      	adds	r3, r7, r1
 8009996:	3201      	adds	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	2317      	movs	r3, #23
 800999c:	18fa      	adds	r2, r7, r3
 800999e:	1dfb      	adds	r3, r7, #7
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d3c8      	bcc.n	800993a <IntToUnicode+0x1e>
  }
}
 80099a8:	46c0      	nop			; (mov r8, r8)
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b006      	add	sp, #24
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <HAL_PCD_MspInit+0x38>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d10e      	bne.n	80099e4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099c6:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <HAL_PCD_MspInit+0x3c>)
 80099c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ca:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <HAL_PCD_MspInit+0x3c>)
 80099cc:	2180      	movs	r1, #128	; 0x80
 80099ce:	0409      	lsls	r1, r1, #16
 80099d0:	430a      	orrs	r2, r1
 80099d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80099d4:	2200      	movs	r2, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	201f      	movs	r0, #31
 80099da:	f7f8 fb37 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80099de:	201f      	movs	r0, #31
 80099e0:	f7f8 fb49 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099e4:	46c0      	nop			; (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b002      	add	sp, #8
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	40005c00 	.word	0x40005c00
 80099f0:	40021000 	.word	0x40021000

080099f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	23bc      	movs	r3, #188	; 0xbc
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	58d2      	ldr	r2, [r2, r3]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	21ac      	movs	r1, #172	; 0xac
 8009a08:	0089      	lsls	r1, r1, #2
 8009a0a:	468c      	mov	ip, r1
 8009a0c:	4463      	add	r3, ip
 8009a0e:	0019      	movs	r1, r3
 8009a10:	0010      	movs	r0, r2
 8009a12:	f7fe fc83 	bl	800831c <USBD_LL_SetupStage>
}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b002      	add	sp, #8
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1e:	b590      	push	{r4, r7, lr}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	000a      	movs	r2, r1
 8009a28:	1cfb      	adds	r3, r7, #3
 8009a2a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	23bc      	movs	r3, #188	; 0xbc
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	58d4      	ldr	r4, [r2, r3]
 8009a34:	1cfb      	adds	r3, r7, #3
 8009a36:	781a      	ldrb	r2, [r3, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	23be      	movs	r3, #190	; 0xbe
 8009a3c:	0059      	lsls	r1, r3, #1
 8009a3e:	0013      	movs	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	18c3      	adds	r3, r0, r3
 8009a48:	185b      	adds	r3, r3, r1
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	1cfb      	adds	r3, r7, #3
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	0019      	movs	r1, r3
 8009a52:	0020      	movs	r0, r4
 8009a54:	f7fe fcc0 	bl	80083d8 <USBD_LL_DataOutStage>
}
 8009a58:	46c0      	nop			; (mov r8, r8)
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b003      	add	sp, #12
 8009a5e:	bd90      	pop	{r4, r7, pc}

08009a60 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	000a      	movs	r2, r1
 8009a6a:	1cfb      	adds	r3, r7, #3
 8009a6c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	23bc      	movs	r3, #188	; 0xbc
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	58d0      	ldr	r0, [r2, r3]
 8009a76:	1cfb      	adds	r3, r7, #3
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	0013      	movs	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	189b      	adds	r3, r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	18cb      	adds	r3, r1, r3
 8009a86:	333c      	adds	r3, #60	; 0x3c
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	1cfb      	adds	r3, r7, #3
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	0019      	movs	r1, r3
 8009a90:	f7fe fd24 	bl	80084dc <USBD_LL_DataInStage>
}
 8009a94:	46c0      	nop			; (mov r8, r8)
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	23bc      	movs	r3, #188	; 0xbc
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	58d3      	ldr	r3, [r2, r3]
 8009aac:	0018      	movs	r0, r3
 8009aae:	f7fe fe5b 	bl	8008768 <USBD_LL_SOF>
}
 8009ab2:	46c0      	nop			; (mov r8, r8)
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	b002      	add	sp, #8
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ac2:	230f      	movs	r3, #15
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d001      	beq.n	8009ad6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8009ad2:	f7f7 fcb7 	bl	8001444 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	23bc      	movs	r3, #188	; 0xbc
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	58d2      	ldr	r2, [r2, r3]
 8009ade:	230f      	movs	r3, #15
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	0019      	movs	r1, r3
 8009ae6:	0010      	movs	r0, r2
 8009ae8:	f7fe fdfd 	bl	80086e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	23bc      	movs	r3, #188	; 0xbc
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	58d3      	ldr	r3, [r2, r3]
 8009af4:	0018      	movs	r0, r3
 8009af6:	f7fe fdae 	bl	8008656 <USBD_LL_Reset>
}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b004      	add	sp, #16
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	23bc      	movs	r3, #188	; 0xbc
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	58d3      	ldr	r3, [r2, r3]
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7fe fdf7 	bl	8008708 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d005      	beq.n	8009b2e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <HAL_PCD_SuspendCallback+0x34>)
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <HAL_PCD_SuspendCallback+0x34>)
 8009b28:	2106      	movs	r1, #6
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009b2e:	46c0      	nop			; (mov r8, r8)
 8009b30:	46bd      	mov	sp, r7
 8009b32:	b002      	add	sp, #8
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	e000ed00 	.word	0xe000ed00

08009b3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <HAL_PCD_ResumeCallback+0x38>)
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <HAL_PCD_ResumeCallback+0x38>)
 8009b52:	2106      	movs	r1, #6
 8009b54:	438a      	bics	r2, r1
 8009b56:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009b58:	f000 fa44 	bl	8009fe4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	23bc      	movs	r3, #188	; 0xbc
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	58d3      	ldr	r3, [r2, r3]
 8009b64:	0018      	movs	r0, r3
 8009b66:	f7fe fde7 	bl	8008738 <USBD_LL_Resume>
}
 8009b6a:	46c0      	nop			; (mov r8, r8)
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	b002      	add	sp, #8
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	46c0      	nop			; (mov r8, r8)
 8009b74:	e000ed00 	.word	0xe000ed00

08009b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b80:	4a2d      	ldr	r2, [pc, #180]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009b82:	23bc      	movs	r3, #188	; 0xbc
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	23b0      	movs	r3, #176	; 0xb0
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4929      	ldr	r1, [pc, #164]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009b92:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009b94:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009b96:	4a29      	ldr	r2, [pc, #164]	; (8009c3c <USBD_LL_Init+0xc4>)
 8009b98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b9a:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ba0:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009ba8:	2202      	movs	r2, #2
 8009baa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bb2:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <USBD_LL_Init+0xc0>)
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f7f8 fc2d 	bl	8002420 <HAL_PCD_Init>
 8009bc6:	1e03      	subs	r3, r0, #0
 8009bc8:	d001      	beq.n	8009bce <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009bca:	f7f7 fc3b 	bl	8001444 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	23b0      	movs	r3, #176	; 0xb0
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	58d0      	ldr	r0, [r2, r3]
 8009bd6:	2318      	movs	r3, #24
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f7fa f9ee 	bl	8003fbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	23b0      	movs	r3, #176	; 0xb0
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	58d0      	ldr	r0, [r2, r3]
 8009be8:	2358      	movs	r3, #88	; 0x58
 8009bea:	2200      	movs	r2, #0
 8009bec:	2180      	movs	r1, #128	; 0x80
 8009bee:	f7fa f9e5 	bl	8003fbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	23b0      	movs	r3, #176	; 0xb0
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	58d0      	ldr	r0, [r2, r3]
 8009bfa:	23c0      	movs	r3, #192	; 0xc0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2181      	movs	r1, #129	; 0x81
 8009c00:	f7fa f9dc 	bl	8003fbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	23b0      	movs	r3, #176	; 0xb0
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	58d0      	ldr	r0, [r2, r3]
 8009c0c:	2388      	movs	r3, #136	; 0x88
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	2200      	movs	r2, #0
 8009c12:	2101      	movs	r1, #1
 8009c14:	f7fa f9d2 	bl	8003fbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	23b0      	movs	r3, #176	; 0xb0
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	58d0      	ldr	r0, [r2, r3]
 8009c20:	2380      	movs	r3, #128	; 0x80
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	2200      	movs	r2, #0
 8009c26:	2182      	movs	r1, #130	; 0x82
 8009c28:	f7fa f9c8 	bl	8003fbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b002      	add	sp, #8
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	20001228 	.word	0x20001228
 8009c3c:	40005c00 	.word	0x40005c00

08009c40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c48:	210f      	movs	r1, #15
 8009c4a:	187b      	adds	r3, r7, r1
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c50:	260e      	movs	r6, #14
 8009c52:	19bb      	adds	r3, r7, r6
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	23b0      	movs	r3, #176	; 0xb0
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	58d3      	ldr	r3, [r2, r3]
 8009c60:	000d      	movs	r5, r1
 8009c62:	187c      	adds	r4, r7, r1
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7f8 fcdb 	bl	8002620 <HAL_PCD_Start>
 8009c6a:	0003      	movs	r3, r0
 8009c6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6e:	19bc      	adds	r4, r7, r6
 8009c70:	197b      	adds	r3, r7, r5
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	0018      	movs	r0, r3
 8009c76:	f000 f9bc 	bl	8009ff2 <USBD_Get_USB_Status>
 8009c7a:	0003      	movs	r3, r0
 8009c7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009c7e:	19bb      	adds	r3, r7, r6
 8009c80:	781b      	ldrb	r3, [r3, #0]
}
 8009c82:	0018      	movs	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	b005      	add	sp, #20
 8009c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	000c      	movs	r4, r1
 8009c94:	0010      	movs	r0, r2
 8009c96:	0019      	movs	r1, r3
 8009c98:	1cfb      	adds	r3, r7, #3
 8009c9a:	1c22      	adds	r2, r4, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	1cbb      	adds	r3, r7, #2
 8009ca0:	1c02      	adds	r2, r0, #0
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	003b      	movs	r3, r7
 8009ca6:	1c0a      	adds	r2, r1, #0
 8009ca8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009caa:	260f      	movs	r6, #15
 8009cac:	19bb      	adds	r3, r7, r6
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb2:	250e      	movs	r5, #14
 8009cb4:	197b      	adds	r3, r7, r5
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	23b0      	movs	r3, #176	; 0xb0
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	58d0      	ldr	r0, [r2, r3]
 8009cc2:	19bc      	adds	r4, r7, r6
 8009cc4:	1cbb      	adds	r3, r7, #2
 8009cc6:	781d      	ldrb	r5, [r3, #0]
 8009cc8:	003b      	movs	r3, r7
 8009cca:	881a      	ldrh	r2, [r3, #0]
 8009ccc:	1cfb      	adds	r3, r7, #3
 8009cce:	7819      	ldrb	r1, [r3, #0]
 8009cd0:	002b      	movs	r3, r5
 8009cd2:	f7f8 fe3a 	bl	800294a <HAL_PCD_EP_Open>
 8009cd6:	0003      	movs	r3, r0
 8009cd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cda:	250e      	movs	r5, #14
 8009cdc:	197c      	adds	r4, r7, r5
 8009cde:	19bb      	adds	r3, r7, r6
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f000 f985 	bl	8009ff2 <USBD_Get_USB_Status>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009cec:	197b      	adds	r3, r7, r5
 8009cee:	781b      	ldrb	r3, [r3, #0]
}
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	b005      	add	sp, #20
 8009cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cf8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	000a      	movs	r2, r1
 8009d02:	1cfb      	adds	r3, r7, #3
 8009d04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	210f      	movs	r1, #15
 8009d08:	187b      	adds	r3, r7, r1
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0e:	260e      	movs	r6, #14
 8009d10:	19bb      	adds	r3, r7, r6
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	23b0      	movs	r3, #176	; 0xb0
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	58d2      	ldr	r2, [r2, r3]
 8009d1e:	000d      	movs	r5, r1
 8009d20:	187c      	adds	r4, r7, r1
 8009d22:	1cfb      	adds	r3, r7, #3
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	0019      	movs	r1, r3
 8009d28:	0010      	movs	r0, r2
 8009d2a:	f7f8 fe7d 	bl	8002a28 <HAL_PCD_EP_Close>
 8009d2e:	0003      	movs	r3, r0
 8009d30:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	19bc      	adds	r4, r7, r6
 8009d34:	197b      	adds	r3, r7, r5
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f000 f95a 	bl	8009ff2 <USBD_Get_USB_Status>
 8009d3e:	0003      	movs	r3, r0
 8009d40:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009d42:	19bb      	adds	r3, r7, r6
 8009d44:	781b      	ldrb	r3, [r3, #0]
}
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b005      	add	sp, #20
 8009d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	000a      	movs	r2, r1
 8009d58:	1cfb      	adds	r3, r7, #3
 8009d5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5c:	210f      	movs	r1, #15
 8009d5e:	187b      	adds	r3, r7, r1
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d64:	260e      	movs	r6, #14
 8009d66:	19bb      	adds	r3, r7, r6
 8009d68:	2200      	movs	r2, #0
 8009d6a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	23b0      	movs	r3, #176	; 0xb0
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	58d2      	ldr	r2, [r2, r3]
 8009d74:	000d      	movs	r5, r1
 8009d76:	187c      	adds	r4, r7, r1
 8009d78:	1cfb      	adds	r3, r7, #3
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	0010      	movs	r0, r2
 8009d80:	f7f8 ff2f 	bl	8002be2 <HAL_PCD_EP_SetStall>
 8009d84:	0003      	movs	r3, r0
 8009d86:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d88:	19bc      	adds	r4, r7, r6
 8009d8a:	197b      	adds	r3, r7, r5
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 f92f 	bl	8009ff2 <USBD_Get_USB_Status>
 8009d94:	0003      	movs	r3, r0
 8009d96:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009d98:	19bb      	adds	r3, r7, r6
 8009d9a:	781b      	ldrb	r3, [r3, #0]
}
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b005      	add	sp, #20
 8009da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009da4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	000a      	movs	r2, r1
 8009dae:	1cfb      	adds	r3, r7, #3
 8009db0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db2:	210f      	movs	r1, #15
 8009db4:	187b      	adds	r3, r7, r1
 8009db6:	2200      	movs	r2, #0
 8009db8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dba:	260e      	movs	r6, #14
 8009dbc:	19bb      	adds	r3, r7, r6
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	23b0      	movs	r3, #176	; 0xb0
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	58d2      	ldr	r2, [r2, r3]
 8009dca:	000d      	movs	r5, r1
 8009dcc:	187c      	adds	r4, r7, r1
 8009dce:	1cfb      	adds	r3, r7, #3
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	0010      	movs	r0, r2
 8009dd6:	f7f8 ff60 	bl	8002c9a <HAL_PCD_EP_ClrStall>
 8009dda:	0003      	movs	r3, r0
 8009ddc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dde:	19bc      	adds	r4, r7, r6
 8009de0:	197b      	adds	r3, r7, r5
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	0018      	movs	r0, r3
 8009de6:	f000 f904 	bl	8009ff2 <USBD_Get_USB_Status>
 8009dea:	0003      	movs	r3, r0
 8009dec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009dee:	19bb      	adds	r3, r7, r6
 8009df0:	781b      	ldrb	r3, [r3, #0]
}
 8009df2:	0018      	movs	r0, r3
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b005      	add	sp, #20
 8009df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dfa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	000a      	movs	r2, r1
 8009e04:	1cfb      	adds	r3, r7, #3
 8009e06:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	23b0      	movs	r3, #176	; 0xb0
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	58d3      	ldr	r3, [r2, r3]
 8009e10:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e12:	1cfb      	adds	r3, r7, #3
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b25b      	sxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da0d      	bge.n	8009e38 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e1c:	1cfb      	adds	r3, r7, #3
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	227f      	movs	r2, #127	; 0x7f
 8009e22:	4013      	ands	r3, r2
 8009e24:	68f9      	ldr	r1, [r7, #12]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	0013      	movs	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	189b      	adds	r3, r3, r2
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	18cb      	adds	r3, r1, r3
 8009e32:	3302      	adds	r3, #2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	e00d      	b.n	8009e54 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e38:	1cfb      	adds	r3, r7, #3
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	227f      	movs	r2, #127	; 0x7f
 8009e3e:	401a      	ands	r2, r3
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	23b5      	movs	r3, #181	; 0xb5
 8009e44:	0059      	lsls	r1, r3, #1
 8009e46:	0013      	movs	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	189b      	adds	r3, r3, r2
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	18c3      	adds	r3, r0, r3
 8009e50:	185b      	adds	r3, r3, r1
 8009e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e54:	0018      	movs	r0, r3
 8009e56:	46bd      	mov	sp, r7
 8009e58:	b004      	add	sp, #16
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	000a      	movs	r2, r1
 8009e66:	1cfb      	adds	r3, r7, #3
 8009e68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6a:	210f      	movs	r1, #15
 8009e6c:	187b      	adds	r3, r7, r1
 8009e6e:	2200      	movs	r2, #0
 8009e70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e72:	260e      	movs	r6, #14
 8009e74:	19bb      	adds	r3, r7, r6
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	23b0      	movs	r3, #176	; 0xb0
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	58d2      	ldr	r2, [r2, r3]
 8009e82:	000d      	movs	r5, r1
 8009e84:	187c      	adds	r4, r7, r1
 8009e86:	1cfb      	adds	r3, r7, #3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	0019      	movs	r1, r3
 8009e8c:	0010      	movs	r0, r2
 8009e8e:	f7f8 fd31 	bl	80028f4 <HAL_PCD_SetAddress>
 8009e92:	0003      	movs	r3, r0
 8009e94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	19bc      	adds	r4, r7, r6
 8009e98:	197b      	adds	r3, r7, r5
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f000 f8a8 	bl	8009ff2 <USBD_Get_USB_Status>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ea6:	19bb      	adds	r3, r7, r6
 8009ea8:	781b      	ldrb	r3, [r3, #0]
}
 8009eaa:	0018      	movs	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	b005      	add	sp, #20
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eb4:	b087      	sub	sp, #28
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	0008      	movs	r0, r1
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	0019      	movs	r1, r3
 8009ec0:	230b      	movs	r3, #11
 8009ec2:	18fb      	adds	r3, r7, r3
 8009ec4:	1c02      	adds	r2, r0, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	2408      	movs	r4, #8
 8009eca:	193b      	adds	r3, r7, r4
 8009ecc:	1c0a      	adds	r2, r1, #0
 8009ece:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed0:	2117      	movs	r1, #23
 8009ed2:	187b      	adds	r3, r7, r1
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2516      	movs	r5, #22
 8009eda:	197b      	adds	r3, r7, r5
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	23b0      	movs	r3, #176	; 0xb0
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	58d0      	ldr	r0, [r2, r3]
 8009ee8:	193b      	adds	r3, r7, r4
 8009eea:	881d      	ldrh	r5, [r3, #0]
 8009eec:	000e      	movs	r6, r1
 8009eee:	187c      	adds	r4, r7, r1
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	230b      	movs	r3, #11
 8009ef4:	18fb      	adds	r3, r7, r3
 8009ef6:	7819      	ldrb	r1, [r3, #0]
 8009ef8:	002b      	movs	r3, r5
 8009efa:	f7f8 fe36 	bl	8002b6a <HAL_PCD_EP_Transmit>
 8009efe:	0003      	movs	r3, r0
 8009f00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f02:	2516      	movs	r5, #22
 8009f04:	197c      	adds	r4, r7, r5
 8009f06:	19bb      	adds	r3, r7, r6
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	f000 f871 	bl	8009ff2 <USBD_Get_USB_Status>
 8009f10:	0003      	movs	r3, r0
 8009f12:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f14:	197b      	adds	r3, r7, r5
 8009f16:	781b      	ldrb	r3, [r3, #0]
}
 8009f18:	0018      	movs	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b007      	add	sp, #28
 8009f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	0008      	movs	r0, r1
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	0019      	movs	r1, r3
 8009f2e:	230b      	movs	r3, #11
 8009f30:	18fb      	adds	r3, r7, r3
 8009f32:	1c02      	adds	r2, r0, #0
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	2408      	movs	r4, #8
 8009f38:	193b      	adds	r3, r7, r4
 8009f3a:	1c0a      	adds	r2, r1, #0
 8009f3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3e:	2117      	movs	r1, #23
 8009f40:	187b      	adds	r3, r7, r1
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f46:	2516      	movs	r5, #22
 8009f48:	197b      	adds	r3, r7, r5
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	23b0      	movs	r3, #176	; 0xb0
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	58d0      	ldr	r0, [r2, r3]
 8009f56:	193b      	adds	r3, r7, r4
 8009f58:	881d      	ldrh	r5, [r3, #0]
 8009f5a:	000e      	movs	r6, r1
 8009f5c:	187c      	adds	r4, r7, r1
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	230b      	movs	r3, #11
 8009f62:	18fb      	adds	r3, r7, r3
 8009f64:	7819      	ldrb	r1, [r3, #0]
 8009f66:	002b      	movs	r3, r5
 8009f68:	f7f8 fdaf 	bl	8002aca <HAL_PCD_EP_Receive>
 8009f6c:	0003      	movs	r3, r0
 8009f6e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f70:	2516      	movs	r5, #22
 8009f72:	197c      	adds	r4, r7, r5
 8009f74:	19bb      	adds	r3, r7, r6
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f000 f83a 	bl	8009ff2 <USBD_Get_USB_Status>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f82:	197b      	adds	r3, r7, r5
 8009f84:	781b      	ldrb	r3, [r3, #0]
}
 8009f86:	0018      	movs	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b007      	add	sp, #28
 8009f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	000a      	movs	r2, r1
 8009f98:	1cfb      	adds	r3, r7, #3
 8009f9a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	23b0      	movs	r3, #176	; 0xb0
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	58d2      	ldr	r2, [r2, r3]
 8009fa4:	1cfb      	adds	r3, r7, #3
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	0019      	movs	r1, r3
 8009faa:	0010      	movs	r0, r2
 8009fac:	f7f8 fdc4 	bl	8002b38 <HAL_PCD_EP_GetRxCount>
 8009fb0:	0003      	movs	r3, r0
}
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	b002      	add	sp, #8
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fc4:	4b02      	ldr	r3, [pc, #8]	; (8009fd0 <USBD_static_malloc+0x14>)
}
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b002      	add	sp, #8
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	46c0      	nop			; (mov r8, r8)
 8009fd0:	2000151c 	.word	0x2000151c

08009fd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

}
 8009fdc:	46c0      	nop			; (mov r8, r8)
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	b002      	add	sp, #8
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009fe8:	f7f6 fec2 	bl	8000d70 <SystemClock_Config>
}
 8009fec:	46c0      	nop			; (mov r8, r8)
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	0002      	movs	r2, r0
 8009ffa:	1dfb      	adds	r3, r7, #7
 8009ffc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffe:	230f      	movs	r3, #15
 800a000:	18fb      	adds	r3, r7, r3
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a006:	1dfb      	adds	r3, r7, #7
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d017      	beq.n	800a03e <USBD_Get_USB_Status+0x4c>
 800a00e:	dc1b      	bgt.n	800a048 <USBD_Get_USB_Status+0x56>
 800a010:	2b02      	cmp	r3, #2
 800a012:	d00f      	beq.n	800a034 <USBD_Get_USB_Status+0x42>
 800a014:	dc18      	bgt.n	800a048 <USBD_Get_USB_Status+0x56>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <USBD_Get_USB_Status+0x2e>
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d005      	beq.n	800a02a <USBD_Get_USB_Status+0x38>
 800a01e:	e013      	b.n	800a048 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a020:	230f      	movs	r3, #15
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
    break;
 800a028:	e013      	b.n	800a052 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a02a:	230f      	movs	r3, #15
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	2202      	movs	r2, #2
 800a030:	701a      	strb	r2, [r3, #0]
    break;
 800a032:	e00e      	b.n	800a052 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a034:	230f      	movs	r3, #15
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2201      	movs	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]
    break;
 800a03c:	e009      	b.n	800a052 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a03e:	230f      	movs	r3, #15
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	2202      	movs	r2, #2
 800a044:	701a      	strb	r2, [r3, #0]
    break;
 800a046:	e004      	b.n	800a052 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a048:	230f      	movs	r3, #15
 800a04a:	18fb      	adds	r3, r7, r3
 800a04c:	2202      	movs	r2, #2
 800a04e:	701a      	strb	r2, [r3, #0]
    break;
 800a050:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a052:	230f      	movs	r3, #15
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	781b      	ldrb	r3, [r3, #0]
}
 800a058:	0018      	movs	r0, r3
 800a05a:	46bd      	mov	sp, r7
 800a05c:	b004      	add	sp, #16
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <__errno>:
 800a060:	4b01      	ldr	r3, [pc, #4]	; (800a068 <__errno+0x8>)
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	4770      	bx	lr
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	20000284 	.word	0x20000284

0800a06c <__libc_init_array>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	2600      	movs	r6, #0
 800a070:	4d0c      	ldr	r5, [pc, #48]	; (800a0a4 <__libc_init_array+0x38>)
 800a072:	4c0d      	ldr	r4, [pc, #52]	; (800a0a8 <__libc_init_array+0x3c>)
 800a074:	1b64      	subs	r4, r4, r5
 800a076:	10a4      	asrs	r4, r4, #2
 800a078:	42a6      	cmp	r6, r4
 800a07a:	d109      	bne.n	800a090 <__libc_init_array+0x24>
 800a07c:	2600      	movs	r6, #0
 800a07e:	f000 fc8b 	bl	800a998 <_init>
 800a082:	4d0a      	ldr	r5, [pc, #40]	; (800a0ac <__libc_init_array+0x40>)
 800a084:	4c0a      	ldr	r4, [pc, #40]	; (800a0b0 <__libc_init_array+0x44>)
 800a086:	1b64      	subs	r4, r4, r5
 800a088:	10a4      	asrs	r4, r4, #2
 800a08a:	42a6      	cmp	r6, r4
 800a08c:	d105      	bne.n	800a09a <__libc_init_array+0x2e>
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	00b3      	lsls	r3, r6, #2
 800a092:	58eb      	ldr	r3, [r5, r3]
 800a094:	4798      	blx	r3
 800a096:	3601      	adds	r6, #1
 800a098:	e7ee      	b.n	800a078 <__libc_init_array+0xc>
 800a09a:	00b3      	lsls	r3, r6, #2
 800a09c:	58eb      	ldr	r3, [r5, r3]
 800a09e:	4798      	blx	r3
 800a0a0:	3601      	adds	r6, #1
 800a0a2:	e7f2      	b.n	800a08a <__libc_init_array+0x1e>
 800a0a4:	0800ab4c 	.word	0x0800ab4c
 800a0a8:	0800ab4c 	.word	0x0800ab4c
 800a0ac:	0800ab4c 	.word	0x0800ab4c
 800a0b0:	0800ab50 	.word	0x0800ab50

0800a0b4 <memcpy>:
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d100      	bne.n	800a0be <memcpy+0xa>
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	5ccc      	ldrb	r4, [r1, r3]
 800a0c0:	54c4      	strb	r4, [r0, r3]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	e7f8      	b.n	800a0b8 <memcpy+0x4>

0800a0c6 <memset>:
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	1882      	adds	r2, r0, r2
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d100      	bne.n	800a0d0 <memset+0xa>
 800a0ce:	4770      	bx	lr
 800a0d0:	7019      	strb	r1, [r3, #0]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	e7f9      	b.n	800a0ca <memset+0x4>
	...

0800a0d8 <siprintf>:
 800a0d8:	b40e      	push	{r1, r2, r3}
 800a0da:	b500      	push	{lr}
 800a0dc:	490b      	ldr	r1, [pc, #44]	; (800a10c <siprintf+0x34>)
 800a0de:	b09c      	sub	sp, #112	; 0x70
 800a0e0:	ab1d      	add	r3, sp, #116	; 0x74
 800a0e2:	9002      	str	r0, [sp, #8]
 800a0e4:	9006      	str	r0, [sp, #24]
 800a0e6:	9107      	str	r1, [sp, #28]
 800a0e8:	9104      	str	r1, [sp, #16]
 800a0ea:	4809      	ldr	r0, [pc, #36]	; (800a110 <siprintf+0x38>)
 800a0ec:	4909      	ldr	r1, [pc, #36]	; (800a114 <siprintf+0x3c>)
 800a0ee:	cb04      	ldmia	r3!, {r2}
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	6800      	ldr	r0, [r0, #0]
 800a0f4:	a902      	add	r1, sp, #8
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	f000 f870 	bl	800a1dc <_svfiprintf_r>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9a02      	ldr	r2, [sp, #8]
 800a100:	7013      	strb	r3, [r2, #0]
 800a102:	b01c      	add	sp, #112	; 0x70
 800a104:	bc08      	pop	{r3}
 800a106:	b003      	add	sp, #12
 800a108:	4718      	bx	r3
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	7fffffff 	.word	0x7fffffff
 800a110:	20000284 	.word	0x20000284
 800a114:	ffff0208 	.word	0xffff0208

0800a118 <__ssputs_r>:
 800a118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a11a:	688e      	ldr	r6, [r1, #8]
 800a11c:	b085      	sub	sp, #20
 800a11e:	0007      	movs	r7, r0
 800a120:	000c      	movs	r4, r1
 800a122:	9203      	str	r2, [sp, #12]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	429e      	cmp	r6, r3
 800a128:	d83c      	bhi.n	800a1a4 <__ssputs_r+0x8c>
 800a12a:	2390      	movs	r3, #144	; 0x90
 800a12c:	898a      	ldrh	r2, [r1, #12]
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	421a      	tst	r2, r3
 800a132:	d034      	beq.n	800a19e <__ssputs_r+0x86>
 800a134:	6909      	ldr	r1, [r1, #16]
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	6960      	ldr	r0, [r4, #20]
 800a13a:	1a5b      	subs	r3, r3, r1
 800a13c:	9302      	str	r3, [sp, #8]
 800a13e:	2303      	movs	r3, #3
 800a140:	4343      	muls	r3, r0
 800a142:	0fdd      	lsrs	r5, r3, #31
 800a144:	18ed      	adds	r5, r5, r3
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	9802      	ldr	r0, [sp, #8]
 800a14a:	3301      	adds	r3, #1
 800a14c:	181b      	adds	r3, r3, r0
 800a14e:	106d      	asrs	r5, r5, #1
 800a150:	42ab      	cmp	r3, r5
 800a152:	d900      	bls.n	800a156 <__ssputs_r+0x3e>
 800a154:	001d      	movs	r5, r3
 800a156:	0553      	lsls	r3, r2, #21
 800a158:	d532      	bpl.n	800a1c0 <__ssputs_r+0xa8>
 800a15a:	0029      	movs	r1, r5
 800a15c:	0038      	movs	r0, r7
 800a15e:	f000 fb49 	bl	800a7f4 <_malloc_r>
 800a162:	1e06      	subs	r6, r0, #0
 800a164:	d109      	bne.n	800a17a <__ssputs_r+0x62>
 800a166:	230c      	movs	r3, #12
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	2001      	movs	r0, #1
 800a16e:	89a2      	ldrh	r2, [r4, #12]
 800a170:	4240      	negs	r0, r0
 800a172:	4313      	orrs	r3, r2
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	b005      	add	sp, #20
 800a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17a:	9a02      	ldr	r2, [sp, #8]
 800a17c:	6921      	ldr	r1, [r4, #16]
 800a17e:	f7ff ff99 	bl	800a0b4 <memcpy>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <__ssputs_r+0xc0>)
 800a186:	401a      	ands	r2, r3
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	4313      	orrs	r3, r2
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	9b02      	ldr	r3, [sp, #8]
 800a190:	6126      	str	r6, [r4, #16]
 800a192:	18f6      	adds	r6, r6, r3
 800a194:	6026      	str	r6, [r4, #0]
 800a196:	6165      	str	r5, [r4, #20]
 800a198:	9e01      	ldr	r6, [sp, #4]
 800a19a:	1aed      	subs	r5, r5, r3
 800a19c:	60a5      	str	r5, [r4, #8]
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	429e      	cmp	r6, r3
 800a1a2:	d900      	bls.n	800a1a6 <__ssputs_r+0x8e>
 800a1a4:	9e01      	ldr	r6, [sp, #4]
 800a1a6:	0032      	movs	r2, r6
 800a1a8:	9903      	ldr	r1, [sp, #12]
 800a1aa:	6820      	ldr	r0, [r4, #0]
 800a1ac:	f000 faa3 	bl	800a6f6 <memmove>
 800a1b0:	68a3      	ldr	r3, [r4, #8]
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	1b9b      	subs	r3, r3, r6
 800a1b6:	60a3      	str	r3, [r4, #8]
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	199e      	adds	r6, r3, r6
 800a1bc:	6026      	str	r6, [r4, #0]
 800a1be:	e7da      	b.n	800a176 <__ssputs_r+0x5e>
 800a1c0:	002a      	movs	r2, r5
 800a1c2:	0038      	movs	r0, r7
 800a1c4:	f000 fb8c 	bl	800a8e0 <_realloc_r>
 800a1c8:	1e06      	subs	r6, r0, #0
 800a1ca:	d1e0      	bne.n	800a18e <__ssputs_r+0x76>
 800a1cc:	0038      	movs	r0, r7
 800a1ce:	6921      	ldr	r1, [r4, #16]
 800a1d0:	f000 faa4 	bl	800a71c <_free_r>
 800a1d4:	e7c7      	b.n	800a166 <__ssputs_r+0x4e>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	fffffb7f 	.word	0xfffffb7f

0800a1dc <_svfiprintf_r>:
 800a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1de:	b0a1      	sub	sp, #132	; 0x84
 800a1e0:	9003      	str	r0, [sp, #12]
 800a1e2:	001d      	movs	r5, r3
 800a1e4:	898b      	ldrh	r3, [r1, #12]
 800a1e6:	000f      	movs	r7, r1
 800a1e8:	0016      	movs	r6, r2
 800a1ea:	061b      	lsls	r3, r3, #24
 800a1ec:	d511      	bpl.n	800a212 <_svfiprintf_r+0x36>
 800a1ee:	690b      	ldr	r3, [r1, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10e      	bne.n	800a212 <_svfiprintf_r+0x36>
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	f000 fafd 	bl	800a7f4 <_malloc_r>
 800a1fa:	6038      	str	r0, [r7, #0]
 800a1fc:	6138      	str	r0, [r7, #16]
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d105      	bne.n	800a20e <_svfiprintf_r+0x32>
 800a202:	230c      	movs	r3, #12
 800a204:	9a03      	ldr	r2, [sp, #12]
 800a206:	3801      	subs	r0, #1
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	b021      	add	sp, #132	; 0x84
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	617b      	str	r3, [r7, #20]
 800a212:	2300      	movs	r3, #0
 800a214:	ac08      	add	r4, sp, #32
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	3320      	adds	r3, #32
 800a21a:	7663      	strb	r3, [r4, #25]
 800a21c:	3310      	adds	r3, #16
 800a21e:	76a3      	strb	r3, [r4, #26]
 800a220:	9507      	str	r5, [sp, #28]
 800a222:	0035      	movs	r5, r6
 800a224:	782b      	ldrb	r3, [r5, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <_svfiprintf_r+0x52>
 800a22a:	2b25      	cmp	r3, #37	; 0x25
 800a22c:	d147      	bne.n	800a2be <_svfiprintf_r+0xe2>
 800a22e:	1bab      	subs	r3, r5, r6
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	42b5      	cmp	r5, r6
 800a234:	d00c      	beq.n	800a250 <_svfiprintf_r+0x74>
 800a236:	0032      	movs	r2, r6
 800a238:	0039      	movs	r1, r7
 800a23a:	9803      	ldr	r0, [sp, #12]
 800a23c:	f7ff ff6c 	bl	800a118 <__ssputs_r>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d100      	bne.n	800a246 <_svfiprintf_r+0x6a>
 800a244:	e0ae      	b.n	800a3a4 <_svfiprintf_r+0x1c8>
 800a246:	6962      	ldr	r2, [r4, #20]
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	4694      	mov	ip, r2
 800a24c:	4463      	add	r3, ip
 800a24e:	6163      	str	r3, [r4, #20]
 800a250:	782b      	ldrb	r3, [r5, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d100      	bne.n	800a258 <_svfiprintf_r+0x7c>
 800a256:	e0a5      	b.n	800a3a4 <_svfiprintf_r+0x1c8>
 800a258:	2201      	movs	r2, #1
 800a25a:	2300      	movs	r3, #0
 800a25c:	4252      	negs	r2, r2
 800a25e:	6062      	str	r2, [r4, #4]
 800a260:	a904      	add	r1, sp, #16
 800a262:	3254      	adds	r2, #84	; 0x54
 800a264:	1852      	adds	r2, r2, r1
 800a266:	1c6e      	adds	r6, r5, #1
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	60e3      	str	r3, [r4, #12]
 800a26c:	60a3      	str	r3, [r4, #8]
 800a26e:	7013      	strb	r3, [r2, #0]
 800a270:	65a3      	str	r3, [r4, #88]	; 0x58
 800a272:	2205      	movs	r2, #5
 800a274:	7831      	ldrb	r1, [r6, #0]
 800a276:	4854      	ldr	r0, [pc, #336]	; (800a3c8 <_svfiprintf_r+0x1ec>)
 800a278:	f000 fa32 	bl	800a6e0 <memchr>
 800a27c:	1c75      	adds	r5, r6, #1
 800a27e:	2800      	cmp	r0, #0
 800a280:	d11f      	bne.n	800a2c2 <_svfiprintf_r+0xe6>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	06d3      	lsls	r3, r2, #27
 800a286:	d504      	bpl.n	800a292 <_svfiprintf_r+0xb6>
 800a288:	2353      	movs	r3, #83	; 0x53
 800a28a:	a904      	add	r1, sp, #16
 800a28c:	185b      	adds	r3, r3, r1
 800a28e:	2120      	movs	r1, #32
 800a290:	7019      	strb	r1, [r3, #0]
 800a292:	0713      	lsls	r3, r2, #28
 800a294:	d504      	bpl.n	800a2a0 <_svfiprintf_r+0xc4>
 800a296:	2353      	movs	r3, #83	; 0x53
 800a298:	a904      	add	r1, sp, #16
 800a29a:	185b      	adds	r3, r3, r1
 800a29c:	212b      	movs	r1, #43	; 0x2b
 800a29e:	7019      	strb	r1, [r3, #0]
 800a2a0:	7833      	ldrb	r3, [r6, #0]
 800a2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a4:	d016      	beq.n	800a2d4 <_svfiprintf_r+0xf8>
 800a2a6:	0035      	movs	r5, r6
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	200a      	movs	r0, #10
 800a2ac:	68e3      	ldr	r3, [r4, #12]
 800a2ae:	782a      	ldrb	r2, [r5, #0]
 800a2b0:	1c6e      	adds	r6, r5, #1
 800a2b2:	3a30      	subs	r2, #48	; 0x30
 800a2b4:	2a09      	cmp	r2, #9
 800a2b6:	d94e      	bls.n	800a356 <_svfiprintf_r+0x17a>
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d111      	bne.n	800a2e0 <_svfiprintf_r+0x104>
 800a2bc:	e017      	b.n	800a2ee <_svfiprintf_r+0x112>
 800a2be:	3501      	adds	r5, #1
 800a2c0:	e7b0      	b.n	800a224 <_svfiprintf_r+0x48>
 800a2c2:	4b41      	ldr	r3, [pc, #260]	; (800a3c8 <_svfiprintf_r+0x1ec>)
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	1ac0      	subs	r0, r0, r3
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4083      	lsls	r3, r0
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	002e      	movs	r6, r5
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	e7ce      	b.n	800a272 <_svfiprintf_r+0x96>
 800a2d4:	9b07      	ldr	r3, [sp, #28]
 800a2d6:	1d19      	adds	r1, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	9107      	str	r1, [sp, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	db01      	blt.n	800a2e4 <_svfiprintf_r+0x108>
 800a2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e2:	e004      	b.n	800a2ee <_svfiprintf_r+0x112>
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	60e3      	str	r3, [r4, #12]
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	782b      	ldrb	r3, [r5, #0]
 800a2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f2:	d10a      	bne.n	800a30a <_svfiprintf_r+0x12e>
 800a2f4:	786b      	ldrb	r3, [r5, #1]
 800a2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f8:	d135      	bne.n	800a366 <_svfiprintf_r+0x18a>
 800a2fa:	9b07      	ldr	r3, [sp, #28]
 800a2fc:	3502      	adds	r5, #2
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	9207      	str	r2, [sp, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	db2b      	blt.n	800a360 <_svfiprintf_r+0x184>
 800a308:	9309      	str	r3, [sp, #36]	; 0x24
 800a30a:	4e30      	ldr	r6, [pc, #192]	; (800a3cc <_svfiprintf_r+0x1f0>)
 800a30c:	2203      	movs	r2, #3
 800a30e:	0030      	movs	r0, r6
 800a310:	7829      	ldrb	r1, [r5, #0]
 800a312:	f000 f9e5 	bl	800a6e0 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d006      	beq.n	800a328 <_svfiprintf_r+0x14c>
 800a31a:	2340      	movs	r3, #64	; 0x40
 800a31c:	1b80      	subs	r0, r0, r6
 800a31e:	4083      	lsls	r3, r0
 800a320:	6822      	ldr	r2, [r4, #0]
 800a322:	3501      	adds	r5, #1
 800a324:	4313      	orrs	r3, r2
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	7829      	ldrb	r1, [r5, #0]
 800a32a:	2206      	movs	r2, #6
 800a32c:	4828      	ldr	r0, [pc, #160]	; (800a3d0 <_svfiprintf_r+0x1f4>)
 800a32e:	1c6e      	adds	r6, r5, #1
 800a330:	7621      	strb	r1, [r4, #24]
 800a332:	f000 f9d5 	bl	800a6e0 <memchr>
 800a336:	2800      	cmp	r0, #0
 800a338:	d03c      	beq.n	800a3b4 <_svfiprintf_r+0x1d8>
 800a33a:	4b26      	ldr	r3, [pc, #152]	; (800a3d4 <_svfiprintf_r+0x1f8>)
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d125      	bne.n	800a38c <_svfiprintf_r+0x1b0>
 800a340:	2207      	movs	r2, #7
 800a342:	9b07      	ldr	r3, [sp, #28]
 800a344:	3307      	adds	r3, #7
 800a346:	4393      	bics	r3, r2
 800a348:	3308      	adds	r3, #8
 800a34a:	9307      	str	r3, [sp, #28]
 800a34c:	6963      	ldr	r3, [r4, #20]
 800a34e:	9a04      	ldr	r2, [sp, #16]
 800a350:	189b      	adds	r3, r3, r2
 800a352:	6163      	str	r3, [r4, #20]
 800a354:	e765      	b.n	800a222 <_svfiprintf_r+0x46>
 800a356:	4343      	muls	r3, r0
 800a358:	0035      	movs	r5, r6
 800a35a:	2101      	movs	r1, #1
 800a35c:	189b      	adds	r3, r3, r2
 800a35e:	e7a6      	b.n	800a2ae <_svfiprintf_r+0xd2>
 800a360:	2301      	movs	r3, #1
 800a362:	425b      	negs	r3, r3
 800a364:	e7d0      	b.n	800a308 <_svfiprintf_r+0x12c>
 800a366:	2300      	movs	r3, #0
 800a368:	200a      	movs	r0, #10
 800a36a:	001a      	movs	r2, r3
 800a36c:	3501      	adds	r5, #1
 800a36e:	6063      	str	r3, [r4, #4]
 800a370:	7829      	ldrb	r1, [r5, #0]
 800a372:	1c6e      	adds	r6, r5, #1
 800a374:	3930      	subs	r1, #48	; 0x30
 800a376:	2909      	cmp	r1, #9
 800a378:	d903      	bls.n	800a382 <_svfiprintf_r+0x1a6>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0c5      	beq.n	800a30a <_svfiprintf_r+0x12e>
 800a37e:	9209      	str	r2, [sp, #36]	; 0x24
 800a380:	e7c3      	b.n	800a30a <_svfiprintf_r+0x12e>
 800a382:	4342      	muls	r2, r0
 800a384:	0035      	movs	r5, r6
 800a386:	2301      	movs	r3, #1
 800a388:	1852      	adds	r2, r2, r1
 800a38a:	e7f1      	b.n	800a370 <_svfiprintf_r+0x194>
 800a38c:	ab07      	add	r3, sp, #28
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	003a      	movs	r2, r7
 800a392:	0021      	movs	r1, r4
 800a394:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <_svfiprintf_r+0x1fc>)
 800a396:	9803      	ldr	r0, [sp, #12]
 800a398:	e000      	b.n	800a39c <_svfiprintf_r+0x1c0>
 800a39a:	bf00      	nop
 800a39c:	9004      	str	r0, [sp, #16]
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	d1d3      	bne.n	800a34c <_svfiprintf_r+0x170>
 800a3a4:	89bb      	ldrh	r3, [r7, #12]
 800a3a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3a8:	065b      	lsls	r3, r3, #25
 800a3aa:	d400      	bmi.n	800a3ae <_svfiprintf_r+0x1d2>
 800a3ac:	e72d      	b.n	800a20a <_svfiprintf_r+0x2e>
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	4240      	negs	r0, r0
 800a3b2:	e72a      	b.n	800a20a <_svfiprintf_r+0x2e>
 800a3b4:	ab07      	add	r3, sp, #28
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	003a      	movs	r2, r7
 800a3ba:	0021      	movs	r1, r4
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <_svfiprintf_r+0x1fc>)
 800a3be:	9803      	ldr	r0, [sp, #12]
 800a3c0:	f000 f87c 	bl	800a4bc <_printf_i>
 800a3c4:	e7ea      	b.n	800a39c <_svfiprintf_r+0x1c0>
 800a3c6:	46c0      	nop			; (mov r8, r8)
 800a3c8:	0800ab10 	.word	0x0800ab10
 800a3cc:	0800ab16 	.word	0x0800ab16
 800a3d0:	0800ab1a 	.word	0x0800ab1a
 800a3d4:	00000000 	.word	0x00000000
 800a3d8:	0800a119 	.word	0x0800a119

0800a3dc <_printf_common>:
 800a3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3de:	0015      	movs	r5, r2
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	688a      	ldr	r2, [r1, #8]
 800a3e4:	690b      	ldr	r3, [r1, #16]
 800a3e6:	000c      	movs	r4, r1
 800a3e8:	9000      	str	r0, [sp, #0]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	da00      	bge.n	800a3f0 <_printf_common+0x14>
 800a3ee:	0013      	movs	r3, r2
 800a3f0:	0022      	movs	r2, r4
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	3243      	adds	r2, #67	; 0x43
 800a3f6:	7812      	ldrb	r2, [r2, #0]
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d001      	beq.n	800a400 <_printf_common+0x24>
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	069b      	lsls	r3, r3, #26
 800a404:	d502      	bpl.n	800a40c <_printf_common+0x30>
 800a406:	682b      	ldr	r3, [r5, #0]
 800a408:	3302      	adds	r3, #2
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	2306      	movs	r3, #6
 800a410:	0017      	movs	r7, r2
 800a412:	401f      	ands	r7, r3
 800a414:	421a      	tst	r2, r3
 800a416:	d027      	beq.n	800a468 <_printf_common+0x8c>
 800a418:	0023      	movs	r3, r4
 800a41a:	3343      	adds	r3, #67	; 0x43
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	1e5a      	subs	r2, r3, #1
 800a420:	4193      	sbcs	r3, r2
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	0692      	lsls	r2, r2, #26
 800a426:	d430      	bmi.n	800a48a <_printf_common+0xae>
 800a428:	0022      	movs	r2, r4
 800a42a:	9901      	ldr	r1, [sp, #4]
 800a42c:	9800      	ldr	r0, [sp, #0]
 800a42e:	9e08      	ldr	r6, [sp, #32]
 800a430:	3243      	adds	r2, #67	; 0x43
 800a432:	47b0      	blx	r6
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d025      	beq.n	800a484 <_printf_common+0xa8>
 800a438:	2306      	movs	r3, #6
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	682a      	ldr	r2, [r5, #0]
 800a43e:	68e1      	ldr	r1, [r4, #12]
 800a440:	2500      	movs	r5, #0
 800a442:	4003      	ands	r3, r0
 800a444:	2b04      	cmp	r3, #4
 800a446:	d103      	bne.n	800a450 <_printf_common+0x74>
 800a448:	1a8d      	subs	r5, r1, r2
 800a44a:	43eb      	mvns	r3, r5
 800a44c:	17db      	asrs	r3, r3, #31
 800a44e:	401d      	ands	r5, r3
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	6922      	ldr	r2, [r4, #16]
 800a454:	4293      	cmp	r3, r2
 800a456:	dd01      	ble.n	800a45c <_printf_common+0x80>
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	18ed      	adds	r5, r5, r3
 800a45c:	2700      	movs	r7, #0
 800a45e:	42bd      	cmp	r5, r7
 800a460:	d120      	bne.n	800a4a4 <_printf_common+0xc8>
 800a462:	2000      	movs	r0, #0
 800a464:	e010      	b.n	800a488 <_printf_common+0xac>
 800a466:	3701      	adds	r7, #1
 800a468:	68e3      	ldr	r3, [r4, #12]
 800a46a:	682a      	ldr	r2, [r5, #0]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	42bb      	cmp	r3, r7
 800a470:	ddd2      	ble.n	800a418 <_printf_common+0x3c>
 800a472:	0022      	movs	r2, r4
 800a474:	2301      	movs	r3, #1
 800a476:	9901      	ldr	r1, [sp, #4]
 800a478:	9800      	ldr	r0, [sp, #0]
 800a47a:	9e08      	ldr	r6, [sp, #32]
 800a47c:	3219      	adds	r2, #25
 800a47e:	47b0      	blx	r6
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d1f0      	bne.n	800a466 <_printf_common+0x8a>
 800a484:	2001      	movs	r0, #1
 800a486:	4240      	negs	r0, r0
 800a488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a48a:	2030      	movs	r0, #48	; 0x30
 800a48c:	18e1      	adds	r1, r4, r3
 800a48e:	3143      	adds	r1, #67	; 0x43
 800a490:	7008      	strb	r0, [r1, #0]
 800a492:	0021      	movs	r1, r4
 800a494:	1c5a      	adds	r2, r3, #1
 800a496:	3145      	adds	r1, #69	; 0x45
 800a498:	7809      	ldrb	r1, [r1, #0]
 800a49a:	18a2      	adds	r2, r4, r2
 800a49c:	3243      	adds	r2, #67	; 0x43
 800a49e:	3302      	adds	r3, #2
 800a4a0:	7011      	strb	r1, [r2, #0]
 800a4a2:	e7c1      	b.n	800a428 <_printf_common+0x4c>
 800a4a4:	0022      	movs	r2, r4
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	9901      	ldr	r1, [sp, #4]
 800a4aa:	9800      	ldr	r0, [sp, #0]
 800a4ac:	9e08      	ldr	r6, [sp, #32]
 800a4ae:	321a      	adds	r2, #26
 800a4b0:	47b0      	blx	r6
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d0e6      	beq.n	800a484 <_printf_common+0xa8>
 800a4b6:	3701      	adds	r7, #1
 800a4b8:	e7d1      	b.n	800a45e <_printf_common+0x82>
	...

0800a4bc <_printf_i>:
 800a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4be:	b08b      	sub	sp, #44	; 0x2c
 800a4c0:	9206      	str	r2, [sp, #24]
 800a4c2:	000a      	movs	r2, r1
 800a4c4:	3243      	adds	r2, #67	; 0x43
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	9005      	str	r0, [sp, #20]
 800a4ca:	9204      	str	r2, [sp, #16]
 800a4cc:	7e0a      	ldrb	r2, [r1, #24]
 800a4ce:	000c      	movs	r4, r1
 800a4d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d2:	2a78      	cmp	r2, #120	; 0x78
 800a4d4:	d807      	bhi.n	800a4e6 <_printf_i+0x2a>
 800a4d6:	2a62      	cmp	r2, #98	; 0x62
 800a4d8:	d809      	bhi.n	800a4ee <_printf_i+0x32>
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d100      	bne.n	800a4e0 <_printf_i+0x24>
 800a4de:	e0c1      	b.n	800a664 <_printf_i+0x1a8>
 800a4e0:	2a58      	cmp	r2, #88	; 0x58
 800a4e2:	d100      	bne.n	800a4e6 <_printf_i+0x2a>
 800a4e4:	e08c      	b.n	800a600 <_printf_i+0x144>
 800a4e6:	0026      	movs	r6, r4
 800a4e8:	3642      	adds	r6, #66	; 0x42
 800a4ea:	7032      	strb	r2, [r6, #0]
 800a4ec:	e022      	b.n	800a534 <_printf_i+0x78>
 800a4ee:	0010      	movs	r0, r2
 800a4f0:	3863      	subs	r0, #99	; 0x63
 800a4f2:	2815      	cmp	r0, #21
 800a4f4:	d8f7      	bhi.n	800a4e6 <_printf_i+0x2a>
 800a4f6:	f7f5 fe07 	bl	8000108 <__gnu_thumb1_case_shi>
 800a4fa:	0016      	.short	0x0016
 800a4fc:	fff6001f 	.word	0xfff6001f
 800a500:	fff6fff6 	.word	0xfff6fff6
 800a504:	001ffff6 	.word	0x001ffff6
 800a508:	fff6fff6 	.word	0xfff6fff6
 800a50c:	fff6fff6 	.word	0xfff6fff6
 800a510:	003600a8 	.word	0x003600a8
 800a514:	fff6009a 	.word	0xfff6009a
 800a518:	00b9fff6 	.word	0x00b9fff6
 800a51c:	0036fff6 	.word	0x0036fff6
 800a520:	fff6fff6 	.word	0xfff6fff6
 800a524:	009e      	.short	0x009e
 800a526:	0026      	movs	r6, r4
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	3642      	adds	r6, #66	; 0x42
 800a52c:	1d11      	adds	r1, r2, #4
 800a52e:	6019      	str	r1, [r3, #0]
 800a530:	6813      	ldr	r3, [r2, #0]
 800a532:	7033      	strb	r3, [r6, #0]
 800a534:	2301      	movs	r3, #1
 800a536:	e0a7      	b.n	800a688 <_printf_i+0x1cc>
 800a538:	6808      	ldr	r0, [r1, #0]
 800a53a:	6819      	ldr	r1, [r3, #0]
 800a53c:	1d0a      	adds	r2, r1, #4
 800a53e:	0605      	lsls	r5, r0, #24
 800a540:	d50b      	bpl.n	800a55a <_printf_i+0x9e>
 800a542:	680d      	ldr	r5, [r1, #0]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	2d00      	cmp	r5, #0
 800a548:	da03      	bge.n	800a552 <_printf_i+0x96>
 800a54a:	232d      	movs	r3, #45	; 0x2d
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	426d      	negs	r5, r5
 800a550:	7013      	strb	r3, [r2, #0]
 800a552:	4b61      	ldr	r3, [pc, #388]	; (800a6d8 <_printf_i+0x21c>)
 800a554:	270a      	movs	r7, #10
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	e01b      	b.n	800a592 <_printf_i+0xd6>
 800a55a:	680d      	ldr	r5, [r1, #0]
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	0641      	lsls	r1, r0, #25
 800a560:	d5f1      	bpl.n	800a546 <_printf_i+0x8a>
 800a562:	b22d      	sxth	r5, r5
 800a564:	e7ef      	b.n	800a546 <_printf_i+0x8a>
 800a566:	680d      	ldr	r5, [r1, #0]
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	1d08      	adds	r0, r1, #4
 800a56c:	6018      	str	r0, [r3, #0]
 800a56e:	062e      	lsls	r6, r5, #24
 800a570:	d501      	bpl.n	800a576 <_printf_i+0xba>
 800a572:	680d      	ldr	r5, [r1, #0]
 800a574:	e003      	b.n	800a57e <_printf_i+0xc2>
 800a576:	066d      	lsls	r5, r5, #25
 800a578:	d5fb      	bpl.n	800a572 <_printf_i+0xb6>
 800a57a:	680d      	ldr	r5, [r1, #0]
 800a57c:	b2ad      	uxth	r5, r5
 800a57e:	4b56      	ldr	r3, [pc, #344]	; (800a6d8 <_printf_i+0x21c>)
 800a580:	2708      	movs	r7, #8
 800a582:	9303      	str	r3, [sp, #12]
 800a584:	2a6f      	cmp	r2, #111	; 0x6f
 800a586:	d000      	beq.n	800a58a <_printf_i+0xce>
 800a588:	3702      	adds	r7, #2
 800a58a:	0023      	movs	r3, r4
 800a58c:	2200      	movs	r2, #0
 800a58e:	3343      	adds	r3, #67	; 0x43
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	60a3      	str	r3, [r4, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	db03      	blt.n	800a5a2 <_printf_i+0xe6>
 800a59a:	2204      	movs	r2, #4
 800a59c:	6821      	ldr	r1, [r4, #0]
 800a59e:	4391      	bics	r1, r2
 800a5a0:	6021      	str	r1, [r4, #0]
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	d102      	bne.n	800a5ac <_printf_i+0xf0>
 800a5a6:	9e04      	ldr	r6, [sp, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00c      	beq.n	800a5c6 <_printf_i+0x10a>
 800a5ac:	9e04      	ldr	r6, [sp, #16]
 800a5ae:	0028      	movs	r0, r5
 800a5b0:	0039      	movs	r1, r7
 800a5b2:	f7f5 fe39 	bl	8000228 <__aeabi_uidivmod>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	3e01      	subs	r6, #1
 800a5ba:	5c5b      	ldrb	r3, [r3, r1]
 800a5bc:	7033      	strb	r3, [r6, #0]
 800a5be:	002b      	movs	r3, r5
 800a5c0:	0005      	movs	r5, r0
 800a5c2:	429f      	cmp	r7, r3
 800a5c4:	d9f3      	bls.n	800a5ae <_printf_i+0xf2>
 800a5c6:	2f08      	cmp	r7, #8
 800a5c8:	d109      	bne.n	800a5de <_printf_i+0x122>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	07db      	lsls	r3, r3, #31
 800a5ce:	d506      	bpl.n	800a5de <_printf_i+0x122>
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	dc02      	bgt.n	800a5de <_printf_i+0x122>
 800a5d8:	2330      	movs	r3, #48	; 0x30
 800a5da:	3e01      	subs	r6, #1
 800a5dc:	7033      	strb	r3, [r6, #0]
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	1b9b      	subs	r3, r3, r6
 800a5e2:	6123      	str	r3, [r4, #16]
 800a5e4:	9b07      	ldr	r3, [sp, #28]
 800a5e6:	0021      	movs	r1, r4
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	9805      	ldr	r0, [sp, #20]
 800a5ec:	9b06      	ldr	r3, [sp, #24]
 800a5ee:	aa09      	add	r2, sp, #36	; 0x24
 800a5f0:	f7ff fef4 	bl	800a3dc <_printf_common>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d14c      	bne.n	800a692 <_printf_i+0x1d6>
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	4240      	negs	r0, r0
 800a5fc:	b00b      	add	sp, #44	; 0x2c
 800a5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a600:	3145      	adds	r1, #69	; 0x45
 800a602:	700a      	strb	r2, [r1, #0]
 800a604:	4a34      	ldr	r2, [pc, #208]	; (800a6d8 <_printf_i+0x21c>)
 800a606:	9203      	str	r2, [sp, #12]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	6821      	ldr	r1, [r4, #0]
 800a60c:	ca20      	ldmia	r2!, {r5}
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	0608      	lsls	r0, r1, #24
 800a612:	d516      	bpl.n	800a642 <_printf_i+0x186>
 800a614:	07cb      	lsls	r3, r1, #31
 800a616:	d502      	bpl.n	800a61e <_printf_i+0x162>
 800a618:	2320      	movs	r3, #32
 800a61a:	4319      	orrs	r1, r3
 800a61c:	6021      	str	r1, [r4, #0]
 800a61e:	2710      	movs	r7, #16
 800a620:	2d00      	cmp	r5, #0
 800a622:	d1b2      	bne.n	800a58a <_printf_i+0xce>
 800a624:	2320      	movs	r3, #32
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	439a      	bics	r2, r3
 800a62a:	6022      	str	r2, [r4, #0]
 800a62c:	e7ad      	b.n	800a58a <_printf_i+0xce>
 800a62e:	2220      	movs	r2, #32
 800a630:	6809      	ldr	r1, [r1, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	0022      	movs	r2, r4
 800a638:	2178      	movs	r1, #120	; 0x78
 800a63a:	3245      	adds	r2, #69	; 0x45
 800a63c:	7011      	strb	r1, [r2, #0]
 800a63e:	4a27      	ldr	r2, [pc, #156]	; (800a6dc <_printf_i+0x220>)
 800a640:	e7e1      	b.n	800a606 <_printf_i+0x14a>
 800a642:	0648      	lsls	r0, r1, #25
 800a644:	d5e6      	bpl.n	800a614 <_printf_i+0x158>
 800a646:	b2ad      	uxth	r5, r5
 800a648:	e7e4      	b.n	800a614 <_printf_i+0x158>
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	680d      	ldr	r5, [r1, #0]
 800a64e:	1d10      	adds	r0, r2, #4
 800a650:	6949      	ldr	r1, [r1, #20]
 800a652:	6018      	str	r0, [r3, #0]
 800a654:	6813      	ldr	r3, [r2, #0]
 800a656:	062e      	lsls	r6, r5, #24
 800a658:	d501      	bpl.n	800a65e <_printf_i+0x1a2>
 800a65a:	6019      	str	r1, [r3, #0]
 800a65c:	e002      	b.n	800a664 <_printf_i+0x1a8>
 800a65e:	066d      	lsls	r5, r5, #25
 800a660:	d5fb      	bpl.n	800a65a <_printf_i+0x19e>
 800a662:	8019      	strh	r1, [r3, #0]
 800a664:	2300      	movs	r3, #0
 800a666:	9e04      	ldr	r6, [sp, #16]
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	e7bb      	b.n	800a5e4 <_printf_i+0x128>
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	1d11      	adds	r1, r2, #4
 800a670:	6019      	str	r1, [r3, #0]
 800a672:	6816      	ldr	r6, [r2, #0]
 800a674:	2100      	movs	r1, #0
 800a676:	0030      	movs	r0, r6
 800a678:	6862      	ldr	r2, [r4, #4]
 800a67a:	f000 f831 	bl	800a6e0 <memchr>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d001      	beq.n	800a686 <_printf_i+0x1ca>
 800a682:	1b80      	subs	r0, r0, r6
 800a684:	6060      	str	r0, [r4, #4]
 800a686:	6863      	ldr	r3, [r4, #4]
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9a04      	ldr	r2, [sp, #16]
 800a68e:	7013      	strb	r3, [r2, #0]
 800a690:	e7a8      	b.n	800a5e4 <_printf_i+0x128>
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	0032      	movs	r2, r6
 800a696:	9906      	ldr	r1, [sp, #24]
 800a698:	9805      	ldr	r0, [sp, #20]
 800a69a:	9d07      	ldr	r5, [sp, #28]
 800a69c:	47a8      	blx	r5
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d0aa      	beq.n	800a5f8 <_printf_i+0x13c>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	079b      	lsls	r3, r3, #30
 800a6a6:	d415      	bmi.n	800a6d4 <_printf_i+0x218>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	68e0      	ldr	r0, [r4, #12]
 800a6ac:	4298      	cmp	r0, r3
 800a6ae:	daa5      	bge.n	800a5fc <_printf_i+0x140>
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	e7a3      	b.n	800a5fc <_printf_i+0x140>
 800a6b4:	0022      	movs	r2, r4
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	9906      	ldr	r1, [sp, #24]
 800a6ba:	9805      	ldr	r0, [sp, #20]
 800a6bc:	9e07      	ldr	r6, [sp, #28]
 800a6be:	3219      	adds	r2, #25
 800a6c0:	47b0      	blx	r6
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d098      	beq.n	800a5f8 <_printf_i+0x13c>
 800a6c6:	3501      	adds	r5, #1
 800a6c8:	68e3      	ldr	r3, [r4, #12]
 800a6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6cc:	1a9b      	subs	r3, r3, r2
 800a6ce:	42ab      	cmp	r3, r5
 800a6d0:	dcf0      	bgt.n	800a6b4 <_printf_i+0x1f8>
 800a6d2:	e7e9      	b.n	800a6a8 <_printf_i+0x1ec>
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	e7f7      	b.n	800a6c8 <_printf_i+0x20c>
 800a6d8:	0800ab21 	.word	0x0800ab21
 800a6dc:	0800ab32 	.word	0x0800ab32

0800a6e0 <memchr>:
 800a6e0:	b2c9      	uxtb	r1, r1
 800a6e2:	1882      	adds	r2, r0, r2
 800a6e4:	4290      	cmp	r0, r2
 800a6e6:	d101      	bne.n	800a6ec <memchr+0xc>
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	4770      	bx	lr
 800a6ec:	7803      	ldrb	r3, [r0, #0]
 800a6ee:	428b      	cmp	r3, r1
 800a6f0:	d0fb      	beq.n	800a6ea <memchr+0xa>
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	e7f6      	b.n	800a6e4 <memchr+0x4>

0800a6f6 <memmove>:
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	4288      	cmp	r0, r1
 800a6fa:	d902      	bls.n	800a702 <memmove+0xc>
 800a6fc:	188b      	adds	r3, r1, r2
 800a6fe:	4298      	cmp	r0, r3
 800a700:	d303      	bcc.n	800a70a <memmove+0x14>
 800a702:	2300      	movs	r3, #0
 800a704:	e007      	b.n	800a716 <memmove+0x20>
 800a706:	5c8b      	ldrb	r3, [r1, r2]
 800a708:	5483      	strb	r3, [r0, r2]
 800a70a:	3a01      	subs	r2, #1
 800a70c:	d2fb      	bcs.n	800a706 <memmove+0x10>
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	5ccc      	ldrb	r4, [r1, r3]
 800a712:	54c4      	strb	r4, [r0, r3]
 800a714:	3301      	adds	r3, #1
 800a716:	429a      	cmp	r2, r3
 800a718:	d1fa      	bne.n	800a710 <memmove+0x1a>
 800a71a:	e7f8      	b.n	800a70e <memmove+0x18>

0800a71c <_free_r>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	0005      	movs	r5, r0
 800a720:	2900      	cmp	r1, #0
 800a722:	d010      	beq.n	800a746 <_free_r+0x2a>
 800a724:	1f0c      	subs	r4, r1, #4
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	da00      	bge.n	800a72e <_free_r+0x12>
 800a72c:	18e4      	adds	r4, r4, r3
 800a72e:	0028      	movs	r0, r5
 800a730:	f000 f918 	bl	800a964 <__malloc_lock>
 800a734:	4a1d      	ldr	r2, [pc, #116]	; (800a7ac <_free_r+0x90>)
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d105      	bne.n	800a748 <_free_r+0x2c>
 800a73c:	6063      	str	r3, [r4, #4]
 800a73e:	6014      	str	r4, [r2, #0]
 800a740:	0028      	movs	r0, r5
 800a742:	f000 f917 	bl	800a974 <__malloc_unlock>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d908      	bls.n	800a75e <_free_r+0x42>
 800a74c:	6821      	ldr	r1, [r4, #0]
 800a74e:	1860      	adds	r0, r4, r1
 800a750:	4283      	cmp	r3, r0
 800a752:	d1f3      	bne.n	800a73c <_free_r+0x20>
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	1841      	adds	r1, r0, r1
 800a75a:	6021      	str	r1, [r4, #0]
 800a75c:	e7ee      	b.n	800a73c <_free_r+0x20>
 800a75e:	001a      	movs	r2, r3
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <_free_r+0x4e>
 800a766:	42a3      	cmp	r3, r4
 800a768:	d9f9      	bls.n	800a75e <_free_r+0x42>
 800a76a:	6811      	ldr	r1, [r2, #0]
 800a76c:	1850      	adds	r0, r2, r1
 800a76e:	42a0      	cmp	r0, r4
 800a770:	d10b      	bne.n	800a78a <_free_r+0x6e>
 800a772:	6820      	ldr	r0, [r4, #0]
 800a774:	1809      	adds	r1, r1, r0
 800a776:	1850      	adds	r0, r2, r1
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	4283      	cmp	r3, r0
 800a77c:	d1e0      	bne.n	800a740 <_free_r+0x24>
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	1841      	adds	r1, r0, r1
 800a784:	6011      	str	r1, [r2, #0]
 800a786:	6053      	str	r3, [r2, #4]
 800a788:	e7da      	b.n	800a740 <_free_r+0x24>
 800a78a:	42a0      	cmp	r0, r4
 800a78c:	d902      	bls.n	800a794 <_free_r+0x78>
 800a78e:	230c      	movs	r3, #12
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	e7d5      	b.n	800a740 <_free_r+0x24>
 800a794:	6821      	ldr	r1, [r4, #0]
 800a796:	1860      	adds	r0, r4, r1
 800a798:	4283      	cmp	r3, r0
 800a79a:	d103      	bne.n	800a7a4 <_free_r+0x88>
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	1841      	adds	r1, r0, r1
 800a7a2:	6021      	str	r1, [r4, #0]
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	6054      	str	r4, [r2, #4]
 800a7a8:	e7ca      	b.n	800a740 <_free_r+0x24>
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	2000173c 	.word	0x2000173c

0800a7b0 <sbrk_aligned>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	4e0f      	ldr	r6, [pc, #60]	; (800a7f0 <sbrk_aligned+0x40>)
 800a7b4:	000d      	movs	r5, r1
 800a7b6:	6831      	ldr	r1, [r6, #0]
 800a7b8:	0004      	movs	r4, r0
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d102      	bne.n	800a7c4 <sbrk_aligned+0x14>
 800a7be:	f000 f8bf 	bl	800a940 <_sbrk_r>
 800a7c2:	6030      	str	r0, [r6, #0]
 800a7c4:	0029      	movs	r1, r5
 800a7c6:	0020      	movs	r0, r4
 800a7c8:	f000 f8ba 	bl	800a940 <_sbrk_r>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d00a      	beq.n	800a7e6 <sbrk_aligned+0x36>
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	1cc5      	adds	r5, r0, #3
 800a7d4:	439d      	bics	r5, r3
 800a7d6:	42a8      	cmp	r0, r5
 800a7d8:	d007      	beq.n	800a7ea <sbrk_aligned+0x3a>
 800a7da:	1a29      	subs	r1, r5, r0
 800a7dc:	0020      	movs	r0, r4
 800a7de:	f000 f8af 	bl	800a940 <_sbrk_r>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d101      	bne.n	800a7ea <sbrk_aligned+0x3a>
 800a7e6:	2501      	movs	r5, #1
 800a7e8:	426d      	negs	r5, r5
 800a7ea:	0028      	movs	r0, r5
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	20001740 	.word	0x20001740

0800a7f4 <_malloc_r>:
 800a7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	1ccb      	adds	r3, r1, #3
 800a7fa:	4393      	bics	r3, r2
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	0006      	movs	r6, r0
 800a800:	001f      	movs	r7, r3
 800a802:	2b0c      	cmp	r3, #12
 800a804:	d232      	bcs.n	800a86c <_malloc_r+0x78>
 800a806:	270c      	movs	r7, #12
 800a808:	42b9      	cmp	r1, r7
 800a80a:	d831      	bhi.n	800a870 <_malloc_r+0x7c>
 800a80c:	0030      	movs	r0, r6
 800a80e:	f000 f8a9 	bl	800a964 <__malloc_lock>
 800a812:	4d32      	ldr	r5, [pc, #200]	; (800a8dc <_malloc_r+0xe8>)
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	001c      	movs	r4, r3
 800a818:	2c00      	cmp	r4, #0
 800a81a:	d12e      	bne.n	800a87a <_malloc_r+0x86>
 800a81c:	0039      	movs	r1, r7
 800a81e:	0030      	movs	r0, r6
 800a820:	f7ff ffc6 	bl	800a7b0 <sbrk_aligned>
 800a824:	0004      	movs	r4, r0
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d11e      	bne.n	800a868 <_malloc_r+0x74>
 800a82a:	682c      	ldr	r4, [r5, #0]
 800a82c:	0025      	movs	r5, r4
 800a82e:	2d00      	cmp	r5, #0
 800a830:	d14a      	bne.n	800a8c8 <_malloc_r+0xd4>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	0029      	movs	r1, r5
 800a836:	18e3      	adds	r3, r4, r3
 800a838:	0030      	movs	r0, r6
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	f000 f880 	bl	800a940 <_sbrk_r>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	4283      	cmp	r3, r0
 800a844:	d143      	bne.n	800a8ce <_malloc_r+0xda>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	3703      	adds	r7, #3
 800a84a:	1aff      	subs	r7, r7, r3
 800a84c:	2303      	movs	r3, #3
 800a84e:	439f      	bics	r7, r3
 800a850:	3708      	adds	r7, #8
 800a852:	2f0c      	cmp	r7, #12
 800a854:	d200      	bcs.n	800a858 <_malloc_r+0x64>
 800a856:	270c      	movs	r7, #12
 800a858:	0039      	movs	r1, r7
 800a85a:	0030      	movs	r0, r6
 800a85c:	f7ff ffa8 	bl	800a7b0 <sbrk_aligned>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d034      	beq.n	800a8ce <_malloc_r+0xda>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	19df      	adds	r7, r3, r7
 800a868:	6027      	str	r7, [r4, #0]
 800a86a:	e013      	b.n	800a894 <_malloc_r+0xa0>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dacb      	bge.n	800a808 <_malloc_r+0x14>
 800a870:	230c      	movs	r3, #12
 800a872:	2500      	movs	r5, #0
 800a874:	6033      	str	r3, [r6, #0]
 800a876:	0028      	movs	r0, r5
 800a878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	1bd1      	subs	r1, r2, r7
 800a87e:	d420      	bmi.n	800a8c2 <_malloc_r+0xce>
 800a880:	290b      	cmp	r1, #11
 800a882:	d917      	bls.n	800a8b4 <_malloc_r+0xc0>
 800a884:	19e2      	adds	r2, r4, r7
 800a886:	6027      	str	r7, [r4, #0]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d111      	bne.n	800a8b0 <_malloc_r+0xbc>
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	6053      	str	r3, [r2, #4]
 800a894:	0030      	movs	r0, r6
 800a896:	0025      	movs	r5, r4
 800a898:	f000 f86c 	bl	800a974 <__malloc_unlock>
 800a89c:	2207      	movs	r2, #7
 800a89e:	350b      	adds	r5, #11
 800a8a0:	1d23      	adds	r3, r4, #4
 800a8a2:	4395      	bics	r5, r2
 800a8a4:	1aea      	subs	r2, r5, r3
 800a8a6:	429d      	cmp	r5, r3
 800a8a8:	d0e5      	beq.n	800a876 <_malloc_r+0x82>
 800a8aa:	1b5b      	subs	r3, r3, r5
 800a8ac:	50a3      	str	r3, [r4, r2]
 800a8ae:	e7e2      	b.n	800a876 <_malloc_r+0x82>
 800a8b0:	605a      	str	r2, [r3, #4]
 800a8b2:	e7ec      	b.n	800a88e <_malloc_r+0x9a>
 800a8b4:	6862      	ldr	r2, [r4, #4]
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	d101      	bne.n	800a8be <_malloc_r+0xca>
 800a8ba:	602a      	str	r2, [r5, #0]
 800a8bc:	e7ea      	b.n	800a894 <_malloc_r+0xa0>
 800a8be:	605a      	str	r2, [r3, #4]
 800a8c0:	e7e8      	b.n	800a894 <_malloc_r+0xa0>
 800a8c2:	0023      	movs	r3, r4
 800a8c4:	6864      	ldr	r4, [r4, #4]
 800a8c6:	e7a7      	b.n	800a818 <_malloc_r+0x24>
 800a8c8:	002c      	movs	r4, r5
 800a8ca:	686d      	ldr	r5, [r5, #4]
 800a8cc:	e7af      	b.n	800a82e <_malloc_r+0x3a>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	0030      	movs	r0, r6
 800a8d2:	6033      	str	r3, [r6, #0]
 800a8d4:	f000 f84e 	bl	800a974 <__malloc_unlock>
 800a8d8:	e7cd      	b.n	800a876 <_malloc_r+0x82>
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	2000173c 	.word	0x2000173c

0800a8e0 <_realloc_r>:
 800a8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8e2:	0007      	movs	r7, r0
 800a8e4:	000e      	movs	r6, r1
 800a8e6:	0014      	movs	r4, r2
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d105      	bne.n	800a8f8 <_realloc_r+0x18>
 800a8ec:	0011      	movs	r1, r2
 800a8ee:	f7ff ff81 	bl	800a7f4 <_malloc_r>
 800a8f2:	0005      	movs	r5, r0
 800a8f4:	0028      	movs	r0, r5
 800a8f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d103      	bne.n	800a904 <_realloc_r+0x24>
 800a8fc:	f7ff ff0e 	bl	800a71c <_free_r>
 800a900:	0025      	movs	r5, r4
 800a902:	e7f7      	b.n	800a8f4 <_realloc_r+0x14>
 800a904:	f000 f83e 	bl	800a984 <_malloc_usable_size_r>
 800a908:	9001      	str	r0, [sp, #4]
 800a90a:	4284      	cmp	r4, r0
 800a90c:	d803      	bhi.n	800a916 <_realloc_r+0x36>
 800a90e:	0035      	movs	r5, r6
 800a910:	0843      	lsrs	r3, r0, #1
 800a912:	42a3      	cmp	r3, r4
 800a914:	d3ee      	bcc.n	800a8f4 <_realloc_r+0x14>
 800a916:	0021      	movs	r1, r4
 800a918:	0038      	movs	r0, r7
 800a91a:	f7ff ff6b 	bl	800a7f4 <_malloc_r>
 800a91e:	1e05      	subs	r5, r0, #0
 800a920:	d0e8      	beq.n	800a8f4 <_realloc_r+0x14>
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	0022      	movs	r2, r4
 800a926:	429c      	cmp	r4, r3
 800a928:	d900      	bls.n	800a92c <_realloc_r+0x4c>
 800a92a:	001a      	movs	r2, r3
 800a92c:	0031      	movs	r1, r6
 800a92e:	0028      	movs	r0, r5
 800a930:	f7ff fbc0 	bl	800a0b4 <memcpy>
 800a934:	0031      	movs	r1, r6
 800a936:	0038      	movs	r0, r7
 800a938:	f7ff fef0 	bl	800a71c <_free_r>
 800a93c:	e7da      	b.n	800a8f4 <_realloc_r+0x14>
	...

0800a940 <_sbrk_r>:
 800a940:	2300      	movs	r3, #0
 800a942:	b570      	push	{r4, r5, r6, lr}
 800a944:	4d06      	ldr	r5, [pc, #24]	; (800a960 <_sbrk_r+0x20>)
 800a946:	0004      	movs	r4, r0
 800a948:	0008      	movs	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f6 fe7e 	bl	800164c <_sbrk>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d103      	bne.n	800a95c <_sbrk_r+0x1c>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d000      	beq.n	800a95c <_sbrk_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	20001744 	.word	0x20001744

0800a964 <__malloc_lock>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4802      	ldr	r0, [pc, #8]	; (800a970 <__malloc_lock+0xc>)
 800a968:	f000 f814 	bl	800a994 <__retarget_lock_acquire_recursive>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	20001748 	.word	0x20001748

0800a974 <__malloc_unlock>:
 800a974:	b510      	push	{r4, lr}
 800a976:	4802      	ldr	r0, [pc, #8]	; (800a980 <__malloc_unlock+0xc>)
 800a978:	f000 f80d 	bl	800a996 <__retarget_lock_release_recursive>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	20001748 	.word	0x20001748

0800a984 <_malloc_usable_size_r>:
 800a984:	1f0b      	subs	r3, r1, #4
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	1f18      	subs	r0, r3, #4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da01      	bge.n	800a992 <_malloc_usable_size_r+0xe>
 800a98e:	580b      	ldr	r3, [r1, r0]
 800a990:	18c0      	adds	r0, r0, r3
 800a992:	4770      	bx	lr

0800a994 <__retarget_lock_acquire_recursive>:
 800a994:	4770      	bx	lr

0800a996 <__retarget_lock_release_recursive>:
 800a996:	4770      	bx	lr

0800a998 <_init>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr

0800a9a4 <_fini>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9aa:	bc08      	pop	{r3}
 800a9ac:	469e      	mov	lr, r3
 800a9ae:	4770      	bx	lr
