
HeartSensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b24c  0800b24c  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b254  0800b254  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800b25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  200004bc  0800b718  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000192c  0800b718  0002192c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c54  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ba  00000000  00000000  000395a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015143  00000000  00000000  00051b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f7b  00000000  00000000  00066ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eec20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  000eec70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004bc 	.word	0x200004bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b08c 	.word	0x0800b08c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c0 	.word	0x200004c0
 8000104:	0800b08c 	.word	0x0800b08c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <TurnOnLED>:
									   A7_Pin,
									   A8_Pin,
									   A9_Pin,
									   A10_Pin};

void TurnOnLED(uint8_t row, uint8_t col) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	1c0a      	adds	r2, r1, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_SET);
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <TurnOnLED+0x54>)
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	58d0      	ldr	r0, [r2, r3]
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <TurnOnLED+0x58>)
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	5ad3      	ldrh	r3, [r2, r3]
 80006b6:	2201      	movs	r2, #1
 80006b8:	0019      	movs	r1, r3
 80006ba:	f002 f80c 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_RESET);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <TurnOnLED+0x5c>)
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	58d0      	ldr	r0, [r2, r3]
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <TurnOnLED+0x60>)
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	5ad3      	ldrh	r3, [r2, r3]
 80006d2:	2200      	movs	r2, #0
 80006d4:	0019      	movs	r1, r3
 80006d6:	f001 fffe 	bl	80026d6 <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Start(cathode_timers[row], cathode_channels[row]);
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000290 	.word	0x20000290
 80006e8:	200002bc 	.word	0x200002bc
 80006ec:	20000260 	.word	0x20000260
 80006f0:	20000280 	.word	0x20000280

080006f4 <TurnOffLED>:

void TurnOffLED(uint8_t row, uint8_t col) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	0002      	movs	r2, r0
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	1c0a      	adds	r2, r1, #0
 8000704:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(anode_ports[col], anode_pins[col], GPIO_PIN_RESET);
 8000706:	1dbb      	adds	r3, r7, #6
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <TurnOffLED+0x54>)
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	58d0      	ldr	r0, [r2, r3]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <TurnOffLED+0x58>)
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	5ad3      	ldrh	r3, [r2, r3]
 800071a:	2200      	movs	r2, #0
 800071c:	0019      	movs	r1, r3
 800071e:	f001 ffda 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cathode_ports[row], cathode_pins[row], GPIO_PIN_SET);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <TurnOffLED+0x5c>)
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	58d0      	ldr	r0, [r2, r3]
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <TurnOffLED+0x60>)
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	5ad3      	ldrh	r3, [r2, r3]
 8000736:	2201      	movs	r2, #1
 8000738:	0019      	movs	r1, r3
 800073a:	f001 ffcc 	bl	80026d6 <HAL_GPIO_WritePin>
	//HAL_TIM_PWM_Stop(cathode_timers[row], cathode_channels[row]);
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000290 	.word	0x20000290
 800074c:	200002bc 	.word	0x200002bc
 8000750:	20000260 	.word	0x20000260
 8000754:	20000280 	.word	0x20000280

08000758 <SetLEDQueue>:
//led_queue[ROWS*COLUMNS][0] = 0xFF;
volatile uint8_t queue_index = 0;
volatile uint8_t queue_len;

// Make led_queue equal to led_list
void SetLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue, led_list, len*2);
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	001a      	movs	r2, r3
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <SetLEDQueue+0x38>)
 8000772:	0018      	movs	r0, r3
 8000774:	f00a f818 	bl	800a7a8 <memcpy>
	//queue_len = sizeof(led_list)/2;
	queue_len = len;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SetLEDQueue+0x3c>)
 800077a:	1cfa      	adds	r2, r7, #3
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	701a      	strb	r2, [r3, #0]
	//led_queue[len][0] = 0xFF;
	//led_queue[len][1] = 0xFF;
	queue_index = 0;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SetLEDQueue+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200004f8 	.word	0x200004f8
 8000794:	200005ab 	.word	0x200005ab
 8000798:	200005aa 	.word	0x200005aa

0800079c <AddToLEDQueue>:

// Concatenate led_list to led_queue
void AddToLEDQueue( uint8_t* led_list[2], uint8_t len ) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	000a      	movs	r2, r1
 80007a6:	1cfb      	adds	r3, r7, #3
 80007a8:	701a      	strb	r2, [r3, #0]
	memcpy(led_queue+queue_len, led_list, len*2);
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <AddToLEDQueue+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	005a      	lsls	r2, r3, #1
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <AddToLEDQueue+0x48>)
 80007b4:	18d0      	adds	r0, r2, r3
 80007b6:	1cfb      	adds	r3, r7, #3
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	001a      	movs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	0019      	movs	r1, r3
 80007c2:	f009 fff1 	bl	800a7a8 <memcpy>
	queue_len += len;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <AddToLEDQueue+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	1cfb      	adds	r3, r7, #3
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	18d3      	adds	r3, r2, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <AddToLEDQueue+0x44>)
 80007d6:	701a      	strb	r2, [r3, #0]
	//queue_index = 0;
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200005ab 	.word	0x200005ab
 80007e4:	200004f8 	.word	0x200004f8

080007e8 <HandleLEDQueue>:

void HandleLEDQueue() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	if (queue_len > 0) {	// Don't do anything unless there's something in the queue
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <HandleLEDQueue+0xd0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d05d      	beq.n	80008b2 <HandleLEDQueue+0xca>
		if (queue_index <= 0) {
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <HandleLEDQueue+0xd4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11d      	bne.n	800083c <HandleLEDQueue+0x54>
			TurnOffLED(led_queue[queue_index-1+queue_len][0], led_queue[queue_index-1+queue_len][1]);
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <HandleLEDQueue+0xd4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <HandleLEDQueue+0xd0>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	189a      	adds	r2, r3, r2
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HandleLEDQueue+0xd4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3b01      	subs	r3, #1
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <HandleLEDQueue+0xd0>)
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	189b      	adds	r3, r3, r2
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HandleLEDQueue+0xd8>)
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	0019      	movs	r1, r3
 8000836:	f7ff ff5d 	bl	80006f4 <TurnOffLED>
 800083a:	e014      	b.n	8000866 <HandleLEDQueue+0x7e>
		}
		else {
			TurnOffLED(led_queue[queue_index-1][0], led_queue[queue_index-1][1]);
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HandleLEDQueue+0xd4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b2d8      	uxtb	r0, r3
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HandleLEDQueue+0xd4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3b01      	subs	r3, #1
 8000854:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	3301      	adds	r3, #1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	0019      	movs	r1, r3
 8000862:	f7ff ff47 	bl	80006f4 <TurnOffLED>
		}

		TurnOnLED(led_queue[queue_index][0], led_queue[queue_index][1]);
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HandleLEDQueue+0xd4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	001a      	movs	r2, r3
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HandleLEDQueue+0xd8>)
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HandleLEDQueue+0xd4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HandleLEDQueue+0xd8>)
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	18d3      	adds	r3, r2, r3
 8000882:	3301      	adds	r3, #1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	0019      	movs	r1, r3
 800088a:	f7ff ff01 	bl	8000690 <TurnOnLED>

		queue_index++;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HandleLEDQueue+0xd4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HandleLEDQueue+0xd4>)
 800089a:	701a      	strb	r2, [r3, #0]
		if (queue_index >= queue_len) {
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HandleLEDQueue+0xd4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HandleLEDQueue+0xd0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d302      	bcc.n	80008b2 <HandleLEDQueue+0xca>
			queue_index = 0;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HandleLEDQueue+0xd4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200005ab 	.word	0x200005ab
 80008bc:	200005aa 	.word	0x200005aa
 80008c0:	200004f8 	.word	0x200004f8

080008c4 <PulseHandler>:


volatile uint8_t pulse_step = 0;
volatile int8_t pulse_dir = 1;
void PulseHandler() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	TurnAllOff();
 80008c8:	f000 f902 	bl	8000ad0 <TurnAllOff>
	SetLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <PulseHandler+0x78>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <PulseHandler+0x7c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	58d2      	ldr	r2, [r2, r3]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <PulseHandler+0x78>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	0019      	movs	r1, r3
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <PulseHandler+0x80>)
 80008e4:	5c5b      	ldrb	r3, [r3, r1]
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f7ff ff35 	bl	8000758 <SetLEDQueue>
	pulse_step += pulse_dir;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <PulseHandler+0x84>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <PulseHandler+0x78>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <PulseHandler+0x78>)
 8000902:	701a      	strb	r2, [r3, #0]
	if (pulse_step >= PULSE_STEPS) {
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <PulseHandler+0x78>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b04      	cmp	r3, #4
 800090c:	d90a      	bls.n	8000924 <PulseHandler+0x60>
		pulse_step--;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <PulseHandler+0x78>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <PulseHandler+0x78>)
 800091a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <PulseHandler+0x84>)
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	701a      	strb	r2, [r3, #0]
	}
	else if (pulse_step == 0) {
		pulse_dir = 1;
	}
}
 8000922:	e007      	b.n	8000934 <PulseHandler+0x70>
	else if (pulse_step == 0) {
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <PulseHandler+0x78>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <PulseHandler+0x70>
		pulse_dir = 1;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <PulseHandler+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200005ac 	.word	0x200005ac
 8000940:	20000074 	.word	0x20000074
 8000944:	20000088 	.word	0x20000088
 8000948:	200002d2 	.word	0x200002d2

0800094c <PulseHandlerKeepOn>:

void PulseHandlerKeepOn() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000950:	f000 f8be 	bl	8000ad0 <TurnAllOff>
	if (pulse_step <= 0) {
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <PulseHandlerKeepOn+0x30>
		SetLEDQueue(pulse_step_list[0], pulse_step_sizes[0]);
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f7ff fef5 	bl	8000758 <SetLEDQueue>
		pulse_dir = 1;
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
		pulse_step = 1;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
	else {
		queue_len -= pulse_step_sizes[pulse_step];
		queue_index = 0;
		pulse_step--;
	}
}
 800097a:	e040      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_step >= PULSE_STEPS) {
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b04      	cmp	r3, #4
 8000984:	d906      	bls.n	8000994 <PulseHandlerKeepOn+0x48>
		pulse_step = PULSE_STEPS - 1;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 8000988:	2204      	movs	r2, #4
 800098a:	701a      	strb	r2, [r3, #0]
		pulse_dir = -1;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	e034      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
	else if (pulse_dir > 0) {
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <PulseHandlerKeepOn+0xc4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	dd18      	ble.n	80009d0 <PulseHandlerKeepOn+0x84>
		AddToLEDQueue(pulse_step_list[pulse_step], pulse_step_sizes[pulse_step]);
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <PulseHandlerKeepOn+0xbc>)
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	58d2      	ldr	r2, [r2, r3]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	0019      	movs	r1, r3
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009b6:	5c5b      	ldrb	r3, [r3, r1]
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f7ff feee 	bl	800079c <AddToLEDQueue>
		pulse_step++;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	e016      	b.n	80009fe <PulseHandlerKeepOn+0xb2>
		queue_len -= pulse_step_sizes[pulse_step];
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	001a      	movs	r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <PulseHandlerKeepOn+0xc0>)
 80009da:	5c9b      	ldrb	r3, [r3, r2]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <PulseHandlerKeepOn+0xc8>)
 80009e8:	701a      	strb	r2, [r3, #0]
		queue_index = 0;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <PulseHandlerKeepOn+0xcc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
		pulse_step--;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	3b01      	subs	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <PulseHandlerKeepOn+0xb8>)
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200005ac 	.word	0x200005ac
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	20000088 	.word	0x20000088
 8000a10:	200002d2 	.word	0x200002d2
 8000a14:	200005ab 	.word	0x200005ab
 8000a18:	200005aa 	.word	0x200005aa

08000a1c <PrintRate>:

void PrintRate( uint8_t rate ) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	701a      	strb	r2, [r3, #0]

	// Find tens, and ones digit separately (hundreds is either 1 or 0)
	uint8_t tens = (rate % 100) / 10;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2164      	movs	r1, #100	; 0x64
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fbfa 	bl	8000228 <__aeabi_uidivmod>
 8000a34:	000b      	movs	r3, r1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	220f      	movs	r2, #15
 8000a3a:	18bc      	adds	r4, r7, r2
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fb6c 	bl	800011c <__udivsi3>
 8000a44:	0003      	movs	r3, r0
 8000a46:	7023      	strb	r3, [r4, #0]
	uint8_t ones = (rate % 100) % 10;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2164      	movs	r1, #100	; 0x64
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fbea 	bl	8000228 <__aeabi_uidivmod>
 8000a54:	000b      	movs	r3, r1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	220e      	movs	r2, #14
 8000a5a:	18bc      	adds	r4, r7, r2
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fbe2 	bl	8000228 <__aeabi_uidivmod>
 8000a64:	000b      	movs	r3, r1
 8000a66:	7023      	strb	r3, [r4, #0]

	//queue_len = 0;	// Reset queue?
	ResetIndexes();
 8000a68:	f000 f860 	bl	8000b2c <ResetIndexes>
	TurnAllOff();
 8000a6c:	f000 f830 	bl	8000ad0 <TurnAllOff>

	if (rate >= 100) {
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b63      	cmp	r3, #99	; 0x63
 8000a76:	d904      	bls.n	8000a82 <PrintRate+0x66>
		AddToLEDQueue(one_hundreds, 2);
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <PrintRate+0xa4>)
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe8d 	bl	800079c <AddToLEDQueue>
	}
	AddToLEDQueue(tens_digits[tens], digit_sizes[tens]);
 8000a82:	210f      	movs	r1, #15
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <PrintRate+0xa8>)
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	58d0      	ldr	r0, [r2, r3]
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <PrintRate+0xac>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	0019      	movs	r1, r3
 8000a98:	f7ff fe80 	bl	800079c <AddToLEDQueue>
	AddToLEDQueue(ones_digits[ones], digit_sizes[ones]);
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <PrintRate+0xb0>)
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	58d0      	ldr	r0, [r2, r3]
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <PrintRate+0xac>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	f7ff fe73 	bl	800079c <AddToLEDQueue>

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b005      	add	sp, #20
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000200 	.word	0x20000200
 8000ac4:	20000204 	.word	0x20000204
 8000ac8:	20000254 	.word	0x20000254
 8000acc:	2000022c 	.word	0x2000022c

08000ad0 <TurnAllOff>:

void TurnAllOff() {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < queue_len; i++) {
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e015      	b.n	8000b0a <TurnAllOff+0x3a>
		TurnOffLED(led_queue[i][0], led_queue[i][1]);
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <TurnAllOff+0x54>)
 8000ae4:	0052      	lsls	r2, r2, #1
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <TurnAllOff+0x54>)
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	18d3      	adds	r3, r2, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	0019      	movs	r1, r3
 8000afc:	f7ff fdfa 	bl	80006f4 <TurnOffLED>
	for (uint8_t i = 0; i < queue_len; i++) {
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	3201      	adds	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TurnAllOff+0x58>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	1dfa      	adds	r2, r7, #7
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3e2      	bcc.n	8000ade <TurnAllOff+0xe>
	}
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200004f8 	.word	0x200004f8
 8000b28:	200005ab 	.word	0x200005ab

08000b2c <ResetIndexes>:

void ResetIndexes() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	TurnAllOff();
 8000b30:	f7ff ffce 	bl	8000ad0 <TurnAllOff>
	queue_len = 0;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <ResetIndexes+0x28>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	queue_index = 0;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <ResetIndexes+0x2c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	pulse_dir = 1;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <ResetIndexes+0x30>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	pulse_step = 0;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <ResetIndexes+0x34>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200005ab 	.word	0x200005ab
 8000b58:	200005aa 	.word	0x200005aa
 8000b5c:	200002d2 	.word	0x200002d2
 8000b60:	200005ac 	.word	0x200005ac

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	extern TIM_HandleTypeDef *cathode_timers[ROWS];
	cathode_timers[0] = &htim2;
 8000b6a:	4bd4      	ldr	r3, [pc, #848]	; (8000ebc <main+0x358>)
 8000b6c:	4ad4      	ldr	r2, [pc, #848]	; (8000ec0 <main+0x35c>)
 8000b6e:	601a      	str	r2, [r3, #0]
	cathode_timers[1] = &htim2;
 8000b70:	4bd2      	ldr	r3, [pc, #840]	; (8000ebc <main+0x358>)
 8000b72:	4ad3      	ldr	r2, [pc, #844]	; (8000ec0 <main+0x35c>)
 8000b74:	605a      	str	r2, [r3, #4]
	cathode_timers[2] = &htim2;
 8000b76:	4bd1      	ldr	r3, [pc, #836]	; (8000ebc <main+0x358>)
 8000b78:	4ad1      	ldr	r2, [pc, #836]	; (8000ec0 <main+0x35c>)
 8000b7a:	609a      	str	r2, [r3, #8]
	cathode_timers[3] = &htim2;
 8000b7c:	4bcf      	ldr	r3, [pc, #828]	; (8000ebc <main+0x358>)
 8000b7e:	4ad0      	ldr	r2, [pc, #832]	; (8000ec0 <main+0x35c>)
 8000b80:	60da      	str	r2, [r3, #12]
	cathode_timers[4] = &htim3;
 8000b82:	4bce      	ldr	r3, [pc, #824]	; (8000ebc <main+0x358>)
 8000b84:	4acf      	ldr	r2, [pc, #828]	; (8000ec4 <main+0x360>)
 8000b86:	611a      	str	r2, [r3, #16]
	cathode_timers[5] = &htim3;
 8000b88:	4bcc      	ldr	r3, [pc, #816]	; (8000ebc <main+0x358>)
 8000b8a:	4ace      	ldr	r2, [pc, #824]	; (8000ec4 <main+0x360>)
 8000b8c:	615a      	str	r2, [r3, #20]
	cathode_timers[6] = &htim3;
 8000b8e:	4bcb      	ldr	r3, [pc, #812]	; (8000ebc <main+0x358>)
 8000b90:	4acc      	ldr	r2, [pc, #816]	; (8000ec4 <main+0x360>)
 8000b92:	619a      	str	r2, [r3, #24]
	cathode_timers[7] = &htim3;
 8000b94:	4bc9      	ldr	r3, [pc, #804]	; (8000ebc <main+0x358>)
 8000b96:	4acb      	ldr	r2, [pc, #812]	; (8000ec4 <main+0x360>)
 8000b98:	61da      	str	r2, [r3, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 ff35 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f9ff 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 fca5 	bl	80014f0 <MX_GPIO_Init>
  MX_ADC_Init();
 8000ba6:	f000 fa6f 	bl	8001088 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8000baa:	f009 f89b 	bl	8009ce4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000bae:	f000 fad9 	bl	8001164 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb2:	f000 fb55 	bl	8001260 <MX_TIM3_Init>
  MX_TIM21_Init();
 8000bb6:	f000 fc1d 	bl	80013f4 <MX_TIM21_Init>
  MX_TIM6_Init();
 8000bba:	f000 fba5 	bl	8001308 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bbe:	f000 fbdf 	bl	8001380 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// CHECK FOR BUTT1 PRESS, BUTT1 PRESS AT BOOT MEANS DEBUG MODE
	if (HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin) == GPIO_PIN_RESET) {
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	4ac0      	ldr	r2, [pc, #768]	; (8000ec8 <main+0x364>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f001 fd66 	bl	800269c <HAL_GPIO_ReadPin>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d102      	bne.n	8000bda <main+0x76>
		DEBUG_MODE = 1;
 8000bd4:	4bbd      	ldr	r3, [pc, #756]	; (8000ecc <main+0x368>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
	}

	// Set LED timer periods/duty cycle
	//TIM3->CCR1 = 99;
	TIM2->CCR1 = 20;
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2214      	movs	r2, #20
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34

	// Timer to control green LED
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000be2:	4bb7      	ldr	r3, [pc, #732]	; (8000ec0 <main+0x35c>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f004 fc22 	bl	8005430 <HAL_TIM_PWM_Start>

	// Timer to control LED patterns
	HAL_TIM_Base_Start_IT(&htim21);
 8000bec:	4bb8      	ldr	r3, [pc, #736]	; (8000ed0 <main+0x36c>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f004 fb3c 	bl	800526c <HAL_TIM_Base_Start_IT>
	//HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);

	// Timer to control button debouncing
	HAL_TIM_Base_Start_IT(&htim6);
 8000bf4:	4bb7      	ldr	r3, [pc, #732]	; (8000ed4 <main+0x370>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 fb38 	bl	800526c <HAL_TIM_Base_Start_IT>

	// Timer to control ADC sampling
	HAL_TIM_Base_Start_IT(&htim7);
 8000bfc:	4bb6      	ldr	r3, [pc, #728]	; (8000ed8 <main+0x374>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f004 fb34 	bl	800526c <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HandleLEDQueue();
 8000c04:	f7ff fdf0 	bl	80007e8 <HandleLEDQueue>
		if (pattern_flag) {
 8000c08:	4bb4      	ldr	r3, [pc, #720]	; (8000edc <main+0x378>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01e      	beq.n	8000c4e <main+0xea>
			switch (pattern_select) {
 8000c10:	4bb3      	ldr	r3, [pc, #716]	; (8000ee0 <main+0x37c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d817      	bhi.n	8000c48 <main+0xe4>
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	4bb2      	ldr	r3, [pc, #712]	; (8000ee4 <main+0x380>)
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	469f      	mov	pc, r3
			case 0:
				PulseHandler();			// Measured heartbeat
 8000c22:	f7ff fe4f 	bl	80008c4 <PulseHandler>
				break;
 8000c26:	e00f      	b.n	8000c48 <main+0xe4>
			case 1:
				PulseHandlerKeepOn();	// Measured heartbeat
 8000c28:	f7ff fe90 	bl	800094c <PulseHandlerKeepOn>
				break;
 8000c2c:	e00c      	b.n	8000c48 <main+0xe4>
			case 2:
				PrintRate(heartbeat_freq);	// Measured heartbeat
 8000c2e:	4bae      	ldr	r3, [pc, #696]	; (8000ee8 <main+0x384>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fef1 	bl	8000a1c <PrintRate>
				break;
 8000c3a:	e005      	b.n	8000c48 <main+0xe4>
			case 3:
				PulseHandler();			// Constant heartbeat
 8000c3c:	f7ff fe42 	bl	80008c4 <PulseHandler>
				break;
 8000c40:	e002      	b.n	8000c48 <main+0xe4>
			case 4:
				PulseHandlerKeepOn();	// Constant heartbeat
 8000c42:	f7ff fe83 	bl	800094c <PulseHandlerKeepOn>
				break;
 8000c46:	46c0      	nop			; (mov r8, r8)
			}
			pattern_flag = 0;
 8000c48:	4ba4      	ldr	r3, [pc, #656]	; (8000edc <main+0x378>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		}

		if (button_flag) {
 8000c4e:	4ba7      	ldr	r3, [pc, #668]	; (8000eec <main+0x388>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d020      	beq.n	8000c98 <main+0x134>
			pattern_select++;
 8000c56:	4ba2      	ldr	r3, [pc, #648]	; (8000ee0 <main+0x37c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4ba0      	ldr	r3, [pc, #640]	; (8000ee0 <main+0x37c>)
 8000c60:	701a      	strb	r2, [r3, #0]
			ResetIndexes();
 8000c62:	f7ff ff63 	bl	8000b2c <ResetIndexes>
			if (pattern_select > 4) {
 8000c66:	4b9e      	ldr	r3, [pc, #632]	; (8000ee0 <main+0x37c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d908      	bls.n	8000c80 <main+0x11c>
				pattern_select = 0;							// Reset patterns
 8000c6e:	4b9c      	ldr	r3, [pc, #624]	; (8000ee0 <main+0x37c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Turn on green LED
 8000c74:	4b92      	ldr	r3, [pc, #584]	; (8000ec0 <main+0x35c>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f004 fbd9 	bl	8005430 <HAL_TIM_PWM_Start>
 8000c7e:	e008      	b.n	8000c92 <main+0x12e>
			}
			else if (pattern_select > 2) {
 8000c80:	4b97      	ldr	r3, [pc, #604]	; (8000ee0 <main+0x37c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d904      	bls.n	8000c92 <main+0x12e>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	// Turn off green LED
 8000c88:	4b8d      	ldr	r3, [pc, #564]	; (8000ec0 <main+0x35c>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fc61 	bl	8005554 <HAL_TIM_PWM_Stop>
			}
			button_flag = 0;
 8000c92:	4b96      	ldr	r3, [pc, #600]	; (8000eec <main+0x388>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
		}

		if (sample_flag) {
 8000c98:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <main+0x38c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0b1      	beq.n	8000c04 <main+0xa0>

			HAL_ADC_Start(&hadc);
 8000ca0:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <main+0x390>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 f894 	bl	8001dd0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc, 100);
 8000ca8:	4b92      	ldr	r3, [pc, #584]	; (8000ef4 <main+0x390>)
 8000caa:	2164      	movs	r1, #100	; 0x64
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 f8e3 	bl	8001e78 <HAL_ADC_PollForConversion>
			adc_val = HAL_ADC_GetValue(&hadc);
 8000cb2:	4b90      	ldr	r3, [pc, #576]	; (8000ef4 <main+0x390>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f97b 	bl	8001fb0 <HAL_ADC_GetValue>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	4b8e      	ldr	r3, [pc, #568]	; (8000ef8 <main+0x394>)
 8000cbe:	601a      	str	r2, [r3, #0]

			if (DEBUG_MODE) {
 8000cc0:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <main+0x368>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d016      	beq.n	8000cf6 <main+0x192>
				// REMOVE USB STUFF TO REDUCE FLICKER
				char buf[10];
				sprintf(buf, "%d %d\r\n", adc_val, heartbeat_freq);
 8000cc8:	4b8b      	ldr	r3, [pc, #556]	; (8000ef8 <main+0x394>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <main+0x384>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	498a      	ldr	r1, [pc, #552]	; (8000efc <main+0x398>)
 8000cd2:	0038      	movs	r0, r7
 8000cd4:	f009 fd7a 	bl	800a7cc <siprintf>
				if (heartbeat_freq >= 100) {
 8000cd8:	4b83      	ldr	r3, [pc, #524]	; (8000ee8 <main+0x384>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b63      	cmp	r3, #99	; 0x63
 8000cde:	d905      	bls.n	8000cec <main+0x188>
					CDC_Transmit_FS(buf, 10);
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	210a      	movs	r1, #10
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f009 f881 	bl	8009dec <CDC_Transmit_FS>
 8000cea:	e004      	b.n	8000cf6 <main+0x192>
				}
				else {
					CDC_Transmit_FS(buf, 9);
 8000cec:	003b      	movs	r3, r7
 8000cee:	2109      	movs	r1, #9
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f009 f87b 	bl	8009dec <CDC_Transmit_FS>
				}
			}

			// AUTO-CALIBRATION WINDOW STUFF
			// Reset window once length is reached
			calibration_count++;
 8000cf6:	4b82      	ldr	r3, [pc, #520]	; (8000f00 <main+0x39c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <main+0x39c>)
 8000d00:	801a      	strh	r2, [r3, #0]
			if (calibration_count >= CALIBRATION_WINDOW_LEN) {
 8000d02:	4b7f      	ldr	r3, [pc, #508]	; (8000f00 <main+0x39c>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d32d      	bcc.n	8000d6a <main+0x206>
				calibration_count = 0;
 8000d0e:	4b7c      	ldr	r3, [pc, #496]	; (8000f00 <main+0x39c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]

				uint16_t window_mid = (window_max + window_min) >> 1;
 8000d14:	4b7b      	ldr	r3, [pc, #492]	; (8000f04 <main+0x3a0>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	001a      	movs	r2, r3
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <main+0x3a4>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	18d3      	adds	r3, r2, r3
 8000d20:	105a      	asrs	r2, r3, #1
 8000d22:	210e      	movs	r1, #14
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	801a      	strh	r2, [r3, #0]

				// Can vary how much between
				// Assign calibration_max between middle and max
				calibration_high = window_mid + ((window_max - window_min) >> 2);
 8000d28:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <main+0x3a0>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <main+0x3a4>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	109b      	asrs	r3, r3, #2
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b72      	ldr	r3, [pc, #456]	; (8000f0c <main+0x3a8>)
 8000d42:	801a      	strh	r2, [r3, #0]

				// Assign calibration min between middle and min
				calibration_low = window_mid - ((window_mid - window_min) >> 2);
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <main+0x3a4>)
 8000d4a:	8812      	ldrh	r2, [r2, #0]
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	109b      	asrs	r3, r3, #2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	187a      	adds	r2, r7, r1
 8000d54:	8812      	ldrh	r2, [r2, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <main+0x3ac>)
 8000d5c:	801a      	strh	r2, [r3, #0]

				window_max = 0;
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <main+0x3a0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	801a      	strh	r2, [r3, #0]
				window_min = 4095;
 8000d64:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <main+0x3a4>)
 8000d66:	4a6b      	ldr	r2, [pc, #428]	; (8000f14 <main+0x3b0>)
 8000d68:	801a      	strh	r2, [r3, #0]

			}

			// Record max and min values for next window's comparison
			if (adc_val > window_max) {
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <main+0x3a0>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	001a      	movs	r2, r3
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <main+0x394>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d205      	bcs.n	8000d84 <main+0x220>
				window_max = adc_val;
 8000d78:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <main+0x394>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b61      	ldr	r3, [pc, #388]	; (8000f04 <main+0x3a0>)
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	e00b      	b.n	8000d9c <main+0x238>
			}
			else if (adc_val < window_min) {
 8000d84:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <main+0x3a4>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <main+0x394>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d904      	bls.n	8000d9c <main+0x238>
				window_min = adc_val;
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <main+0x394>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <main+0x3a4>)
 8000d9a:	801a      	strh	r2, [r3, #0]
			}


			// CALCULATING HEART RATE STUFF
			heartbeat_count++;	// Increment time between beats
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <main+0x3b4>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b5c      	ldr	r3, [pc, #368]	; (8000f18 <main+0x3b4>)
 8000da6:	801a      	strh	r2, [r3, #0]

			// When signal goes low from high
			if (low_flag && adc_val <= calibration_low) {
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <main+0x3b8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <main+0x24e>
 8000db0:	e0c2      	b.n	8000f38 <main+0x3d4>
 8000db2:	4b57      	ldr	r3, [pc, #348]	; (8000f10 <main+0x3ac>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	001a      	movs	r2, r3
 8000db8:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <main+0x394>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d200      	bcs.n	8000dc2 <main+0x25e>
 8000dc0:	e0ba      	b.n	8000f38 <main+0x3d4>

				if (DEBUG_MODE) {
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <main+0x368>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <main+0x274>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	483e      	ldr	r0, [pc, #248]	; (8000ec8 <main+0x364>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f001 fc7f 	bl	80026d6 <HAL_GPIO_WritePin>
				}
				low_flag = 0;
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <main+0x3b8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
				high_flag = 1;
 8000dde:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <main+0x3bc>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]

				// Sampling time:
				uint16_t sample_freq = 16000000 / (TIM7->PSC+1) / (TIM7->ARR+1);	// In Hz
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <main+0x3c0>)
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	3301      	adds	r3, #1
 8000dea:	0019      	movs	r1, r3
 8000dec:	484e      	ldr	r0, [pc, #312]	; (8000f28 <main+0x3c4>)
 8000dee:	f7ff f995 	bl	800011c <__udivsi3>
 8000df2:	0003      	movs	r3, r0
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <main+0x3c0>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f7ff f98c 	bl	800011c <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	001a      	movs	r2, r3
 8000e08:	210c      	movs	r1, #12
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	801a      	strh	r2, [r3, #0]

				// In Hz = 1 / ( Counts * (1/Fs) ) = Fs / Counts
				heartbeat_freq = sample_freq * 60 / heartbeat_count; // In BPM
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	881a      	ldrh	r2, [r3, #0]
 8000e12:	0013      	movs	r3, r2
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <main+0x3b4>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f7ff fa04 	bl	8000230 <__divsi3>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <main+0x384>)
 8000e2e:	801a      	strh	r2, [r3, #0]

				// Limit between 30 BPM and 200 BPM
				if (heartbeat_freq < 30) {
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <main+0x384>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2b1d      	cmp	r3, #29
 8000e36:	d803      	bhi.n	8000e40 <main+0x2dc>
					heartbeat_freq = 30;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <main+0x384>)
 8000e3a:	221e      	movs	r2, #30
 8000e3c:	801a      	strh	r2, [r3, #0]
 8000e3e:	e006      	b.n	8000e4e <main+0x2ea>
				}
				else if (heartbeat_freq > 199){
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <main+0x384>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	2bc7      	cmp	r3, #199	; 0xc7
 8000e46:	d902      	bls.n	8000e4e <main+0x2ea>
					heartbeat_freq = 199;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <main+0x384>)
 8000e4a:	22c7      	movs	r2, #199	; 0xc7
 8000e4c:	801a      	strh	r2, [r3, #0]
					ARR = 16,000,000 / 1600 / (BPM/60)
					ARR = 16,000,000 / 1600 / BPM * 60 / Stages
				 */

				// When printing out numbers, just set constant timer frequency
				if (pattern_select == 2) {
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <main+0x37c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d103      	bne.n	8000e5e <main+0x2fa>
					TIM21->ARR = 200;
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <main+0x3c8>)
 8000e58:	22c8      	movs	r2, #200	; 0xc8
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5c:	e02a      	b.n	8000eb4 <main+0x350>
				}
				else if (pattern_select > 2) {
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <main+0x37c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d903      	bls.n	8000e6e <main+0x30a>
					TIM21->ARR = 869;
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <main+0x3c8>)
 8000e68:	4a31      	ldr	r2, [pc, #196]	; (8000f30 <main+0x3cc>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e6c:	e022      	b.n	8000eb4 <main+0x350>
				}
				else {
					// Range (2221 (30 BPM) to 332 (200 BPM)
					TIM21->ARR = 16000000 / (TIM21->PSC+1) / heartbeat_freq * 60 / pattern_steps[pattern_select] - 1;
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <main+0x3c8>)
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	3301      	adds	r3, #1
 8000e74:	0019      	movs	r1, r3
 8000e76:	482c      	ldr	r0, [pc, #176]	; (8000f28 <main+0x3c4>)
 8000e78:	f7ff f950 	bl	800011c <__udivsi3>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	001a      	movs	r2, r3
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <main+0x384>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f7ff f948 	bl	800011c <__udivsi3>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	001a      	movs	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <main+0x37c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0x3d0>)
 8000ea2:	5c9b      	ldrb	r3, [r3, r2]
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	f7ff f939 	bl	800011c <__udivsi3>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <main+0x3c8>)
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				heartbeat_count = 0;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <main+0x3b4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	801a      	strh	r2, [r3, #0]
			if (low_flag && adc_val <= calibration_low) {
 8000eba:	e059      	b.n	8000f70 <main+0x40c>
 8000ebc:	200004d8 	.word	0x200004d8
 8000ec0:	2000060c 	.word	0x2000060c
 8000ec4:	2000064c 	.word	0x2000064c
 8000ec8:	50000400 	.word	0x50000400
 8000ecc:	2000074c 	.word	0x2000074c
 8000ed0:	2000070c 	.word	0x2000070c
 8000ed4:	2000068c 	.word	0x2000068c
 8000ed8:	200006cc 	.word	0x200006cc
 8000edc:	20000762 	.word	0x20000762
 8000ee0:	20000765 	.word	0x20000765
 8000ee4:	0800b0f8 	.word	0x0800b0f8
 8000ee8:	200002d4 	.word	0x200002d4
 8000eec:	20000763 	.word	0x20000763
 8000ef0:	20000758 	.word	0x20000758
 8000ef4:	200005b0 	.word	0x200005b0
 8000ef8:	20000750 	.word	0x20000750
 8000efc:	0800b0a4 	.word	0x0800b0a4
 8000f00:	2000075c 	.word	0x2000075c
 8000f04:	2000075e 	.word	0x2000075e
 8000f08:	20000760 	.word	0x20000760
 8000f0c:	200002d6 	.word	0x200002d6
 8000f10:	200002d8 	.word	0x200002d8
 8000f14:	00000fff 	.word	0x00000fff
 8000f18:	2000075a 	.word	0x2000075a
 8000f1c:	200002d3 	.word	0x200002d3
 8000f20:	20000759 	.word	0x20000759
 8000f24:	40001400 	.word	0x40001400
 8000f28:	00f42400 	.word	0x00f42400
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	00000365 	.word	0x00000365
 8000f34:	0800b0f4 	.word	0x0800b0f4
			}
			// When signal goes high from low
			else if (high_flag && adc_val >= calibration_high) {
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <main+0x41c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d017      	beq.n	8000f70 <main+0x40c>
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <main+0x420>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <main+0x424>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d810      	bhi.n	8000f70 <main+0x40c>

				if (DEBUG_MODE) {
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <main+0x428>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <main+0x400>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	01db      	lsls	r3, r3, #7
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <main+0x42c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	0019      	movs	r1, r3
 8000f60:	f001 fbb9 	bl	80026d6 <HAL_GPIO_WritePin>
				}
				low_flag = 1;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <main+0x430>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
				high_flag = 0;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <main+0x41c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]



			}

			prev_adc_val = adc_val;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <main+0x424>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <main+0x434>)
 8000f76:	601a      	str	r2, [r3, #0]
			sample_flag = 0;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <main+0x438>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
		HandleLEDQueue();
 8000f7e:	e641      	b.n	8000c04 <main+0xa0>
 8000f80:	20000759 	.word	0x20000759
 8000f84:	200002d6 	.word	0x200002d6
 8000f88:	20000750 	.word	0x20000750
 8000f8c:	2000074c 	.word	0x2000074c
 8000f90:	50000400 	.word	0x50000400
 8000f94:	200002d3 	.word	0x200002d3
 8000f98:	20000754 	.word	0x20000754
 8000f9c:	20000758 	.word	0x20000758

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b09d      	sub	sp, #116	; 0x74
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	2438      	movs	r4, #56	; 0x38
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	0018      	movs	r0, r3
 8000fac:	2338      	movs	r3, #56	; 0x38
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f009 fc02 	bl	800a7ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb6:	2324      	movs	r3, #36	; 0x24
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2314      	movs	r3, #20
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f009 fbfa 	bl	800a7ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	0018      	movs	r0, r3
 8000fca:	2324      	movs	r3, #36	; 0x24
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f009 fbf3 	bl	800a7ba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <SystemClock_Config+0xe0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <SystemClock_Config+0xe4>)
 8000fda:	401a      	ands	r2, r3
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemClock_Config+0xe0>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0109      	lsls	r1, r1, #4
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	2221      	movs	r2, #33	; 0x21
 8000fea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0252      	lsls	r2, r2, #9
 8000ff2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ff4:	0021      	movs	r1, r4
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2202      	movs	r2, #2
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0252      	lsls	r2, r2, #9
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	0412      	lsls	r2, r2, #16
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	187b      	adds	r3, r7, r1
 800101a:	0018      	movs	r0, r3
 800101c:	f003 f9ca 	bl	80043b4 <HAL_RCC_OscConfig>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001024:	f000 fb4a 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	2124      	movs	r1, #36	; 0x24
 800102a:	187b      	adds	r3, r7, r1
 800102c:	220f      	movs	r2, #15
 800102e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2203      	movs	r2, #3
 8001034:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2100      	movs	r1, #0
 800104c:	0018      	movs	r0, r3
 800104e:	f003 fd85 	bl	8004b5c <HAL_RCC_ClockConfig>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001056:	f000 fb31 	bl	80016bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800105a:	003b      	movs	r3, r7
 800105c:	2240      	movs	r2, #64	; 0x40
 800105e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001060:	003b      	movs	r3, r7
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	04d2      	lsls	r2, r2, #19
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001068:	003b      	movs	r3, r7
 800106a:	0018      	movs	r0, r3
 800106c:	f003 ff62 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001074:	f000 fb22 	bl	80016bc <Error_Handler>
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b01d      	add	sp, #116	; 0x74
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	40007000 	.word	0x40007000
 8001084:	ffffe7ff 	.word	0xffffe7ff

08001088 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	003b      	movs	r3, r7
 8001090:	0018      	movs	r0, r3
 8001092:	2308      	movs	r3, #8
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f009 fb8f 	bl	800a7ba <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <MX_ADC_Init+0xd0>)
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <MX_ADC_Init+0xd4>)
 80010a0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = ENABLE;
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_ADC_Init+0xd0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_ADC_Init+0xd0>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_ADC_Init+0xd0>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_ADC_Init+0xd0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MX_ADC_Init+0xd0>)
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	0612      	lsls	r2, r2, #24
 80010c0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_ADC_Init+0xd0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_ADC_Init+0xd0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_ADC_Init+0xd0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_ADC_Init+0xd0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC_Init+0xd0>)
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC_Init+0xd0>)
 80010e4:	2221      	movs	r2, #33	; 0x21
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_ADC_Init+0xd0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC_Init+0xd0>)
 80010f2:	22c2      	movs	r2, #194	; 0xc2
 80010f4:	32ff      	adds	r2, #255	; 0xff
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC_Init+0xd0>)
 80010fa:	222c      	movs	r2, #44	; 0x2c
 80010fc:	2100      	movs	r1, #0
 80010fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ADC_Init+0xd0>)
 8001102:	2204      	movs	r2, #4
 8001104:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC_Init+0xd0>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_ADC_Init+0xd0>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC_Init+0xd0>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC_Init+0xd0>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ADC_Init+0xd0>)
 8001120:	0018      	movs	r0, r3
 8001122:	f000 fce1 	bl	8001ae8 <HAL_ADC_Init>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800112a:	f000 fac7 	bl	80016bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112e:	003b      	movs	r3, r7
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <MX_ADC_Init+0xd8>)
 8001132:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001134:	003b      	movs	r3, r7
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0152      	lsls	r2, r2, #5
 800113a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800113c:	003a      	movs	r2, r7
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_ADC_Init+0xd0>)
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f000 ff40 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC_Init+0xc8>
  {
    Error_Handler();
 800114c:	f000 fab6 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200005b0 	.word	0x200005b0
 800115c:	40012400 	.word	0x40012400
 8001160:	10000010 	.word	0x10000010

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	2318      	movs	r3, #24
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	0018      	movs	r0, r3
 8001170:	2310      	movs	r3, #16
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f009 fb20 	bl	800a7ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	2310      	movs	r3, #16
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	0018      	movs	r0, r3
 8001180:	2308      	movs	r3, #8
 8001182:	001a      	movs	r2, r3
 8001184:	2100      	movs	r1, #0
 8001186:	f009 fb18 	bl	800a7ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	003b      	movs	r3, r7
 800118c:	0018      	movs	r0, r3
 800118e:	2310      	movs	r3, #16
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f009 fb11 	bl	800a7ba <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_TIM2_Init+0xf8>)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	05d2      	lsls	r2, r2, #23
 800119e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_TIM2_Init+0xf8>)
 80011a2:	220f      	movs	r2, #15
 80011a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_TIM2_Init+0xf8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_TIM2_Init+0xf8>)
 80011ae:	2263      	movs	r2, #99	; 0x63
 80011b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM2_Init+0xf8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM2_Init+0xf8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_TIM2_Init+0xf8>)
 80011c0:	0018      	movs	r0, r3
 80011c2:	f004 f813 	bl	80051ec <HAL_TIM_Base_Init>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f000 fa77 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	2118      	movs	r1, #24
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0152      	lsls	r2, r2, #5
 80011d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d8:	187a      	adds	r2, r7, r1
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_TIM2_Init+0xf8>)
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f004 fbfc 	bl	80059dc <HAL_TIM_ConfigClockSource>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80011e8:	f000 fa68 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM2_Init+0xf8>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f004 f8d6 	bl	80053a0 <HAL_TIM_PWM_Init>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80011f8:	f000 fa60 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2110      	movs	r1, #16
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120a:	187a      	adds	r2, r7, r1
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_TIM2_Init+0xf8>)
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f004 fef7 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800121a:	f000 fa4f 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	003b      	movs	r3, r7
 8001220:	2260      	movs	r2, #96	; 0x60
 8001222:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001224:	003b      	movs	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	003b      	movs	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	003b      	movs	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	0039      	movs	r1, r7
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_TIM2_Init+0xf8>)
 800123a:	2200      	movs	r2, #0
 800123c:	0018      	movs	r0, r3
 800123e:	f004 fb07 	bl	8005850 <HAL_TIM_PWM_ConfigChannel>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001246:	f000 fa39 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <MX_TIM2_Init+0xf8>)
 800124c:	0018      	movs	r0, r3
 800124e:	f000 faf1 	bl	8001834 <HAL_TIM_MspPostInit>

}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b00a      	add	sp, #40	; 0x28
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	2000060c 	.word	0x2000060c

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	2308      	movs	r3, #8
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	2310      	movs	r3, #16
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f009 faa2 	bl	800a7ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	2308      	movs	r3, #8
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f009 fa9b 	bl	800a7ba <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM3_Init+0xa0>)
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <MX_TIM3_Init+0xa4>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM3_Init+0xa0>)
 800128c:	220f      	movs	r2, #15
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM3_Init+0xa0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM3_Init+0xa0>)
 8001298:	2263      	movs	r2, #99	; 0x63
 800129a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM3_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_TIM3_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM3_Init+0xa0>)
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 ff9e 	bl	80051ec <HAL_TIM_Base_Init>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 fa02 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	2108      	movs	r1, #8
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0152      	lsls	r2, r2, #5
 80012c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c2:	187a      	adds	r2, r7, r1
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_TIM3_Init+0xa0>)
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f004 fb87 	bl	80059dc <HAL_TIM_ConfigClockSource>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 f9f3 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	003b      	movs	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	003b      	movs	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e2:	003a      	movs	r2, r7
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_TIM3_Init+0xa0>)
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f004 fe8b 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012f2:	f000 f9e3 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b006      	add	sp, #24
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	2000064c 	.word	0x2000064c
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	003b      	movs	r3, r7
 8001310:	0018      	movs	r0, r3
 8001312:	2308      	movs	r3, #8
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f009 fa4f 	bl	800a7ba <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM6_Init+0x6c>)
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <MX_TIM6_Init+0x70>)
 8001320:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_TIM6_Init+0x6c>)
 8001324:	4a15      	ldr	r2, [pc, #84]	; (800137c <MX_TIM6_Init+0x74>)
 8001326:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_TIM6_Init+0x6c>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_TIM6_Init+0x6c>)
 8001330:	2263      	movs	r2, #99	; 0x63
 8001332:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_TIM6_Init+0x6c>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_TIM6_Init+0x6c>)
 800133c:	0018      	movs	r0, r3
 800133e:	f003 ff55 	bl	80051ec <HAL_TIM_Base_Init>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001346:	f000 f9b9 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	003b      	movs	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	003b      	movs	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001356:	003a      	movs	r2, r7
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_TIM6_Init+0x6c>)
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f004 fe51 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001366:	f000 f9a9 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000068c 	.word	0x2000068c
 8001378:	40001000 	.word	0x40001000
 800137c:	0000063f 	.word	0x0000063f

08001380 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001386:	003b      	movs	r3, r7
 8001388:	0018      	movs	r0, r3
 800138a:	2308      	movs	r3, #8
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f009 fa13 	bl	800a7ba <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_TIM7_Init+0x6c>)
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <MX_TIM7_Init+0x70>)
 8001398:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_TIM7_Init+0x6c>)
 800139c:	2263      	movs	r2, #99	; 0x63
 800139e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_TIM7_Init+0x6c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 320-1;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_TIM7_Init+0x6c>)
 80013a8:	2240      	movs	r2, #64	; 0x40
 80013aa:	32ff      	adds	r2, #255	; 0xff
 80013ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_TIM7_Init+0x6c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_TIM7_Init+0x6c>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f003 ff18 	bl	80051ec <HAL_TIM_Base_Init>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80013c0:	f000 f97c 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	003b      	movs	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	003b      	movs	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013d0:	003a      	movs	r2, r7
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_TIM7_Init+0x6c>)
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f004 fe14 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80013e0:	f000 f96c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200006cc 	.word	0x200006cc
 80013f0:	40001400 	.word	0x40001400

080013f4 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	2318      	movs	r3, #24
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	0018      	movs	r0, r3
 8001400:	2310      	movs	r3, #16
 8001402:	001a      	movs	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	f009 f9d8 	bl	800a7ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	2310      	movs	r3, #16
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	0018      	movs	r0, r3
 8001410:	2308      	movs	r3, #8
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f009 f9d0 	bl	800a7ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	003b      	movs	r3, r7
 800141c:	0018      	movs	r0, r3
 800141e:	2310      	movs	r3, #16
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f009 f9c9 	bl	800a7ba <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_TIM21_Init+0xec>)
 800142a:	4a2e      	ldr	r2, [pc, #184]	; (80014e4 <MX_TIM21_Init+0xf0>)
 800142c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1600-1;
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_TIM21_Init+0xec>)
 8001430:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <MX_TIM21_Init+0xf4>)
 8001432:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_TIM21_Init+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_TIM21_Init+0xec>)
 800143c:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <MX_TIM21_Init+0xf8>)
 800143e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_TIM21_Init+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_TIM21_Init+0xec>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_TIM21_Init+0xec>)
 800144e:	0018      	movs	r0, r3
 8001450:	f003 fecc 	bl	80051ec <HAL_TIM_Base_Init>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8001458:	f000 f930 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	2118      	movs	r1, #24
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	0152      	lsls	r2, r2, #5
 8001464:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001466:	187a      	adds	r2, r7, r1
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM21_Init+0xec>)
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f004 fab5 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d001      	beq.n	800147a <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 8001476:	f000 f921 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_TIM21_Init+0xec>)
 800147c:	0018      	movs	r0, r3
 800147e:	f003 ff47 	bl	8005310 <HAL_TIM_OC_Init>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d001      	beq.n	800148a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8001486:	f000 f919 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2110      	movs	r1, #16
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001498:	187a      	adds	r2, r7, r1
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_TIM21_Init+0xec>)
 800149c:	0011      	movs	r1, r2
 800149e:	0018      	movs	r0, r3
 80014a0:	f004 fdb0 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80014a8:	f000 f908 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014ac:	003b      	movs	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014b2:	003b      	movs	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	003b      	movs	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014be:	003b      	movs	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c4:	0039      	movs	r1, r7
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_TIM21_Init+0xec>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	0018      	movs	r0, r3
 80014cc:	f004 f968 	bl	80057a0 <HAL_TIM_OC_ConfigChannel>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 80014d4:	f000 f8f2 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b00a      	add	sp, #40	; 0x28
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000070c 	.word	0x2000070c
 80014e4:	40010800 	.word	0x40010800
 80014e8:	0000063f 	.word	0x0000063f
 80014ec:	000003e7 	.word	0x000003e7

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	2414      	movs	r4, #20
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	0018      	movs	r0, r3
 80014fc:	2314      	movs	r3, #20
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f009 f95a 	bl	800a7ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <MX_GPIO_Init+0x110>)
 8001508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <MX_GPIO_Init+0x110>)
 800150c:	2104      	movs	r1, #4
 800150e:	430a      	orrs	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <MX_GPIO_Init+0x110>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <MX_GPIO_Init+0x110>)
 8001520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_GPIO_Init+0x110>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <MX_GPIO_Init+0x110>)
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <MX_GPIO_Init+0x110>)
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_GPIO_Init+0x110>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_GPIO_Init+0x110>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_GPIO_Init+0x110>)
 8001550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <MX_GPIO_Init+0x110>)
 8001554:	2102      	movs	r1, #2
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0x110>)
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C0_Pin|C1_Pin|C2_Pin|C3_Pin
 8001566:	23a0      	movs	r3, #160	; 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	2201      	movs	r2, #1
 800156c:	21cf      	movs	r1, #207	; 0xcf
 800156e:	0018      	movs	r0, r3
 8001570:	f001 f8b1 	bl	80026d6 <HAL_GPIO_WritePin>
                          |C4_Pin|C5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C6_Pin|C7_Pin|LED1_Pin, GPIO_PIN_SET);
 8001574:	4923      	ldr	r1, [pc, #140]	; (8001604 <MX_GPIO_Init+0x114>)
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <MX_GPIO_Init+0x118>)
 8001578:	2201      	movs	r2, #1
 800157a:	0018      	movs	r0, r3
 800157c:	f001 f8ab 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_Pin|A8_Pin|A9_Pin|A10_Pin
 8001580:	4922      	ldr	r1, [pc, #136]	; (800160c <MX_GPIO_Init+0x11c>)
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_GPIO_Init+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	0018      	movs	r0, r3
 8001588:	f001 f8a5 	bl	80026d6 <HAL_GPIO_WritePin>
                          |A1_Pin|A2_Pin|A3_Pin|A4_Pin
                          |A5_Pin|A6_Pin|A7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C1_Pin C2_Pin C3_Pin
                           C4_Pin C5_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|C2_Pin|C3_Pin
 800158c:	193b      	adds	r3, r7, r4
 800158e:	22cf      	movs	r2, #207	; 0xcf
 8001590:	601a      	str	r2, [r3, #0]
                          |C4_Pin|C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	193b      	adds	r3, r7, r4
 8001594:	2201      	movs	r2, #1
 8001596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	193b      	adds	r3, r7, r4
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	193a      	adds	r2, r7, r4
 80015a6:	23a0      	movs	r3, #160	; 0xa0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 fef7 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C6_Pin C7_Pin A0_Pin A8_Pin
                           A9_Pin A10_Pin LED1_Pin A1_Pin
                           A2_Pin A3_Pin A4_Pin A5_Pin
                           A6_Pin A7_Pin */
  GPIO_InitStruct.Pin = C6_Pin|C7_Pin|A0_Pin|A8_Pin
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <MX_GPIO_Init+0x120>)
 80015b6:	601a      	str	r2, [r3, #0]
                          |A9_Pin|A10_Pin|LED1_Pin|A1_Pin
                          |A2_Pin|A3_Pin|A4_Pin|A5_Pin
                          |A6_Pin|A7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	2201      	movs	r2, #1
 80015bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <MX_GPIO_Init+0x118>)
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f000 fee5 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT1_Pin */
  GPIO_InitStruct.Pin = BUTT1_Pin;
 80015d6:	0021      	movs	r1, r4
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	0192      	lsls	r2, r2, #6
 80015de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTT1_GPIO_Port, &GPIO_InitStruct);
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <MX_GPIO_Init+0x118>)
 80015f0:	0019      	movs	r1, r3
 80015f2:	0010      	movs	r0, r2
 80015f4:	f000 fed4 	bl	80023a0 <HAL_GPIO_Init>

}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b00b      	add	sp, #44	; 0x2c
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	00004003 	.word	0x00004003
 8001608:	50000400 	.word	0x50000400
 800160c:	00001ffc 	.word	0x00001ffc
 8001610:	00005fff 	.word	0x00005fff

08001614 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  // Check if timer to control pattern steps
  if (htim == &htim21)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001620:	429a      	cmp	r2, r3
 8001622:	d103      	bne.n	800162c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  //PulseHandler();
	  pattern_flag = 1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
  }
  // Check if timer to sample ADC
  else if (htim == &htim7) {
	  sample_flag = 1;
  }
}
 800162a:	e030      	b.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim6) {
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001630:	429a      	cmp	r2, r3
 8001632:	d125      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x6c>
	  button_state = HAL_GPIO_ReadPin(BUTT1_GPIO_Port, BUTT1_Pin);
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	4a1a      	ldr	r2, [pc, #104]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800163a:	0019      	movs	r1, r3
 800163c:	0010      	movs	r0, r2
 800163e:	f001 f82d 	bl	800269c <HAL_GPIO_ReadPin>
 8001642:	0003      	movs	r3, r0
 8001644:	001a      	movs	r2, r3
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001648:	701a      	strb	r2, [r3, #0]
	  if (button_state == GPIO_PIN_RESET && button_prev == GPIO_PIN_SET) {
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10a      	bne.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x54>
		  button_flag = 1;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
		  button_prev = GPIO_PIN_RESET;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	e012      	b.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
	  else if (button_state == GPIO_PIN_SET && button_prev == GPIO_PIN_RESET) {
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10e      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10a      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
		  button_prev = GPIO_PIN_SET;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	e006      	b.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
  else if (htim == &htim7) {
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d102      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x7a>
	  sample_flag = 1;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	2000070c 	.word	0x2000070c
 800169c:	20000762 	.word	0x20000762
 80016a0:	2000068c 	.word	0x2000068c
 80016a4:	50000400 	.word	0x50000400
 80016a8:	20000764 	.word	0x20000764
 80016ac:	200002da 	.word	0x200002da
 80016b0:	20000763 	.word	0x20000763
 80016b4:	200006cc 	.word	0x200006cc
 80016b8:	20000758 	.word	0x20000758

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_MspInit+0x24>)
 80016ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x24>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_MspInit+0x24>)
 80016da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_MspInit+0x24>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0549      	lsls	r1, r1, #21
 80016e2:	430a      	orrs	r2, r1
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	240c      	movs	r4, #12
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	0018      	movs	r0, r3
 80016fe:	2314      	movs	r3, #20
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f009 f859 	bl	800a7ba <memset>
  if(hadc->Instance==ADC1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_ADC_MspInit+0x70>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d122      	bne.n	8001758 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_ADC_MspInit+0x74>)
 8001714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_ADC_MspInit+0x74>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0089      	lsls	r1, r1, #2
 800171c:	430a      	orrs	r2, r1
 800171e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_ADC_MspInit+0x74>)
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_ADC_MspInit+0x74>)
 8001726:	2101      	movs	r1, #1
 8001728:	430a      	orrs	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_ADC_MspInit+0x74>)
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = HEART_ADC_Pin;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2210      	movs	r2, #16
 800173c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2203      	movs	r2, #3
 8001742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	193b      	adds	r3, r7, r4
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(HEART_ADC_GPIO_Port, &GPIO_InitStruct);
 800174a:	193a      	adds	r2, r7, r4
 800174c:	23a0      	movs	r3, #160	; 0xa0
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f000 fe24 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b009      	add	sp, #36	; 0x24
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	40012400 	.word	0x40012400
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	429a      	cmp	r2, r3
 800177a:	d106      	bne.n	800178a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 800177e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 8001782:	2101      	movs	r1, #1
 8001784:	430a      	orrs	r2, r1
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001788:	e046      	b.n	8001818 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_TIM_Base_MspInit+0xbc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d106      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 8001796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 800179a:	2102      	movs	r1, #2
 800179c:	430a      	orrs	r2, r1
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017a0:	e03a      	b.n	8001818 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a20      	ldr	r2, [pc, #128]	; (8001828 <HAL_TIM_Base_MspInit+0xc0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d10e      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 80017ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 80017b2:	2110      	movs	r1, #16
 80017b4:	430a      	orrs	r2, r1
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2011      	movs	r0, #17
 80017be:	f000 fdbd 	bl	800233c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c2:	2011      	movs	r0, #17
 80017c4:	f000 fdcf 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 80017c8:	e026      	b.n	8001818 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM7)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_TIM_Base_MspInit+0xc4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d10e      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 80017d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 80017da:	2120      	movs	r1, #32
 80017dc:	430a      	orrs	r2, r1
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2012      	movs	r0, #18
 80017e6:	f000 fda9 	bl	800233c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017ea:	2012      	movs	r0, #18
 80017ec:	f000 fdbb 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 80017f0:	e012      	b.n	8001818 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_TIM_Base_MspInit+0xc8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d10d      	bne.n	8001818 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 80017fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_TIM_Base_MspInit+0xb8>)
 8001802:	2104      	movs	r1, #4
 8001804:	430a      	orrs	r2, r1
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2014      	movs	r0, #20
 800180e:	f000 fd95 	bl	800233c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001812:	2014      	movs	r0, #20
 8001814:	f000 fda7 	bl	8002366 <HAL_NVIC_EnableIRQ>
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	40000400 	.word	0x40000400
 8001828:	40001000 	.word	0x40001000
 800182c:	40001400 	.word	0x40001400
 8001830:	40010800 	.word	0x40010800

08001834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	240c      	movs	r4, #12
 800183e:	193b      	adds	r3, r7, r4
 8001840:	0018      	movs	r0, r3
 8001842:	2314      	movs	r3, #20
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f008 ffb7 	bl	800a7ba <memset>
  if(htim->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	05db      	lsls	r3, r3, #23
 8001854:	429a      	cmp	r2, r3
 8001856:	d122      	bne.n	800189e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_TIM_MspPostInit+0x74>)
 800185a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_TIM_MspPostInit+0x74>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_TIM_MspPostInit+0x74>)
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001870:	0021      	movs	r1, r4
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2220      	movs	r2, #32
 8001876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2202      	movs	r2, #2
 800187c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2205      	movs	r2, #5
 800188e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	187a      	adds	r2, r7, r1
 8001892:	23a0      	movs	r3, #160	; 0xa0
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fd81 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b009      	add	sp, #36	; 0x24
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8ee 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <TIM6_DAC_IRQHandler+0x14>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f003 fe74 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	2000068c 	.word	0x2000068c

080018f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <TIM7_IRQHandler+0x14>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f003 fe68 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	200006cc 	.word	0x200006cc

0800190c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <TIM21_IRQHandler+0x14>)
 8001912:	0018      	movs	r0, r3
 8001914:	f003 fe5c 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	2000070c 	.word	0x2000070c

08001924 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <USB_IRQHandler+0x14>)
 800192a:	0018      	movs	r0, r3
 800192c:	f001 f816 	bl	800295c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20001408 	.word	0x20001408

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f008 fef2 	bl	800a754 <__errno>
 8001970:	0003      	movs	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	2301      	movs	r3, #1
 8001978:	425b      	negs	r3, r3
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	18d2      	adds	r2, r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b006      	add	sp, #24
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20005000 	.word	0x20005000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000768 	.word	0x20000768
 80019a4:	20001930 	.word	0x20001930

080019a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80019b6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b8:	f7ff fff6 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f008 febd 	bl	800a760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff f8bd 	bl	8000b64 <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
   ldr   r0, =_estack
 80019ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 80019f8:	0800b25c 	.word	0x0800b25c
  ldr r2, =_sbss
 80019fc:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8001a00:	2000192c 	.word	0x2000192c

08001a04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_COMP_IRQHandler>
	...

08001a08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x3c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Init+0x3c>)
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f811 	bl	8001a48 <HAL_InitTick>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e001      	b.n	8001a36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a32:	f7ff fe49 	bl	80016c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_InitTick+0x60>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0019      	movs	r1, r3
 8001a5a:	23fa      	movs	r3, #250	; 0xfa
 8001a5c:	0098      	lsls	r0, r3, #2
 8001a5e:	f7fe fb5d 	bl	800011c <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	0019      	movs	r1, r3
 8001a66:	0020      	movs	r0, r4
 8001a68:	f7fe fb58 	bl	800011c <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fc89 	bl	8002386 <HAL_SYSTICK_Config>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e00f      	b.n	8001a9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d80b      	bhi.n	8001a9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	2301      	movs	r3, #1
 8001a86:	425b      	negs	r3, r3
 8001a88:	2200      	movs	r2, #0
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 fc56 	bl	800233c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_InitTick+0x64>)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b003      	add	sp, #12
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	200002dc 	.word	0x200002dc
 8001aa8:	200002e4 	.word	0x200002e4
 8001aac:	200002e0 	.word	0x200002e0

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	18d2      	adds	r2, r2, r3
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	200002e4 	.word	0x200002e4
 8001ad0:	2000076c 	.word	0x2000076c

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	2000076c 	.word	0x2000076c

08001ae8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e159      	b.n	8001dae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2250      	movs	r2, #80	; 0x50
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fdec 	bl	80016f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b10      	cmp	r3, #16
 8001b22:	d005      	beq.n	8001b30 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b2e:	d00b      	beq.n	8001b48 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	2210      	movs	r2, #16
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2250      	movs	r2, #80	; 0x50
 8001b40:	2100      	movs	r1, #0
 8001b42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e132      	b.n	8001dae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	4a9a      	ldr	r2, [pc, #616]	; (8001db8 <HAL_ADC_Init+0x2d0>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2202      	movs	r2, #2
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d108      	bne.n	8001b78 <HAL_ADC_Init+0x90>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_Init+0x90>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_ADC_Init+0x92>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d149      	bne.n	8001c12 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d00b      	beq.n	8001ba2 <HAL_ADC_Init+0xba>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	05db      	lsls	r3, r3, #23
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d005      	beq.n	8001ba2 <HAL_ADC_Init+0xba>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d111      	bne.n	8001bc6 <HAL_ADC_Init+0xde>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	0892      	lsrs	r2, r2, #2
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6919      	ldr	r1, [r3, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	e014      	b.n	8001bf0 <HAL_ADC_Init+0x108>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	0892      	lsrs	r2, r2, #2
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	4b79      	ldr	r3, [pc, #484]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001bdc:	4978      	ldr	r1, [pc, #480]	; (8001dc0 <HAL_ADC_Init+0x2d8>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4b74      	ldr	r3, [pc, #464]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2118      	movs	r1, #24
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c12:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001c18:	496a      	ldr	r1, [pc, #424]	; (8001dc4 <HAL_ADC_Init+0x2dc>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	065a      	lsls	r2, r3, #25
 8001c28:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <HAL_ADC_Init+0x2d4>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d108      	bne.n	8001c4e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0549      	lsls	r1, r1, #21
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	495b      	ldr	r1, [pc, #364]	; (8001dc8 <HAL_ADC_Init+0x2e0>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68d9      	ldr	r1, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_Init+0x18c>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_Init+0x18e>
 8001c74:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c76:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2020      	movs	r0, #32
 8001c7c:	5c1b      	ldrb	r3, [r3, r0]
 8001c7e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c80:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	202c      	movs	r0, #44	; 0x2c
 8001c86:	5c1b      	ldrb	r3, [r3, r0]
 8001c88:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c8a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c90:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ca0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	23c2      	movs	r3, #194	; 0xc2
 8001cb0:	33ff      	adds	r3, #255	; 0xff
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d00b      	beq.n	8001cce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2221      	movs	r2, #33	; 0x21
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11a      	bne.n	8001d0e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0249      	lsls	r1, r1, #9
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	e00b      	b.n	8001d0e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	2201      	movs	r2, #1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d11f      	bne.n	8001d56 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	492a      	ldr	r1, [pc, #168]	; (8001dcc <HAL_ADC_Init+0x2e4>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d34:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001d3a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	e00e      	b.n	8001d74 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2107      	movs	r1, #7
 8001d80:	438a      	bics	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6959      	ldr	r1, [r3, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	2203      	movs	r2, #3
 8001da2:	4393      	bics	r3, r2
 8001da4:	2201      	movs	r2, #1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	fffffefd 	.word	0xfffffefd
 8001dbc:	40012708 	.word	0x40012708
 8001dc0:	ffc3ffff 	.word	0xffc3ffff
 8001dc4:	fdffffff 	.word	0xfdffffff
 8001dc8:	fffe0219 	.word	0xfffe0219
 8001dcc:	fffffc03 	.word	0xfffffc03

08001dd0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2204      	movs	r2, #4
 8001de8:	4013      	ands	r3, r2
 8001dea:	d138      	bne.n	8001e5e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2250      	movs	r2, #80	; 0x50
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Start+0x2a>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e038      	b.n	8001e6c <HAL_ADC_Start+0x9c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2250      	movs	r2, #80	; 0x50
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d007      	beq.n	8001e1a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	18fc      	adds	r4, r7, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f95f 	bl	80020d4 <ADC_Enable>
 8001e16:	0003      	movs	r3, r0
 8001e18:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d120      	bne.n	8001e66 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_ADC_Start+0xa4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	0052      	lsls	r2, r2, #1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2250      	movs	r2, #80	; 0x50
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	221c      	movs	r2, #28
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2104      	movs	r1, #4
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b005      	add	sp, #20
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	fffff0fe 	.word	0xfffff0fe

08001e78 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d102      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e92:	2308      	movs	r3, #8
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e014      	b.n	8001ec2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10b      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	2220      	movs	r2, #32
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2250      	movs	r2, #80	; 0x50
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e072      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ec2:	f7ff fe07 	bl	8001ad4 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001eca:	e01f      	b.n	8001f0c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	d01c      	beq.n	8001f0c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_ADC_PollForConversion+0x70>
 8001ed8:	f7ff fdfc 	bl	8001ad4 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d211      	bcs.n	8001f0c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	2204      	movs	r2, #4
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2250      	movs	r2, #80	; 0x50
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e04b      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	d0d9      	beq.n	8001ecc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d12e      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d129      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2208      	movs	r2, #8
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d122      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2204      	movs	r2, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d110      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	210c      	movs	r1, #12
 8001f64:	438a      	bics	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_ADC_PollForConversion+0x134>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2201      	movs	r2, #1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
 8001f78:	e00b      	b.n	8001f92 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	2220      	movs	r2, #32
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	fffffefe 	.word	0xfffffefe

08001fb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2250      	movs	r2, #80	; 0x50
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x18>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e06c      	b.n	80020ba <HAL_ADC_ConfigChannel+0xf2>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2250      	movs	r2, #80	; 0x50
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d00b      	beq.n	800200c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2250      	movs	r2, #80	; 0x50
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e056      	b.n	80020ba <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <HAL_ADC_ConfigChannel+0xfc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d028      	beq.n	8002068 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	035b      	lsls	r3, r3, #13
 8002022:	0b5a      	lsrs	r2, r3, #13
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	02db      	lsls	r3, r3, #11
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0409      	lsls	r1, r1, #16
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002046:	200a      	movs	r0, #10
 8002048:	f000 f8ac 	bl	80021a4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	4013      	ands	r3, r2
 8002056:	d02b      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	03c9      	lsls	r1, r1, #15
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e023      	b.n	80020b0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	035b      	lsls	r3, r3, #13
 8002074:	0b5b      	lsrs	r3, r3, #13
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	400a      	ands	r2, r1
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	02db      	lsls	r3, r3, #11
 8002088:	4013      	ands	r3, r2
 800208a:	d005      	beq.n	8002098 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_ADC_ConfigChannel+0x104>)
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	d005      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_ADC_ConfigChannel+0x100>)
 80020aa:	4909      	ldr	r1, [pc, #36]	; (80020d0 <HAL_ADC_ConfigChannel+0x108>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2250      	movs	r2, #80	; 0x50
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	00001001 	.word	0x00001001
 80020c8:	40012708 	.word	0x40012708
 80020cc:	ff7fffff 	.word	0xff7fffff
 80020d0:	ffbfffff 	.word	0xffbfffff

080020d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <ADC_Enable+0x2c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <ADC_Enable+0x2c>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <ADC_Enable+0x2e>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d146      	bne.n	8002194 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <ADC_Enable+0xcc>)
 800210e:	4013      	ands	r3, r2
 8002110:	d00d      	beq.n	800212e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	2210      	movs	r2, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	2201      	movs	r2, #1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e033      	b.n	8002196 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800213e:	2001      	movs	r0, #1
 8002140:	f000 f830 	bl	80021a4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002144:	f7ff fcc6 	bl	8001ad4 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214c:	e01b      	b.n	8002186 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800214e:	f7ff fcc1 	bl	8001ad4 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b0a      	cmp	r3, #10
 800215a:	d914      	bls.n	8002186 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	4013      	ands	r3, r2
 8002166:	2b01      	cmp	r3, #1
 8002168:	d00d      	beq.n	8002186 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	2210      	movs	r2, #16
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	2201      	movs	r2, #1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e007      	b.n	8002196 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	2b01      	cmp	r3, #1
 8002192:	d1dc      	bne.n	800214e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	80000017 	.word	0x80000017

080021a4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <ADC_DelayMicroSecond+0x38>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	490b      	ldr	r1, [pc, #44]	; (80021e0 <ADC_DelayMicroSecond+0x3c>)
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fd ffb2 	bl	800011c <__udivsi3>
 80021b8:	0003      	movs	r3, r0
 80021ba:	001a      	movs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4353      	muls	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80021c2:	e002      	b.n	80021ca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <ADC_DelayMicroSecond+0x20>
  }
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	200002dc 	.word	0x200002dc
 80021e0:	000f4240 	.word	0x000f4240

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	0002      	movs	r2, r0
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b7f      	cmp	r3, #127	; 0x7f
 80021f6:	d809      	bhi.n	800220c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	001a      	movs	r2, r3
 80021fe:	231f      	movs	r3, #31
 8002200:	401a      	ands	r2, r3
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_EnableIRQ+0x30>)
 8002204:	2101      	movs	r1, #1
 8002206:	4091      	lsls	r1, r2
 8002208:	000a      	movs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
  }
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	0002      	movs	r2, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b7f      	cmp	r3, #127	; 0x7f
 800222c:	d828      	bhi.n	8002280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <__NVIC_SetPriority+0xd4>)
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	33c0      	adds	r3, #192	; 0xc0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	589b      	ldr	r3, [r3, r2]
 800223e:	1dfa      	adds	r2, r7, #7
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	0011      	movs	r1, r2
 8002244:	2203      	movs	r2, #3
 8002246:	400a      	ands	r2, r1
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	21ff      	movs	r1, #255	; 0xff
 800224c:	4091      	lsls	r1, r2
 800224e:	000a      	movs	r2, r1
 8002250:	43d2      	mvns	r2, r2
 8002252:	401a      	ands	r2, r3
 8002254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	401a      	ands	r2, r3
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	2303      	movs	r3, #3
 8002266:	4003      	ands	r3, r0
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226c:	481f      	ldr	r0, [pc, #124]	; (80022ec <__NVIC_SetPriority+0xd4>)
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b25b      	sxtb	r3, r3
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	430a      	orrs	r2, r1
 8002278:	33c0      	adds	r3, #192	; 0xc0
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800227e:	e031      	b.n	80022e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <__NVIC_SetPriority+0xd8>)
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	0019      	movs	r1, r3
 8002288:	230f      	movs	r3, #15
 800228a:	400b      	ands	r3, r1
 800228c:	3b08      	subs	r3, #8
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3306      	adds	r3, #6
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	3304      	adds	r3, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1dfa      	adds	r2, r7, #7
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	0011      	movs	r1, r2
 80022a0:	2203      	movs	r2, #3
 80022a2:	400a      	ands	r2, r1
 80022a4:	00d2      	lsls	r2, r2, #3
 80022a6:	21ff      	movs	r1, #255	; 0xff
 80022a8:	4091      	lsls	r1, r2
 80022aa:	000a      	movs	r2, r1
 80022ac:	43d2      	mvns	r2, r2
 80022ae:	401a      	ands	r2, r3
 80022b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	401a      	ands	r2, r3
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	0018      	movs	r0, r3
 80022c0:	2303      	movs	r3, #3
 80022c2:	4003      	ands	r3, r0
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <__NVIC_SetPriority+0xd8>)
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	001c      	movs	r4, r3
 80022d0:	230f      	movs	r3, #15
 80022d2:	4023      	ands	r3, r4
 80022d4:	3b08      	subs	r3, #8
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	430a      	orrs	r2, r1
 80022da:	3306      	adds	r3, #6
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	18c3      	adds	r3, r0, r3
 80022e0:	3304      	adds	r3, #4
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b003      	add	sp, #12
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	045b      	lsls	r3, r3, #17
 8002304:	429a      	cmp	r2, r3
 8002306:	d301      	bcc.n	800230c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002308:	2301      	movs	r3, #1
 800230a:	e010      	b.n	800232e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <SysTick_Config+0x44>)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	3a01      	subs	r2, #1
 8002312:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002314:	2301      	movs	r3, #1
 8002316:	425b      	negs	r3, r3
 8002318:	2103      	movs	r1, #3
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff ff7c 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x44>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x44>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	210f      	movs	r1, #15
 8002348:	187b      	adds	r3, r7, r1
 800234a:	1c02      	adds	r2, r0, #0
 800234c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	187b      	adds	r3, r7, r1
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b25b      	sxtb	r3, r3
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	0002      	movs	r2, r0
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b25b      	sxtb	r3, r3
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff ff33 	bl	80021e4 <__NVIC_EnableIRQ>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff ffaf 	bl	80022f4 <SysTick_Config>
 8002396:	0003      	movs	r3, r0
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023b6:	e155      	b.n	8002664 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4091      	lsls	r1, r2
 80023c2:	000a      	movs	r2, r1
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d100      	bne.n	80023d0 <HAL_GPIO_Init+0x30>
 80023ce:	e146      	b.n	800265e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d005      	beq.n	80023e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d130      	bne.n	800244a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	409a      	lsls	r2, r3
 80023f6:	0013      	movs	r3, r2
 80023f8:	43da      	mvns	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241e:	2201      	movs	r2, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	2201      	movs	r2, #1
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	4013      	ands	r3, r2
 8002452:	2b03      	cmp	r3, #3
 8002454:	d017      	beq.n	8002486 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	4013      	ands	r3, r2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d123      	bne.n	80024da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	58d3      	ldr	r3, [r2, r3]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2207      	movs	r2, #7
 80024a4:	4013      	ands	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	43da      	mvns	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2107      	movs	r1, #7
 80024be:	400b      	ands	r3, r1
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	6939      	ldr	r1, [r7, #16]
 80024d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	401a      	ands	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4013      	ands	r3, r2
 8002518:	d100      	bne.n	800251c <HAL_GPIO_Init+0x17c>
 800251a:	e0a0      	b.n	800265e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_GPIO_Init+0x2dc>)
 800251e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002520:	4b56      	ldr	r3, [pc, #344]	; (800267c <HAL_GPIO_Init+0x2dc>)
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002528:	4a55      	ldr	r2, [pc, #340]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2203      	movs	r2, #3
 800253a:	4013      	ands	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	409a      	lsls	r2, r3
 8002542:	0013      	movs	r3, r2
 8002544:	43da      	mvns	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	23a0      	movs	r3, #160	; 0xa0
 8002550:	05db      	lsls	r3, r3, #23
 8002552:	429a      	cmp	r2, r3
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x1f6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_GPIO_Init+0x2e4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x1f2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_GPIO_Init+0x2e8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x1ee>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_GPIO_Init+0x2ec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x1ea>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a47      	ldr	r2, [pc, #284]	; (8002690 <HAL_GPIO_Init+0x2f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x1e6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a46      	ldr	r2, [pc, #280]	; (8002694 <HAL_GPIO_Init+0x2f4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x1e2>
 800257e:	2305      	movs	r3, #5
 8002580:	e00a      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002582:	2306      	movs	r3, #6
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002586:	2304      	movs	r3, #4
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x1f8>
 8002596:	2300      	movs	r3, #0
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	2103      	movs	r1, #3
 800259c:	400a      	ands	r2, r1
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a8:	4935      	ldr	r1, [pc, #212]	; (8002680 <HAL_GPIO_Init+0x2e0>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43da      	mvns	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	035b      	lsls	r3, r3, #13
 80025ce:	4013      	ands	r3, r2
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025da:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	4013      	ands	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43da      	mvns	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	029b      	lsls	r3, r3, #10
 8002622:	4013      	ands	r3, r2
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43da      	mvns	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	4013      	ands	r3, r2
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_GPIO_Init+0x2f8>)
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	40da      	lsrs	r2, r3
 800266c:	1e13      	subs	r3, r2, #0
 800266e:	d000      	beq.n	8002672 <HAL_GPIO_Init+0x2d2>
 8002670:	e6a2      	b.n	80023b8 <HAL_GPIO_Init+0x18>
  }
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b006      	add	sp, #24
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	40010000 	.word	0x40010000
 8002684:	50000400 	.word	0x50000400
 8002688:	50000800 	.word	0x50000800
 800268c:	50000c00 	.word	0x50000c00
 8002690:	50001000 	.word	0x50001000
 8002694:	50001c00 	.word	0x50001c00
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	000a      	movs	r2, r1
 80026a6:	1cbb      	adds	r3, r7, #2
 80026a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	1cba      	adds	r2, r7, #2
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	4013      	ands	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026b6:	230f      	movs	r3, #15
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	0008      	movs	r0, r1
 80026e0:	0011      	movs	r1, r2
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c02      	adds	r2, r0, #0
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	1c7b      	adds	r3, r7, #1
 80026ea:	1c0a      	adds	r2, r1, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ee:	1c7b      	adds	r3, r7, #1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80026fe:	e003      	b.n	8002708 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002700:	1cbb      	adds	r3, r7, #2
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af06      	add	r7, sp, #24
 8002716:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0f0      	b.n	8002904 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a79      	ldr	r2, [pc, #484]	; (800290c <HAL_PCD_Init+0x1fc>)
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	23aa      	movs	r3, #170	; 0xaa
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	2100      	movs	r1, #0
 8002736:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f007 fcb4 	bl	800a0a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_PCD_Init+0x1fc>)
 8002744:	2103      	movs	r1, #3
 8002746:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0018      	movs	r0, r3
 800274e:	f003 fccd 	bl	80060ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	230f      	movs	r3, #15
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e049      	b.n	80027f0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800275c:	200f      	movs	r0, #15
 800275e:	183b      	adds	r3, r7, r0
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	0013      	movs	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	189b      	adds	r3, r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	18cb      	adds	r3, r1, r3
 8002770:	3301      	adds	r3, #1
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002776:	183b      	adds	r3, r7, r0
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	0013      	movs	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	189b      	adds	r3, r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	183a      	adds	r2, r7, r0
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800278c:	183b      	adds	r3, r7, r0
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	0013      	movs	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	189b      	adds	r3, r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	18cb      	adds	r3, r1, r3
 800279e:	3303      	adds	r3, #3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	0013      	movs	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	18cb      	adds	r3, r1, r3
 80027b4:	3338      	adds	r3, #56	; 0x38
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	0013      	movs	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	189b      	adds	r3, r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	18cb      	adds	r3, r1, r3
 80027ca:	333c      	adds	r3, #60	; 0x3c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	0013      	movs	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	189b      	adds	r3, r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	18cb      	adds	r3, r1, r3
 80027e0:	3340      	adds	r3, #64	; 0x40
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	183b      	adds	r3, r7, r0
 80027ec:	3201      	adds	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	210f      	movs	r1, #15
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3ae      	bcc.n	800275c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e056      	b.n	80028b4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002806:	240f      	movs	r4, #15
 8002808:	193b      	adds	r3, r7, r4
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	236a      	movs	r3, #106	; 0x6a
 8002810:	33ff      	adds	r3, #255	; 0xff
 8002812:	0019      	movs	r1, r3
 8002814:	0013      	movs	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	189b      	adds	r3, r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	18c3      	adds	r3, r0, r3
 800281e:	185b      	adds	r3, r3, r1
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	23b4      	movs	r3, #180	; 0xb4
 800282c:	0059      	lsls	r1, r3, #1
 800282e:	0013      	movs	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	189b      	adds	r3, r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	18c3      	adds	r3, r0, r3
 8002838:	185b      	adds	r3, r3, r1
 800283a:	193a      	adds	r2, r7, r4
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002840:	193b      	adds	r3, r7, r4
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	236c      	movs	r3, #108	; 0x6c
 8002848:	33ff      	adds	r3, #255	; 0xff
 800284a:	0019      	movs	r1, r3
 800284c:	0013      	movs	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	189b      	adds	r3, r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	18c3      	adds	r3, r0, r3
 8002856:	185b      	adds	r3, r3, r1
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	23bc      	movs	r3, #188	; 0xbc
 8002864:	0059      	lsls	r1, r3, #1
 8002866:	0013      	movs	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	189b      	adds	r3, r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	18c3      	adds	r3, r0, r3
 8002870:	185b      	adds	r3, r3, r1
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	23be      	movs	r3, #190	; 0xbe
 800287e:	0059      	lsls	r1, r3, #1
 8002880:	0013      	movs	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	189b      	adds	r3, r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	18c3      	adds	r3, r0, r3
 800288a:	185b      	adds	r3, r3, r1
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	0059      	lsls	r1, r3, #1
 800289a:	0013      	movs	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	189b      	adds	r3, r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	18c3      	adds	r3, r0, r3
 80028a4:	185b      	adds	r3, r3, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	3201      	adds	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	230f      	movs	r3, #15
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3a1      	bcc.n	8002806 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	466a      	mov	r2, sp
 80028ca:	0011      	movs	r1, r2
 80028cc:	001a      	movs	r2, r3
 80028ce:	3210      	adds	r2, #16
 80028d0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80028d2:	c170      	stmia	r1!, {r4, r5, r6}
 80028d4:	ca30      	ldmia	r2!, {r4, r5}
 80028d6:	c130      	stmia	r1!, {r4, r5}
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 fc1f 	bl	8006120 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_PCD_Init+0x1fc>)
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d103      	bne.n	8002902 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 fd23 	bl	8004348 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b005      	add	sp, #20
 800290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290c:	000002a9 	.word	0x000002a9

08002910 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	23aa      	movs	r3, #170	; 0xaa
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_PCD_Start+0x18>
 8002924:	2302      	movs	r3, #2
 8002926:	e014      	b.n	8002952 <HAL_PCD_Start+0x42>
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	23aa      	movs	r3, #170	; 0xaa
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	2101      	movs	r1, #1
 8002930:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0018      	movs	r0, r3
 8002938:	f003 fbc2 	bl	80060c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0018      	movs	r0, r3
 8002942:	f005 fbc5 	bl	80080d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	23aa      	movs	r3, #170	; 0xaa
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	2100      	movs	r1, #0
 800294e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f005 fbc7 	bl	80080fc <USB_ReadInterrupts>
 800296e:	0003      	movs	r3, r0
 8002970:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4013      	ands	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fb62 	bl	8003048 <PCD_EP_ISR_Handler>

    return;
 8002984:	e11d      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4013      	ands	r3, r2
 800298e:	d015      	beq.n	80029bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2244      	movs	r2, #68	; 0x44
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	498a      	ldr	r1, [pc, #552]	; (8002bc8 <HAL_PCD_IRQHandler+0x26c>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	b291      	uxth	r1, r2
 80029a4:	2244      	movs	r2, #68	; 0x44
 80029a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f007 fbff 	bl	800a1ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2100      	movs	r1, #0
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f915 	bl	8002be4 <HAL_PCD_SetAddress>

    return;
 80029ba:	e102      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00c      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2244      	movs	r2, #68	; 0x44
 80029cc:	5a9b      	ldrh	r3, [r3, r2]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	497d      	ldr	r1, [pc, #500]	; (8002bcc <HAL_PCD_IRQHandler+0x270>)
 80029d6:	400a      	ands	r2, r1
 80029d8:	b291      	uxth	r1, r2
 80029da:	2244      	movs	r2, #68	; 0x44
 80029dc:	5299      	strh	r1, [r3, r2]

    return;
 80029de:	e0f0      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00c      	beq.n	8002a04 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2244      	movs	r2, #68	; 0x44
 80029f0:	5a9b      	ldrh	r3, [r3, r2]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4975      	ldr	r1, [pc, #468]	; (8002bd0 <HAL_PCD_IRQHandler+0x274>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	b291      	uxth	r1, r2
 80029fe:	2244      	movs	r2, #68	; 0x44
 8002a00:	5299      	strh	r1, [r3, r2]

    return;
 8002a02:	e0de      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	015b      	lsls	r3, r3, #5
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d038      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	5a9b      	ldrh	r3, [r3, r2]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	438a      	bics	r2, r1
 8002a20:	b291      	uxth	r1, r2
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	5a9b      	ldrh	r3, [r3, r2]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2108      	movs	r1, #8
 8002a36:	438a      	bics	r2, r1
 8002a38:	b291      	uxth	r1, r2
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	23b8      	movs	r3, #184	; 0xb8
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	5cd3      	ldrb	r3, [r2, r3]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d109      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	23b8      	movs	r3, #184	; 0xb8
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	2100      	movs	r1, #0
 8002a52:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2100      	movs	r1, #0
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f001 fc9f 	bl	800439c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f007 fbe5 	bl	800a230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2244      	movs	r2, #68	; 0x44
 8002a6c:	5a9b      	ldrh	r3, [r3, r2]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4957      	ldr	r1, [pc, #348]	; (8002bd4 <HAL_PCD_IRQHandler+0x278>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	b291      	uxth	r1, r2
 8002a7a:	2244      	movs	r2, #68	; 0x44
 8002a7c:	5299      	strh	r1, [r3, r2]

    return;
 8002a7e:	e0a0      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	d028      	beq.n	8002adc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	5a9b      	ldrh	r3, [r3, r2]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2108      	movs	r1, #8
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	b291      	uxth	r1, r2
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2244      	movs	r2, #68	; 0x44
 8002aa8:	5a9b      	ldrh	r3, [r3, r2]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4949      	ldr	r1, [pc, #292]	; (8002bd8 <HAL_PCD_IRQHandler+0x27c>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	b291      	uxth	r1, r2
 8002ab6:	2244      	movs	r2, #68	; 0x44
 8002ab8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	5a9b      	ldrh	r3, [r3, r2]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2104      	movs	r1, #4
 8002aca:	430a      	orrs	r2, r1
 8002acc:	b291      	uxth	r1, r2
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f007 fb8f 	bl	800a1f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ada:	e072      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d046      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2244      	movs	r2, #68	; 0x44
 8002aea:	5a9b      	ldrh	r3, [r3, r2]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	438a      	bics	r2, r1
 8002af6:	b291      	uxth	r1, r2
 8002af8:	2244      	movs	r2, #68	; 0x44
 8002afa:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	23b8      	movs	r3, #184	; 0xb8
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12f      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	5a9b      	ldrh	r3, [r3, r2]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2104      	movs	r1, #4
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	b291      	uxth	r1, r2
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	5a9b      	ldrh	r3, [r3, r2]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2108      	movs	r1, #8
 8002b30:	430a      	orrs	r2, r1
 8002b32:	b291      	uxth	r1, r2
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	23b8      	movs	r3, #184	; 0xb8
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	2101      	movs	r1, #1
 8002b40:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2254      	movs	r2, #84	; 0x54
 8002b48:	5a9b      	ldrh	r3, [r3, r2]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	223c      	movs	r2, #60	; 0x3c
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	23b9      	movs	r3, #185	; 0xb9
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 fc1b 	bl	800439c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b66:	e02c      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f007 fb44 	bl	800a1f8 <HAL_PCD_SuspendCallback>
    return;
 8002b70:	e027      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d010      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2244      	movs	r2, #68	; 0x44
 8002b82:	5a9b      	ldrh	r3, [r3, r2]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4914      	ldr	r1, [pc, #80]	; (8002bdc <HAL_PCD_IRQHandler+0x280>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	b291      	uxth	r1, r2
 8002b90:	2244      	movs	r2, #68	; 0x44
 8002b92:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f007 fafa 	bl	800a190 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b9c:	e011      	b.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2244      	movs	r2, #68	; 0x44
 8002bae:	5a9b      	ldrh	r3, [r3, r2]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_PCD_IRQHandler+0x284>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	b291      	uxth	r1, r2
 8002bbc:	2244      	movs	r2, #68	; 0x44
 8002bbe:	5299      	strh	r1, [r3, r2]

    return;
 8002bc0:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	fffffbff 	.word	0xfffffbff
 8002bcc:	ffffbfff 	.word	0xffffbfff
 8002bd0:	ffffdfff 	.word	0xffffdfff
 8002bd4:	ffffefff 	.word	0xffffefff
 8002bd8:	fffff7ff 	.word	0xfffff7ff
 8002bdc:	fffffdff 	.word	0xfffffdff
 8002be0:	fffffeff 	.word	0xfffffeff

08002be4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	000a      	movs	r2, r1
 8002bee:	1cfb      	adds	r3, r7, #3
 8002bf0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	23aa      	movs	r3, #170	; 0xaa
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_PCD_SetAddress+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e017      	b.n	8002c32 <HAL_PCD_SetAddress+0x4e>
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	23aa      	movs	r3, #170	; 0xaa
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	2101      	movs	r1, #1
 8002c0a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1cfa      	adds	r2, r7, #3
 8002c10:	2124      	movs	r1, #36	; 0x24
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	1cfb      	adds	r3, r7, #3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0019      	movs	r1, r3
 8002c20:	0010      	movs	r0, r2
 8002c22:	f005 fa41 	bl	80080a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	23aa      	movs	r3, #170	; 0xaa
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c3a:	b590      	push	{r4, r7, lr}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	000c      	movs	r4, r1
 8002c44:	0010      	movs	r0, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	1cfb      	adds	r3, r7, #3
 8002c4a:	1c22      	adds	r2, r4, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	003b      	movs	r3, r7
 8002c50:	1c02      	adds	r2, r0, #0
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	1c0a      	adds	r2, r1, #0
 8002c58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c5a:	230b      	movs	r3, #11
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	1cfb      	adds	r3, r7, #3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da0f      	bge.n	8002c8c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	1cfb      	adds	r3, r7, #3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	0013      	movs	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	705a      	strb	r2, [r3, #1]
 8002c8a:	e00f      	b.n	8002cac <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8c:	1cfb      	adds	r3, r7, #3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2207      	movs	r2, #7
 8002c92:	401a      	ands	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	189b      	adds	r3, r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	3369      	adds	r3, #105	; 0x69
 8002c9e:	33ff      	adds	r3, #255	; 0xff
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	18d3      	adds	r3, r2, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cac:	1cfb      	adds	r3, r7, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cba:	003b      	movs	r3, r7
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1cba      	adds	r2, r7, #2
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cca:	1cbb      	adds	r3, r7, #2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	23aa      	movs	r3, #170	; 0xaa
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_PCD_EP_Open+0xae>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e013      	b.n	8002d10 <HAL_PCD_EP_Open+0xd6>
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	23aa      	movs	r3, #170	; 0xaa
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	2101      	movs	r1, #1
 8002cf0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f003 fa38 	bl	8006170 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	23aa      	movs	r3, #170	; 0xaa
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	2100      	movs	r1, #0
 8002d08:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002d0a:	230b      	movs	r3, #11
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b005      	add	sp, #20
 8002d16:	bd90      	pop	{r4, r7, pc}

08002d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	000a      	movs	r2, r1
 8002d22:	1cfb      	adds	r3, r7, #3
 8002d24:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d26:	1cfb      	adds	r3, r7, #3
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0f      	bge.n	8002d50 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	1cfb      	adds	r3, r7, #3
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2207      	movs	r2, #7
 8002d36:	4013      	ands	r3, r2
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	0013      	movs	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	18d3      	adds	r3, r2, r3
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
 8002d4e:	e00f      	b.n	8002d70 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	1cfb      	adds	r3, r7, #3
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2207      	movs	r2, #7
 8002d56:	401a      	ands	r2, r3
 8002d58:	0013      	movs	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3369      	adds	r3, #105	; 0x69
 8002d62:	33ff      	adds	r3, #255	; 0xff
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	18d3      	adds	r3, r2, r3
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d70:	1cfb      	adds	r3, r7, #3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2207      	movs	r2, #7
 8002d76:	4013      	ands	r3, r2
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	23aa      	movs	r3, #170	; 0xaa
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_PCD_EP_Close+0x76>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e011      	b.n	8002db2 <HAL_PCD_EP_Close+0x9a>
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	23aa      	movs	r3, #170	; 0xaa
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	2101      	movs	r1, #1
 8002d96:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f003 fd87 	bl	80068b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	23aa      	movs	r3, #170	; 0xaa
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	2100      	movs	r1, #0
 8002dae:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	200b      	movs	r0, #11
 8002dc8:	183b      	adds	r3, r7, r0
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	0001      	movs	r1, r0
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3369      	adds	r3, #105	; 0x69
 8002de2:	33ff      	adds	r3, #255	; 0xff
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2207      	movs	r2, #7
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f003 ff0b 	bl	8006c34 <USB_EPStartXfer>

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	000a      	movs	r2, r1
 8002e32:	1cfb      	adds	r3, r7, #3
 8002e34:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e36:	1cfb      	adds	r3, r7, #3
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	23c2      	movs	r3, #194	; 0xc2
 8002e42:	0059      	lsls	r1, r3, #1
 8002e44:	0013      	movs	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	18c3      	adds	r3, r0, r3
 8002e4e:	185b      	adds	r3, r3, r1
 8002e50:	681b      	ldr	r3, [r3, #0]
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	200b      	movs	r0, #11
 8002e68:	183b      	adds	r3, r7, r0
 8002e6a:	1c0a      	adds	r2, r1, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4013      	ands	r3, r2
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	0013      	movs	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2224      	movs	r2, #36	; 0x24
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eac:	183b      	adds	r3, r7, r0
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f003 feb6 	bl	8006c34 <USB_EPStartXfer>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	000a      	movs	r2, r1
 8002edc:	1cfb      	adds	r3, r7, #3
 8002ede:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee0:	1cfb      	adds	r3, r7, #3
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d901      	bls.n	8002ef4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e046      	b.n	8002f82 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef4:	1cfb      	adds	r3, r7, #3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da0f      	bge.n	8002f1e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	1cfb      	adds	r3, r7, #3
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2207      	movs	r2, #7
 8002f04:	4013      	ands	r3, r2
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	0013      	movs	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	18d3      	adds	r3, r2, r3
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	705a      	strb	r2, [r3, #1]
 8002f1c:	e00d      	b.n	8002f3a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f1e:	1cfb      	adds	r3, r7, #3
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	0013      	movs	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	3369      	adds	r3, #105	; 0x69
 8002f2c:	33ff      	adds	r3, #255	; 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f40:	1cfb      	adds	r3, r7, #3
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2207      	movs	r2, #7
 8002f46:	4013      	ands	r3, r2
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	23aa      	movs	r3, #170	; 0xaa
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	5cd3      	ldrb	r3, [r2, r3]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_EP_SetStall+0x8c>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e011      	b.n	8002f82 <HAL_PCD_EP_SetStall+0xb0>
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	23aa      	movs	r3, #170	; 0xaa
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	2101      	movs	r1, #1
 8002f66:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f004 ff97 	bl	8007ea4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	23aa      	movs	r3, #170	; 0xaa
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	000a      	movs	r2, r1
 8002f94:	1cfb      	adds	r3, r7, #3
 8002f96:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f98:	1cfb      	adds	r3, r7, #3
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d901      	bls.n	8002fac <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e048      	b.n	800303e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fac:	1cfb      	adds	r3, r7, #3
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da0f      	bge.n	8002fd6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	1cfb      	adds	r3, r7, #3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2207      	movs	r2, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	18d3      	adds	r3, r2, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	705a      	strb	r2, [r3, #1]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	1cfb      	adds	r3, r7, #3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2207      	movs	r2, #7
 8002fdc:	401a      	ands	r2, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	3369      	adds	r3, #105	; 0x69
 8002fe8:	33ff      	adds	r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffc:	1cfb      	adds	r3, r7, #3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2207      	movs	r2, #7
 8003002:	4013      	ands	r3, r2
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	23aa      	movs	r3, #170	; 0xaa
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_PCD_EP_ClrStall+0x90>
 8003016:	2302      	movs	r3, #2
 8003018:	e011      	b.n	800303e <HAL_PCD_EP_ClrStall+0xb4>
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	23aa      	movs	r3, #170	; 0xaa
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	2101      	movs	r1, #1
 8003022:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f004 ff89 	bl	8007f44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	23aa      	movs	r3, #170	; 0xaa
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	2100      	movs	r1, #0
 800303a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b096      	sub	sp, #88	; 0x58
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003050:	f000 fbec 	bl	800382c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	204e      	movs	r0, #78	; 0x4e
 800305a:	183b      	adds	r3, r7, r0
 800305c:	2144      	movs	r1, #68	; 0x44
 800305e:	5a52      	ldrh	r2, [r2, r1]
 8003060:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003062:	183b      	adds	r3, r7, r0
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	244d      	movs	r4, #77	; 0x4d
 800306a:	193b      	adds	r3, r7, r4
 800306c:	210f      	movs	r1, #15
 800306e:	400a      	ands	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003072:	193b      	adds	r3, r7, r4
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d000      	beq.n	800307c <PCD_EP_ISR_Handler+0x34>
 800307a:	e18f      	b.n	800339c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800307c:	183b      	adds	r3, r7, r0
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	4013      	ands	r3, r2
 8003084:	d155      	bne.n	8003132 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29a      	uxth	r2, r3
 800308e:	200e      	movs	r0, #14
 8003090:	183b      	adds	r3, r7, r0
 8003092:	49bb      	ldr	r1, [pc, #748]	; (8003380 <PCD_EP_ISR_Handler+0x338>)
 8003094:	400a      	ands	r2, r1
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	183a      	adds	r2, r7, r0
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	49b8      	ldr	r1, [pc, #736]	; (8003384 <PCD_EP_ISR_Handler+0x33c>)
 80030a2:	430a      	orrs	r2, r1
 80030a4:	b292      	uxth	r2, r2
 80030a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3328      	adds	r3, #40	; 0x28
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2250      	movs	r2, #80	; 0x50
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	001a      	movs	r2, r3
 80030ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	18d2      	adds	r2, r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	4aaf      	ldr	r2, [pc, #700]	; (8003388 <PCD_EP_ISR_Handler+0x340>)
 80030ca:	4694      	mov	ip, r2
 80030cc:	4463      	add	r3, ip
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	059b      	lsls	r3, r3, #22
 80030d2:	0d9a      	lsrs	r2, r3, #22
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	18d2      	adds	r2, r2, r3
 80030e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2100      	movs	r1, #0
 80030ea:	0018      	movs	r0, r3
 80030ec:	f007 f832 	bl	800a154 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <PCD_EP_ISR_Handler+0xb8>
 80030fc:	f000 fb96 	bl	800382c <PCD_EP_ISR_Handler+0x7e4>
 8003100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <PCD_EP_ISR_Handler+0xc4>
 8003108:	f000 fb90 	bl	800382c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	4252      	negs	r2, r2
 8003118:	4313      	orrs	r3, r2
 800311a:	b2da      	uxtb	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	b291      	uxth	r1, r2
 8003122:	224c      	movs	r2, #76	; 0x4c
 8003124:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	; 0x24
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]
 800312e:	f000 fb7d 	bl	800382c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3369      	adds	r3, #105	; 0x69
 8003136:	33ff      	adds	r3, #255	; 0xff
 8003138:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	214a      	movs	r1, #74	; 0x4a
 8003140:	187b      	adds	r3, r7, r1
 8003142:	8812      	ldrh	r2, [r2, #0]
 8003144:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003146:	187b      	adds	r3, r7, r1
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d037      	beq.n	80031c2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2250      	movs	r2, #80	; 0x50
 8003158:	5a9b      	ldrh	r3, [r3, r2]
 800315a:	b29b      	uxth	r3, r3
 800315c:	001a      	movs	r2, r3
 800315e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	18d2      	adds	r2, r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	18d3      	adds	r3, r2, r3
 800316c:	4a87      	ldr	r2, [pc, #540]	; (800338c <PCD_EP_ISR_Handler+0x344>)
 800316e:	4694      	mov	ip, r2
 8003170:	4463      	add	r3, ip
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	0d9a      	lsrs	r2, r3, #22
 8003178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	22ac      	movs	r2, #172	; 0xac
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	1899      	adds	r1, r3, r2
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003190:	b29b      	uxth	r3, r3
 8003192:	f005 f80a 	bl	80081aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29a      	uxth	r2, r3
 800319e:	2010      	movs	r0, #16
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	497b      	ldr	r1, [pc, #492]	; (8003390 <PCD_EP_ISR_Handler+0x348>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	183a      	adds	r2, r7, r0
 80031ae:	8812      	ldrh	r2, [r2, #0]
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	430a      	orrs	r2, r1
 80031b4:	b292      	uxth	r2, r2
 80031b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f006 ff94 	bl	800a0e8 <HAL_PCD_SetupStageCallback>
 80031c0:	e334      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031c2:	234a      	movs	r3, #74	; 0x4a
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	5e9b      	ldrsh	r3, [r3, r2]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db00      	blt.n	80031d0 <PCD_EP_ISR_Handler+0x188>
 80031ce:	e32d      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	201e      	movs	r0, #30
 80031da:	183b      	adds	r3, r7, r0
 80031dc:	496c      	ldr	r1, [pc, #432]	; (8003390 <PCD_EP_ISR_Handler+0x348>)
 80031de:	400a      	ands	r2, r1
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	183a      	adds	r2, r7, r0
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	430a      	orrs	r2, r1
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2250      	movs	r2, #80	; 0x50
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	001a      	movs	r2, r3
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	18d2      	adds	r2, r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	4a5f      	ldr	r2, [pc, #380]	; (800338c <PCD_EP_ISR_Handler+0x344>)
 800320e:	4694      	mov	ip, r2
 8003210:	4463      	add	r3, ip
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	059b      	lsls	r3, r3, #22
 8003216:	0d9a      	lsrs	r2, r3, #22
 8003218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01a      	beq.n	800325a <PCD_EP_ISR_Handler+0x212>
 8003224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003232:	6959      	ldr	r1, [r3, #20]
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800323c:	b29b      	uxth	r3, r3
 800323e:	f004 ffb4 	bl	80081aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	18d2      	adds	r2, r2, r3
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2100      	movs	r1, #0
 8003254:	0018      	movs	r0, r3
 8003256:	f006 ff5c 	bl	800a112 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	214a      	movs	r1, #74	; 0x4a
 8003260:	187b      	adds	r3, r7, r1
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003266:	187b      	adds	r3, r7, r1
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4013      	ands	r3, r2
 8003270:	d000      	beq.n	8003274 <PCD_EP_ISR_Handler+0x22c>
 8003272:	e2db      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
 8003274:	187b      	adds	r3, r7, r1
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	23c0      	movs	r3, #192	; 0xc0
 800327a:	019b      	lsls	r3, r3, #6
 800327c:	401a      	ands	r2, r3
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	429a      	cmp	r2, r3
 8003284:	d100      	bne.n	8003288 <PCD_EP_ISR_Handler+0x240>
 8003286:	e2d1      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2250      	movs	r2, #80	; 0x50
 8003294:	5a9b      	ldrh	r3, [r3, r2]
 8003296:	b29b      	uxth	r3, r3
 8003298:	001a      	movs	r2, r3
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	189b      	adds	r3, r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <PCD_EP_ISR_Handler+0x344>)
 80032a4:	4694      	mov	ip, r2
 80032a6:	4463      	add	r3, ip
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	059b      	lsls	r3, r3, #22
 80032b2:	0d9b      	lsrs	r3, r3, #22
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b3e      	cmp	r3, #62	; 0x3e
 80032c0:	d91a      	bls.n	80032f8 <PCD_EP_ISR_Handler+0x2b0>
 80032c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	221f      	movs	r2, #31
 80032d0:	4013      	ands	r3, r2
 80032d2:	d102      	bne.n	80032da <PCD_EP_ISR_Handler+0x292>
 80032d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d6:	3b01      	subs	r3, #1
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <PCD_EP_ISR_Handler+0x33c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e023      	b.n	8003340 <PCD_EP_ISR_Handler+0x2f8>
 80032f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <PCD_EP_ISR_Handler+0x2ca>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <PCD_EP_ISR_Handler+0x33c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	e016      	b.n	8003340 <PCD_EP_ISR_Handler+0x2f8>
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	d002      	beq.n	800332a <PCD_EP_ISR_Handler+0x2e2>
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	3301      	adds	r3, #1
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29a      	uxth	r2, r3
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	b29b      	uxth	r3, r3
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	b29b      	uxth	r3, r3
 8003338:	4313      	orrs	r3, r2
 800333a:	b29a      	uxth	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29a      	uxth	r2, r3
 8003348:	2012      	movs	r0, #18
 800334a:	183b      	adds	r3, r7, r0
 800334c:	4911      	ldr	r1, [pc, #68]	; (8003394 <PCD_EP_ISR_Handler+0x34c>)
 800334e:	400a      	ands	r2, r1
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	183b      	adds	r3, r7, r0
 8003354:	183a      	adds	r2, r7, r0
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	0149      	lsls	r1, r1, #5
 800335c:	404a      	eors	r2, r1
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	183b      	adds	r3, r7, r0
 8003362:	183a      	adds	r2, r7, r0
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0189      	lsls	r1, r1, #6
 800336a:	404a      	eors	r2, r1
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	183a      	adds	r2, r7, r0
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <PCD_EP_ISR_Handler+0x350>)
 8003378:	430a      	orrs	r2, r1
 800337a:	b292      	uxth	r2, r2
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	e255      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
 8003380:	ffff8f0f 	.word	0xffff8f0f
 8003384:	ffff8000 	.word	0xffff8000
 8003388:	00000402 	.word	0x00000402
 800338c:	00000406 	.word	0x00000406
 8003390:	00000f8f 	.word	0x00000f8f
 8003394:	ffffbf8f 	.word	0xffffbf8f
 8003398:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	001a      	movs	r2, r3
 80033a2:	204d      	movs	r0, #77	; 0x4d
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	18d2      	adds	r2, r2, r3
 80033ac:	214a      	movs	r1, #74	; 0x4a
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2200      	movs	r2, #0
 80033b8:	5e9b      	ldrsh	r3, [r3, r2]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db00      	blt.n	80033c0 <PCD_EP_ISR_Handler+0x378>
 80033be:	e0fa      	b.n	80035b6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	2448      	movs	r4, #72	; 0x48
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	49d1      	ldr	r1, [pc, #836]	; (800371c <PCD_EP_ISR_Handler+0x6d4>)
 80033d8:	400a      	ands	r2, r1
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	18d3      	adds	r3, r2, r3
 80033ea:	193a      	adds	r2, r7, r4
 80033ec:	8812      	ldrh	r2, [r2, #0]
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	430a      	orrs	r2, r1
 80033f2:	b292      	uxth	r2, r2
 80033f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	0013      	movs	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	3369      	adds	r3, #105	; 0x69
 8003404:	33ff      	adds	r3, #255	; 0xff
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	18d3      	adds	r3, r2, r3
 800340a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340e:	7b1b      	ldrb	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d125      	bne.n	8003460 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2250      	movs	r2, #80	; 0x50
 800341a:	5a9b      	ldrh	r3, [r3, r2]
 800341c:	b29b      	uxth	r3, r3
 800341e:	001a      	movs	r2, r3
 8003420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	18d2      	adds	r2, r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	4abc      	ldr	r2, [pc, #752]	; (8003720 <PCD_EP_ISR_Handler+0x6d8>)
 8003430:	4694      	mov	ip, r2
 8003432:	4463      	add	r3, ip
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	2450      	movs	r4, #80	; 0x50
 8003438:	193b      	adds	r3, r7, r4
 800343a:	0592      	lsls	r2, r2, #22
 800343c:	0d92      	lsrs	r2, r2, #22
 800343e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003440:	193b      	adds	r3, r7, r4
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d100      	bne.n	800344a <PCD_EP_ISR_Handler+0x402>
 8003448:	e08d      	b.n	8003566 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	6959      	ldr	r1, [r3, #20]
 8003452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003454:	88da      	ldrh	r2, [r3, #6]
 8003456:	193b      	adds	r3, r7, r4
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f004 fea6 	bl	80081aa <USB_ReadPMA>
 800345e:	e082      	b.n	8003566 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d10c      	bne.n	8003482 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003468:	2350      	movs	r3, #80	; 0x50
 800346a:	18fc      	adds	r4, r7, r3
 800346c:	234a      	movs	r3, #74	; 0x4a
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f9ec 	bl	8003854 <HAL_PCD_EP_DB_Receive>
 800347c:	0003      	movs	r3, r0
 800347e:	8023      	strh	r3, [r4, #0]
 8003480:	e071      	b.n	8003566 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	001a      	movs	r2, r3
 8003488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29a      	uxth	r2, r3
 8003494:	2052      	movs	r0, #82	; 0x52
 8003496:	183b      	adds	r3, r7, r0
 8003498:	49a2      	ldr	r1, [pc, #648]	; (8003724 <PCD_EP_ISR_Handler+0x6dc>)
 800349a:	400a      	ands	r2, r1
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	001a      	movs	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18d3      	adds	r3, r2, r3
 80034ac:	183a      	adds	r2, r7, r0
 80034ae:	8812      	ldrh	r2, [r2, #0]
 80034b0:	499d      	ldr	r1, [pc, #628]	; (8003728 <PCD_EP_ISR_Handler+0x6e0>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	b292      	uxth	r2, r2
 80034b6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	001a      	movs	r2, r3
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	001a      	movs	r2, r3
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	01db      	lsls	r3, r3, #7
 80034d0:	4013      	ands	r3, r2
 80034d2:	d024      	beq.n	800351e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2250      	movs	r2, #80	; 0x50
 80034da:	5a9b      	ldrh	r3, [r3, r2]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	001a      	movs	r2, r3
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	18d2      	adds	r2, r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	4a8f      	ldr	r2, [pc, #572]	; (800372c <PCD_EP_ISR_Handler+0x6e4>)
 80034f0:	4694      	mov	ip, r2
 80034f2:	4463      	add	r3, ip
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	2450      	movs	r4, #80	; 0x50
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	0592      	lsls	r2, r2, #22
 80034fc:	0d92      	lsrs	r2, r2, #22
 80034fe:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003500:	193b      	adds	r3, r7, r4
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02e      	beq.n	8003566 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	6959      	ldr	r1, [r3, #20]
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	891a      	ldrh	r2, [r3, #8]
 8003514:	193b      	adds	r3, r7, r4
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	f004 fe47 	bl	80081aa <USB_ReadPMA>
 800351c:	e023      	b.n	8003566 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2250      	movs	r2, #80	; 0x50
 8003524:	5a9b      	ldrh	r3, [r3, r2]
 8003526:	b29b      	uxth	r3, r3
 8003528:	001a      	movs	r2, r3
 800352a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	18d2      	adds	r2, r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	4a79      	ldr	r2, [pc, #484]	; (8003720 <PCD_EP_ISR_Handler+0x6d8>)
 800353a:	4694      	mov	ip, r2
 800353c:	4463      	add	r3, ip
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	2450      	movs	r4, #80	; 0x50
 8003542:	193b      	adds	r3, r7, r4
 8003544:	0592      	lsls	r2, r2, #22
 8003546:	0d92      	lsrs	r2, r2, #22
 8003548:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800354a:	193b      	adds	r3, r7, r4
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	6959      	ldr	r1, [r3, #20]
 800355a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355c:	895a      	ldrh	r2, [r3, #10]
 800355e:	193b      	adds	r3, r7, r4
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f004 fe22 	bl	80081aa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	2150      	movs	r1, #80	; 0x50
 800356c:	187b      	adds	r3, r7, r1
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	18d2      	adds	r2, r2, r3
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	187b      	adds	r3, r7, r1
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	18d2      	adds	r2, r2, r3
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <PCD_EP_ISR_Handler+0x550>
 800358c:	187b      	adds	r3, r7, r1
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d207      	bcs.n	80035a8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f006 fdb6 	bl	800a112 <HAL_PCD_DataOutStageCallback>
 80035a6:	e006      	b.n	80035b6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f003 fb3f 	bl	8006c34 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035b6:	244a      	movs	r4, #74	; 0x4a
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	4013      	ands	r3, r2
 80035c0:	d100      	bne.n	80035c4 <PCD_EP_ISR_Handler+0x57c>
 80035c2:	e133      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80035c4:	204d      	movs	r0, #77	; 0x4d
 80035c6:	183b      	adds	r3, r7, r0
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	0013      	movs	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	18d3      	adds	r3, r2, r3
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	001a      	movs	r2, r3
 80035e0:	183b      	adds	r3, r7, r0
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	2542      	movs	r5, #66	; 0x42
 80035ee:	197b      	adds	r3, r7, r5
 80035f0:	494f      	ldr	r1, [pc, #316]	; (8003730 <PCD_EP_ISR_Handler+0x6e8>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	001a      	movs	r2, r3
 80035fc:	183b      	adds	r3, r7, r0
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	18d3      	adds	r3, r2, r3
 8003604:	197a      	adds	r2, r7, r5
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	494a      	ldr	r1, [pc, #296]	; (8003734 <PCD_EP_ISR_Handler+0x6ec>)
 800360a:	430a      	orrs	r2, r1
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d000      	beq.n	800361a <PCD_EP_ISR_Handler+0x5d2>
 8003618:	e0af      	b.n	800377a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	7b1b      	ldrb	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d100      	bne.n	800362a <PCD_EP_ISR_Handler+0x5e2>
 8003628:	e09f      	b.n	800376a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800362a:	193b      	adds	r3, r7, r4
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	4013      	ands	r3, r2
 8003632:	d046      	beq.n	80036c2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d125      	bne.n	8003688 <PCD_EP_ISR_Handler+0x640>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2250      	movs	r2, #80	; 0x50
 8003648:	5a9b      	ldrh	r3, [r3, r2]
 800364a:	b29b      	uxth	r3, r3
 800364c:	001a      	movs	r2, r3
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	189b      	adds	r3, r3, r2
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	00da      	lsls	r2, r3, #3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	4a33      	ldr	r2, [pc, #204]	; (800372c <PCD_EP_ISR_Handler+0x6e4>)
 8003660:	4694      	mov	ip, r2
 8003662:	4463      	add	r3, ip
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	059b      	lsls	r3, r3, #22
 800366e:	0d9b      	lsrs	r3, r3, #22
 8003670:	b29a      	uxth	r2, r3
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <PCD_EP_ISR_Handler+0x6ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	b29a      	uxth	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e070      	b.n	800376a <PCD_EP_ISR_Handler+0x722>
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d16c      	bne.n	800376a <PCD_EP_ISR_Handler+0x722>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2250      	movs	r2, #80	; 0x50
 800369c:	5a9b      	ldrh	r3, [r3, r2]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	001a      	movs	r2, r3
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00da      	lsls	r2, r3, #3
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <PCD_EP_ISR_Handler+0x6e4>)
 80036b4:	4694      	mov	ip, r2
 80036b6:	4463      	add	r3, ip
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	2200      	movs	r2, #0
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	e053      	b.n	800376a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d133      	bne.n	8003738 <PCD_EP_ISR_Handler+0x6f0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2250      	movs	r2, #80	; 0x50
 80036dc:	5a9b      	ldrh	r3, [r3, r2]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	001a      	movs	r2, r3
 80036e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
 80036e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	00da      	lsls	r2, r3, #3
 80036ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <PCD_EP_ISR_Handler+0x6d8>)
 80036f4:	4694      	mov	ip, r2
 80036f6:	4463      	add	r3, ip
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	059b      	lsls	r3, r3, #22
 8003702:	0d9b      	lsrs	r3, r3, #22
 8003704:	b29a      	uxth	r2, r3
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <PCD_EP_ISR_Handler+0x6ec>)
 8003712:	4313      	orrs	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e026      	b.n	800376a <PCD_EP_ISR_Handler+0x722>
 800371c:	00000f8f 	.word	0x00000f8f
 8003720:	00000406 	.word	0x00000406
 8003724:	ffff8f8f 	.word	0xffff8f8f
 8003728:	ffff80c0 	.word	0xffff80c0
 800372c:	00000402 	.word	0x00000402
 8003730:	ffff8f0f 	.word	0xffff8f0f
 8003734:	ffff8000 	.word	0xffff8000
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d114      	bne.n	800376a <PCD_EP_ISR_Handler+0x722>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2250      	movs	r2, #80	; 0x50
 8003746:	5a9b      	ldrh	r3, [r3, r2]
 8003748:	b29b      	uxth	r3, r3
 800374a:	001a      	movs	r2, r3
 800374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374e:	189b      	adds	r3, r3, r2
 8003750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	00da      	lsls	r2, r3, #3
 8003758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	4a3b      	ldr	r2, [pc, #236]	; (800384c <PCD_EP_ISR_Handler+0x804>)
 800375e:	4694      	mov	ip, r2
 8003760:	4463      	add	r3, ip
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	2200      	movs	r2, #0
 8003768:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f006 fcee 	bl	800a154 <HAL_PCD_DataInStageCallback>
 8003778:	e058      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800377a:	234a      	movs	r3, #74	; 0x4a
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	881a      	ldrh	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d149      	bne.n	800381c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2250      	movs	r2, #80	; 0x50
 800378e:	5a9b      	ldrh	r3, [r3, r2]
 8003790:	b29b      	uxth	r3, r3
 8003792:	001a      	movs	r2, r3
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	18d2      	adds	r2, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <PCD_EP_ISR_Handler+0x808>)
 80037a4:	4694      	mov	ip, r2
 80037a6:	4463      	add	r3, ip
 80037a8:	881a      	ldrh	r2, [r3, #0]
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	0592      	lsls	r2, r2, #22
 80037b0:	0d92      	lsrs	r2, r2, #22
 80037b2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d907      	bls.n	80037d0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	1ad2      	subs	r2, r2, r3
 80037ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037cc:	619a      	str	r2, [r3, #24]
 80037ce:	e002      	b.n	80037d6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80037d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0011      	movs	r1, r2
 80037e6:	0018      	movs	r0, r3
 80037e8:	f006 fcb4 	bl	800a154 <HAL_PCD_DataInStageCallback>
 80037ec:	e01e      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	18d2      	adds	r2, r2, r3
 80037fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	187b      	adds	r3, r7, r1
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	18d2      	adds	r2, r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f003 fa0d 	bl	8006c34 <USB_EPStartXfer>
 800381a:	e007      	b.n	800382c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800381c:	234a      	movs	r3, #74	; 0x4a
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f930 	bl	8003a8c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2244      	movs	r2, #68	; 0x44
 8003832:	5a9b      	ldrh	r3, [r3, r2]
 8003834:	b29b      	uxth	r3, r3
 8003836:	b21b      	sxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	da01      	bge.n	8003840 <PCD_EP_ISR_Handler+0x7f8>
 800383c:	f7ff fc0a 	bl	8003054 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b016      	add	sp, #88	; 0x58
 8003848:	bdb0      	pop	{r4, r5, r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	00000406 	.word	0x00000406
 8003850:	00000402 	.word	0x00000402

08003854 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	1dbb      	adds	r3, r7, #6
 8003860:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	01db      	lsls	r3, r3, #7
 800386a:	4013      	ands	r3, r2
 800386c:	d100      	bne.n	8003870 <HAL_PCD_EP_DB_Receive+0x1c>
 800386e:	e07d      	b.n	800396c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2250      	movs	r2, #80	; 0x50
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	b29b      	uxth	r3, r3
 800387a:	001a      	movs	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	18d2      	adds	r2, r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_PCD_EP_DB_Receive+0x220>)
 800388c:	4694      	mov	ip, r2
 800388e:	4463      	add	r3, ip
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	211a      	movs	r1, #26
 8003894:	187b      	adds	r3, r7, r1
 8003896:	0592      	lsls	r2, r2, #22
 8003898:	0d92      	lsrs	r2, r2, #22
 800389a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d307      	bcc.n	80038b8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	619a      	str	r2, [r3, #24]
 80038b6:	e002      	b.n	80038be <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d121      	bne.n	800390a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	001a      	movs	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	18d3      	adds	r3, r2, r3
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	2018      	movs	r0, #24
 80038da:	183b      	adds	r3, r7, r0
 80038dc:	4966      	ldr	r1, [pc, #408]	; (8003a78 <HAL_PCD_EP_DB_Receive+0x224>)
 80038de:	400a      	ands	r2, r1
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	183a      	adds	r2, r7, r0
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	0189      	lsls	r1, r1, #6
 80038ec:	404a      	eors	r2, r1
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	001a      	movs	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	18d3      	adds	r3, r2, r3
 80038fe:	183a      	adds	r2, r7, r0
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	495e      	ldr	r1, [pc, #376]	; (8003a7c <HAL_PCD_EP_DB_Receive+0x228>)
 8003904:	430a      	orrs	r2, r1
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	4013      	ands	r3, r2
 8003912:	d01a      	beq.n	800394a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	001a      	movs	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29a      	uxth	r2, r3
 8003926:	2016      	movs	r0, #22
 8003928:	183b      	adds	r3, r7, r0
 800392a:	4955      	ldr	r1, [pc, #340]	; (8003a80 <HAL_PCD_EP_DB_Receive+0x22c>)
 800392c:	400a      	ands	r2, r1
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	001a      	movs	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	18d3      	adds	r3, r2, r3
 800393e:	183a      	adds	r2, r7, r0
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_PCD_EP_DB_Receive+0x230>)
 8003944:	430a      	orrs	r2, r1
 8003946:	b292      	uxth	r2, r2
 8003948:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800394a:	241a      	movs	r4, #26
 800394c:	193b      	adds	r3, r7, r4
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d100      	bne.n	8003956 <HAL_PCD_EP_DB_Receive+0x102>
 8003954:	e086      	b.n	8003a64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6959      	ldr	r1, [r3, #20]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	891a      	ldrh	r2, [r3, #8]
 8003962:	193b      	adds	r3, r7, r4
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	f004 fc20 	bl	80081aa <USB_ReadPMA>
 800396a:	e07b      	b.n	8003a64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2250      	movs	r2, #80	; 0x50
 8003972:	5a9b      	ldrh	r3, [r3, r2]
 8003974:	b29b      	uxth	r3, r3
 8003976:	001a      	movs	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	18d2      	adds	r2, r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <HAL_PCD_EP_DB_Receive+0x234>)
 8003988:	4694      	mov	ip, r2
 800398a:	4463      	add	r3, ip
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	211a      	movs	r1, #26
 8003990:	187b      	adds	r3, r7, r1
 8003992:	0592      	lsls	r2, r2, #22
 8003994:	0d92      	lsrs	r2, r2, #22
 8003996:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	187b      	adds	r3, r7, r1
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d307      	bcc.n	80039b4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	1ad2      	subs	r2, r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	619a      	str	r2, [r3, #24]
 80039b2:	e002      	b.n	80039ba <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	001a      	movs	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	201e      	movs	r0, #30
 80039d6:	183b      	adds	r3, r7, r0
 80039d8:	4927      	ldr	r1, [pc, #156]	; (8003a78 <HAL_PCD_EP_DB_Receive+0x224>)
 80039da:	400a      	ands	r2, r1
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	183a      	adds	r2, r7, r0
 80039e2:	8812      	ldrh	r2, [r2, #0]
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0189      	lsls	r1, r1, #6
 80039e8:	404a      	eors	r2, r1
 80039ea:	801a      	strh	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	001a      	movs	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	18d3      	adds	r3, r2, r3
 80039fa:	183a      	adds	r2, r7, r0
 80039fc:	8812      	ldrh	r2, [r2, #0]
 80039fe:	491f      	ldr	r1, [pc, #124]	; (8003a7c <HAL_PCD_EP_DB_Receive+0x228>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	b292      	uxth	r2, r2
 8003a04:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	2240      	movs	r2, #64	; 0x40
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d11a      	bne.n	8003a46 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	001a      	movs	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	18d3      	adds	r3, r2, r3
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	201c      	movs	r0, #28
 8003a24:	183b      	adds	r3, r7, r0
 8003a26:	4916      	ldr	r1, [pc, #88]	; (8003a80 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	001a      	movs	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	4911      	ldr	r1, [pc, #68]	; (8003a84 <HAL_PCD_EP_DB_Receive+0x230>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	b292      	uxth	r2, r2
 8003a44:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003a46:	241a      	movs	r4, #26
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6959      	ldr	r1, [r3, #20]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	895a      	ldrh	r2, [r3, #10]
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	f004 fba3 	bl	80081aa <USB_ReadPMA>
    }
  }

  return count;
 8003a64:	231a      	movs	r3, #26
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	881b      	ldrh	r3, [r3, #0]
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b009      	add	sp, #36	; 0x24
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	00000402 	.word	0x00000402
 8003a78:	ffffbf8f 	.word	0xffffbf8f
 8003a7c:	ffff8080 	.word	0xffff8080
 8003a80:	ffff8f8f 	.word	0xffff8f8f
 8003a84:	ffff80c0 	.word	0xffff80c0
 8003a88:	00000406 	.word	0x00000406

08003a8c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b0a4      	sub	sp, #144	; 0x90
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	1dbb      	adds	r3, r7, #6
 8003a98:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003aa4:	e1e4      	b.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2250      	movs	r2, #80	; 0x50
 8003aac:	5a9b      	ldrh	r3, [r3, r2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	18d2      	adds	r2, r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	4ad0      	ldr	r2, [pc, #832]	; (8003e04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003ac2:	4694      	mov	ip, r2
 8003ac4:	4463      	add	r3, ip
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	2186      	movs	r1, #134	; 0x86
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	0592      	lsls	r2, r2, #22
 8003ace:	0d92      	lsrs	r2, r2, #22
 8003ad0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d907      	bls.n	8003aee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	619a      	str	r2, [r3, #24]
 8003aec:	e002      	b.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2200      	movs	r2, #0
 8003af2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d000      	beq.n	8003afe <HAL_PCD_EP_DB_Transmit+0x72>
 8003afc:	e0b5      	b.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d125      	bne.n	8003b52 <HAL_PCD_EP_DB_Transmit+0xc6>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2250      	movs	r2, #80	; 0x50
 8003b12:	5a9b      	ldrh	r3, [r3, r2]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	001a      	movs	r2, r3
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	00da      	lsls	r2, r3, #3
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	4ab6      	ldr	r2, [pc, #728]	; (8003e04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003b2a:	4694      	mov	ip, r2
 8003b2c:	4463      	add	r3, ip
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	059b      	lsls	r3, r3, #22
 8003b38:	0d9b      	lsrs	r3, r3, #22
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4ab0      	ldr	r2, [pc, #704]	; (8003e08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	e01b      	b.n	8003b8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d117      	bne.n	8003b8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2250      	movs	r2, #80	; 0x50
 8003b66:	5a9b      	ldrh	r3, [r3, r2]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	00da      	lsls	r2, r3, #3
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	18d3      	adds	r3, r2, r3
 8003b7c:	4aa1      	ldr	r2, [pc, #644]	; (8003e04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003b7e:	4694      	mov	ip, r2
 8003b80:	4463      	add	r3, ip
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d125      	bne.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x158>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2250      	movs	r2, #80	; 0x50
 8003ba4:	5a9b      	ldrh	r3, [r3, r2]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	001a      	movs	r2, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	18d3      	adds	r3, r2, r3
 8003bba:	4a94      	ldr	r2, [pc, #592]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x380>)
 8003bbc:	4694      	mov	ip, r2
 8003bbe:	4463      	add	r3, ip
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	059b      	lsls	r3, r3, #22
 8003bca:	0d9b      	lsrs	r3, r3, #22
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	4a8b      	ldr	r2, [pc, #556]	; (8003e08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e018      	b.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d114      	bne.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2250      	movs	r2, #80	; 0x50
 8003bf2:	5a9b      	ldrh	r3, [r3, r2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	00da      	lsls	r2, r3, #3
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_PCD_EP_DB_Transmit+0x380>)
 8003c0a:	4694      	mov	ip, r2
 8003c0c:	4463      	add	r3, ip
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2200      	movs	r2, #0
 8003c14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f006 fa98 	bl	800a154 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881a      	ldrh	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	01db      	lsls	r3, r3, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d100      	bne.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003c30:	e309      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	001a      	movs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	2016      	movs	r0, #22
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	4971      	ldr	r1, [pc, #452]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	183a      	adds	r2, r7, r0
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	496c      	ldr	r1, [pc, #432]	; (8003e14 <HAL_PCD_EP_DB_Transmit+0x388>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e2ed      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c6a:	1dbb      	adds	r3, r7, #6
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	01db      	lsls	r3, r3, #7
 8003c72:	4013      	ands	r3, r2
 8003c74:	d01a      	beq.n	8003cac <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	208a      	movs	r0, #138	; 0x8a
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	4960      	ldr	r1, [pc, #384]	; (8003e10 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	001a      	movs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	18d3      	adds	r3, r2, r3
 8003ca0:	183a      	adds	r2, r7, r0
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	495b      	ldr	r1, [pc, #364]	; (8003e14 <HAL_PCD_EP_DB_Transmit+0x388>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	5c9b      	ldrb	r3, [r3, r2]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d000      	beq.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003cb6:	e2c6      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	2186      	movs	r1, #134	; 0x86
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	18d2      	adds	r2, r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	18d2      	adds	r2, r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d30c      	bcc.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	218c      	movs	r1, #140	; 0x8c
 8003ce8:	187a      	adds	r2, r7, r1
 8003cea:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1ad2      	subs	r2, r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	621a      	str	r2, [r3, #32]
 8003cfa:	e01a      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003d04:	2386      	movs	r3, #134	; 0x86
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	228c      	movs	r2, #140	; 0x8c
 8003d0c:	18ba      	adds	r2, r7, r2
 8003d0e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]
 8003d18:	e00b      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	228c      	movs	r2, #140	; 0x8c
 8003d28:	18ba      	adds	r2, r7, r2
 8003d2a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d000      	beq.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003d3a:	e06d      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2250      	movs	r2, #80	; 0x50
 8003d48:	5a9b      	ldrh	r3, [r3, r2]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	00da      	lsls	r2, r3, #3
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_PCD_EP_DB_Transmit+0x378>)
 8003d60:	4694      	mov	ip, r2
 8003d62:	4463      	add	r3, ip
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	059b      	lsls	r3, r3, #22
 8003d6e:	0d9b      	lsrs	r3, r3, #22
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	228c      	movs	r2, #140	; 0x8c
 8003d78:	18bb      	adds	r3, r7, r2
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d7e:	d91a      	bls.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x32a>
 8003d80:	18bb      	adds	r3, r7, r2
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d88:	18bb      	adds	r3, r7, r2
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d102      	bne.n	8003d98 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	3b01      	subs	r3, #1
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e04f      	b.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003db6:	238c      	movs	r3, #140	; 0x8c
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x346>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	e041      	b.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003dd2:	228c      	movs	r2, #140	; 0x8c
 8003dd4:	18bb      	adds	r3, r7, r2
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ddc:	18bb      	adds	r3, r7, r2
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d002      	beq.n	8003dec <HAL_PCD_EP_DB_Transmit+0x360>
 8003de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de8:	3301      	adds	r3, #1
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	029b      	lsls	r3, r3, #10
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e028      	b.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003e04:	00000402 	.word	0x00000402
 8003e08:	ffff8000 	.word	0xffff8000
 8003e0c:	00000406 	.word	0x00000406
 8003e10:	ffff8f8f 	.word	0xffff8f8f
 8003e14:	ffffc080 	.word	0xffffc080
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d11a      	bne.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2250      	movs	r2, #80	; 0x50
 8003e2c:	5a9b      	ldrh	r3, [r3, r2]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	001a      	movs	r2, r3
 8003e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	647b      	str	r3, [r7, #68]	; 0x44
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	00da      	lsls	r2, r3, #3
 8003e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	4adb      	ldr	r2, [pc, #876]	; (80041b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003e44:	4694      	mov	ip, r2
 8003e46:	4463      	add	r3, ip
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4a:	238c      	movs	r3, #140	; 0x8c
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6959      	ldr	r1, [r3, #20]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	891a      	ldrh	r2, [r3, #8]
 8003e62:	238c      	movs	r3, #140	; 0x8c
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f004 f955 	bl	8008118 <USB_WritePMA>
 8003e6e:	e1ea      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2250      	movs	r2, #80	; 0x50
 8003e76:	5a9b      	ldrh	r3, [r3, r2]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	18d2      	adds	r2, r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	18d3      	adds	r3, r2, r3
 8003e8a:	4aca      	ldr	r2, [pc, #808]	; (80041b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003e8c:	4694      	mov	ip, r2
 8003e8e:	4463      	add	r3, ip
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	2186      	movs	r1, #134	; 0x86
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	0592      	lsls	r2, r2, #22
 8003e98:	0d92      	lsrs	r2, r2, #22
 8003e9a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d307      	bcc.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	1ad2      	subs	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	619a      	str	r2, [r3, #24]
 8003eb6:	e002      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d000      	beq.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x43c>
 8003ec6:	e0bb      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d125      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x490>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2250      	movs	r2, #80	; 0x50
 8003edc:	5a9b      	ldrh	r3, [r3, r2]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	4aaf      	ldr	r2, [pc, #700]	; (80041b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	4463      	add	r3, ip
 8003ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	059b      	lsls	r3, r3, #22
 8003f02:	0d9b      	lsrs	r3, r3, #22
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4aa9      	ldr	r2, [pc, #676]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e01b      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d117      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2250      	movs	r2, #80	; 0x50
 8003f30:	5a9b      	ldrh	r3, [r3, r2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	001a      	movs	r2, r3
 8003f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00da      	lsls	r2, r3, #3
 8003f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f44:	18d3      	adds	r3, r2, r3
 8003f46:	4a9a      	ldr	r2, [pc, #616]	; (80041b0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003f48:	4694      	mov	ip, r2
 8003f4a:	4463      	add	r3, ip
 8003f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f50:	2200      	movs	r2, #0
 8003f52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12b      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x52e>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2250      	movs	r2, #80	; 0x50
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	001a      	movs	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	00da      	lsls	r2, r3, #3
 8003f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f82:	18d3      	adds	r3, r2, r3
 8003f84:	4a8b      	ldr	r2, [pc, #556]	; (80041b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003f86:	4694      	mov	ip, r2
 8003f88:	4463      	add	r3, ip
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	187a      	adds	r2, r7, r1
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	059b      	lsls	r3, r3, #22
 8003f9a:	0d9b      	lsrs	r3, r3, #22
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4a82      	ldr	r2, [pc, #520]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e018      	b.n	8003fec <HAL_PCD_EP_DB_Transmit+0x560>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d114      	bne.n	8003fec <HAL_PCD_EP_DB_Transmit+0x560>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2250      	movs	r2, #80	; 0x50
 8003fc8:	5a9b      	ldrh	r3, [r3, r2]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	001a      	movs	r2, r3
 8003fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	677b      	str	r3, [r7, #116]	; 0x74
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	00da      	lsls	r2, r3, #3
 8003fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8003fe0:	4694      	mov	ip, r2
 8003fe2:	4463      	add	r3, ip
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe8:	2200      	movs	r2, #0
 8003fea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f006 f8ad 	bl	800a154 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ffa:	1dbb      	adds	r3, r7, #6
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	01db      	lsls	r3, r3, #7
 8004002:	4013      	ands	r3, r2
 8004004:	d000      	beq.n	8004008 <HAL_PCD_EP_DB_Transmit+0x57c>
 8004006:	e11e      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	001a      	movs	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29a      	uxth	r2, r3
 800401a:	2088      	movs	r0, #136	; 0x88
 800401c:	183b      	adds	r3, r7, r0
 800401e:	4967      	ldr	r1, [pc, #412]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x730>)
 8004020:	400a      	ands	r2, r1
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	001a      	movs	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	18d3      	adds	r3, r2, r3
 8004032:	183a      	adds	r2, r7, r0
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	4962      	ldr	r1, [pc, #392]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8004038:	430a      	orrs	r2, r1
 800403a:	b292      	uxth	r2, r2
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e102      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	01db      	lsls	r3, r3, #7
 8004048:	4013      	ands	r3, r2
 800404a:	d11a      	bne.n	8004082 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	001a      	movs	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	204e      	movs	r0, #78	; 0x4e
 8004060:	183b      	adds	r3, r7, r0
 8004062:	4956      	ldr	r1, [pc, #344]	; (80041bc <HAL_PCD_EP_DB_Transmit+0x730>)
 8004064:	400a      	ands	r2, r1
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	001a      	movs	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	183a      	adds	r2, r7, r0
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	4951      	ldr	r1, [pc, #324]	; (80041c0 <HAL_PCD_EP_DB_Transmit+0x734>)
 800407c:	430a      	orrs	r2, r1
 800407e:	b292      	uxth	r2, r2
 8004080:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d000      	beq.n	800408e <HAL_PCD_EP_DB_Transmit+0x602>
 800408c:	e0db      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	2186      	movs	r1, #134	; 0x86
 8004094:	187b      	adds	r3, r7, r1
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	18d2      	adds	r2, r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	18d2      	adds	r2, r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d30c      	bcc.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	218c      	movs	r1, #140	; 0x8c
 80040be:	187a      	adds	r2, r7, r1
 80040c0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1ad2      	subs	r2, r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	621a      	str	r2, [r3, #32]
 80040d0:	e01a      	b.n	8004108 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80040da:	2386      	movs	r3, #134	; 0x86
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	228c      	movs	r2, #140	; 0x8c
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]
 80040ee:	e00b      	b.n	8004108 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	228c      	movs	r2, #140	; 0x8c
 80040f6:	18ba      	adds	r2, r7, r2
 80040f8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	657b      	str	r3, [r7, #84]	; 0x54
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d000      	beq.n	8004118 <HAL_PCD_EP_DB_Transmit+0x68c>
 8004116:	e06e      	b.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x76a>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2250      	movs	r2, #80	; 0x50
 8004124:	5a9b      	ldrh	r3, [r3, r2]
 8004126:	b29b      	uxth	r3, r3
 8004128:	001a      	movs	r2, r3
 800412a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412c:	189b      	adds	r3, r3, r2
 800412e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	00da      	lsls	r2, r3, #3
 8004136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <HAL_PCD_EP_DB_Transmit+0x728>)
 800413c:	4694      	mov	ip, r2
 800413e:	4463      	add	r3, ip
 8004140:	65bb      	str	r3, [r7, #88]	; 0x58
 8004142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	059b      	lsls	r3, r3, #22
 800414a:	0d9b      	lsrs	r3, r3, #22
 800414c:	b29a      	uxth	r2, r3
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	228c      	movs	r2, #140	; 0x8c
 8004154:	18bb      	adds	r3, r7, r2
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b3e      	cmp	r3, #62	; 0x3e
 800415a:	d91a      	bls.n	8004192 <HAL_PCD_EP_DB_Transmit+0x706>
 800415c:	18bb      	adds	r3, r7, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
 8004164:	18bb      	adds	r3, r7, r2
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	221f      	movs	r2, #31
 800416a:	4013      	ands	r3, r2
 800416c:	d102      	bne.n	8004174 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800416e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004170:	3b01      	subs	r3, #1
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
 8004174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29a      	uxth	r2, r3
 800417a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417c:	b29b      	uxth	r3, r3
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	b29b      	uxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	b29a      	uxth	r2, r3
 800418c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e04d      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8004192:	238c      	movs	r3, #140	; 0x8c
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <HAL_PCD_EP_DB_Transmit+0x738>
 800419c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	e03f      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	00000402 	.word	0x00000402
 80041b4:	00000406 	.word	0x00000406
 80041b8:	ffff8000 	.word	0xffff8000
 80041bc:	ffff8f8f 	.word	0xffff8f8f
 80041c0:	ffffc080 	.word	0xffffc080
 80041c4:	228c      	movs	r2, #140	; 0x8c
 80041c6:	18bb      	adds	r3, r7, r2
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ce:	18bb      	adds	r3, r7, r2
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d002      	beq.n	80041de <HAL_PCD_EP_DB_Transmit+0x752>
 80041d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041da:	3301      	adds	r3, #1
 80041dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	029b      	lsls	r3, r3, #10
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4313      	orrs	r3, r2
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	e01b      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d117      	bne.n	800422e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2250      	movs	r2, #80	; 0x50
 8004204:	5a9b      	ldrh	r3, [r3, r2]
 8004206:	b29b      	uxth	r3, r3
 8004208:	001a      	movs	r2, r3
 800420a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420c:	189b      	adds	r3, r3, r2
 800420e:	657b      	str	r3, [r7, #84]	; 0x54
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	00da      	lsls	r2, r3, #3
 8004216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004218:	18d3      	adds	r3, r2, r3
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_PCD_EP_DB_Transmit+0x814>)
 800421c:	4694      	mov	ip, r2
 800421e:	4463      	add	r3, ip
 8004220:	653b      	str	r3, [r7, #80]	; 0x50
 8004222:	238c      	movs	r3, #140	; 0x8c
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b29a      	uxth	r2, r3
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	895a      	ldrh	r2, [r3, #10]
 800423a:	238c      	movs	r3, #140	; 0x8c
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f003 ff69 	bl	8008118 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	001a      	movs	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	18d3      	adds	r3, r2, r3
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29a      	uxth	r2, r3
 8004258:	2014      	movs	r0, #20
 800425a:	183b      	adds	r3, r7, r0
 800425c:	4911      	ldr	r1, [pc, #68]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x818>)
 800425e:	400a      	ands	r2, r1
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	183b      	adds	r3, r7, r0
 8004264:	183a      	adds	r2, r7, r0
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	2110      	movs	r1, #16
 800426a:	404a      	eors	r2, r1
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	183b      	adds	r3, r7, r0
 8004270:	183a      	adds	r2, r7, r0
 8004272:	8812      	ldrh	r2, [r2, #0]
 8004274:	2120      	movs	r1, #32
 8004276:	404a      	eors	r2, r1
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	001a      	movs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	183a      	adds	r2, r7, r0
 800428a:	8812      	ldrh	r2, [r2, #0]
 800428c:	4906      	ldr	r1, [pc, #24]	; (80042a8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800428e:	430a      	orrs	r2, r1
 8004290:	b292      	uxth	r2, r2
 8004292:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b024      	add	sp, #144	; 0x90
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	00000406 	.word	0x00000406
 80042a4:	ffff8fbf 	.word	0xffff8fbf
 80042a8:	ffff8080 	.word	0xffff8080

080042ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	0008      	movs	r0, r1
 80042b6:	0011      	movs	r1, r2
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	240a      	movs	r4, #10
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	1c02      	adds	r2, r0, #0
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	2308      	movs	r3, #8
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	1c0a      	adds	r2, r1, #0
 80042c8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042ca:	0021      	movs	r1, r4
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	4013      	ands	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2207      	movs	r2, #7
 80042e0:	4013      	ands	r3, r2
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	0013      	movs	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	18d3      	adds	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e00b      	b.n	800430c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042f4:	230a      	movs	r3, #10
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	3369      	adds	r3, #105	; 0x69
 8004304:	33ff      	adds	r3, #255	; 0xff
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	18d3      	adds	r3, r2, r3
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800430c:	2308      	movs	r3, #8
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	b29a      	uxth	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	80da      	strh	r2, [r3, #6]
 8004324:	e00b      	b.n	800433e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2201      	movs	r2, #1
 800432a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	b29a      	uxth	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	b29a      	uxth	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b007      	add	sp, #28
 8004346:	bd90      	pop	{r4, r7, pc}

08004348 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	23ba      	movs	r3, #186	; 0xba
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	2101      	movs	r1, #1
 800435e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	23b8      	movs	r3, #184	; 0xb8
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	2100      	movs	r1, #0
 8004368:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2254      	movs	r2, #84	; 0x54
 800436e:	5a9b      	ldrh	r3, [r3, r2]
 8004370:	b29b      	uxth	r3, r3
 8004372:	2201      	movs	r2, #1
 8004374:	4313      	orrs	r3, r2
 8004376:	b299      	uxth	r1, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2254      	movs	r2, #84	; 0x54
 800437c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2254      	movs	r2, #84	; 0x54
 8004382:	5a9b      	ldrh	r3, [r3, r2]
 8004384:	b29b      	uxth	r3, r3
 8004386:	2202      	movs	r2, #2
 8004388:	4313      	orrs	r3, r2
 800438a:	b299      	uxth	r1, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2254      	movs	r2, #84	; 0x54
 8004390:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	000a      	movs	r2, r1
 80043a6:	1cfb      	adds	r3, r7, #3
 80043a8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f000 fbbf 	bl	8004b46 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c8:	4bc9      	ldr	r3, [pc, #804]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	220c      	movs	r2, #12
 80043ce:	4013      	ands	r3, r2
 80043d0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d2:	4bc7      	ldr	r3, [pc, #796]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	025b      	lsls	r3, r3, #9
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d100      	bne.n	80043ea <HAL_RCC_OscConfig+0x36>
 80043e8:	e07e      	b.n	80044e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d007      	beq.n	8004400 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d112      	bne.n	800441c <HAL_RCC_OscConfig+0x68>
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d10d      	bne.n	800441c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004400:	4bbb      	ldr	r3, [pc, #748]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	4013      	ands	r3, r2
 800440a:	d100      	bne.n	800440e <HAL_RCC_OscConfig+0x5a>
 800440c:	e06b      	b.n	80044e6 <HAL_RCC_OscConfig+0x132>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d167      	bne.n	80044e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f000 fb95 	bl	8004b46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	025b      	lsls	r3, r3, #9
 8004424:	429a      	cmp	r2, r3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x84>
 8004428:	4bb1      	ldr	r3, [pc, #708]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4bb0      	ldr	r3, [pc, #704]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0249      	lsls	r1, r1, #9
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e027      	b.n	8004488 <HAL_RCC_OscConfig+0xd4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	23a0      	movs	r3, #160	; 0xa0
 800443e:	02db      	lsls	r3, r3, #11
 8004440:	429a      	cmp	r2, r3
 8004442:	d10e      	bne.n	8004462 <HAL_RCC_OscConfig+0xae>
 8004444:	4baa      	ldr	r3, [pc, #680]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4ba9      	ldr	r3, [pc, #676]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	02c9      	lsls	r1, r1, #11
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	4ba7      	ldr	r3, [pc, #668]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4ba6      	ldr	r3, [pc, #664]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0249      	lsls	r1, r1, #9
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e012      	b.n	8004488 <HAL_RCC_OscConfig+0xd4>
 8004462:	4ba3      	ldr	r3, [pc, #652]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4ba2      	ldr	r3, [pc, #648]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004468:	49a2      	ldr	r1, [pc, #648]	; (80046f4 <HAL_RCC_OscConfig+0x340>)
 800446a:	400a      	ands	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	4ba0      	ldr	r3, [pc, #640]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	025b      	lsls	r3, r3, #9
 8004476:	4013      	ands	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004482:	499d      	ldr	r1, [pc, #628]	; (80046f8 <HAL_RCC_OscConfig+0x344>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd fb20 	bl	8001ad4 <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004498:	e009      	b.n	80044ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449a:	f7fd fb1b 	bl	8001ad4 <HAL_GetTick>
 800449e:	0002      	movs	r2, r0
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d902      	bls.n	80044ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	f000 fb4c 	bl	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ae:	4b90      	ldr	r3, [pc, #576]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	4013      	ands	r3, r2
 80044b8:	d0ef      	beq.n	800449a <HAL_RCC_OscConfig+0xe6>
 80044ba:	e015      	b.n	80044e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd fb0a 	bl	8001ad4 <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c6:	f7fd fb05 	bl	8001ad4 <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b64      	cmp	r3, #100	; 0x64
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e336      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044d8:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	4013      	ands	r3, r2
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x112>
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2202      	movs	r2, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	d100      	bne.n	80044f4 <HAL_RCC_OscConfig+0x140>
 80044f2:	e099      	b.n	8004628 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2220      	movs	r2, #32
 80044fe:	4013      	ands	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004508:	2120      	movs	r1, #32
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2220      	movs	r2, #32
 8004512:	4393      	bics	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b04      	cmp	r3, #4
 800451a:	d005      	beq.n	8004528 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d13e      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1ec>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004528:	4b71      	ldr	r3, [pc, #452]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2204      	movs	r2, #4
 800452e:	4013      	ands	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_RCC_OscConfig+0x188>
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e304      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a6e      	ldr	r2, [pc, #440]	; (80046fc <HAL_RCC_OscConfig+0x348>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2209      	movs	r2, #9
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	4b64      	ldr	r3, [pc, #400]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004564:	f000 fc42 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 8004568:	0001      	movs	r1, r0
 800456a:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	220f      	movs	r2, #15
 8004572:	4013      	ands	r3, r2
 8004574:	4a62      	ldr	r2, [pc, #392]	; (8004700 <HAL_RCC_OscConfig+0x34c>)
 8004576:	5cd3      	ldrb	r3, [r2, r3]
 8004578:	000a      	movs	r2, r1
 800457a:	40da      	lsrs	r2, r3
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x350>)
 800457e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_RCC_OscConfig+0x354>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2513      	movs	r5, #19
 8004586:	197c      	adds	r4, r7, r5
 8004588:	0018      	movs	r0, r3
 800458a:	f7fd fa5d 	bl	8001a48 <HAL_InitTick>
 800458e:	0003      	movs	r3, r0
 8004590:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004592:	197b      	adds	r3, r7, r5
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d046      	beq.n	8004628 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800459a:	197b      	adds	r3, r7, r5
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	e2d2      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d027      	beq.n	80045f6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045a6:	4b52      	ldr	r3, [pc, #328]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2209      	movs	r2, #9
 80045ac:	4393      	bics	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fd fa8c 	bl	8001ad4 <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fd fa87 	bl	8001ad4 <HAL_GetTick>
 80045c6:	0002      	movs	r2, r0
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e2b8      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d4:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2204      	movs	r2, #4
 80045da:	4013      	ands	r3, r2
 80045dc:	d0f1      	beq.n	80045c2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a46      	ldr	r2, [pc, #280]	; (80046fc <HAL_RCC_OscConfig+0x348>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f6:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	438a      	bics	r2, r1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fd fa67 	bl	8001ad4 <HAL_GetTick>
 8004606:	0003      	movs	r3, r0
 8004608:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd fa62 	bl	8001ad4 <HAL_GetTick>
 8004610:	0002      	movs	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e293      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2204      	movs	r2, #4
 8004624:	4013      	ands	r3, r2
 8004626:	d1f1      	bne.n	800460c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2210      	movs	r2, #16
 800462e:	4013      	ands	r3, r2
 8004630:	d100      	bne.n	8004634 <HAL_RCC_OscConfig+0x280>
 8004632:	e0a2      	b.n	800477a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d140      	bne.n	80046bc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4013      	ands	r3, r2
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x29e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e279      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004652:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <HAL_RCC_OscConfig+0x358>)
 8004658:	4013      	ands	r3, r2
 800465a:	0019      	movs	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	0a19      	lsrs	r1, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	061a      	lsls	r2, r3, #24
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	0b5b      	lsrs	r3, r3, #13
 8004680:	3301      	adds	r3, #1
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	0212      	lsls	r2, r2, #8
 8004686:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	210f      	movs	r1, #15
 8004690:	400b      	ands	r3, r1
 8004692:	491b      	ldr	r1, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x34c>)
 8004694:	5ccb      	ldrb	r3, [r1, r3]
 8004696:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <HAL_RCC_OscConfig+0x350>)
 800469a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_RCC_OscConfig+0x354>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2513      	movs	r5, #19
 80046a2:	197c      	adds	r4, r7, r5
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fd f9cf 	bl	8001a48 <HAL_InitTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d061      	beq.n	800477a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80046b6:	197b      	adds	r3, r7, r5
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	e244      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d040      	beq.n	8004746 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	0049      	lsls	r1, r1, #1
 80046ce:	430a      	orrs	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd f9ff 	bl	8001ad4 <HAL_GetTick>
 80046d6:	0003      	movs	r3, r0
 80046d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046da:	e019      	b.n	8004710 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046dc:	f7fd f9fa 	bl	8001ad4 <HAL_GetTick>
 80046e0:	0002      	movs	r2, r0
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d912      	bls.n	8004710 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e22b      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	40021000 	.word	0x40021000
 80046f4:	fffeffff 	.word	0xfffeffff
 80046f8:	fffbffff 	.word	0xfffbffff
 80046fc:	ffffe0ff 	.word	0xffffe0ff
 8004700:	0800b10c 	.word	0x0800b10c
 8004704:	200002dc 	.word	0x200002dc
 8004708:	200002e0 	.word	0x200002e0
 800470c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004710:	4bca      	ldr	r3, [pc, #808]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4013      	ands	r3, r2
 800471a:	d0df      	beq.n	80046dc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800471c:	4bc7      	ldr	r3, [pc, #796]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4ac7      	ldr	r2, [pc, #796]	; (8004a40 <HAL_RCC_OscConfig+0x68c>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472a:	4bc4      	ldr	r3, [pc, #784]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004730:	4bc2      	ldr	r3, [pc, #776]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	0a19      	lsrs	r1, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	061a      	lsls	r2, r3, #24
 800473e:	4bbf      	ldr	r3, [pc, #764]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	e019      	b.n	800477a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004746:	4bbd      	ldr	r3, [pc, #756]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4bbc      	ldr	r3, [pc, #752]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800474c:	49bd      	ldr	r1, [pc, #756]	; (8004a44 <HAL_RCC_OscConfig+0x690>)
 800474e:	400a      	ands	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fd f9bf 	bl	8001ad4 <HAL_GetTick>
 8004756:	0003      	movs	r3, r0
 8004758:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800475c:	f7fd f9ba 	bl	8001ad4 <HAL_GetTick>
 8004760:	0002      	movs	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1eb      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800476e:	4bb3      	ldr	r3, [pc, #716]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4013      	ands	r3, r2
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2208      	movs	r2, #8
 8004780:	4013      	ands	r3, r2
 8004782:	d036      	beq.n	80047f2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478c:	4bab      	ldr	r3, [pc, #684]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800478e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004790:	4baa      	ldr	r3, [pc, #680]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004792:	2101      	movs	r1, #1
 8004794:	430a      	orrs	r2, r1
 8004796:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004798:	f7fd f99c 	bl	8001ad4 <HAL_GetTick>
 800479c:	0003      	movs	r3, r0
 800479e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fd f997 	bl	8001ad4 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1c8      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047b4:	4ba1      	ldr	r3, [pc, #644]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d0f1      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3ee>
 80047be:	e018      	b.n	80047f2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c0:	4b9e      	ldr	r3, [pc, #632]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80047c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c4:	4b9d      	ldr	r3, [pc, #628]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	438a      	bics	r2, r1
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047cc:	f7fd f982 	bl	8001ad4 <HAL_GetTick>
 80047d0:	0003      	movs	r3, r0
 80047d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d6:	f7fd f97d 	bl	8001ad4 <HAL_GetTick>
 80047da:	0002      	movs	r2, r0
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1ae      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e8:	4b94      	ldr	r3, [pc, #592]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80047ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ec:	2202      	movs	r2, #2
 80047ee:	4013      	ands	r3, r2
 80047f0:	d1f1      	bne.n	80047d6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2204      	movs	r2, #4
 80047f8:	4013      	ands	r3, r2
 80047fa:	d100      	bne.n	80047fe <HAL_RCC_OscConfig+0x44a>
 80047fc:	e0ae      	b.n	800495c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2023      	movs	r0, #35	; 0x23
 8004800:	183b      	adds	r3, r7, r0
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004806:	4b8d      	ldr	r3, [pc, #564]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	055b      	lsls	r3, r3, #21
 800480e:	4013      	ands	r3, r2
 8004810:	d109      	bne.n	8004826 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004812:	4b8a      	ldr	r3, [pc, #552]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	0549      	lsls	r1, r1, #21
 800481c:	430a      	orrs	r2, r1
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004820:	183b      	adds	r3, r7, r0
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x694>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4013      	ands	r3, r2
 8004830:	d11a      	bne.n	8004868 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004832:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x694>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x694>)
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	0049      	lsls	r1, r1, #1
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004840:	f7fd f948 	bl	8001ad4 <HAL_GetTick>
 8004844:	0003      	movs	r3, r0
 8004846:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484a:	f7fd f943 	bl	8001ad4 <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b64      	cmp	r3, #100	; 0x64
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e174      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485c:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <HAL_RCC_OscConfig+0x694>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x4d0>
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004878:	4b70      	ldr	r3, [pc, #448]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	0049      	lsls	r1, r1, #1
 800487e:	430a      	orrs	r2, r1
 8004880:	651a      	str	r2, [r3, #80]	; 0x50
 8004882:	e031      	b.n	80048e8 <HAL_RCC_OscConfig+0x534>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x4f2>
 800488c:	4b6b      	ldr	r3, [pc, #428]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800488e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004892:	496c      	ldr	r1, [pc, #432]	; (8004a44 <HAL_RCC_OscConfig+0x690>)
 8004894:	400a      	ands	r2, r1
 8004896:	651a      	str	r2, [r3, #80]	; 0x50
 8004898:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800489a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800489c:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800489e:	496b      	ldr	r1, [pc, #428]	; (8004a4c <HAL_RCC_OscConfig+0x698>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50
 80048a4:	e020      	b.n	80048e8 <HAL_RCC_OscConfig+0x534>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	23a0      	movs	r3, #160	; 0xa0
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10e      	bne.n	80048d0 <HAL_RCC_OscConfig+0x51c>
 80048b2:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	00c9      	lsls	r1, r1, #3
 80048bc:	430a      	orrs	r2, r1
 80048be:	651a      	str	r2, [r3, #80]	; 0x50
 80048c0:	4b5e      	ldr	r3, [pc, #376]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048c4:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	0049      	lsls	r1, r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	651a      	str	r2, [r3, #80]	; 0x50
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0x534>
 80048d0:	4b5a      	ldr	r3, [pc, #360]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048d6:	495b      	ldr	r1, [pc, #364]	; (8004a44 <HAL_RCC_OscConfig+0x690>)
 80048d8:	400a      	ands	r2, r1
 80048da:	651a      	str	r2, [r3, #80]	; 0x50
 80048dc:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e0:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80048e2:	495a      	ldr	r1, [pc, #360]	; (8004a4c <HAL_RCC_OscConfig+0x698>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd f8f0 	bl	8001ad4 <HAL_GetTick>
 80048f4:	0003      	movs	r3, r0
 80048f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f8:	e009      	b.n	800490e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fd f8eb 	bl	8001ad4 <HAL_GetTick>
 80048fe:	0002      	movs	r2, r0
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_OscConfig+0x69c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e11b      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490e:	4b4b      	ldr	r3, [pc, #300]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4013      	ands	r3, r2
 8004918:	d0ef      	beq.n	80048fa <HAL_RCC_OscConfig+0x546>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fd f8da 	bl	8001ad4 <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004924:	e009      	b.n	800493a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd f8d5 	bl	8001ad4 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	4a47      	ldr	r2, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x69c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e105      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800493a:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800493c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4013      	ands	r3, r2
 8004944:	d1ef      	bne.n	8004926 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004946:	2323      	movs	r3, #35	; 0x23
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004950:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004956:	493f      	ldr	r1, [pc, #252]	; (8004a54 <HAL_RCC_OscConfig+0x6a0>)
 8004958:	400a      	ands	r2, r1
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2220      	movs	r2, #32
 8004962:	4013      	ands	r3, r2
 8004964:	d049      	beq.n	80049fa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d026      	beq.n	80049bc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800496e:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004974:	2101      	movs	r1, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004980:	2101      	movs	r1, #1
 8004982:	430a      	orrs	r2, r1
 8004984:	635a      	str	r2, [r3, #52]	; 0x34
 8004986:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <HAL_RCC_OscConfig+0x6a4>)
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <HAL_RCC_OscConfig+0x6a4>)
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	0189      	lsls	r1, r1, #6
 8004990:	430a      	orrs	r2, r1
 8004992:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd f89e 	bl	8001ad4 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800499e:	f7fd f899 	bl	8001ad4 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e0ca      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b0:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2202      	movs	r2, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	d0f1      	beq.n	800499e <HAL_RCC_OscConfig+0x5ea>
 80049ba:	e01e      	b.n	80049fa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049bc:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_RCC_OscConfig+0x6a4>)
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RCC_OscConfig+0x6a4>)
 80049ce:	4923      	ldr	r1, [pc, #140]	; (8004a5c <HAL_RCC_OscConfig+0x6a8>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fd f87e 	bl	8001ad4 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049de:	f7fd f879 	bl	8001ad4 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0aa      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2202      	movs	r2, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	d1f1      	bne.n	80049de <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d100      	bne.n	8004a04 <HAL_RCC_OscConfig+0x650>
 8004a02:	e09f      	b.n	8004b44 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d100      	bne.n	8004a0c <HAL_RCC_OscConfig+0x658>
 8004a0a:	e078      	b.n	8004afe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d159      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCC_OscConfig+0x688>)
 8004a1a:	4911      	ldr	r1, [pc, #68]	; (8004a60 <HAL_RCC_OscConfig+0x6ac>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fd f858 	bl	8001ad4 <HAL_GetTick>
 8004a24:	0003      	movs	r3, r0
 8004a26:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a28:	e01c      	b.n	8004a64 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fd f853 	bl	8001ad4 <HAL_GetTick>
 8004a2e:	0002      	movs	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d915      	bls.n	8004a64 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e084      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	ffff1fff 	.word	0xffff1fff
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	fffffbff 	.word	0xfffffbff
 8004a50:	00001388 	.word	0x00001388
 8004a54:	efffffff 	.word	0xefffffff
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	ffffdfff 	.word	0xffffdfff
 8004a60:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	049b      	lsls	r3, r3, #18
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d1dc      	bne.n	8004a2a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a70:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a37      	ldr	r2, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x7a0>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	0449      	lsls	r1, r1, #17
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fd f819 	bl	8001ad4 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd f814 	bl	8001ad4 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e045      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	049b      	lsls	r3, r3, #18
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x6f4>
 8004ac6:	e03d      	b.n	8004b44 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004ace:	4922      	ldr	r1, [pc, #136]	; (8004b58 <HAL_RCC_OscConfig+0x7a4>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fffe 	bl	8001ad4 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fc fff9 	bl	8001ad4 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e02a      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	049b      	lsls	r3, r3, #18
 8004af8:	4013      	ands	r3, r2
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x72a>
 8004afc:	e022      	b.n	8004b44 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e01d      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <HAL_RCC_OscConfig+0x79c>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	025b      	lsls	r3, r3, #9
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d10f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	23f0      	movs	r3, #240	; 0xf0
 8004b24:	039b      	lsls	r3, r3, #14
 8004b26:	401a      	ands	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	23c0      	movs	r3, #192	; 0xc0
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b00a      	add	sp, #40	; 0x28
 8004b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	40021000 	.word	0x40021000
 8004b54:	ff02ffff 	.word	0xff02ffff
 8004b58:	feffffff 	.word	0xfeffffff

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e128      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b96      	ldr	r3, [pc, #600]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d91e      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b93      	ldr	r3, [pc, #588]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4393      	bics	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	4b90      	ldr	r3, [pc, #576]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b90:	f7fc ffa0 	bl	8001ad4 <HAL_GetTick>
 8004b94:	0003      	movs	r3, r0
 8004b96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	e009      	b.n	8004bae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9a:	f7fc ff9b 	bl	8001ad4 <HAL_GetTick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	4a8a      	ldr	r2, [pc, #552]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e109      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b87      	ldr	r3, [pc, #540]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1ee      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc6:	4b83      	ldr	r3, [pc, #524]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	22f0      	movs	r2, #240	; 0xf0
 8004bcc:	4393      	bics	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	d100      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
 8004be4:	e089      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bee:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d120      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e1      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	049b      	lsls	r3, r3, #18
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d114      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0d5      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2204      	movs	r2, #4
 8004c24:	4013      	ands	r3, r2
 8004c26:	d109      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0ca      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c2c:	4b69      	ldr	r3, [pc, #420]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4013      	ands	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0c2      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3c:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2203      	movs	r2, #3
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	4b62      	ldr	r3, [pc, #392]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fc ff40 	bl	8001ad4 <HAL_GetTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c60:	e009      	b.n	8004c76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c62:	f7fc ff37 	bl	8001ad4 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a58      	ldr	r2, [pc, #352]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0a5      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c76:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d1ef      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x106>
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fc ff21 	bl	8001ad4 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a4d      	ldr	r2, [pc, #308]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e08f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d1ef      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x132>
 8004cae:	e024      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb8:	e009      	b.n	8004cce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cba:	f7fc ff0b 	bl	8001ad4 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e079      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d1ef      	bne.n	8004cba <HAL_RCC_ClockConfig+0x15e>
 8004cda:	e00e      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7fc fefa 	bl	8001ad4 <HAL_GetTick>
 8004ce0:	0002      	movs	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e068      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf0:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	220c      	movs	r2, #12
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4013      	ands	r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21e      	bcs.n	8004d46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fedb 	bl	8001ad4 <HAL_GetTick>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	e009      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fc fed6 	bl	8001ad4 <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e044      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d1ee      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <HAL_RCC_ClockConfig+0x27c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_RCC_ClockConfig+0x280>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	0019      	movs	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	00da      	lsls	r2, r3, #3
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d84:	f000 f832 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 8004d88:	0001      	movs	r1, r0
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	220f      	movs	r2, #15
 8004d92:	4013      	ands	r3, r2
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <HAL_RCC_ClockConfig+0x284>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	000a      	movs	r2, r1
 8004d9a:	40da      	lsrs	r2, r3
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_ClockConfig+0x288>)
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_RCC_ClockConfig+0x28c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	250b      	movs	r5, #11
 8004da6:	197c      	adds	r4, r7, r5
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7fc fe4d 	bl	8001a48 <HAL_InitTick>
 8004dae:	0003      	movs	r3, r0
 8004db0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004db2:	197b      	adds	r3, r7, r5
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	00001388 	.word	0x00001388
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	fffff8ff 	.word	0xfffff8ff
 8004ddc:	ffffc7ff 	.word	0xffffc7ff
 8004de0:	0800b10c 	.word	0x0800b10c
 8004de4:	200002dc 	.word	0x200002dc
 8004de8:	200002e0 	.word	0x200002e0

08004dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dec:	b5b0      	push	{r4, r5, r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004df2:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d014      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x40>
 8004e02:	d900      	bls.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1a>
 8004e04:	e07b      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x112>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d002      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x24>
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d00b      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0e:	e076      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e10:	4b44      	ldr	r3, [pc, #272]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	d002      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004e1e:	e07c      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004e20:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e24:	e079      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e2a:	e076      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	0c9a      	lsrs	r2, r3, #18
 8004e30:	230f      	movs	r3, #15
 8004e32:	401a      	ands	r2, r3
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	0d9a      	lsrs	r2, r3, #22
 8004e3e:	2303      	movs	r3, #3
 8004e40:	4013      	ands	r3, r2
 8004e42:	3301      	adds	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e46:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d01a      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	4a34      	ldr	r2, [pc, #208]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	69b8      	ldr	r0, [r7, #24]
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	f7fb faf1 	bl	8000448 <__aeabi_lmul>
 8004e66:	0002      	movs	r2, r0
 8004e68:	000b      	movs	r3, r1
 8004e6a:	0010      	movs	r0, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f7fb fac5 	bl	8000408 <__aeabi_uldivmod>
 8004e7e:	0002      	movs	r2, r0
 8004e80:	000b      	movs	r3, r1
 8004e82:	0013      	movs	r3, r2
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
 8004e86:	e037      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e88:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d01a      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	f7fb fad1 	bl	8000448 <__aeabi_lmul>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	000b      	movs	r3, r1
 8004eaa:	0010      	movs	r0, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f7fb faa5 	bl	8000408 <__aeabi_uldivmod>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	000b      	movs	r3, r1
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e017      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	0018      	movs	r0, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x140>)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f7fb fab8 	bl	8000448 <__aeabi_lmul>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	000b      	movs	r3, r1
 8004edc:	0010      	movs	r0, r2
 8004ede:	0019      	movs	r1, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	001c      	movs	r4, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	001d      	movs	r5, r3
 8004ee8:	0022      	movs	r2, r4
 8004eea:	002b      	movs	r3, r5
 8004eec:	f7fb fa8c 	bl	8000408 <__aeabi_uldivmod>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	000b      	movs	r3, r1
 8004ef4:	0013      	movs	r3, r2
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004efc:	e00d      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	0b5b      	lsrs	r3, r3, #13
 8004f04:	2207      	movs	r2, #7
 8004f06:	4013      	ands	r3, r2
 8004f08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	0212      	lsls	r2, r2, #8
 8004f12:	409a      	lsls	r2, r3
 8004f14:	0013      	movs	r3, r2
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f18:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b00e      	add	sp, #56	; 0x38
 8004f22:	bdb0      	pop	{r4, r5, r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	003d0900 	.word	0x003d0900
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	0800b11c 	.word	0x0800b11c

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004f3c:	2017      	movs	r0, #23
 8004f3e:	183b      	adds	r3, r7, r0
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d100      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004f4e:	e0c7      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f50:	4b9b      	ldr	r3, [pc, #620]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	055b      	lsls	r3, r3, #21
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d109      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5c:	4b98      	ldr	r3, [pc, #608]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f60:	4b97      	ldr	r3, [pc, #604]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	0549      	lsls	r1, r1, #21
 8004f66:	430a      	orrs	r2, r1
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f6a:	183b      	adds	r3, r7, r0
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b94      	ldr	r3, [pc, #592]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d11a      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f7c:	4b91      	ldr	r3, [pc, #580]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b90      	ldr	r3, [pc, #576]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	0049      	lsls	r1, r1, #1
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8a:	f7fc fda3 	bl	8001ad4 <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f92:	e008      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f94:	f7fc fd9e 	bl	8001ad4 <HAL_GetTick>
 8004f98:	0002      	movs	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e107      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b87      	ldr	r3, [pc, #540]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004fb2:	4b83      	ldr	r3, [pc, #524]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	23c0      	movs	r3, #192	; 0xc0
 8004fb8:	039b      	lsls	r3, r3, #14
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	23c0      	movs	r3, #192	; 0xc0
 8004fc4:	039b      	lsls	r3, r3, #14
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d013      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	23c0      	movs	r3, #192	; 0xc0
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d10a      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fe0:	4b77      	ldr	r3, [pc, #476]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	401a      	ands	r2, r3
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	029b      	lsls	r3, r3, #10
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0df      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004ff6:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ffa:	23c0      	movs	r3, #192	; 0xc0
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	4013      	ands	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d03b      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	23c0      	movs	r3, #192	; 0xc0
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	4013      	ands	r3, r2
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d033      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2220      	movs	r2, #32
 800501e:	4013      	ands	r3, r2
 8005020:	d02e      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005022:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	4a68      	ldr	r2, [pc, #416]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b64      	ldr	r3, [pc, #400]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800502e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005030:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0309      	lsls	r1, r1, #12
 8005036:	430a      	orrs	r2, r1
 8005038:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503a:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800503c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503e:	4b60      	ldr	r3, [pc, #384]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005040:	4962      	ldr	r1, [pc, #392]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005042:	400a      	ands	r2, r1
 8005044:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005046:	4b5e      	ldr	r3, [pc, #376]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d014      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fc fd3d 	bl	8001ad4 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505e:	e009      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fc fd38 	bl	8001ad4 <HAL_GetTick>
 8005064:	0002      	movs	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4a59      	ldr	r2, [pc, #356]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e0a0      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005074:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d0ef      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2220      	movs	r2, #32
 8005086:	4013      	ands	r3, r2
 8005088:	d01f      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	23c0      	movs	r3, #192	; 0xc0
 8005090:	029b      	lsls	r3, r3, #10
 8005092:	401a      	ands	r2, r3
 8005094:	23c0      	movs	r3, #192	; 0xc0
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	429a      	cmp	r2, r3
 800509a:	d10c      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800509c:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a4c      	ldr	r2, [pc, #304]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	23c0      	movs	r3, #192	; 0xc0
 80050ac:	039b      	lsls	r3, r3, #14
 80050ae:	401a      	ands	r2, r3
 80050b0:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	4b42      	ldr	r3, [pc, #264]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	029b      	lsls	r3, r3, #10
 80050c2:	401a      	ands	r2, r3
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050c6:	430a      	orrs	r2, r1
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050ca:	2317      	movs	r3, #23
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050da:	493f      	ldr	r1, [pc, #252]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80050dc:	400a      	ands	r2, r1
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	4013      	ands	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ea:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	2203      	movs	r2, #3
 80050f0:	4393      	bics	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2202      	movs	r2, #2
 8005104:	4013      	ands	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510c:	220c      	movs	r2, #12
 800510e:	4393      	bics	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005118:	430a      	orrs	r2, r1
 800511a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2204      	movs	r2, #4
 8005122:	4013      	ands	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005126:	4b26      	ldr	r3, [pc, #152]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800512c:	4013      	ands	r3, r2
 800512e:	0019      	movs	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005136:	430a      	orrs	r2, r1
 8005138:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	4013      	ands	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800514a:	4013      	ands	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005154:	430a      	orrs	r2, r1
 8005156:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4013      	ands	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800516a:	4013      	ands	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005174:	430a      	orrs	r2, r1
 8005176:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	4013      	ands	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005188:	4013      	ands	r3, r2
 800518a:	0019      	movs	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005192:	430a      	orrs	r2, r1
 8005194:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	4013      	ands	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051b0:	430a      	orrs	r2, r1
 80051b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	0018      	movs	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b006      	add	sp, #24
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
 80051c8:	fffcffff 	.word	0xfffcffff
 80051cc:	fff7ffff 	.word	0xfff7ffff
 80051d0:	00001388 	.word	0x00001388
 80051d4:	ffcfffff 	.word	0xffcfffff
 80051d8:	efffffff 	.word	0xefffffff
 80051dc:	fffff3ff 	.word	0xfffff3ff
 80051e0:	ffffcfff 	.word	0xffffcfff
 80051e4:	fbffffff 	.word	0xfbffffff
 80051e8:	fff3ffff 	.word	0xfff3ffff

080051ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e032      	b.n	8005264 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2239      	movs	r2, #57	; 0x39
 8005202:	5c9b      	ldrb	r3, [r3, r2]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2238      	movs	r2, #56	; 0x38
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f7fc faa7 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2239      	movs	r2, #57	; 0x39
 800521e:	2102      	movs	r1, #2
 8005220:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	0019      	movs	r1, r3
 800522c:	0010      	movs	r0, r2
 800522e:	f000 fcc9 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	223e      	movs	r2, #62	; 0x3e
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223a      	movs	r2, #58	; 0x3a
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223b      	movs	r2, #59	; 0x3b
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	223c      	movs	r2, #60	; 0x3c
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	223d      	movs	r2, #61	; 0x3d
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2239      	movs	r2, #57	; 0x39
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b002      	add	sp, #8
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2239      	movs	r2, #57	; 0x39
 8005278:	5c9b      	ldrb	r3, [r3, r2]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d001      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e03b      	b.n	80052fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2239      	movs	r2, #57	; 0x39
 8005288:	2102      	movs	r1, #2
 800528a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	430a      	orrs	r2, r1
 800529a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	05db      	lsls	r3, r3, #23
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIM_Base_Start_IT+0x5a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <HAL_TIM_Base_Start_IT+0x98>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_TIM_Base_Start_IT+0x5a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a14      	ldr	r2, [pc, #80]	; (8005308 <HAL_TIM_Base_Start_IT+0x9c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIM_Base_Start_IT+0x5a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_TIM_Base_Start_IT+0xa0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2207      	movs	r2, #7
 80052ce:	4013      	ands	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b06      	cmp	r3, #6
 80052d6:	d010      	beq.n	80052fa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	e007      	b.n	80052fa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40000400 	.word	0x40000400
 8005308:	40010800 	.word	0x40010800
 800530c:	40011400 	.word	0x40011400

08005310 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e032      	b.n	8005388 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2239      	movs	r2, #57	; 0x39
 8005326:	5c9b      	ldrb	r3, [r3, r2]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2238      	movs	r2, #56	; 0x38
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	f000 f829 	bl	8005390 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2239      	movs	r2, #57	; 0x39
 8005342:	2102      	movs	r1, #2
 8005344:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	0019      	movs	r1, r3
 8005350:	0010      	movs	r0, r2
 8005352:	f000 fc37 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	223e      	movs	r2, #62	; 0x3e
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223a      	movs	r2, #58	; 0x3a
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	223b      	movs	r2, #59	; 0x3b
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	223c      	movs	r2, #60	; 0x3c
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	223d      	movs	r2, #61	; 0x3d
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2239      	movs	r2, #57	; 0x39
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e032      	b.n	8005418 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2239      	movs	r2, #57	; 0x39
 80053b6:	5c9b      	ldrb	r3, [r3, r2]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2238      	movs	r2, #56	; 0x38
 80053c2:	2100      	movs	r1, #0
 80053c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f829 	bl	8005420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2239      	movs	r2, #57	; 0x39
 80053d2:	2102      	movs	r1, #2
 80053d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	0019      	movs	r1, r3
 80053e0:	0010      	movs	r0, r2
 80053e2:	f000 fbef 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223e      	movs	r2, #62	; 0x3e
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223a      	movs	r2, #58	; 0x3a
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	223b      	movs	r2, #59	; 0x3b
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223c      	movs	r2, #60	; 0x3c
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223d      	movs	r2, #61	; 0x3d
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2239      	movs	r2, #57	; 0x39
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b002      	add	sp, #8
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <HAL_TIM_PWM_Start+0x22>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	223a      	movs	r2, #58	; 0x3a
 8005444:	5c9b      	ldrb	r3, [r3, r2]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	4193      	sbcs	r3, r2
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e01f      	b.n	8005492 <HAL_TIM_PWM_Start+0x62>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d108      	bne.n	800546a <HAL_TIM_PWM_Start+0x3a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	223b      	movs	r2, #59	; 0x3b
 800545c:	5c9b      	ldrb	r3, [r3, r2]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	4193      	sbcs	r3, r2
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e013      	b.n	8005492 <HAL_TIM_PWM_Start+0x62>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d108      	bne.n	8005482 <HAL_TIM_PWM_Start+0x52>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223c      	movs	r2, #60	; 0x3c
 8005474:	5c9b      	ldrb	r3, [r3, r2]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	4193      	sbcs	r3, r2
 800547e:	b2db      	uxtb	r3, r3
 8005480:	e007      	b.n	8005492 <HAL_TIM_PWM_Start+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	223d      	movs	r2, #61	; 0x3d
 8005486:	5c9b      	ldrb	r3, [r3, r2]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	4193      	sbcs	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e052      	b.n	8005540 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start+0x7a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	223a      	movs	r2, #58	; 0x3a
 80054a4:	2102      	movs	r1, #2
 80054a6:	5499      	strb	r1, [r3, r2]
 80054a8:	e013      	b.n	80054d2 <HAL_TIM_PWM_Start+0xa2>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start+0x8a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223b      	movs	r2, #59	; 0x3b
 80054b4:	2102      	movs	r1, #2
 80054b6:	5499      	strb	r1, [r3, r2]
 80054b8:	e00b      	b.n	80054d2 <HAL_TIM_PWM_Start+0xa2>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start+0x9a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	223c      	movs	r2, #60	; 0x3c
 80054c4:	2102      	movs	r1, #2
 80054c6:	5499      	strb	r1, [r3, r2]
 80054c8:	e003      	b.n	80054d2 <HAL_TIM_PWM_Start+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	223d      	movs	r2, #61	; 0x3d
 80054ce:	2102      	movs	r1, #2
 80054d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fd6e 	bl	8005fbc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	05db      	lsls	r3, r3, #23
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d00e      	beq.n	800550a <HAL_TIM_PWM_Start+0xda>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <HAL_TIM_PWM_Start+0x118>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIM_PWM_Start+0xda>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_TIM_PWM_Start+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIM_PWM_Start+0xda>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a12      	ldr	r2, [pc, #72]	; (8005550 <HAL_TIM_PWM_Start+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d111      	bne.n	800552e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2207      	movs	r2, #7
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d010      	beq.n	800553e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2101      	movs	r1, #1
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	e007      	b.n	800553e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2101      	movs	r1, #1
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40000400 	.word	0x40000400
 800554c:	40010800 	.word	0x40010800
 8005550:	40011400 	.word	0x40011400

08005554 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	0018      	movs	r0, r3
 8005568:	f000 fd28 	bl	8005fbc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4a16      	ldr	r2, [pc, #88]	; (80055cc <HAL_TIM_PWM_Stop+0x78>)
 8005574:	4013      	ands	r3, r2
 8005576:	d107      	bne.n	8005588 <HAL_TIM_PWM_Stop+0x34>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2101      	movs	r1, #1
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <HAL_TIM_PWM_Stop+0x44>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	223a      	movs	r2, #58	; 0x3a
 8005592:	2101      	movs	r1, #1
 8005594:	5499      	strb	r1, [r3, r2]
 8005596:	e013      	b.n	80055c0 <HAL_TIM_PWM_Stop+0x6c>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d104      	bne.n	80055a8 <HAL_TIM_PWM_Stop+0x54>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	223b      	movs	r2, #59	; 0x3b
 80055a2:	2101      	movs	r1, #1
 80055a4:	5499      	strb	r1, [r3, r2]
 80055a6:	e00b      	b.n	80055c0 <HAL_TIM_PWM_Stop+0x6c>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d104      	bne.n	80055b8 <HAL_TIM_PWM_Stop+0x64>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	223c      	movs	r2, #60	; 0x3c
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]
 80055b6:	e003      	b.n	80055c0 <HAL_TIM_PWM_Stop+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	223d      	movs	r2, #61	; 0x3d
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b002      	add	sp, #8
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	00001111 	.word	0x00001111

080055d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2202      	movs	r2, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d124      	bne.n	8005630 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d11d      	bne.n	8005630 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2203      	movs	r2, #3
 80055fa:	4252      	negs	r2, r2
 80055fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2203      	movs	r2, #3
 800560c:	4013      	ands	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	0018      	movs	r0, r3
 8005614:	f000 fabe 	bl	8005b94 <HAL_TIM_IC_CaptureCallback>
 8005618:	e007      	b.n	800562a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fab1 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 fabd 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2204      	movs	r2, #4
 8005638:	4013      	ands	r3, r2
 800563a:	2b04      	cmp	r3, #4
 800563c:	d125      	bne.n	800568a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2204      	movs	r2, #4
 8005646:	4013      	ands	r3, r2
 8005648:	2b04      	cmp	r3, #4
 800564a:	d11e      	bne.n	800568a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2205      	movs	r2, #5
 8005652:	4252      	negs	r2, r2
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4013      	ands	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fa91 	bl	8005b94 <HAL_TIM_IC_CaptureCallback>
 8005672:	e007      	b.n	8005684 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0018      	movs	r0, r3
 8005678:	f000 fa84 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fa90 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2208      	movs	r2, #8
 8005692:	4013      	ands	r3, r2
 8005694:	2b08      	cmp	r3, #8
 8005696:	d124      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2208      	movs	r2, #8
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d11d      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2209      	movs	r2, #9
 80056ac:	4252      	negs	r2, r2
 80056ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	2203      	movs	r2, #3
 80056be:	4013      	ands	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f000 fa65 	bl	8005b94 <HAL_TIM_IC_CaptureCallback>
 80056ca:	e007      	b.n	80056dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fa58 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 fa64 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2210      	movs	r2, #16
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d125      	bne.n	800573c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2210      	movs	r2, #16
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d11e      	bne.n	800573c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2211      	movs	r2, #17
 8005704:	4252      	negs	r2, r2
 8005706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2208      	movs	r2, #8
 800570c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	23c0      	movs	r3, #192	; 0xc0
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4013      	ands	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	0018      	movs	r0, r3
 8005720:	f000 fa38 	bl	8005b94 <HAL_TIM_IC_CaptureCallback>
 8005724:	e007      	b.n	8005736 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0018      	movs	r0, r3
 800572a:	f000 fa2b 	bl	8005b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fa37 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2201      	movs	r2, #1
 8005744:	4013      	ands	r3, r2
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10f      	bne.n	800576a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	4013      	ands	r3, r2
 8005754:	2b01      	cmp	r3, #1
 8005756:	d108      	bne.n	800576a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2202      	movs	r2, #2
 800575e:	4252      	negs	r2, r2
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f7fb ff55 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	4013      	ands	r3, r2
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d10f      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	4013      	ands	r3, r2
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d108      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2241      	movs	r2, #65	; 0x41
 800578c:	4252      	negs	r2, r2
 800578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f000 fa0e 	bl	8005bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2317      	movs	r3, #23
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2238      	movs	r2, #56	; 0x38
 80057b8:	5c9b      	ldrb	r3, [r3, r2]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_OC_ConfigChannel+0x22>
 80057be:	2302      	movs	r3, #2
 80057c0:	e042      	b.n	8005848 <HAL_TIM_OC_ConfigChannel+0xa8>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2238      	movs	r2, #56	; 0x38
 80057c6:	2101      	movs	r1, #1
 80057c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d027      	beq.n	8005820 <HAL_TIM_OC_ConfigChannel+0x80>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d82c      	bhi.n	8005830 <HAL_TIM_OC_ConfigChannel+0x90>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d019      	beq.n	8005810 <HAL_TIM_OC_ConfigChannel+0x70>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d826      	bhi.n	8005830 <HAL_TIM_OC_ConfigChannel+0x90>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_OC_ConfigChannel+0x50>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d008      	beq.n	8005800 <HAL_TIM_OC_ConfigChannel+0x60>
 80057ee:	e01f      	b.n	8005830 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	0011      	movs	r1, r2
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 fa41 	bl	8005c80 <TIM_OC1_SetConfig>
      break;
 80057fe:	e01c      	b.n	800583a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	0011      	movs	r1, r2
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fa75 	bl	8005cf8 <TIM_OC2_SetConfig>
      break;
 800580e:	e014      	b.n	800583a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	0011      	movs	r1, r2
 8005818:	0018      	movs	r0, r3
 800581a:	f000 faaf 	bl	8005d7c <TIM_OC3_SetConfig>
      break;
 800581e:	e00c      	b.n	800583a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0011      	movs	r1, r2
 8005828:	0018      	movs	r0, r3
 800582a:	f000 fae7 	bl	8005dfc <TIM_OC4_SetConfig>
      break;
 800582e:	e004      	b.n	800583a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005830:	2317      	movs	r3, #23
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2201      	movs	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
      break;
 8005838:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2238      	movs	r2, #56	; 0x38
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]

  return status;
 8005842:	2317      	movs	r3, #23
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	781b      	ldrb	r3, [r3, #0]
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b006      	add	sp, #24
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2317      	movs	r3, #23
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2238      	movs	r2, #56	; 0x38
 8005868:	5c9b      	ldrb	r3, [r3, r2]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x22>
 800586e:	2302      	movs	r3, #2
 8005870:	e0ad      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2238      	movs	r2, #56	; 0x38
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d100      	bne.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005880:	e076      	b.n	8005970 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	d900      	bls.n	800588a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005888:	e095      	b.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d04e      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d900      	bls.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005896:	e08e      	b.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d021      	beq.n	80058e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80058a4:	e087      	b.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0011      	movs	r1, r2
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 f9e6 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2108      	movs	r1, #8
 80058c0:	430a      	orrs	r2, r1
 80058c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2104      	movs	r1, #4
 80058d0:	438a      	bics	r2, r1
 80058d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6999      	ldr	r1, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	619a      	str	r2, [r3, #24]
      break;
 80058e6:	e06b      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	0011      	movs	r1, r2
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 fa01 	bl	8005cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2180      	movs	r1, #128	; 0x80
 8005902:	0109      	lsls	r1, r1, #4
 8005904:	430a      	orrs	r2, r1
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4931      	ldr	r1, [pc, #196]	; (80059d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005914:	400a      	ands	r2, r1
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	021a      	lsls	r2, r3, #8
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	619a      	str	r2, [r3, #24]
      break;
 800592c:	e048      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fa20 	bl	8005d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2108      	movs	r1, #8
 8005948:	430a      	orrs	r2, r1
 800594a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2104      	movs	r1, #4
 8005958:	438a      	bics	r2, r1
 800595a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69d9      	ldr	r1, [r3, #28]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e027      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f000 fa3f 	bl	8005dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	0109      	lsls	r1, r1, #4
 800598c:	430a      	orrs	r2, r1
 800598e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	490f      	ldr	r1, [pc, #60]	; (80059d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800599c:	400a      	ands	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69d9      	ldr	r1, [r3, #28]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	61da      	str	r2, [r3, #28]
      break;
 80059b4:	e004      	b.n	80059c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80059b6:	2317      	movs	r3, #23
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
      break;
 80059be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2238      	movs	r2, #56	; 0x38
 80059c4:	2100      	movs	r1, #0
 80059c6:	5499      	strb	r1, [r3, r2]

  return status;
 80059c8:	2317      	movs	r3, #23
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	781b      	ldrb	r3, [r3, #0]
}
 80059ce:	0018      	movs	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b006      	add	sp, #24
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	fffffbff 	.word	0xfffffbff

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	230f      	movs	r3, #15
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2238      	movs	r2, #56	; 0x38
 80059f2:	5c9b      	ldrb	r3, [r3, r2]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_ConfigClockSource+0x20>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0bc      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x19a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2238      	movs	r2, #56	; 0x38
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2239      	movs	r2, #57	; 0x39
 8005a08:	2102      	movs	r1, #2
 8005a0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2277      	movs	r2, #119	; 0x77
 8005a18:	4393      	bics	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	0192      	lsls	r2, r2, #6
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d040      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xde>
 8005a38:	2280      	movs	r2, #128	; 0x80
 8005a3a:	0192      	lsls	r2, r2, #6
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d900      	bls.n	8005a42 <HAL_TIM_ConfigClockSource+0x66>
 8005a40:	e088      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	0152      	lsls	r2, r2, #5
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_TIM_ConfigClockSource+0x70>
 8005a4a:	e088      	b.n	8005b5e <HAL_TIM_ConfigClockSource+0x182>
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	0152      	lsls	r2, r2, #5
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d900      	bls.n	8005a56 <HAL_TIM_ConfigClockSource+0x7a>
 8005a54:	e07e      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a56:	2b70      	cmp	r3, #112	; 0x70
 8005a58:	d018      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0xb0>
 8005a5a:	d900      	bls.n	8005a5e <HAL_TIM_ConfigClockSource+0x82>
 8005a5c:	e07a      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a5e:	2b60      	cmp	r3, #96	; 0x60
 8005a60:	d04f      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x126>
 8005a62:	d900      	bls.n	8005a66 <HAL_TIM_ConfigClockSource+0x8a>
 8005a64:	e076      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a66:	2b50      	cmp	r3, #80	; 0x50
 8005a68:	d03b      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0x106>
 8005a6a:	d900      	bls.n	8005a6e <HAL_TIM_ConfigClockSource+0x92>
 8005a6c:	e072      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d057      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x146>
 8005a72:	d900      	bls.n	8005a76 <HAL_TIM_ConfigClockSource+0x9a>
 8005a74:	e06e      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a76:	2b30      	cmp	r3, #48	; 0x30
 8005a78:	d063      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x166>
 8005a7a:	d86b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d060      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x166>
 8005a80:	d868      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d05d      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x166>
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d05b      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x166>
 8005a8a:	e063      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f000 fa6e 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2277      	movs	r2, #119	; 0x77
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]
      break;
 8005ab8:	e052      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f000 fa57 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2180      	movs	r1, #128	; 0x80
 8005ada:	01c9      	lsls	r1, r1, #7
 8005adc:	430a      	orrs	r2, r1
 8005ade:	609a      	str	r2, [r3, #8]
      break;
 8005ae0:	e03e      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	001a      	movs	r2, r3
 8005af0:	f000 f9ca 	bl	8005e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2150      	movs	r1, #80	; 0x50
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 fa24 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005b00:	e02e      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	001a      	movs	r2, r3
 8005b10:	f000 f9e8 	bl	8005ee4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2160      	movs	r1, #96	; 0x60
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f000 fa14 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e01e      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	001a      	movs	r2, r3
 8005b30:	f000 f9aa 	bl	8005e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fa04 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e00e      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	0010      	movs	r0, r2
 8005b4e:	f000 f9fb 	bl	8005f48 <TIM_ITRx_SetConfig>
      break;
 8005b52:	e005      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005b54:	230f      	movs	r3, #15
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
      break;
 8005b5c:	e000      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005b5e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2239      	movs	r2, #57	; 0x39
 8005b64:	2101      	movs	r1, #1
 8005b66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2238      	movs	r2, #56	; 0x38
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]

  return status;
 8005b70:	230f      	movs	r3, #15
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	781b      	ldrb	r3, [r3, #0]
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b004      	add	sp, #16
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	ffff00ff 	.word	0xffff00ff

08005b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	05db      	lsls	r3, r3, #23
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x32>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a23      	ldr	r2, [pc, #140]	; (8005c70 <TIM_Base_SetConfig+0xac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0x32>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <TIM_Base_SetConfig+0xb0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0x32>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <TIM_Base_SetConfig+0xb4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2270      	movs	r2, #112	; 0x70
 8005bfa:	4393      	bics	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	05db      	lsls	r3, r3, #23
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d00b      	beq.n	8005c2a <TIM_Base_SetConfig+0x66>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_Base_SetConfig+0xac>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_Base_SetConfig+0x66>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <TIM_Base_SetConfig+0xb0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_Base_SetConfig+0x66>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <TIM_Base_SetConfig+0xb4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <TIM_Base_SetConfig+0xb8>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	4393      	bics	r3, r2
 8005c42:	001a      	movs	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	615a      	str	r2, [r3, #20]
}
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b004      	add	sp, #16
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40010800 	.word	0x40010800
 8005c78:	40011400 	.word	0x40011400
 8005c7c:	fffffcff 	.word	0xfffffcff

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4393      	bics	r3, r2
 8005c92:	001a      	movs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2270      	movs	r2, #112	; 0x70
 8005cae:	4393      	bics	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	4393      	bics	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4393      	bics	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	46c0      	nop			; (mov r8, r8)
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b006      	add	sp, #24
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	2210      	movs	r2, #16
 8005d08:	4393      	bics	r3, r2
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <TIM_OC2_SetConfig+0x7c>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a12      	ldr	r2, [pc, #72]	; (8005d78 <TIM_OC2_SetConfig+0x80>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2220      	movs	r2, #32
 8005d42:	4393      	bics	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b006      	add	sp, #24
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	ffff8fff 	.word	0xffff8fff
 8005d78:	fffffcff 	.word	0xfffffcff

08005d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <TIM_OC3_SetConfig+0x78>)
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2270      	movs	r2, #112	; 0x70
 8005da8:	4393      	bics	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2203      	movs	r2, #3
 8005db0:	4393      	bics	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <TIM_OC3_SetConfig+0x7c>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	621a      	str	r2, [r3, #32]
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b006      	add	sp, #24
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	fffffeff 	.word	0xfffffeff
 8005df8:	fffffdff 	.word	0xfffffdff

08005dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <TIM_OC4_SetConfig+0x7c>)
 8005e0c:	401a      	ands	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <TIM_OC4_SetConfig+0x80>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <TIM_OC4_SetConfig+0x84>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <TIM_OC4_SetConfig+0x88>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b006      	add	sp, #24
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	ffffefff 	.word	0xffffefff
 8005e7c:	ffff8fff 	.word	0xffff8fff
 8005e80:	fffffcff 	.word	0xfffffcff
 8005e84:	ffffdfff 	.word	0xffffdfff

08005e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	22f0      	movs	r2, #240	; 0xf0
 8005eb2:	4393      	bics	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b006      	add	sp, #24
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	4393      	bics	r3, r2
 8005ef8:	001a      	movs	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	4a0d      	ldr	r2, [pc, #52]	; (8005f44 <TIM_TI2_ConfigInputStage+0x60>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	22a0      	movs	r2, #160	; 0xa0
 8005f20:	4393      	bics	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b006      	add	sp, #24
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	ffff0fff 	.word	0xffff0fff

08005f48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2270      	movs	r2, #112	; 0x70
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	2207      	movs	r2, #7
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b004      	add	sp, #16
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <TIM_ETR_SetConfig+0x3c>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b006      	add	sp, #24
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	ffff00ff 	.word	0xffff00ff

08005fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	221f      	movs	r2, #31
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2201      	movs	r2, #1
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	0013      	movs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	43d2      	mvns	r2, r2
 8005fde:	401a      	ands	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	211f      	movs	r1, #31
 8005fec:	400b      	ands	r3, r1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4099      	lsls	r1, r3
 8005ff2:	000b      	movs	r3, r1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b006      	add	sp, #24
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2238      	movs	r2, #56	; 0x38
 8006012:	5c9b      	ldrb	r3, [r3, r2]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e047      	b.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2238      	movs	r2, #56	; 0x38
 8006020:	2101      	movs	r1, #1
 8006022:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2239      	movs	r2, #57	; 0x39
 8006028:	2102      	movs	r1, #2
 800602a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2270      	movs	r2, #112	; 0x70
 8006040:	4393      	bics	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	429a      	cmp	r2, r3
 8006060:	d00e      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a11      	ldr	r2, [pc, #68]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a10      	ldr	r2, [pc, #64]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10c      	bne.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	4393      	bics	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2239      	movs	r2, #57	; 0x39
 800609e:	2101      	movs	r1, #1
 80060a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2238      	movs	r2, #56	; 0x38
 80060a6:	2100      	movs	r1, #0
 80060a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	0018      	movs	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b004      	add	sp, #16
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40010800 	.word	0x40010800
 80060bc:	40011400 	.word	0x40011400

080060c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2244      	movs	r2, #68	; 0x44
 80060cc:	2100      	movs	r1, #0
 80060ce:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <USB_EnableGlobalInt+0x28>)
 80060d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	b299      	uxth	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2240      	movs	r2, #64	; 0x40
 80060dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b004      	add	sp, #16
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	0000bf80 	.word	0x0000bf80

080060ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <USB_DisableGlobalInt+0x30>)
 80060f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	5a9b      	ldrh	r3, [r3, r2]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	b292      	uxth	r2, r2
 8006104:	43d2      	mvns	r2, r2
 8006106:	b292      	uxth	r2, r2
 8006108:	4013      	ands	r3, r2
 800610a:	b299      	uxth	r1, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b004      	add	sp, #16
 800611a:	bd80      	pop	{r7, pc}
 800611c:	0000bf80 	.word	0x0000bf80

08006120 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006120:	b084      	sub	sp, #16
 8006122:	b590      	push	{r4, r7, lr}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	2004      	movs	r0, #4
 800612c:	2410      	movs	r4, #16
 800612e:	1900      	adds	r0, r0, r4
 8006130:	2408      	movs	r4, #8
 8006132:	46a4      	mov	ip, r4
 8006134:	44bc      	add	ip, r7
 8006136:	4460      	add	r0, ip
 8006138:	6001      	str	r1, [r0, #0]
 800613a:	6042      	str	r2, [r0, #4]
 800613c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	2101      	movs	r1, #1
 8006144:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2240      	movs	r2, #64	; 0x40
 800614a:	2100      	movs	r1, #0
 800614c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2244      	movs	r2, #68	; 0x44
 8006152:	2100      	movs	r1, #0
 8006154:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2250      	movs	r2, #80	; 0x50
 800615a:	2100      	movs	r1, #0
 800615c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b003      	add	sp, #12
 8006166:	bc90      	pop	{r4, r7}
 8006168:	bc08      	pop	{r3}
 800616a:	b004      	add	sp, #16
 800616c:	4718      	bx	r3
	...

08006170 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b09c      	sub	sp, #112	; 0x70
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800617a:	236f      	movs	r3, #111	; 0x6f
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	18d3      	adds	r3, r2, r3
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29a      	uxth	r2, r3
 8006190:	236c      	movs	r3, #108	; 0x6c
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	49a3      	ldr	r1, [pc, #652]	; (8006424 <USB_ActivateEndpoint+0x2b4>)
 8006196:	400a      	ands	r2, r1
 8006198:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d017      	beq.n	80061d2 <USB_ActivateEndpoint+0x62>
 80061a2:	dc28      	bgt.n	80061f6 <USB_ActivateEndpoint+0x86>
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d00e      	beq.n	80061c6 <USB_ActivateEndpoint+0x56>
 80061a8:	dc25      	bgt.n	80061f6 <USB_ActivateEndpoint+0x86>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <USB_ActivateEndpoint+0x44>
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d018      	beq.n	80061e4 <USB_ActivateEndpoint+0x74>
 80061b2:	e020      	b.n	80061f6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061b4:	226c      	movs	r2, #108	; 0x6c
 80061b6:	18bb      	adds	r3, r7, r2
 80061b8:	18ba      	adds	r2, r7, r2
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	2180      	movs	r1, #128	; 0x80
 80061be:	0089      	lsls	r1, r1, #2
 80061c0:	430a      	orrs	r2, r1
 80061c2:	801a      	strh	r2, [r3, #0]
      break;
 80061c4:	e01c      	b.n	8006200 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80061c6:	226c      	movs	r2, #108	; 0x6c
 80061c8:	18bb      	adds	r3, r7, r2
 80061ca:	18ba      	adds	r2, r7, r2
 80061cc:	8812      	ldrh	r2, [r2, #0]
 80061ce:	801a      	strh	r2, [r3, #0]
      break;
 80061d0:	e016      	b.n	8006200 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061d2:	226c      	movs	r2, #108	; 0x6c
 80061d4:	18bb      	adds	r3, r7, r2
 80061d6:	18ba      	adds	r2, r7, r2
 80061d8:	8812      	ldrh	r2, [r2, #0]
 80061da:	21c0      	movs	r1, #192	; 0xc0
 80061dc:	00c9      	lsls	r1, r1, #3
 80061de:	430a      	orrs	r2, r1
 80061e0:	801a      	strh	r2, [r3, #0]
      break;
 80061e2:	e00d      	b.n	8006200 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061e4:	226c      	movs	r2, #108	; 0x6c
 80061e6:	18bb      	adds	r3, r7, r2
 80061e8:	18ba      	adds	r2, r7, r2
 80061ea:	8812      	ldrh	r2, [r2, #0]
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	00c9      	lsls	r1, r1, #3
 80061f0:	430a      	orrs	r2, r1
 80061f2:	801a      	strh	r2, [r3, #0]
      break;
 80061f4:	e004      	b.n	8006200 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80061f6:	236f      	movs	r3, #111	; 0x6f
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	2201      	movs	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
      break;
 80061fe:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	226c      	movs	r2, #108	; 0x6c
 800620c:	18ba      	adds	r2, r7, r2
 800620e:	8812      	ldrh	r2, [r2, #0]
 8006210:	4985      	ldr	r1, [pc, #532]	; (8006428 <USB_ActivateEndpoint+0x2b8>)
 8006212:	430a      	orrs	r2, r1
 8006214:	b292      	uxth	r2, r2
 8006216:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	18d3      	adds	r3, r2, r3
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	b21b      	sxth	r3, r3
 8006228:	4a80      	ldr	r2, [pc, #512]	; (800642c <USB_ActivateEndpoint+0x2bc>)
 800622a:	4013      	ands	r3, r2
 800622c:	b21a      	sxth	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b21b      	sxth	r3, r3
 8006234:	4313      	orrs	r3, r2
 8006236:	b21a      	sxth	r2, r3
 8006238:	2166      	movs	r1, #102	; 0x66
 800623a:	187b      	adds	r3, r7, r1
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	18d3      	adds	r3, r2, r3
 8006248:	187a      	adds	r2, r7, r1
 800624a:	8812      	ldrh	r2, [r2, #0]
 800624c:	4976      	ldr	r1, [pc, #472]	; (8006428 <USB_ActivateEndpoint+0x2b8>)
 800624e:	430a      	orrs	r2, r1
 8006250:	b292      	uxth	r2, r2
 8006252:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	7b1b      	ldrb	r3, [r3, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d000      	beq.n	800625e <USB_ActivateEndpoint+0xee>
 800625c:	e178      	b.n	8006550 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d100      	bne.n	8006268 <USB_ActivateEndpoint+0xf8>
 8006266:	e07a      	b.n	800635e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2250      	movs	r2, #80	; 0x50
 8006270:	5a9b      	ldrh	r3, [r3, r2]
 8006272:	b29b      	uxth	r3, r3
 8006274:	001a      	movs	r2, r3
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	189b      	adds	r3, r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	00da      	lsls	r2, r3, #3
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	00d2      	lsls	r2, r2, #3
 800628a:	4694      	mov	ip, r2
 800628c:	4463      	add	r3, ip
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	88db      	ldrh	r3, [r3, #6]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	18db      	adds	r3, r3, r3
 800629a:	b29a      	uxth	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	18d2      	adds	r2, r2, r3
 80062aa:	2112      	movs	r1, #18
 80062ac:	187b      	adds	r3, r7, r1
 80062ae:	8812      	ldrh	r2, [r2, #0]
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	2240      	movs	r2, #64	; 0x40
 80062b8:	4013      	ands	r3, r2
 80062ba:	d016      	beq.n	80062ea <USB_ActivateEndpoint+0x17a>
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	18d3      	adds	r3, r2, r3
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	2010      	movs	r0, #16
 80062cc:	183b      	adds	r3, r7, r0
 80062ce:	4957      	ldr	r1, [pc, #348]	; (800642c <USB_ActivateEndpoint+0x2bc>)
 80062d0:	400a      	ands	r2, r1
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	183a      	adds	r2, r7, r0
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	4953      	ldr	r1, [pc, #332]	; (8006430 <USB_ActivateEndpoint+0x2c0>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	b292      	uxth	r2, r2
 80062e8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	78db      	ldrb	r3, [r3, #3]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d01d      	beq.n	800632e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	18d3      	adds	r3, r2, r3
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	200c      	movs	r0, #12
 8006302:	183b      	adds	r3, r7, r0
 8006304:	494b      	ldr	r1, [pc, #300]	; (8006434 <USB_ActivateEndpoint+0x2c4>)
 8006306:	400a      	ands	r2, r1
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	183b      	adds	r3, r7, r0
 800630c:	183a      	adds	r2, r7, r0
 800630e:	8812      	ldrh	r2, [r2, #0]
 8006310:	2120      	movs	r1, #32
 8006312:	404a      	eors	r2, r1
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	18d3      	adds	r3, r2, r3
 8006320:	183a      	adds	r2, r7, r0
 8006322:	8812      	ldrh	r2, [r2, #0]
 8006324:	4940      	ldr	r1, [pc, #256]	; (8006428 <USB_ActivateEndpoint+0x2b8>)
 8006326:	430a      	orrs	r2, r1
 8006328:	b292      	uxth	r2, r2
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e2b4      	b.n	8006898 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29a      	uxth	r2, r3
 800633c:	200e      	movs	r0, #14
 800633e:	183b      	adds	r3, r7, r0
 8006340:	493c      	ldr	r1, [pc, #240]	; (8006434 <USB_ActivateEndpoint+0x2c4>)
 8006342:	400a      	ands	r2, r1
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	18d3      	adds	r3, r2, r3
 8006350:	183a      	adds	r2, r7, r0
 8006352:	8812      	ldrh	r2, [r2, #0]
 8006354:	4934      	ldr	r1, [pc, #208]	; (8006428 <USB_ActivateEndpoint+0x2b8>)
 8006356:	430a      	orrs	r2, r1
 8006358:	b292      	uxth	r2, r2
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e29c      	b.n	8006898 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	633b      	str	r3, [r7, #48]	; 0x30
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2250      	movs	r2, #80	; 0x50
 8006366:	5a9b      	ldrh	r3, [r3, r2]
 8006368:	b29b      	uxth	r3, r3
 800636a:	001a      	movs	r2, r3
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	189b      	adds	r3, r3, r2
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	00da      	lsls	r2, r3, #3
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	18d3      	adds	r3, r2, r3
 800637c:	4a2e      	ldr	r2, [pc, #184]	; (8006438 <USB_ActivateEndpoint+0x2c8>)
 800637e:	4694      	mov	ip, r2
 8006380:	4463      	add	r3, ip
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	88db      	ldrh	r3, [r3, #6]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	18db      	adds	r3, r3, r3
 800638e:	b29a      	uxth	r2, r3
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2250      	movs	r2, #80	; 0x50
 800639c:	5a9b      	ldrh	r3, [r3, r2]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	001a      	movs	r2, r3
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	189b      	adds	r3, r3, r2
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	00da      	lsls	r2, r3, #3
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	4a22      	ldr	r2, [pc, #136]	; (800643c <USB_ActivateEndpoint+0x2cc>)
 80063b4:	4694      	mov	ip, r2
 80063b6:	4463      	add	r3, ip
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	059b      	lsls	r3, r3, #22
 80063c2:	0d9b      	lsrs	r3, r3, #22
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b3e      	cmp	r3, #62	; 0x3e
 80063d0:	d91a      	bls.n	8006408 <USB_ActivateEndpoint+0x298>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	221f      	movs	r2, #31
 80063e0:	4013      	ands	r3, r2
 80063e2:	d102      	bne.n	80063ea <USB_ActivateEndpoint+0x27a>
 80063e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e6:	3b01      	subs	r3, #1
 80063e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	029b      	lsls	r3, r3, #10
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4a10      	ldr	r2, [pc, #64]	; (8006440 <USB_ActivateEndpoint+0x2d0>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e034      	b.n	8006472 <USB_ActivateEndpoint+0x302>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <USB_ActivateEndpoint+0x2d4>
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <USB_ActivateEndpoint+0x2d0>)
 8006418:	4313      	orrs	r3, r2
 800641a:	b29a      	uxth	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e027      	b.n	8006472 <USB_ActivateEndpoint+0x302>
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	ffff898f 	.word	0xffff898f
 8006428:	ffff8080 	.word	0xffff8080
 800642c:	ffff8f8f 	.word	0xffff8f8f
 8006430:	ffff80c0 	.word	0xffff80c0
 8006434:	ffff8fbf 	.word	0xffff8fbf
 8006438:	00000404 	.word	0x00000404
 800643c:	00000406 	.word	0x00000406
 8006440:	ffff8000 	.word	0xffff8000
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	66bb      	str	r3, [r7, #104]	; 0x68
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2201      	movs	r2, #1
 8006452:	4013      	ands	r3, r2
 8006454:	d002      	beq.n	800645c <USB_ActivateEndpoint+0x2ec>
 8006456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006458:	3301      	adds	r3, #1
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29a      	uxth	r2, r3
 8006462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29b      	uxth	r3, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	b29a      	uxth	r2, r3
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	18d2      	adds	r2, r2, r3
 800647c:	2122      	movs	r1, #34	; 0x22
 800647e:	187b      	adds	r3, r7, r1
 8006480:	8812      	ldrh	r2, [r2, #0]
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	187b      	adds	r3, r7, r1
 8006486:	881a      	ldrh	r2, [r3, #0]
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4013      	ands	r3, r2
 800648e:	d016      	beq.n	80064be <USB_ActivateEndpoint+0x34e>
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29a      	uxth	r2, r3
 800649e:	2020      	movs	r0, #32
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	49dd      	ldr	r1, [pc, #884]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 80064a4:	400a      	ands	r2, r1
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	183a      	adds	r2, r7, r0
 80064b4:	8812      	ldrh	r2, [r2, #0]
 80064b6:	49d9      	ldr	r1, [pc, #868]	; (800681c <USB_ActivateEndpoint+0x6ac>)
 80064b8:	430a      	orrs	r2, r1
 80064ba:	b292      	uxth	r2, r2
 80064bc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d125      	bne.n	8006512 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	18d3      	adds	r3, r2, r3
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	201c      	movs	r0, #28
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	49d1      	ldr	r1, [pc, #836]	; (8006820 <USB_ActivateEndpoint+0x6b0>)
 80064da:	400a      	ands	r2, r1
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	183a      	adds	r2, r7, r0
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	0149      	lsls	r1, r1, #5
 80064e8:	404a      	eors	r2, r1
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	183b      	adds	r3, r7, r0
 80064ee:	183a      	adds	r2, r7, r0
 80064f0:	8812      	ldrh	r2, [r2, #0]
 80064f2:	2180      	movs	r1, #128	; 0x80
 80064f4:	0189      	lsls	r1, r1, #6
 80064f6:	404a      	eors	r2, r1
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	18d3      	adds	r3, r2, r3
 8006504:	183a      	adds	r2, r7, r0
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	49c6      	ldr	r1, [pc, #792]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 800650a:	430a      	orrs	r2, r1
 800650c:	b292      	uxth	r2, r2
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e1c2      	b.n	8006898 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	18d3      	adds	r3, r2, r3
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29a      	uxth	r2, r3
 8006520:	201e      	movs	r0, #30
 8006522:	183b      	adds	r3, r7, r0
 8006524:	49be      	ldr	r1, [pc, #760]	; (8006820 <USB_ActivateEndpoint+0x6b0>)
 8006526:	400a      	ands	r2, r1
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	183b      	adds	r3, r7, r0
 800652c:	183a      	adds	r2, r7, r0
 800652e:	8812      	ldrh	r2, [r2, #0]
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	0189      	lsls	r1, r1, #6
 8006534:	404a      	eors	r2, r1
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18d3      	adds	r3, r2, r3
 8006542:	183a      	adds	r2, r7, r0
 8006544:	8812      	ldrh	r2, [r2, #0]
 8006546:	49b7      	ldr	r1, [pc, #732]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 8006548:	430a      	orrs	r2, r1
 800654a:	b292      	uxth	r2, r2
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e1a3      	b.n	8006898 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	78db      	ldrb	r3, [r3, #3]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d117      	bne.n	8006588 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	18d3      	adds	r3, r2, r3
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29a      	uxth	r2, r3
 8006566:	2062      	movs	r0, #98	; 0x62
 8006568:	183b      	adds	r3, r7, r0
 800656a:	49ab      	ldr	r1, [pc, #684]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 800656c:	400a      	ands	r2, r1
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	18d3      	adds	r3, r2, r3
 800657a:	183a      	adds	r2, r7, r0
 800657c:	8812      	ldrh	r2, [r2, #0]
 800657e:	49aa      	ldr	r1, [pc, #680]	; (8006828 <USB_ActivateEndpoint+0x6b8>)
 8006580:	430a      	orrs	r2, r1
 8006582:	b292      	uxth	r2, r2
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e016      	b.n	80065b6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	18d3      	adds	r3, r2, r3
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29a      	uxth	r2, r3
 8006596:	2064      	movs	r0, #100	; 0x64
 8006598:	183b      	adds	r3, r7, r0
 800659a:	49a4      	ldr	r1, [pc, #656]	; (800682c <USB_ActivateEndpoint+0x6bc>)
 800659c:	400a      	ands	r2, r1
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	18d3      	adds	r3, r2, r3
 80065aa:	183a      	adds	r2, r7, r0
 80065ac:	8812      	ldrh	r2, [r2, #0]
 80065ae:	499d      	ldr	r1, [pc, #628]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 80065b0:	430a      	orrs	r2, r1
 80065b2:	b292      	uxth	r2, r2
 80065b4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2250      	movs	r2, #80	; 0x50
 80065be:	5a9b      	ldrh	r3, [r3, r2]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	001a      	movs	r2, r3
 80065c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	00da      	lsls	r2, r3, #3
 80065d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d2:	18d3      	adds	r3, r2, r3
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	00d2      	lsls	r2, r2, #3
 80065d8:	4694      	mov	ip, r2
 80065da:	4463      	add	r3, ip
 80065dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	891b      	ldrh	r3, [r3, #8]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	18db      	adds	r3, r3, r3
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	657b      	str	r3, [r7, #84]	; 0x54
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2250      	movs	r2, #80	; 0x50
 80065f6:	5a9b      	ldrh	r3, [r3, r2]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	001a      	movs	r2, r3
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	657b      	str	r3, [r7, #84]	; 0x54
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	00da      	lsls	r2, r3, #3
 8006608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660a:	18d3      	adds	r3, r2, r3
 800660c:	4a88      	ldr	r2, [pc, #544]	; (8006830 <USB_ActivateEndpoint+0x6c0>)
 800660e:	4694      	mov	ip, r2
 8006610:	4463      	add	r3, ip
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	895b      	ldrh	r3, [r3, #10]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	18db      	adds	r3, r3, r3
 800661e:	b29a      	uxth	r2, r3
 8006620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006622:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d000      	beq.n	800662e <USB_ActivateEndpoint+0x4be>
 800662c:	e087      	b.n	800673e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	18d2      	adds	r2, r2, r3
 8006638:	2140      	movs	r1, #64	; 0x40
 800663a:	187b      	adds	r3, r7, r1
 800663c:	8812      	ldrh	r2, [r2, #0]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	187b      	adds	r3, r7, r1
 8006642:	881a      	ldrh	r2, [r3, #0]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	01db      	lsls	r3, r3, #7
 8006648:	4013      	ands	r3, r2
 800664a:	d016      	beq.n	800667a <USB_ActivateEndpoint+0x50a>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	18d3      	adds	r3, r2, r3
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29a      	uxth	r2, r3
 800665a:	203e      	movs	r0, #62	; 0x3e
 800665c:	183b      	adds	r3, r7, r0
 800665e:	496e      	ldr	r1, [pc, #440]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 8006660:	400a      	ands	r2, r1
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	18d3      	adds	r3, r2, r3
 800666e:	183a      	adds	r2, r7, r0
 8006670:	8812      	ldrh	r2, [r2, #0]
 8006672:	496a      	ldr	r1, [pc, #424]	; (800681c <USB_ActivateEndpoint+0x6ac>)
 8006674:	430a      	orrs	r2, r1
 8006676:	b292      	uxth	r2, r2
 8006678:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	18d2      	adds	r2, r2, r3
 8006684:	213c      	movs	r1, #60	; 0x3c
 8006686:	187b      	adds	r3, r7, r1
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	187b      	adds	r3, r7, r1
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	2240      	movs	r2, #64	; 0x40
 8006692:	4013      	ands	r3, r2
 8006694:	d016      	beq.n	80066c4 <USB_ActivateEndpoint+0x554>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	18d3      	adds	r3, r2, r3
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	203a      	movs	r0, #58	; 0x3a
 80066a6:	183b      	adds	r3, r7, r0
 80066a8:	495b      	ldr	r1, [pc, #364]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 80066aa:	400a      	ands	r2, r1
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	18d3      	adds	r3, r2, r3
 80066b8:	183a      	adds	r2, r7, r0
 80066ba:	8812      	ldrh	r2, [r2, #0]
 80066bc:	495d      	ldr	r1, [pc, #372]	; (8006834 <USB_ActivateEndpoint+0x6c4>)
 80066be:	430a      	orrs	r2, r1
 80066c0:	b292      	uxth	r2, r2
 80066c2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	18d3      	adds	r3, r2, r3
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	2038      	movs	r0, #56	; 0x38
 80066d4:	183b      	adds	r3, r7, r0
 80066d6:	4952      	ldr	r1, [pc, #328]	; (8006820 <USB_ActivateEndpoint+0x6b0>)
 80066d8:	400a      	ands	r2, r1
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	183b      	adds	r3, r7, r0
 80066de:	183a      	adds	r2, r7, r0
 80066e0:	8812      	ldrh	r2, [r2, #0]
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	0149      	lsls	r1, r1, #5
 80066e6:	404a      	eors	r2, r1
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	183b      	adds	r3, r7, r0
 80066ec:	183a      	adds	r2, r7, r0
 80066ee:	8812      	ldrh	r2, [r2, #0]
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	0189      	lsls	r1, r1, #6
 80066f4:	404a      	eors	r2, r1
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	18d3      	adds	r3, r2, r3
 8006702:	183a      	adds	r2, r7, r0
 8006704:	8812      	ldrh	r2, [r2, #0]
 8006706:	4947      	ldr	r1, [pc, #284]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 8006708:	430a      	orrs	r2, r1
 800670a:	b292      	uxth	r2, r2
 800670c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	18d3      	adds	r3, r2, r3
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29a      	uxth	r2, r3
 800671c:	2036      	movs	r0, #54	; 0x36
 800671e:	183b      	adds	r3, r7, r0
 8006720:	4945      	ldr	r1, [pc, #276]	; (8006838 <USB_ActivateEndpoint+0x6c8>)
 8006722:	400a      	ands	r2, r1
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	18d3      	adds	r3, r2, r3
 8006730:	183a      	adds	r2, r7, r0
 8006732:	8812      	ldrh	r2, [r2, #0]
 8006734:	493b      	ldr	r1, [pc, #236]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 8006736:	430a      	orrs	r2, r1
 8006738:	b292      	uxth	r2, r2
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e0ac      	b.n	8006898 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	18d2      	adds	r2, r2, r3
 8006748:	214e      	movs	r1, #78	; 0x4e
 800674a:	187b      	adds	r3, r7, r1
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	187b      	adds	r3, r7, r1
 8006752:	881a      	ldrh	r2, [r3, #0]
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	01db      	lsls	r3, r3, #7
 8006758:	4013      	ands	r3, r2
 800675a:	d016      	beq.n	800678a <USB_ActivateEndpoint+0x61a>
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	18d3      	adds	r3, r2, r3
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29a      	uxth	r2, r3
 800676a:	204c      	movs	r0, #76	; 0x4c
 800676c:	183b      	adds	r3, r7, r0
 800676e:	492a      	ldr	r1, [pc, #168]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 8006770:	400a      	ands	r2, r1
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	183a      	adds	r2, r7, r0
 8006780:	8812      	ldrh	r2, [r2, #0]
 8006782:	4926      	ldr	r1, [pc, #152]	; (800681c <USB_ActivateEndpoint+0x6ac>)
 8006784:	430a      	orrs	r2, r1
 8006786:	b292      	uxth	r2, r2
 8006788:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	18d2      	adds	r2, r2, r3
 8006794:	214a      	movs	r1, #74	; 0x4a
 8006796:	187b      	adds	r3, r7, r1
 8006798:	8812      	ldrh	r2, [r2, #0]
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	187b      	adds	r3, r7, r1
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	2240      	movs	r2, #64	; 0x40
 80067a2:	4013      	ands	r3, r2
 80067a4:	d016      	beq.n	80067d4 <USB_ActivateEndpoint+0x664>
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	18d3      	adds	r3, r2, r3
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	2048      	movs	r0, #72	; 0x48
 80067b6:	183b      	adds	r3, r7, r0
 80067b8:	4917      	ldr	r1, [pc, #92]	; (8006818 <USB_ActivateEndpoint+0x6a8>)
 80067ba:	400a      	ands	r2, r1
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	18d3      	adds	r3, r2, r3
 80067c8:	183a      	adds	r2, r7, r0
 80067ca:	8812      	ldrh	r2, [r2, #0]
 80067cc:	4919      	ldr	r1, [pc, #100]	; (8006834 <USB_ActivateEndpoint+0x6c4>)
 80067ce:	430a      	orrs	r2, r1
 80067d0:	b292      	uxth	r2, r2
 80067d2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	78db      	ldrb	r3, [r3, #3]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d02f      	beq.n	800683c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	18d3      	adds	r3, r2, r3
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	2044      	movs	r0, #68	; 0x44
 80067ec:	183b      	adds	r3, r7, r0
 80067ee:	4912      	ldr	r1, [pc, #72]	; (8006838 <USB_ActivateEndpoint+0x6c8>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	183b      	adds	r3, r7, r0
 80067f6:	183a      	adds	r2, r7, r0
 80067f8:	8812      	ldrh	r2, [r2, #0]
 80067fa:	2120      	movs	r1, #32
 80067fc:	404a      	eors	r2, r1
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	18d3      	adds	r3, r2, r3
 800680a:	183a      	adds	r2, r7, r0
 800680c:	8812      	ldrh	r2, [r2, #0]
 800680e:	4905      	ldr	r1, [pc, #20]	; (8006824 <USB_ActivateEndpoint+0x6b4>)
 8006810:	430a      	orrs	r2, r1
 8006812:	b292      	uxth	r2, r2
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e028      	b.n	800686a <USB_ActivateEndpoint+0x6fa>
 8006818:	ffff8f8f 	.word	0xffff8f8f
 800681c:	ffffc080 	.word	0xffffc080
 8006820:	ffffbf8f 	.word	0xffffbf8f
 8006824:	ffff8080 	.word	0xffff8080
 8006828:	ffff8180 	.word	0xffff8180
 800682c:	ffff8e8f 	.word	0xffff8e8f
 8006830:	00000404 	.word	0x00000404
 8006834:	ffff80c0 	.word	0xffff80c0
 8006838:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	2046      	movs	r0, #70	; 0x46
 800684c:	183b      	adds	r3, r7, r0
 800684e:	4916      	ldr	r1, [pc, #88]	; (80068a8 <USB_ActivateEndpoint+0x738>)
 8006850:	400a      	ands	r2, r1
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	18d3      	adds	r3, r2, r3
 800685e:	183a      	adds	r2, r7, r0
 8006860:	8812      	ldrh	r2, [r2, #0]
 8006862:	4912      	ldr	r1, [pc, #72]	; (80068ac <USB_ActivateEndpoint+0x73c>)
 8006864:	430a      	orrs	r2, r1
 8006866:	b292      	uxth	r2, r2
 8006868:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	18d3      	adds	r3, r2, r3
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29a      	uxth	r2, r3
 8006878:	2042      	movs	r0, #66	; 0x42
 800687a:	183b      	adds	r3, r7, r0
 800687c:	490c      	ldr	r1, [pc, #48]	; (80068b0 <USB_ActivateEndpoint+0x740>)
 800687e:	400a      	ands	r2, r1
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	18d3      	adds	r3, r2, r3
 800688c:	183a      	adds	r2, r7, r0
 800688e:	8812      	ldrh	r2, [r2, #0]
 8006890:	4906      	ldr	r1, [pc, #24]	; (80068ac <USB_ActivateEndpoint+0x73c>)
 8006892:	430a      	orrs	r2, r1
 8006894:	b292      	uxth	r2, r2
 8006896:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006898:	236f      	movs	r3, #111	; 0x6f
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	781b      	ldrb	r3, [r3, #0]
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	ffff8fbf 	.word	0xffff8fbf
 80068ac:	ffff8080 	.word	0xffff8080
 80068b0:	ffffbf8f 	.word	0xffffbf8f

080068b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	7b1b      	ldrb	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d000      	beq.n	80068c8 <USB_DeactivateEndpoint+0x14>
 80068c6:	e07e      	b.n	80069c6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03c      	beq.n	800694a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	18d2      	adds	r2, r2, r3
 80068da:	210c      	movs	r1, #12
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	8812      	ldrh	r2, [r2, #0]
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	187b      	adds	r3, r7, r1
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	2240      	movs	r2, #64	; 0x40
 80068e8:	4013      	ands	r3, r2
 80068ea:	d016      	beq.n	800691a <USB_DeactivateEndpoint+0x66>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	18d3      	adds	r3, r2, r3
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	200a      	movs	r0, #10
 80068fc:	183b      	adds	r3, r7, r0
 80068fe:	49c7      	ldr	r1, [pc, #796]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006900:	400a      	ands	r2, r1
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	18d3      	adds	r3, r2, r3
 800690e:	183a      	adds	r2, r7, r0
 8006910:	8812      	ldrh	r2, [r2, #0]
 8006912:	49c3      	ldr	r1, [pc, #780]	; (8006c20 <USB_DeactivateEndpoint+0x36c>)
 8006914:	430a      	orrs	r2, r1
 8006916:	b292      	uxth	r2, r2
 8006918:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	18d3      	adds	r3, r2, r3
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29a      	uxth	r2, r3
 8006928:	2008      	movs	r0, #8
 800692a:	183b      	adds	r3, r7, r0
 800692c:	49bd      	ldr	r1, [pc, #756]	; (8006c24 <USB_DeactivateEndpoint+0x370>)
 800692e:	400a      	ands	r2, r1
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	18d3      	adds	r3, r2, r3
 800693c:	183a      	adds	r2, r7, r0
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	49b9      	ldr	r1, [pc, #740]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 8006942:	430a      	orrs	r2, r1
 8006944:	b292      	uxth	r2, r2
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e163      	b.n	8006c12 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	18d2      	adds	r2, r2, r3
 8006954:	2112      	movs	r1, #18
 8006956:	187b      	adds	r3, r7, r1
 8006958:	8812      	ldrh	r2, [r2, #0]
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	187b      	adds	r3, r7, r1
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	2380      	movs	r3, #128	; 0x80
 8006962:	01db      	lsls	r3, r3, #7
 8006964:	4013      	ands	r3, r2
 8006966:	d016      	beq.n	8006996 <USB_DeactivateEndpoint+0xe2>
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29a      	uxth	r2, r3
 8006976:	2010      	movs	r0, #16
 8006978:	183b      	adds	r3, r7, r0
 800697a:	49a8      	ldr	r1, [pc, #672]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 800697c:	400a      	ands	r2, r1
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	183a      	adds	r2, r7, r0
 800698c:	8812      	ldrh	r2, [r2, #0]
 800698e:	49a7      	ldr	r1, [pc, #668]	; (8006c2c <USB_DeactivateEndpoint+0x378>)
 8006990:	430a      	orrs	r2, r1
 8006992:	b292      	uxth	r2, r2
 8006994:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	18d3      	adds	r3, r2, r3
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	200e      	movs	r0, #14
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	49a1      	ldr	r1, [pc, #644]	; (8006c30 <USB_DeactivateEndpoint+0x37c>)
 80069aa:	400a      	ands	r2, r1
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	18d3      	adds	r3, r2, r3
 80069b8:	183a      	adds	r2, r7, r0
 80069ba:	8812      	ldrh	r2, [r2, #0]
 80069bc:	499a      	ldr	r1, [pc, #616]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 80069be:	430a      	orrs	r2, r1
 80069c0:	b292      	uxth	r2, r2
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	e125      	b.n	8006c12 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d000      	beq.n	80069d0 <USB_DeactivateEndpoint+0x11c>
 80069ce:	e090      	b.n	8006af2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	18d2      	adds	r2, r2, r3
 80069da:	2120      	movs	r1, #32
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	8812      	ldrh	r2, [r2, #0]
 80069e0:	801a      	strh	r2, [r3, #0]
 80069e2:	187b      	adds	r3, r7, r1
 80069e4:	881a      	ldrh	r2, [r3, #0]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	01db      	lsls	r3, r3, #7
 80069ea:	4013      	ands	r3, r2
 80069ec:	d016      	beq.n	8006a1c <USB_DeactivateEndpoint+0x168>
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	18d3      	adds	r3, r2, r3
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	201e      	movs	r0, #30
 80069fe:	183b      	adds	r3, r7, r0
 8006a00:	4986      	ldr	r1, [pc, #536]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006a02:	400a      	ands	r2, r1
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	183a      	adds	r2, r7, r0
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	4985      	ldr	r1, [pc, #532]	; (8006c2c <USB_DeactivateEndpoint+0x378>)
 8006a16:	430a      	orrs	r2, r1
 8006a18:	b292      	uxth	r2, r2
 8006a1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	18d2      	adds	r2, r2, r3
 8006a26:	211c      	movs	r1, #28
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	8812      	ldrh	r2, [r2, #0]
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	187b      	adds	r3, r7, r1
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	2240      	movs	r2, #64	; 0x40
 8006a34:	4013      	ands	r3, r2
 8006a36:	d016      	beq.n	8006a66 <USB_DeactivateEndpoint+0x1b2>
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	18d3      	adds	r3, r2, r3
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	201a      	movs	r0, #26
 8006a48:	183b      	adds	r3, r7, r0
 8006a4a:	4974      	ldr	r1, [pc, #464]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	18d3      	adds	r3, r2, r3
 8006a5a:	183a      	adds	r2, r7, r0
 8006a5c:	8812      	ldrh	r2, [r2, #0]
 8006a5e:	4970      	ldr	r1, [pc, #448]	; (8006c20 <USB_DeactivateEndpoint+0x36c>)
 8006a60:	430a      	orrs	r2, r1
 8006a62:	b292      	uxth	r2, r2
 8006a64:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	18d3      	adds	r3, r2, r3
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	2018      	movs	r0, #24
 8006a76:	183b      	adds	r3, r7, r0
 8006a78:	4968      	ldr	r1, [pc, #416]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006a7a:	400a      	ands	r2, r1
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	18d3      	adds	r3, r2, r3
 8006a88:	183a      	adds	r2, r7, r0
 8006a8a:	8812      	ldrh	r2, [r2, #0]
 8006a8c:	4964      	ldr	r1, [pc, #400]	; (8006c20 <USB_DeactivateEndpoint+0x36c>)
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	b292      	uxth	r2, r2
 8006a92:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	18d3      	adds	r3, r2, r3
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	2016      	movs	r0, #22
 8006aa4:	183b      	adds	r3, r7, r0
 8006aa6:	4962      	ldr	r1, [pc, #392]	; (8006c30 <USB_DeactivateEndpoint+0x37c>)
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	183a      	adds	r2, r7, r0
 8006ab8:	8812      	ldrh	r2, [r2, #0]
 8006aba:	495b      	ldr	r1, [pc, #364]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 8006abc:	430a      	orrs	r2, r1
 8006abe:	b292      	uxth	r2, r2
 8006ac0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	18d3      	adds	r3, r2, r3
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	2014      	movs	r0, #20
 8006ad2:	183b      	adds	r3, r7, r0
 8006ad4:	4953      	ldr	r1, [pc, #332]	; (8006c24 <USB_DeactivateEndpoint+0x370>)
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	18d3      	adds	r3, r2, r3
 8006ae4:	183a      	adds	r2, r7, r0
 8006ae6:	8812      	ldrh	r2, [r2, #0]
 8006ae8:	494f      	ldr	r1, [pc, #316]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 8006aea:	430a      	orrs	r2, r1
 8006aec:	b292      	uxth	r2, r2
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e08f      	b.n	8006c12 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	18d2      	adds	r2, r2, r3
 8006afc:	212e      	movs	r1, #46	; 0x2e
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	8812      	ldrh	r2, [r2, #0]
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	881a      	ldrh	r2, [r3, #0]
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	01db      	lsls	r3, r3, #7
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d016      	beq.n	8006b3e <USB_DeactivateEndpoint+0x28a>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	18d3      	adds	r3, r2, r3
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	202c      	movs	r0, #44	; 0x2c
 8006b20:	183b      	adds	r3, r7, r0
 8006b22:	493e      	ldr	r1, [pc, #248]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006b24:	400a      	ands	r2, r1
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	18d3      	adds	r3, r2, r3
 8006b32:	183a      	adds	r2, r7, r0
 8006b34:	8812      	ldrh	r2, [r2, #0]
 8006b36:	493d      	ldr	r1, [pc, #244]	; (8006c2c <USB_DeactivateEndpoint+0x378>)
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	b292      	uxth	r2, r2
 8006b3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	18d2      	adds	r2, r2, r3
 8006b48:	212a      	movs	r1, #42	; 0x2a
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	8812      	ldrh	r2, [r2, #0]
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	187b      	adds	r3, r7, r1
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	2240      	movs	r2, #64	; 0x40
 8006b56:	4013      	ands	r3, r2
 8006b58:	d016      	beq.n	8006b88 <USB_DeactivateEndpoint+0x2d4>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	18d3      	adds	r3, r2, r3
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	2028      	movs	r0, #40	; 0x28
 8006b6a:	183b      	adds	r3, r7, r0
 8006b6c:	492b      	ldr	r1, [pc, #172]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006b6e:	400a      	ands	r2, r1
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	18d3      	adds	r3, r2, r3
 8006b7c:	183a      	adds	r2, r7, r0
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	4927      	ldr	r1, [pc, #156]	; (8006c20 <USB_DeactivateEndpoint+0x36c>)
 8006b82:	430a      	orrs	r2, r1
 8006b84:	b292      	uxth	r2, r2
 8006b86:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	18d3      	adds	r3, r2, r3
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	2026      	movs	r0, #38	; 0x26
 8006b98:	183b      	adds	r3, r7, r0
 8006b9a:	4920      	ldr	r1, [pc, #128]	; (8006c1c <USB_DeactivateEndpoint+0x368>)
 8006b9c:	400a      	ands	r2, r1
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	18d3      	adds	r3, r2, r3
 8006baa:	183a      	adds	r2, r7, r0
 8006bac:	8812      	ldrh	r2, [r2, #0]
 8006bae:	491f      	ldr	r1, [pc, #124]	; (8006c2c <USB_DeactivateEndpoint+0x378>)
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	18d3      	adds	r3, r2, r3
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	2024      	movs	r0, #36	; 0x24
 8006bc6:	183b      	adds	r3, r7, r0
 8006bc8:	4916      	ldr	r1, [pc, #88]	; (8006c24 <USB_DeactivateEndpoint+0x370>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	18d3      	adds	r3, r2, r3
 8006bd8:	183a      	adds	r2, r7, r0
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	4912      	ldr	r1, [pc, #72]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 8006bde:	430a      	orrs	r2, r1
 8006be0:	b292      	uxth	r2, r2
 8006be2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	18d3      	adds	r3, r2, r3
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	2022      	movs	r0, #34	; 0x22
 8006bf4:	183b      	adds	r3, r7, r0
 8006bf6:	490e      	ldr	r1, [pc, #56]	; (8006c30 <USB_DeactivateEndpoint+0x37c>)
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	18d3      	adds	r3, r2, r3
 8006c06:	183a      	adds	r2, r7, r0
 8006c08:	8812      	ldrh	r2, [r2, #0]
 8006c0a:	4907      	ldr	r1, [pc, #28]	; (8006c28 <USB_DeactivateEndpoint+0x374>)
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	b292      	uxth	r2, r2
 8006c10:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b00c      	add	sp, #48	; 0x30
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	ffff8f8f 	.word	0xffff8f8f
 8006c20:	ffff80c0 	.word	0xffff80c0
 8006c24:	ffff8fbf 	.word	0xffff8fbf
 8006c28:	ffff8080 	.word	0xffff8080
 8006c2c:	ffffc080 	.word	0xffffc080
 8006c30:	ffffbf8f 	.word	0xffffbf8f

08006c34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b0c3      	sub	sp, #268	; 0x10c
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <USB_EPStartXfer+0x16>
 8006c46:	f000 fd2d 	bl	80076a4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d905      	bls.n	8006c62 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	1d7a      	adds	r2, r7, #5
 8006c5c:	32ff      	adds	r2, #255	; 0xff
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e004      	b.n	8006c6c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	1d7a      	adds	r2, r7, #5
 8006c68:	32ff      	adds	r2, #255	; 0xff
 8006c6a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	7b1b      	ldrb	r3, [r3, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d125      	bne.n	8006cc0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6959      	ldr	r1, [r3, #20]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88da      	ldrh	r2, [r3, #6]
 8006c7c:	1d7b      	adds	r3, r7, #5
 8006c7e:	33ff      	adds	r3, #255	; 0xff
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa47 	bl	8008118 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2250      	movs	r2, #80	; 0x50
 8006c92:	5a9b      	ldrh	r3, [r3, r2]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	001a      	movs	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	00da      	lsls	r2, r3, #3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	18d3      	adds	r3, r2, r3
 8006ca8:	4ad7      	ldr	r2, [pc, #860]	; (8007008 <USB_EPStartXfer+0x3d4>)
 8006caa:	4694      	mov	ip, r2
 8006cac:	4463      	add	r3, ip
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	1d7b      	adds	r3, r7, #5
 8006cb2:	33ff      	adds	r3, #255	; 0xff
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	f000 fccd 	bl	800765a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	78db      	ldrb	r3, [r3, #3]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d000      	beq.n	8006cca <USB_EPStartXfer+0x96>
 8006cc8:	e362      	b.n	8007390 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6a1a      	ldr	r2, [r3, #32]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d800      	bhi.n	8006cd8 <USB_EPStartXfer+0xa4>
 8006cd6:	e309      	b.n	80072ec <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	18d3      	adds	r3, r2, r3
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	2056      	movs	r0, #86	; 0x56
 8006ce8:	183b      	adds	r3, r7, r0
 8006cea:	49c8      	ldr	r1, [pc, #800]	; (800700c <USB_EPStartXfer+0x3d8>)
 8006cec:	400a      	ands	r2, r1
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	183a      	adds	r2, r7, r0
 8006cfc:	8812      	ldrh	r2, [r2, #0]
 8006cfe:	49c4      	ldr	r1, [pc, #784]	; (8007010 <USB_EPStartXfer+0x3dc>)
 8006d00:	430a      	orrs	r2, r1
 8006d02:	b292      	uxth	r2, r2
 8006d04:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	1d7b      	adds	r3, r7, #5
 8006d0c:	33ff      	adds	r3, #255	; 0xff
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	18d3      	adds	r3, r2, r3
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	001a      	movs	r2, r3
 8006d26:	2340      	movs	r3, #64	; 0x40
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d100      	bne.n	8006d2e <USB_EPStartXfer+0xfa>
 8006d2c:	e176      	b.n	800701c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d000      	beq.n	8006d3c <USB_EPStartXfer+0x108>
 8006d3a:	e074      	b.n	8006e26 <USB_EPStartXfer+0x1f2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2250      	movs	r2, #80	; 0x50
 8006d44:	5a9b      	ldrh	r3, [r3, r2]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	001a      	movs	r2, r3
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	189b      	adds	r3, r3, r2
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00da      	lsls	r2, r3, #3
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	18d3      	adds	r3, r2, r3
 8006d5a:	4aae      	ldr	r2, [pc, #696]	; (8007014 <USB_EPStartXfer+0x3e0>)
 8006d5c:	4694      	mov	ip, r2
 8006d5e:	4463      	add	r3, ip
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	0d9b      	lsrs	r3, r3, #22
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	1d7b      	adds	r3, r7, #5
 8006d74:	33ff      	adds	r3, #255	; 0xff
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b3e      	cmp	r3, #62	; 0x3e
 8006d7a:	d924      	bls.n	8006dc6 <USB_EPStartXfer+0x192>
 8006d7c:	1d7b      	adds	r3, r7, #5
 8006d7e:	33ff      	adds	r3, #255	; 0xff
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	1c7a      	adds	r2, r7, #1
 8006d86:	32ff      	adds	r2, #255	; 0xff
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	1d7b      	adds	r3, r7, #5
 8006d8c:	33ff      	adds	r3, #255	; 0xff
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	221f      	movs	r2, #31
 8006d92:	4013      	ands	r3, r2
 8006d94:	d106      	bne.n	8006da4 <USB_EPStartXfer+0x170>
 8006d96:	1c7b      	adds	r3, r7, #1
 8006d98:	33ff      	adds	r3, #255	; 0xff
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	1c7a      	adds	r2, r7, #1
 8006da0:	32ff      	adds	r2, #255	; 0xff
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	1c7b      	adds	r3, r7, #1
 8006dac:	33ff      	adds	r3, #255	; 0xff
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4a97      	ldr	r2, [pc, #604]	; (8007018 <USB_EPStartXfer+0x3e4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	e04a      	b.n	8006e5c <USB_EPStartXfer+0x228>
 8006dc6:	1d7b      	adds	r3, r7, #5
 8006dc8:	33ff      	adds	r3, #255	; 0xff
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <USB_EPStartXfer+0x1ae>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4a90      	ldr	r2, [pc, #576]	; (8007018 <USB_EPStartXfer+0x3e4>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e03c      	b.n	8006e5c <USB_EPStartXfer+0x228>
 8006de2:	1d7b      	adds	r3, r7, #5
 8006de4:	33ff      	adds	r3, #255	; 0xff
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	1c7a      	adds	r2, r7, #1
 8006dec:	32ff      	adds	r2, #255	; 0xff
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	1d7b      	adds	r3, r7, #5
 8006df2:	33ff      	adds	r3, #255	; 0xff
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d006      	beq.n	8006e0a <USB_EPStartXfer+0x1d6>
 8006dfc:	1c7b      	adds	r3, r7, #1
 8006dfe:	33ff      	adds	r3, #255	; 0xff
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	1c7a      	adds	r2, r7, #1
 8006e06:	32ff      	adds	r2, #255	; 0xff
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	1c7b      	adds	r3, r7, #1
 8006e12:	33ff      	adds	r3, #255	; 0xff
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e01a      	b.n	8006e5c <USB_EPStartXfer+0x228>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d116      	bne.n	8006e5c <USB_EPStartXfer+0x228>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2250      	movs	r2, #80	; 0x50
 8006e32:	5a9b      	ldrh	r3, [r3, r2]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	001a      	movs	r2, r3
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	00da      	lsls	r2, r3, #3
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	18d3      	adds	r3, r2, r3
 8006e48:	4a72      	ldr	r2, [pc, #456]	; (8007014 <USB_EPStartXfer+0x3e0>)
 8006e4a:	4694      	mov	ip, r2
 8006e4c:	4463      	add	r3, ip
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e50:	1d7b      	adds	r3, r7, #5
 8006e52:	33ff      	adds	r3, #255	; 0xff
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e5c:	2076      	movs	r0, #118	; 0x76
 8006e5e:	183b      	adds	r3, r7, r0
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	8952      	ldrh	r2, [r2, #10]
 8006e64:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6959      	ldr	r1, [r3, #20]
 8006e6a:	1d7b      	adds	r3, r7, #5
 8006e6c:	33ff      	adds	r3, #255	; 0xff
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	b29c      	uxth	r4, r3
 8006e72:	183b      	adds	r3, r7, r0
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	0023      	movs	r3, r4
 8006e7a:	f001 f94d 	bl	8008118 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	1d7b      	adds	r3, r7, #5
 8006e84:	33ff      	adds	r3, #255	; 0xff
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	18d2      	adds	r2, r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d908      	bls.n	8006eac <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6a1a      	ldr	r2, [r3, #32]
 8006e9e:	1d7b      	adds	r3, r7, #5
 8006ea0:	33ff      	adds	r3, #255	; 0xff
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	621a      	str	r2, [r3, #32]
 8006eaa:	e007      	b.n	8006ebc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	1d7a      	adds	r2, r7, #5
 8006eb2:	32ff      	adds	r2, #255	; 0xff
 8006eb4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d000      	beq.n	8006ec6 <USB_EPStartXfer+0x292>
 8006ec4:	e070      	b.n	8006fa8 <USB_EPStartXfer+0x374>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2250      	movs	r2, #80	; 0x50
 8006ece:	5a9b      	ldrh	r3, [r3, r2]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	001a      	movs	r2, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00da      	lsls	r2, r3, #3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	18d3      	adds	r3, r2, r3
 8006ee4:	4a48      	ldr	r2, [pc, #288]	; (8007008 <USB_EPStartXfer+0x3d4>)
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	4463      	add	r3, ip
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	059b      	lsls	r3, r3, #22
 8006ef4:	0d9b      	lsrs	r3, r3, #22
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	1d7b      	adds	r3, r7, #5
 8006efe:	33ff      	adds	r3, #255	; 0xff
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b3e      	cmp	r3, #62	; 0x3e
 8006f04:	d922      	bls.n	8006f4c <USB_EPStartXfer+0x318>
 8006f06:	1d7b      	adds	r3, r7, #5
 8006f08:	33ff      	adds	r3, #255	; 0xff
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	21fc      	movs	r1, #252	; 0xfc
 8006f10:	187a      	adds	r2, r7, r1
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	1d7b      	adds	r3, r7, #5
 8006f16:	33ff      	adds	r3, #255	; 0xff
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	221f      	movs	r2, #31
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d104      	bne.n	8006f2a <USB_EPStartXfer+0x2f6>
 8006f20:	187b      	adds	r3, r7, r1
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	187a      	adds	r2, r7, r1
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	23fc      	movs	r3, #252	; 0xfc
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4a35      	ldr	r2, [pc, #212]	; (8007018 <USB_EPStartXfer+0x3e4>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e04a      	b.n	8006fe2 <USB_EPStartXfer+0x3ae>
 8006f4c:	1d7b      	adds	r3, r7, #5
 8006f4e:	33ff      	adds	r3, #255	; 0xff
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d108      	bne.n	8006f68 <USB_EPStartXfer+0x334>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4a2e      	ldr	r2, [pc, #184]	; (8007018 <USB_EPStartXfer+0x3e4>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e03c      	b.n	8006fe2 <USB_EPStartXfer+0x3ae>
 8006f68:	1d7b      	adds	r3, r7, #5
 8006f6a:	33ff      	adds	r3, #255	; 0xff
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	21fc      	movs	r1, #252	; 0xfc
 8006f72:	187a      	adds	r2, r7, r1
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	1d7b      	adds	r3, r7, #5
 8006f78:	33ff      	adds	r3, #255	; 0xff
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	4013      	ands	r3, r2
 8006f80:	d004      	beq.n	8006f8c <USB_EPStartXfer+0x358>
 8006f82:	187b      	adds	r3, r7, r1
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	187a      	adds	r2, r7, r1
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	23fc      	movs	r3, #252	; 0xfc
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	e01c      	b.n	8006fe2 <USB_EPStartXfer+0x3ae>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d118      	bne.n	8006fe2 <USB_EPStartXfer+0x3ae>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2250      	movs	r2, #80	; 0x50
 8006fb8:	5a9b      	ldrh	r3, [r3, r2]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	00da      	lsls	r2, r3, #3
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	18d3      	adds	r3, r2, r3
 8006fce:	4a0e      	ldr	r2, [pc, #56]	; (8007008 <USB_EPStartXfer+0x3d4>)
 8006fd0:	4694      	mov	ip, r2
 8006fd2:	4463      	add	r3, ip
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	1d7b      	adds	r3, r7, #5
 8006fd8:	33ff      	adds	r3, #255	; 0xff
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fe2:	2076      	movs	r0, #118	; 0x76
 8006fe4:	183b      	adds	r3, r7, r0
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	8912      	ldrh	r2, [r2, #8]
 8006fea:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	6959      	ldr	r1, [r3, #20]
 8006ff0:	1d7b      	adds	r3, r7, #5
 8006ff2:	33ff      	adds	r3, #255	; 0xff
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	183b      	adds	r3, r7, r0
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	0023      	movs	r3, r4
 8007000:	f001 f88a 	bl	8008118 <USB_WritePMA>
 8007004:	e329      	b.n	800765a <USB_EPStartXfer+0xa26>
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	00000402 	.word	0x00000402
 800700c:	ffff8f8f 	.word	0xffff8f8f
 8007010:	ffff8180 	.word	0xffff8180
 8007014:	00000406 	.word	0x00000406
 8007018:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d000      	beq.n	8007026 <USB_EPStartXfer+0x3f2>
 8007024:	e070      	b.n	8007108 <USB_EPStartXfer+0x4d4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	64bb      	str	r3, [r7, #72]	; 0x48
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2250      	movs	r2, #80	; 0x50
 800702e:	5a9b      	ldrh	r3, [r3, r2]
 8007030:	b29b      	uxth	r3, r3
 8007032:	001a      	movs	r2, r3
 8007034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007036:	189b      	adds	r3, r3, r2
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	00da      	lsls	r2, r3, #3
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	18d3      	adds	r3, r2, r3
 8007044:	4acd      	ldr	r2, [pc, #820]	; (800737c <USB_EPStartXfer+0x748>)
 8007046:	4694      	mov	ip, r2
 8007048:	4463      	add	r3, ip
 800704a:	647b      	str	r3, [r7, #68]	; 0x44
 800704c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	059b      	lsls	r3, r3, #22
 8007054:	0d9b      	lsrs	r3, r3, #22
 8007056:	b29a      	uxth	r2, r3
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	1d7b      	adds	r3, r7, #5
 800705e:	33ff      	adds	r3, #255	; 0xff
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b3e      	cmp	r3, #62	; 0x3e
 8007064:	d922      	bls.n	80070ac <USB_EPStartXfer+0x478>
 8007066:	1d7b      	adds	r3, r7, #5
 8007068:	33ff      	adds	r3, #255	; 0xff
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	21f8      	movs	r1, #248	; 0xf8
 8007070:	187a      	adds	r2, r7, r1
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	1d7b      	adds	r3, r7, #5
 8007076:	33ff      	adds	r3, #255	; 0xff
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	221f      	movs	r2, #31
 800707c:	4013      	ands	r3, r2
 800707e:	d104      	bne.n	800708a <USB_EPStartXfer+0x456>
 8007080:	187b      	adds	r3, r7, r1
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	187a      	adds	r2, r7, r1
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29a      	uxth	r2, r3
 8007090:	23f8      	movs	r3, #248	; 0xf8
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	b29b      	uxth	r3, r3
 800709c:	4313      	orrs	r3, r2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4ab7      	ldr	r2, [pc, #732]	; (8007380 <USB_EPStartXfer+0x74c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	e04a      	b.n	8007142 <USB_EPStartXfer+0x50e>
 80070ac:	1d7b      	adds	r3, r7, #5
 80070ae:	33ff      	adds	r3, #255	; 0xff
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <USB_EPStartXfer+0x494>
 80070b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4ab0      	ldr	r2, [pc, #704]	; (8007380 <USB_EPStartXfer+0x74c>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e03c      	b.n	8007142 <USB_EPStartXfer+0x50e>
 80070c8:	1d7b      	adds	r3, r7, #5
 80070ca:	33ff      	adds	r3, #255	; 0xff
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	21f8      	movs	r1, #248	; 0xf8
 80070d2:	187a      	adds	r2, r7, r1
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	1d7b      	adds	r3, r7, #5
 80070d8:	33ff      	adds	r3, #255	; 0xff
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2201      	movs	r2, #1
 80070de:	4013      	ands	r3, r2
 80070e0:	d004      	beq.n	80070ec <USB_EPStartXfer+0x4b8>
 80070e2:	187b      	adds	r3, r7, r1
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	187a      	adds	r2, r7, r1
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	23f8      	movs	r3, #248	; 0xf8
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	029b      	lsls	r3, r3, #10
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4313      	orrs	r3, r2
 8007100:	b29a      	uxth	r2, r3
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e01c      	b.n	8007142 <USB_EPStartXfer+0x50e>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d118      	bne.n	8007142 <USB_EPStartXfer+0x50e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	653b      	str	r3, [r7, #80]	; 0x50
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2250      	movs	r2, #80	; 0x50
 8007118:	5a9b      	ldrh	r3, [r3, r2]
 800711a:	b29b      	uxth	r3, r3
 800711c:	001a      	movs	r2, r3
 800711e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007120:	189b      	adds	r3, r3, r2
 8007122:	653b      	str	r3, [r7, #80]	; 0x50
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	00da      	lsls	r2, r3, #3
 800712a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800712c:	18d3      	adds	r3, r2, r3
 800712e:	4a93      	ldr	r2, [pc, #588]	; (800737c <USB_EPStartXfer+0x748>)
 8007130:	4694      	mov	ip, r2
 8007132:	4463      	add	r3, ip
 8007134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007136:	1d7b      	adds	r3, r7, #5
 8007138:	33ff      	adds	r3, #255	; 0xff
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	b29a      	uxth	r2, r3
 800713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007142:	2076      	movs	r0, #118	; 0x76
 8007144:	183b      	adds	r3, r7, r0
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	8912      	ldrh	r2, [r2, #8]
 800714a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	6959      	ldr	r1, [r3, #20]
 8007150:	1d7b      	adds	r3, r7, #5
 8007152:	33ff      	adds	r3, #255	; 0xff
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	b29c      	uxth	r4, r3
 8007158:	183b      	adds	r3, r7, r0
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	0023      	movs	r3, r4
 8007160:	f000 ffda 	bl	8008118 <USB_WritePMA>
            ep->xfer_buff += len;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	1d7b      	adds	r3, r7, #5
 800716a:	33ff      	adds	r3, #255	; 0xff
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	18d2      	adds	r2, r2, r3
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d908      	bls.n	8007192 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	1d7b      	adds	r3, r7, #5
 8007186:	33ff      	adds	r3, #255	; 0xff
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	621a      	str	r2, [r3, #32]
 8007190:	e007      	b.n	80071a2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	1d7a      	adds	r2, r7, #5
 8007198:	32ff      	adds	r2, #255	; 0xff
 800719a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	643b      	str	r3, [r7, #64]	; 0x40
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d000      	beq.n	80071b0 <USB_EPStartXfer+0x57c>
 80071ae:	e070      	b.n	8007292 <USB_EPStartXfer+0x65e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2250      	movs	r2, #80	; 0x50
 80071b8:	5a9b      	ldrh	r3, [r3, r2]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	001a      	movs	r2, r3
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	189b      	adds	r3, r3, r2
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	00da      	lsls	r2, r3, #3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	18d3      	adds	r3, r2, r3
 80071ce:	4a6d      	ldr	r2, [pc, #436]	; (8007384 <USB_EPStartXfer+0x750>)
 80071d0:	4694      	mov	ip, r2
 80071d2:	4463      	add	r3, ip
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	059b      	lsls	r3, r3, #22
 80071de:	0d9b      	lsrs	r3, r3, #22
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	1d7b      	adds	r3, r7, #5
 80071e8:	33ff      	adds	r3, #255	; 0xff
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b3e      	cmp	r3, #62	; 0x3e
 80071ee:	d922      	bls.n	8007236 <USB_EPStartXfer+0x602>
 80071f0:	1d7b      	adds	r3, r7, #5
 80071f2:	33ff      	adds	r3, #255	; 0xff
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	21f4      	movs	r1, #244	; 0xf4
 80071fa:	187a      	adds	r2, r7, r1
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	1d7b      	adds	r3, r7, #5
 8007200:	33ff      	adds	r3, #255	; 0xff
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	221f      	movs	r2, #31
 8007206:	4013      	ands	r3, r2
 8007208:	d104      	bne.n	8007214 <USB_EPStartXfer+0x5e0>
 800720a:	187b      	adds	r3, r7, r1
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	187a      	adds	r2, r7, r1
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29a      	uxth	r2, r3
 800721a:	23f4      	movs	r3, #244	; 0xf4
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	029b      	lsls	r3, r3, #10
 8007224:	b29b      	uxth	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b29b      	uxth	r3, r3
 800722a:	4a55      	ldr	r2, [pc, #340]	; (8007380 <USB_EPStartXfer+0x74c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	b29a      	uxth	r2, r3
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e048      	b.n	80072c8 <USB_EPStartXfer+0x694>
 8007236:	1d7b      	adds	r3, r7, #5
 8007238:	33ff      	adds	r3, #255	; 0xff
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d108      	bne.n	8007252 <USB_EPStartXfer+0x61e>
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	4a4e      	ldr	r2, [pc, #312]	; (8007380 <USB_EPStartXfer+0x74c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	b29a      	uxth	r2, r3
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e03a      	b.n	80072c8 <USB_EPStartXfer+0x694>
 8007252:	1d7b      	adds	r3, r7, #5
 8007254:	33ff      	adds	r3, #255	; 0xff
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	21f4      	movs	r1, #244	; 0xf4
 800725c:	187a      	adds	r2, r7, r1
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	1d7b      	adds	r3, r7, #5
 8007262:	33ff      	adds	r3, #255	; 0xff
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2201      	movs	r2, #1
 8007268:	4013      	ands	r3, r2
 800726a:	d004      	beq.n	8007276 <USB_EPStartXfer+0x642>
 800726c:	187b      	adds	r3, r7, r1
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	187a      	adds	r2, r7, r1
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29a      	uxth	r2, r3
 800727c:	23f4      	movs	r3, #244	; 0xf4
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	029b      	lsls	r3, r3, #10
 8007286:	b29b      	uxth	r3, r3
 8007288:	4313      	orrs	r3, r2
 800728a:	b29a      	uxth	r2, r3
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e01a      	b.n	80072c8 <USB_EPStartXfer+0x694>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d116      	bne.n	80072c8 <USB_EPStartXfer+0x694>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2250      	movs	r2, #80	; 0x50
 800729e:	5a9b      	ldrh	r3, [r3, r2]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	001a      	movs	r2, r3
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	189b      	adds	r3, r3, r2
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	00da      	lsls	r2, r3, #3
 80072b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	4a33      	ldr	r2, [pc, #204]	; (8007384 <USB_EPStartXfer+0x750>)
 80072b6:	4694      	mov	ip, r2
 80072b8:	4463      	add	r3, ip
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072bc:	1d7b      	adds	r3, r7, #5
 80072be:	33ff      	adds	r3, #255	; 0xff
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072c8:	2076      	movs	r0, #118	; 0x76
 80072ca:	183b      	adds	r3, r7, r0
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	8952      	ldrh	r2, [r2, #10]
 80072d0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6959      	ldr	r1, [r3, #20]
 80072d6:	1d7b      	adds	r3, r7, #5
 80072d8:	33ff      	adds	r3, #255	; 0xff
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	b29c      	uxth	r4, r3
 80072de:	183b      	adds	r3, r7, r0
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	0023      	movs	r3, r4
 80072e6:	f000 ff17 	bl	8008118 <USB_WritePMA>
 80072ea:	e1b6      	b.n	800765a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	1d7a      	adds	r2, r7, #5
 80072f2:	32ff      	adds	r2, #255	; 0xff
 80072f4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	18d3      	adds	r3, r2, r3
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29a      	uxth	r2, r3
 8007304:	2062      	movs	r0, #98	; 0x62
 8007306:	183b      	adds	r3, r7, r0
 8007308:	491f      	ldr	r1, [pc, #124]	; (8007388 <USB_EPStartXfer+0x754>)
 800730a:	400a      	ands	r2, r1
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	18d3      	adds	r3, r2, r3
 8007318:	183a      	adds	r2, r7, r0
 800731a:	8812      	ldrh	r2, [r2, #0]
 800731c:	491b      	ldr	r1, [pc, #108]	; (800738c <USB_EPStartXfer+0x758>)
 800731e:	430a      	orrs	r2, r1
 8007320:	b292      	uxth	r2, r2
 8007322:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2250      	movs	r2, #80	; 0x50
 800732c:	5a9b      	ldrh	r3, [r3, r2]
 800732e:	b29b      	uxth	r3, r3
 8007330:	001a      	movs	r2, r3
 8007332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007334:	189b      	adds	r3, r3, r2
 8007336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	00da      	lsls	r2, r3, #3
 800733e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007340:	18d3      	adds	r3, r2, r3
 8007342:	4a0e      	ldr	r2, [pc, #56]	; (800737c <USB_EPStartXfer+0x748>)
 8007344:	4694      	mov	ip, r2
 8007346:	4463      	add	r3, ip
 8007348:	65bb      	str	r3, [r7, #88]	; 0x58
 800734a:	1d7b      	adds	r3, r7, #5
 800734c:	33ff      	adds	r3, #255	; 0xff
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
 8007352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007354:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007356:	2076      	movs	r0, #118	; 0x76
 8007358:	183b      	adds	r3, r7, r0
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	8912      	ldrh	r2, [r2, #8]
 800735e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6959      	ldr	r1, [r3, #20]
 8007364:	1d7b      	adds	r3, r7, #5
 8007366:	33ff      	adds	r3, #255	; 0xff
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	b29c      	uxth	r4, r3
 800736c:	183b      	adds	r3, r7, r0
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	0023      	movs	r3, r4
 8007374:	f000 fed0 	bl	8008118 <USB_WritePMA>
 8007378:	e16f      	b.n	800765a <USB_EPStartXfer+0xa26>
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	00000402 	.word	0x00000402
 8007380:	ffff8000 	.word	0xffff8000
 8007384:	00000406 	.word	0x00000406
 8007388:	ffff8e8f 	.word	0xffff8e8f
 800738c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	1d7b      	adds	r3, r7, #5
 8007396:	33ff      	adds	r3, #255	; 0xff
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	18d3      	adds	r3, r2, r3
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	001a      	movs	r2, r3
 80073b0:	2340      	movs	r3, #64	; 0x40
 80073b2:	4013      	ands	r3, r2
 80073b4:	d100      	bne.n	80073b8 <USB_EPStartXfer+0x784>
 80073b6:	e0a4      	b.n	8007502 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	673b      	str	r3, [r7, #112]	; 0x70
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d000      	beq.n	80073c6 <USB_EPStartXfer+0x792>
 80073c4:	e070      	b.n	80074a8 <USB_EPStartXfer+0x874>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2250      	movs	r2, #80	; 0x50
 80073ce:	5a9b      	ldrh	r3, [r3, r2]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	001a      	movs	r2, r3
 80073d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	00da      	lsls	r2, r3, #3
 80073e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e2:	18d3      	adds	r3, r2, r3
 80073e4:	4abc      	ldr	r2, [pc, #752]	; (80076d8 <USB_EPStartXfer+0xaa4>)
 80073e6:	4694      	mov	ip, r2
 80073e8:	4463      	add	r3, ip
 80073ea:	667b      	str	r3, [r7, #100]	; 0x64
 80073ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	059b      	lsls	r3, r3, #22
 80073f4:	0d9b      	lsrs	r3, r3, #22
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	1d7b      	adds	r3, r7, #5
 80073fe:	33ff      	adds	r3, #255	; 0xff
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b3e      	cmp	r3, #62	; 0x3e
 8007404:	d922      	bls.n	800744c <USB_EPStartXfer+0x818>
 8007406:	1d7b      	adds	r3, r7, #5
 8007408:	33ff      	adds	r3, #255	; 0xff
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	21f0      	movs	r1, #240	; 0xf0
 8007410:	187a      	adds	r2, r7, r1
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	1d7b      	adds	r3, r7, #5
 8007416:	33ff      	adds	r3, #255	; 0xff
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	221f      	movs	r2, #31
 800741c:	4013      	ands	r3, r2
 800741e:	d104      	bne.n	800742a <USB_EPStartXfer+0x7f6>
 8007420:	187b      	adds	r3, r7, r1
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	187a      	adds	r2, r7, r1
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	23f0      	movs	r3, #240	; 0xf0
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	b29b      	uxth	r3, r3
 800743c:	4313      	orrs	r3, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	4aa6      	ldr	r2, [pc, #664]	; (80076dc <USB_EPStartXfer+0xaa8>)
 8007442:	4313      	orrs	r3, r2
 8007444:	b29a      	uxth	r2, r3
 8007446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e048      	b.n	80074de <USB_EPStartXfer+0x8aa>
 800744c:	1d7b      	adds	r3, r7, #5
 800744e:	33ff      	adds	r3, #255	; 0xff
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d108      	bne.n	8007468 <USB_EPStartXfer+0x834>
 8007456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	4a9f      	ldr	r2, [pc, #636]	; (80076dc <USB_EPStartXfer+0xaa8>)
 800745e:	4313      	orrs	r3, r2
 8007460:	b29a      	uxth	r2, r3
 8007462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e03a      	b.n	80074de <USB_EPStartXfer+0x8aa>
 8007468:	1d7b      	adds	r3, r7, #5
 800746a:	33ff      	adds	r3, #255	; 0xff
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	21f0      	movs	r1, #240	; 0xf0
 8007472:	187a      	adds	r2, r7, r1
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	1d7b      	adds	r3, r7, #5
 8007478:	33ff      	adds	r3, #255	; 0xff
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2201      	movs	r2, #1
 800747e:	4013      	ands	r3, r2
 8007480:	d004      	beq.n	800748c <USB_EPStartXfer+0x858>
 8007482:	187b      	adds	r3, r7, r1
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3301      	adds	r3, #1
 8007488:	187a      	adds	r2, r7, r1
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29a      	uxth	r2, r3
 8007492:	23f0      	movs	r3, #240	; 0xf0
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	029b      	lsls	r3, r3, #10
 800749c:	b29b      	uxth	r3, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e01a      	b.n	80074de <USB_EPStartXfer+0x8aa>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d116      	bne.n	80074de <USB_EPStartXfer+0x8aa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2250      	movs	r2, #80	; 0x50
 80074b4:	5a9b      	ldrh	r3, [r3, r2]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	001a      	movs	r2, r3
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	673b      	str	r3, [r7, #112]	; 0x70
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00da      	lsls	r2, r3, #3
 80074c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c8:	18d3      	adds	r3, r2, r3
 80074ca:	4a83      	ldr	r2, [pc, #524]	; (80076d8 <USB_EPStartXfer+0xaa4>)
 80074cc:	4694      	mov	ip, r2
 80074ce:	4463      	add	r3, ip
 80074d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d2:	1d7b      	adds	r3, r7, #5
 80074d4:	33ff      	adds	r3, #255	; 0xff
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80074de:	2076      	movs	r0, #118	; 0x76
 80074e0:	183b      	adds	r3, r7, r0
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	8952      	ldrh	r2, [r2, #10]
 80074e6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6959      	ldr	r1, [r3, #20]
 80074ec:	1d7b      	adds	r3, r7, #5
 80074ee:	33ff      	adds	r3, #255	; 0xff
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	b29c      	uxth	r4, r3
 80074f4:	183b      	adds	r3, r7, r0
 80074f6:	881a      	ldrh	r2, [r3, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	0023      	movs	r3, r4
 80074fc:	f000 fe0c 	bl	8008118 <USB_WritePMA>
 8007500:	e0ab      	b.n	800765a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d000      	beq.n	800750c <USB_EPStartXfer+0x8d8>
 800750a:	e070      	b.n	80075ee <USB_EPStartXfer+0x9ba>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2250      	movs	r2, #80	; 0x50
 8007514:	5a9b      	ldrh	r3, [r3, r2]
 8007516:	b29b      	uxth	r3, r3
 8007518:	001a      	movs	r2, r3
 800751a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751c:	189b      	adds	r3, r3, r2
 800751e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00da      	lsls	r2, r3, #3
 8007526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007528:	18d3      	adds	r3, r2, r3
 800752a:	4a6d      	ldr	r2, [pc, #436]	; (80076e0 <USB_EPStartXfer+0xaac>)
 800752c:	4694      	mov	ip, r2
 800752e:	4463      	add	r3, ip
 8007530:	67bb      	str	r3, [r7, #120]	; 0x78
 8007532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	0d9b      	lsrs	r3, r3, #22
 800753c:	b29a      	uxth	r2, r3
 800753e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	1d7b      	adds	r3, r7, #5
 8007544:	33ff      	adds	r3, #255	; 0xff
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b3e      	cmp	r3, #62	; 0x3e
 800754a:	d922      	bls.n	8007592 <USB_EPStartXfer+0x95e>
 800754c:	1d7b      	adds	r3, r7, #5
 800754e:	33ff      	adds	r3, #255	; 0xff
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	21ec      	movs	r1, #236	; 0xec
 8007556:	187a      	adds	r2, r7, r1
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	1d7b      	adds	r3, r7, #5
 800755c:	33ff      	adds	r3, #255	; 0xff
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	221f      	movs	r2, #31
 8007562:	4013      	ands	r3, r2
 8007564:	d104      	bne.n	8007570 <USB_EPStartXfer+0x93c>
 8007566:	187b      	adds	r3, r7, r1
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	187a      	adds	r2, r7, r1
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	23ec      	movs	r3, #236	; 0xec
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	029b      	lsls	r3, r3, #10
 8007580:	b29b      	uxth	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	b29b      	uxth	r3, r3
 8007586:	4a55      	ldr	r2, [pc, #340]	; (80076dc <USB_EPStartXfer+0xaa8>)
 8007588:	4313      	orrs	r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e052      	b.n	8007638 <USB_EPStartXfer+0xa04>
 8007592:	1d7b      	adds	r3, r7, #5
 8007594:	33ff      	adds	r3, #255	; 0xff
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d108      	bne.n	80075ae <USB_EPStartXfer+0x97a>
 800759c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4a4e      	ldr	r2, [pc, #312]	; (80076dc <USB_EPStartXfer+0xaa8>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e044      	b.n	8007638 <USB_EPStartXfer+0xa04>
 80075ae:	1d7b      	adds	r3, r7, #5
 80075b0:	33ff      	adds	r3, #255	; 0xff
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	21ec      	movs	r1, #236	; 0xec
 80075b8:	187a      	adds	r2, r7, r1
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	1d7b      	adds	r3, r7, #5
 80075be:	33ff      	adds	r3, #255	; 0xff
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	4013      	ands	r3, r2
 80075c6:	d004      	beq.n	80075d2 <USB_EPStartXfer+0x99e>
 80075c8:	187b      	adds	r3, r7, r1
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	187a      	adds	r2, r7, r1
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	23ec      	movs	r3, #236	; 0xec
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	029b      	lsls	r3, r3, #10
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	4313      	orrs	r3, r2
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e024      	b.n	8007638 <USB_EPStartXfer+0xa04>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d120      	bne.n	8007638 <USB_EPStartXfer+0xa04>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2184      	movs	r1, #132	; 0x84
 80075fa:	187a      	adds	r2, r7, r1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2250      	movs	r2, #80	; 0x50
 8007602:	5a9b      	ldrh	r3, [r3, r2]
 8007604:	b29b      	uxth	r3, r3
 8007606:	001a      	movs	r2, r3
 8007608:	187b      	adds	r3, r7, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	189b      	adds	r3, r3, r2
 800760e:	187a      	adds	r2, r7, r1
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00da      	lsls	r2, r3, #3
 8007618:	187b      	adds	r3, r7, r1
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	18d3      	adds	r3, r2, r3
 800761e:	4a30      	ldr	r2, [pc, #192]	; (80076e0 <USB_EPStartXfer+0xaac>)
 8007620:	4694      	mov	ip, r2
 8007622:	4463      	add	r3, ip
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	187a      	adds	r2, r7, r1
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	1d7b      	adds	r3, r7, #5
 800762c:	33ff      	adds	r3, #255	; 0xff
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	187b      	adds	r3, r7, r1
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007638:	2076      	movs	r0, #118	; 0x76
 800763a:	183b      	adds	r3, r7, r0
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	8912      	ldrh	r2, [r2, #8]
 8007640:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6959      	ldr	r1, [r3, #20]
 8007646:	1d7b      	adds	r3, r7, #5
 8007648:	33ff      	adds	r3, #255	; 0xff
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	b29c      	uxth	r4, r3
 800764e:	183b      	adds	r3, r7, r0
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	0023      	movs	r3, r4
 8007656:	f000 fd5f 	bl	8008118 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	18d3      	adds	r3, r2, r3
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29a      	uxth	r2, r3
 8007668:	200a      	movs	r0, #10
 800766a:	183b      	adds	r3, r7, r0
 800766c:	491d      	ldr	r1, [pc, #116]	; (80076e4 <USB_EPStartXfer+0xab0>)
 800766e:	400a      	ands	r2, r1
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	183b      	adds	r3, r7, r0
 8007674:	183a      	adds	r2, r7, r0
 8007676:	8812      	ldrh	r2, [r2, #0]
 8007678:	2110      	movs	r1, #16
 800767a:	404a      	eors	r2, r1
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	183b      	adds	r3, r7, r0
 8007680:	183a      	adds	r2, r7, r0
 8007682:	8812      	ldrh	r2, [r2, #0]
 8007684:	2120      	movs	r1, #32
 8007686:	404a      	eors	r2, r1
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	18d3      	adds	r3, r2, r3
 8007694:	183a      	adds	r2, r7, r0
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	4913      	ldr	r1, [pc, #76]	; (80076e8 <USB_EPStartXfer+0xab4>)
 800769a:	430a      	orrs	r2, r1
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	f000 fbf4 	bl	8007e8c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d000      	beq.n	80076ae <USB_EPStartXfer+0xa7a>
 80076ac:	e0a9      	b.n	8007802 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d918      	bls.n	80076ec <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	1d7a      	adds	r2, r7, #5
 80076c0:	32ff      	adds	r2, #255	; 0xff
 80076c2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	1d7b      	adds	r3, r7, #5
 80076ca:	33ff      	adds	r3, #255	; 0xff
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	619a      	str	r2, [r3, #24]
 80076d4:	e012      	b.n	80076fc <USB_EPStartXfer+0xac8>
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	00000406 	.word	0x00000406
 80076dc:	ffff8000 	.word	0xffff8000
 80076e0:	00000402 	.word	0x00000402
 80076e4:	ffff8fbf 	.word	0xffff8fbf
 80076e8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	1d7a      	adds	r2, r7, #5
 80076f2:	32ff      	adds	r2, #255	; 0xff
 80076f4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2200      	movs	r2, #0
 80076fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2190      	movs	r1, #144	; 0x90
 8007700:	187a      	adds	r2, r7, r1
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2250      	movs	r2, #80	; 0x50
 8007708:	5a9b      	ldrh	r3, [r3, r2]
 800770a:	b29b      	uxth	r3, r3
 800770c:	001a      	movs	r2, r3
 800770e:	187b      	adds	r3, r7, r1
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	189b      	adds	r3, r3, r2
 8007714:	187a      	adds	r2, r7, r1
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	00da      	lsls	r2, r3, #3
 800771e:	187b      	adds	r3, r7, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	4acf      	ldr	r2, [pc, #828]	; (8007a64 <USB_EPStartXfer+0xe30>)
 8007726:	4694      	mov	ip, r2
 8007728:	4463      	add	r3, ip
 800772a:	218c      	movs	r1, #140	; 0x8c
 800772c:	187a      	adds	r2, r7, r1
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	187b      	adds	r3, r7, r1
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	0d9b      	lsrs	r3, r3, #22
 800773c:	b29a      	uxth	r2, r3
 800773e:	187b      	adds	r3, r7, r1
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	1d7b      	adds	r3, r7, #5
 8007746:	33ff      	adds	r3, #255	; 0xff
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b3e      	cmp	r3, #62	; 0x3e
 800774c:	d925      	bls.n	800779a <USB_EPStartXfer+0xb66>
 800774e:	1d7b      	adds	r3, r7, #5
 8007750:	33ff      	adds	r3, #255	; 0xff
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	21e8      	movs	r1, #232	; 0xe8
 8007758:	187a      	adds	r2, r7, r1
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	1d7b      	adds	r3, r7, #5
 800775e:	33ff      	adds	r3, #255	; 0xff
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	221f      	movs	r2, #31
 8007764:	4013      	ands	r3, r2
 8007766:	d104      	bne.n	8007772 <USB_EPStartXfer+0xb3e>
 8007768:	187b      	adds	r3, r7, r1
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	187a      	adds	r2, r7, r1
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	218c      	movs	r1, #140	; 0x8c
 8007774:	187b      	adds	r3, r7, r1
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29a      	uxth	r2, r3
 800777c:	23e8      	movs	r3, #232	; 0xe8
 800777e:	18fb      	adds	r3, r7, r3
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	b29b      	uxth	r3, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	b29b      	uxth	r3, r3
 800778c:	4ab6      	ldr	r2, [pc, #728]	; (8007a68 <USB_EPStartXfer+0xe34>)
 800778e:	4313      	orrs	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	187b      	adds	r3, r7, r1
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e353      	b.n	8007e42 <USB_EPStartXfer+0x120e>
 800779a:	1d7b      	adds	r3, r7, #5
 800779c:	33ff      	adds	r3, #255	; 0xff
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <USB_EPStartXfer+0xb88>
 80077a4:	218c      	movs	r1, #140	; 0x8c
 80077a6:	187b      	adds	r3, r7, r1
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4aae      	ldr	r2, [pc, #696]	; (8007a68 <USB_EPStartXfer+0xe34>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	187b      	adds	r3, r7, r1
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	e342      	b.n	8007e42 <USB_EPStartXfer+0x120e>
 80077bc:	1d7b      	adds	r3, r7, #5
 80077be:	33ff      	adds	r3, #255	; 0xff
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	21e8      	movs	r1, #232	; 0xe8
 80077c6:	187a      	adds	r2, r7, r1
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	1d7b      	adds	r3, r7, #5
 80077cc:	33ff      	adds	r3, #255	; 0xff
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2201      	movs	r2, #1
 80077d2:	4013      	ands	r3, r2
 80077d4:	d004      	beq.n	80077e0 <USB_EPStartXfer+0xbac>
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3301      	adds	r3, #1
 80077dc:	187a      	adds	r2, r7, r1
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	218c      	movs	r1, #140	; 0x8c
 80077e2:	187b      	adds	r3, r7, r1
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	23e8      	movs	r3, #232	; 0xe8
 80077ec:	18fb      	adds	r3, r7, r3
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	029b      	lsls	r3, r3, #10
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	187b      	adds	r3, r7, r1
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	e31f      	b.n	8007e42 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	78db      	ldrb	r3, [r3, #3]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d000      	beq.n	800780c <USB_EPStartXfer+0xbd8>
 800780a:	e191      	b.n	8007b30 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d000      	beq.n	8007816 <USB_EPStartXfer+0xbe2>
 8007814:	e07c      	b.n	8007910 <USB_EPStartXfer+0xcdc>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	21ac      	movs	r1, #172	; 0xac
 800781a:	187a      	adds	r2, r7, r1
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2250      	movs	r2, #80	; 0x50
 8007822:	5a9b      	ldrh	r3, [r3, r2]
 8007824:	b29b      	uxth	r3, r3
 8007826:	001a      	movs	r2, r3
 8007828:	187b      	adds	r3, r7, r1
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	189b      	adds	r3, r3, r2
 800782e:	187a      	adds	r2, r7, r1
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	187b      	adds	r3, r7, r1
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	18d3      	adds	r3, r2, r3
 800783e:	4a8b      	ldr	r2, [pc, #556]	; (8007a6c <USB_EPStartXfer+0xe38>)
 8007840:	4694      	mov	ip, r2
 8007842:	4463      	add	r3, ip
 8007844:	21a8      	movs	r1, #168	; 0xa8
 8007846:	187a      	adds	r2, r7, r1
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	187b      	adds	r3, r7, r1
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	059b      	lsls	r3, r3, #22
 8007854:	0d9b      	lsrs	r3, r3, #22
 8007856:	b29a      	uxth	r2, r3
 8007858:	187b      	adds	r3, r7, r1
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b3e      	cmp	r3, #62	; 0x3e
 8007864:	d923      	bls.n	80078ae <USB_EPStartXfer+0xc7a>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	095b      	lsrs	r3, r3, #5
 800786c:	21e4      	movs	r1, #228	; 0xe4
 800786e:	187a      	adds	r2, r7, r1
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	221f      	movs	r2, #31
 8007878:	4013      	ands	r3, r2
 800787a:	d104      	bne.n	8007886 <USB_EPStartXfer+0xc52>
 800787c:	187b      	adds	r3, r7, r1
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	187a      	adds	r2, r7, r1
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	21a8      	movs	r1, #168	; 0xa8
 8007888:	187b      	adds	r3, r7, r1
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	23e4      	movs	r3, #228	; 0xe4
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	029b      	lsls	r3, r3, #10
 800789a:	b29b      	uxth	r3, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4a71      	ldr	r2, [pc, #452]	; (8007a68 <USB_EPStartXfer+0xe34>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e054      	b.n	8007958 <USB_EPStartXfer+0xd24>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10b      	bne.n	80078ce <USB_EPStartXfer+0xc9a>
 80078b6:	21a8      	movs	r1, #168	; 0xa8
 80078b8:	187b      	adds	r3, r7, r1
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4a69      	ldr	r2, [pc, #420]	; (8007a68 <USB_EPStartXfer+0xe34>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	187b      	adds	r3, r7, r1
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e044      	b.n	8007958 <USB_EPStartXfer+0xd24>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	21e4      	movs	r1, #228	; 0xe4
 80078d6:	187a      	adds	r2, r7, r1
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2201      	movs	r2, #1
 80078e0:	4013      	ands	r3, r2
 80078e2:	d004      	beq.n	80078ee <USB_EPStartXfer+0xcba>
 80078e4:	187b      	adds	r3, r7, r1
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	187a      	adds	r2, r7, r1
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	21a8      	movs	r1, #168	; 0xa8
 80078f0:	187b      	adds	r3, r7, r1
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	23e4      	movs	r3, #228	; 0xe4
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	b29b      	uxth	r3, r3
 8007904:	4313      	orrs	r3, r2
 8007906:	b29a      	uxth	r2, r3
 8007908:	187b      	adds	r3, r7, r1
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	e023      	b.n	8007958 <USB_EPStartXfer+0xd24>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d11f      	bne.n	8007958 <USB_EPStartXfer+0xd24>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	21b4      	movs	r1, #180	; 0xb4
 800791c:	187a      	adds	r2, r7, r1
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2250      	movs	r2, #80	; 0x50
 8007924:	5a9b      	ldrh	r3, [r3, r2]
 8007926:	b29b      	uxth	r3, r3
 8007928:	001a      	movs	r2, r3
 800792a:	187b      	adds	r3, r7, r1
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	189b      	adds	r3, r3, r2
 8007930:	187a      	adds	r2, r7, r1
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	00da      	lsls	r2, r3, #3
 800793a:	187b      	adds	r3, r7, r1
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	18d3      	adds	r3, r2, r3
 8007940:	4a4a      	ldr	r2, [pc, #296]	; (8007a6c <USB_EPStartXfer+0xe38>)
 8007942:	4694      	mov	ip, r2
 8007944:	4463      	add	r3, ip
 8007946:	21b0      	movs	r1, #176	; 0xb0
 8007948:	187a      	adds	r2, r7, r1
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	b29a      	uxth	r2, r3
 8007952:	187b      	adds	r3, r7, r1
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	22a4      	movs	r2, #164	; 0xa4
 800795c:	18ba      	adds	r2, r7, r2
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d000      	beq.n	800796a <USB_EPStartXfer+0xd36>
 8007968:	e082      	b.n	8007a70 <USB_EPStartXfer+0xe3c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	219c      	movs	r1, #156	; 0x9c
 800796e:	187a      	adds	r2, r7, r1
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2250      	movs	r2, #80	; 0x50
 8007976:	5a9b      	ldrh	r3, [r3, r2]
 8007978:	b29b      	uxth	r3, r3
 800797a:	001a      	movs	r2, r3
 800797c:	187b      	adds	r3, r7, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	189b      	adds	r3, r3, r2
 8007982:	187a      	adds	r2, r7, r1
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	00da      	lsls	r2, r3, #3
 800798c:	187b      	adds	r3, r7, r1
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	18d3      	adds	r3, r2, r3
 8007992:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <USB_EPStartXfer+0xe30>)
 8007994:	4694      	mov	ip, r2
 8007996:	4463      	add	r3, ip
 8007998:	2198      	movs	r1, #152	; 0x98
 800799a:	187a      	adds	r2, r7, r1
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	187b      	adds	r3, r7, r1
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	059b      	lsls	r3, r3, #22
 80079a8:	0d9b      	lsrs	r3, r3, #22
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	187b      	adds	r3, r7, r1
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b3e      	cmp	r3, #62	; 0x3e
 80079b8:	d923      	bls.n	8007a02 <USB_EPStartXfer+0xdce>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	21e0      	movs	r1, #224	; 0xe0
 80079c2:	187a      	adds	r2, r7, r1
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	221f      	movs	r2, #31
 80079cc:	4013      	ands	r3, r2
 80079ce:	d104      	bne.n	80079da <USB_EPStartXfer+0xda6>
 80079d0:	187b      	adds	r3, r7, r1
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	187a      	adds	r2, r7, r1
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	2198      	movs	r1, #152	; 0x98
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	23e0      	movs	r3, #224	; 0xe0
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <USB_EPStartXfer+0xe34>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	187b      	adds	r3, r7, r1
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e057      	b.n	8007ab2 <USB_EPStartXfer+0xe7e>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <USB_EPStartXfer+0xdee>
 8007a0a:	2198      	movs	r1, #152	; 0x98
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <USB_EPStartXfer+0xe34>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	187b      	adds	r3, r7, r1
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e047      	b.n	8007ab2 <USB_EPStartXfer+0xe7e>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	21e0      	movs	r1, #224	; 0xe0
 8007a2a:	187a      	adds	r2, r7, r1
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2201      	movs	r2, #1
 8007a34:	4013      	ands	r3, r2
 8007a36:	d004      	beq.n	8007a42 <USB_EPStartXfer+0xe0e>
 8007a38:	187b      	adds	r3, r7, r1
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	187a      	adds	r2, r7, r1
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	2198      	movs	r1, #152	; 0x98
 8007a44:	187b      	adds	r3, r7, r1
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	23e0      	movs	r3, #224	; 0xe0
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	029b      	lsls	r3, r3, #10
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	e026      	b.n	8007ab2 <USB_EPStartXfer+0xe7e>
 8007a64:	00000406 	.word	0x00000406
 8007a68:	ffff8000 	.word	0xffff8000
 8007a6c:	00000402 	.word	0x00000402
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d11c      	bne.n	8007ab2 <USB_EPStartXfer+0xe7e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2250      	movs	r2, #80	; 0x50
 8007a7c:	5a9b      	ldrh	r3, [r3, r2]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	001a      	movs	r2, r3
 8007a82:	21a4      	movs	r1, #164	; 0xa4
 8007a84:	187b      	adds	r3, r7, r1
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	189b      	adds	r3, r3, r2
 8007a8a:	187a      	adds	r2, r7, r1
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00da      	lsls	r2, r3, #3
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	18d3      	adds	r3, r2, r3
 8007a9a:	4ad2      	ldr	r2, [pc, #840]	; (8007de4 <USB_EPStartXfer+0x11b0>)
 8007a9c:	4694      	mov	ip, r2
 8007a9e:	4463      	add	r3, ip
 8007aa0:	21a0      	movs	r1, #160	; 0xa0
 8007aa2:	187a      	adds	r2, r7, r1
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d100      	bne.n	8007abc <USB_EPStartXfer+0xe88>
 8007aba:	e1c2      	b.n	8007e42 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	18d2      	adds	r2, r2, r3
 8007ac6:	2196      	movs	r1, #150	; 0x96
 8007ac8:	187b      	adds	r3, r7, r1
 8007aca:	8812      	ldrh	r2, [r2, #0]
 8007acc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	881a      	ldrh	r2, [r3, #0]
 8007ad2:	2380      	movs	r3, #128	; 0x80
 8007ad4:	01db      	lsls	r3, r3, #7
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <USB_EPStartXfer+0xeb0>
 8007ada:	187b      	adds	r3, r7, r1
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d10d      	bne.n	8007b00 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ae4:	2196      	movs	r1, #150	; 0x96
 8007ae6:	187b      	adds	r3, r7, r1
 8007ae8:	881a      	ldrh	r2, [r3, #0]
 8007aea:	2380      	movs	r3, #128	; 0x80
 8007aec:	01db      	lsls	r3, r3, #7
 8007aee:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007af0:	d000      	beq.n	8007af4 <USB_EPStartXfer+0xec0>
 8007af2:	e1a6      	b.n	8007e42 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2240      	movs	r2, #64	; 0x40
 8007afa:	4013      	ands	r3, r2
 8007afc:	d000      	beq.n	8007b00 <USB_EPStartXfer+0xecc>
 8007afe:	e1a0      	b.n	8007e42 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	18d3      	adds	r3, r2, r3
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	2094      	movs	r0, #148	; 0x94
 8007b10:	183b      	adds	r3, r7, r0
 8007b12:	49b5      	ldr	r1, [pc, #724]	; (8007de8 <USB_EPStartXfer+0x11b4>)
 8007b14:	400a      	ands	r2, r1
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	18d3      	adds	r3, r2, r3
 8007b22:	183a      	adds	r2, r7, r0
 8007b24:	8812      	ldrh	r2, [r2, #0]
 8007b26:	49b1      	ldr	r1, [pc, #708]	; (8007dec <USB_EPStartXfer+0x11b8>)
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e188      	b.n	8007e42 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	78db      	ldrb	r3, [r3, #3]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d000      	beq.n	8007b3a <USB_EPStartXfer+0xf06>
 8007b38:	e181      	b.n	8007e3e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d90d      	bls.n	8007b62 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	1d7a      	adds	r2, r7, #5
 8007b4c:	32ff      	adds	r2, #255	; 0xff
 8007b4e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	1d7b      	adds	r3, r7, #5
 8007b56:	33ff      	adds	r3, #255	; 0xff
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	619a      	str	r2, [r3, #24]
 8007b60:	e007      	b.n	8007b72 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	1d7a      	adds	r2, r7, #5
 8007b68:	32ff      	adds	r2, #255	; 0xff
 8007b6a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d000      	beq.n	8007b7c <USB_EPStartXfer+0xf48>
 8007b7a:	e082      	b.n	8007c82 <USB_EPStartXfer+0x104e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	21cc      	movs	r1, #204	; 0xcc
 8007b80:	187a      	adds	r2, r7, r1
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2250      	movs	r2, #80	; 0x50
 8007b88:	5a9b      	ldrh	r3, [r3, r2]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	187b      	adds	r3, r7, r1
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	187a      	adds	r2, r7, r1
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	00da      	lsls	r2, r3, #3
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	18d3      	adds	r3, r2, r3
 8007ba4:	4a92      	ldr	r2, [pc, #584]	; (8007df0 <USB_EPStartXfer+0x11bc>)
 8007ba6:	4694      	mov	ip, r2
 8007ba8:	4463      	add	r3, ip
 8007baa:	21c8      	movs	r1, #200	; 0xc8
 8007bac:	187a      	adds	r2, r7, r1
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	0d9b      	lsrs	r3, r3, #22
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	187b      	adds	r3, r7, r1
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	1d7b      	adds	r3, r7, #5
 8007bc6:	33ff      	adds	r3, #255	; 0xff
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b3e      	cmp	r3, #62	; 0x3e
 8007bcc:	d925      	bls.n	8007c1a <USB_EPStartXfer+0xfe6>
 8007bce:	1d7b      	adds	r3, r7, #5
 8007bd0:	33ff      	adds	r3, #255	; 0xff
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	21dc      	movs	r1, #220	; 0xdc
 8007bd8:	187a      	adds	r2, r7, r1
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	1d7b      	adds	r3, r7, #5
 8007bde:	33ff      	adds	r3, #255	; 0xff
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	221f      	movs	r2, #31
 8007be4:	4013      	ands	r3, r2
 8007be6:	d104      	bne.n	8007bf2 <USB_EPStartXfer+0xfbe>
 8007be8:	187b      	adds	r3, r7, r1
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	187a      	adds	r2, r7, r1
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	21c8      	movs	r1, #200	; 0xc8
 8007bf4:	187b      	adds	r3, r7, r1
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	23dc      	movs	r3, #220	; 0xdc
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4a79      	ldr	r2, [pc, #484]	; (8007df4 <USB_EPStartXfer+0x11c0>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	187b      	adds	r3, r7, r1
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e058      	b.n	8007ccc <USB_EPStartXfer+0x1098>
 8007c1a:	1d7b      	adds	r3, r7, #5
 8007c1c:	33ff      	adds	r3, #255	; 0xff
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <USB_EPStartXfer+0x1008>
 8007c24:	21c8      	movs	r1, #200	; 0xc8
 8007c26:	187b      	adds	r3, r7, r1
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	4a71      	ldr	r2, [pc, #452]	; (8007df4 <USB_EPStartXfer+0x11c0>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e047      	b.n	8007ccc <USB_EPStartXfer+0x1098>
 8007c3c:	1d7b      	adds	r3, r7, #5
 8007c3e:	33ff      	adds	r3, #255	; 0xff
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	21dc      	movs	r1, #220	; 0xdc
 8007c46:	187a      	adds	r2, r7, r1
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	1d7b      	adds	r3, r7, #5
 8007c4c:	33ff      	adds	r3, #255	; 0xff
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	4013      	ands	r3, r2
 8007c54:	d004      	beq.n	8007c60 <USB_EPStartXfer+0x102c>
 8007c56:	187b      	adds	r3, r7, r1
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	187a      	adds	r2, r7, r1
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	21c8      	movs	r1, #200	; 0xc8
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	23dc      	movs	r3, #220	; 0xdc
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e024      	b.n	8007ccc <USB_EPStartXfer+0x1098>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d120      	bne.n	8007ccc <USB_EPStartXfer+0x1098>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	21d4      	movs	r1, #212	; 0xd4
 8007c8e:	187a      	adds	r2, r7, r1
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2250      	movs	r2, #80	; 0x50
 8007c96:	5a9b      	ldrh	r3, [r3, r2]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	189b      	adds	r3, r3, r2
 8007ca2:	187a      	adds	r2, r7, r1
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	00da      	lsls	r2, r3, #3
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	18d3      	adds	r3, r2, r3
 8007cb2:	4a4f      	ldr	r2, [pc, #316]	; (8007df0 <USB_EPStartXfer+0x11bc>)
 8007cb4:	4694      	mov	ip, r2
 8007cb6:	4463      	add	r3, ip
 8007cb8:	21d0      	movs	r1, #208	; 0xd0
 8007cba:	187a      	adds	r2, r7, r1
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	1d7b      	adds	r3, r7, #5
 8007cc0:	33ff      	adds	r3, #255	; 0xff
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	187b      	adds	r3, r7, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	22c4      	movs	r2, #196	; 0xc4
 8007cd0:	18ba      	adds	r2, r7, r2
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d000      	beq.n	8007cde <USB_EPStartXfer+0x10aa>
 8007cdc:	e08c      	b.n	8007df8 <USB_EPStartXfer+0x11c4>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	21bc      	movs	r1, #188	; 0xbc
 8007ce2:	187a      	adds	r2, r7, r1
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2250      	movs	r2, #80	; 0x50
 8007cea:	5a9b      	ldrh	r3, [r3, r2]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	001a      	movs	r2, r3
 8007cf0:	187b      	adds	r3, r7, r1
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	187a      	adds	r2, r7, r1
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	00da      	lsls	r2, r3, #3
 8007d00:	187b      	adds	r3, r7, r1
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	18d3      	adds	r3, r2, r3
 8007d06:	4a37      	ldr	r2, [pc, #220]	; (8007de4 <USB_EPStartXfer+0x11b0>)
 8007d08:	4694      	mov	ip, r2
 8007d0a:	4463      	add	r3, ip
 8007d0c:	21b8      	movs	r1, #184	; 0xb8
 8007d0e:	187a      	adds	r2, r7, r1
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	187b      	adds	r3, r7, r1
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	059b      	lsls	r3, r3, #22
 8007d1c:	0d9b      	lsrs	r3, r3, #22
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	1d7b      	adds	r3, r7, #5
 8007d28:	33ff      	adds	r3, #255	; 0xff
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d2e:	d925      	bls.n	8007d7c <USB_EPStartXfer+0x1148>
 8007d30:	1d7b      	adds	r3, r7, #5
 8007d32:	33ff      	adds	r3, #255	; 0xff
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	21d8      	movs	r1, #216	; 0xd8
 8007d3a:	187a      	adds	r2, r7, r1
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	1d7b      	adds	r3, r7, #5
 8007d40:	33ff      	adds	r3, #255	; 0xff
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	221f      	movs	r2, #31
 8007d46:	4013      	ands	r3, r2
 8007d48:	d104      	bne.n	8007d54 <USB_EPStartXfer+0x1120>
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	187a      	adds	r2, r7, r1
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	21b8      	movs	r1, #184	; 0xb8
 8007d56:	187b      	adds	r3, r7, r1
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	23d8      	movs	r3, #216	; 0xd8
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <USB_EPStartXfer+0x11c0>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e062      	b.n	8007e42 <USB_EPStartXfer+0x120e>
 8007d7c:	1d7b      	adds	r3, r7, #5
 8007d7e:	33ff      	adds	r3, #255	; 0xff
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <USB_EPStartXfer+0x116a>
 8007d86:	21b8      	movs	r1, #184	; 0xb8
 8007d88:	187b      	adds	r3, r7, r1
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <USB_EPStartXfer+0x11c0>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	e051      	b.n	8007e42 <USB_EPStartXfer+0x120e>
 8007d9e:	1d7b      	adds	r3, r7, #5
 8007da0:	33ff      	adds	r3, #255	; 0xff
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	21d8      	movs	r1, #216	; 0xd8
 8007da8:	187a      	adds	r2, r7, r1
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	1d7b      	adds	r3, r7, #5
 8007dae:	33ff      	adds	r3, #255	; 0xff
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2201      	movs	r2, #1
 8007db4:	4013      	ands	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <USB_EPStartXfer+0x118e>
 8007db8:	187b      	adds	r3, r7, r1
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	187a      	adds	r2, r7, r1
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	21b8      	movs	r1, #184	; 0xb8
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	23d8      	movs	r3, #216	; 0xd8
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	029b      	lsls	r3, r3, #10
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e02e      	b.n	8007e42 <USB_EPStartXfer+0x120e>
 8007de4:	00000406 	.word	0x00000406
 8007de8:	ffff8f8f 	.word	0xffff8f8f
 8007dec:	ffff80c0 	.word	0xffff80c0
 8007df0:	00000402 	.word	0x00000402
 8007df4:	ffff8000 	.word	0xffff8000
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d120      	bne.n	8007e42 <USB_EPStartXfer+0x120e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2250      	movs	r2, #80	; 0x50
 8007e04:	5a9b      	ldrh	r3, [r3, r2]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	001a      	movs	r2, r3
 8007e0a:	21c4      	movs	r1, #196	; 0xc4
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	187a      	adds	r2, r7, r1
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	00da      	lsls	r2, r3, #3
 8007e1c:	187b      	adds	r3, r7, r1
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	18d3      	adds	r3, r2, r3
 8007e22:	4a1d      	ldr	r2, [pc, #116]	; (8007e98 <USB_EPStartXfer+0x1264>)
 8007e24:	4694      	mov	ip, r2
 8007e26:	4463      	add	r3, ip
 8007e28:	21c0      	movs	r1, #192	; 0xc0
 8007e2a:	187a      	adds	r2, r7, r1
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	1d7b      	adds	r3, r7, #5
 8007e30:	33ff      	adds	r3, #255	; 0xff
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	187b      	adds	r3, r7, r1
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e001      	b.n	8007e42 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e025      	b.n	8007e8e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	18d3      	adds	r3, r2, r3
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	208a      	movs	r0, #138	; 0x8a
 8007e52:	183b      	adds	r3, r7, r0
 8007e54:	4911      	ldr	r1, [pc, #68]	; (8007e9c <USB_EPStartXfer+0x1268>)
 8007e56:	400a      	ands	r2, r1
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	183b      	adds	r3, r7, r0
 8007e5c:	183a      	adds	r2, r7, r0
 8007e5e:	8812      	ldrh	r2, [r2, #0]
 8007e60:	2180      	movs	r1, #128	; 0x80
 8007e62:	0149      	lsls	r1, r1, #5
 8007e64:	404a      	eors	r2, r1
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	183b      	adds	r3, r7, r0
 8007e6a:	183a      	adds	r2, r7, r0
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	0189      	lsls	r1, r1, #6
 8007e72:	404a      	eors	r2, r1
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	18d3      	adds	r3, r2, r3
 8007e80:	183a      	adds	r2, r7, r0
 8007e82:	8812      	ldrh	r2, [r2, #0]
 8007e84:	4906      	ldr	r1, [pc, #24]	; (8007ea0 <USB_EPStartXfer+0x126c>)
 8007e86:	430a      	orrs	r2, r1
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	0018      	movs	r0, r3
 8007e90:	46bd      	mov	sp, r7
 8007e92:	b043      	add	sp, #268	; 0x10c
 8007e94:	bd90      	pop	{r4, r7, pc}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	00000406 	.word	0x00000406
 8007e9c:	ffffbf8f 	.word	0xffffbf8f
 8007ea0:	ffff8080 	.word	0xffff8080

08007ea4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01d      	beq.n	8007ef2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	18d3      	adds	r3, r2, r3
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	200c      	movs	r0, #12
 8007ec6:	183b      	adds	r3, r7, r0
 8007ec8:	491b      	ldr	r1, [pc, #108]	; (8007f38 <USB_EPSetStall+0x94>)
 8007eca:	400a      	ands	r2, r1
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	183b      	adds	r3, r7, r0
 8007ed0:	183a      	adds	r2, r7, r0
 8007ed2:	8812      	ldrh	r2, [r2, #0]
 8007ed4:	2110      	movs	r1, #16
 8007ed6:	404a      	eors	r2, r1
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	183a      	adds	r2, r7, r0
 8007ee6:	8812      	ldrh	r2, [r2, #0]
 8007ee8:	4914      	ldr	r1, [pc, #80]	; (8007f3c <USB_EPSetStall+0x98>)
 8007eea:	430a      	orrs	r2, r1
 8007eec:	b292      	uxth	r2, r2
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	e01d      	b.n	8007f2e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	18d3      	adds	r3, r2, r3
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	200e      	movs	r0, #14
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	490e      	ldr	r1, [pc, #56]	; (8007f40 <USB_EPSetStall+0x9c>)
 8007f06:	400a      	ands	r2, r1
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	183b      	adds	r3, r7, r0
 8007f0c:	183a      	adds	r2, r7, r0
 8007f0e:	8812      	ldrh	r2, [r2, #0]
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	0149      	lsls	r1, r1, #5
 8007f14:	404a      	eors	r2, r1
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	18d3      	adds	r3, r2, r3
 8007f22:	183a      	adds	r2, r7, r0
 8007f24:	8812      	ldrh	r2, [r2, #0]
 8007f26:	4905      	ldr	r1, [pc, #20]	; (8007f3c <USB_EPSetStall+0x98>)
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	b292      	uxth	r2, r2
 8007f2c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b004      	add	sp, #16
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	ffff8fbf 	.word	0xffff8fbf
 8007f3c:	ffff8080 	.word	0xffff8080
 8007f40:	ffffbf8f 	.word	0xffffbf8f

08007f44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	7b1b      	ldrb	r3, [r3, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d000      	beq.n	8007f58 <USB_EPClearStall+0x14>
 8007f56:	e095      	b.n	8008084 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d046      	beq.n	8007fee <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	18d2      	adds	r2, r2, r3
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	8812      	ldrh	r2, [r2, #0]
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d016      	beq.n	8007faa <USB_EPClearStall+0x66>
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	200e      	movs	r0, #14
 8007f8c:	183b      	adds	r3, r7, r0
 8007f8e:	4940      	ldr	r1, [pc, #256]	; (8008090 <USB_EPClearStall+0x14c>)
 8007f90:	400a      	ands	r2, r1
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	18d3      	adds	r3, r2, r3
 8007f9e:	183a      	adds	r2, r7, r0
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	493c      	ldr	r1, [pc, #240]	; (8008094 <USB_EPClearStall+0x150>)
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	78db      	ldrb	r3, [r3, #3]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d068      	beq.n	8008084 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	18d3      	adds	r3, r2, r3
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	200c      	movs	r0, #12
 8007fc2:	183b      	adds	r3, r7, r0
 8007fc4:	4934      	ldr	r1, [pc, #208]	; (8008098 <USB_EPClearStall+0x154>)
 8007fc6:	400a      	ands	r2, r1
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	183b      	adds	r3, r7, r0
 8007fcc:	183a      	adds	r2, r7, r0
 8007fce:	8812      	ldrh	r2, [r2, #0]
 8007fd0:	2120      	movs	r1, #32
 8007fd2:	404a      	eors	r2, r1
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	18d3      	adds	r3, r2, r3
 8007fe0:	183a      	adds	r2, r7, r0
 8007fe2:	8812      	ldrh	r2, [r2, #0]
 8007fe4:	492d      	ldr	r1, [pc, #180]	; (800809c <USB_EPClearStall+0x158>)
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	e04a      	b.n	8008084 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	18d2      	adds	r2, r2, r3
 8007ff8:	2116      	movs	r1, #22
 8007ffa:	187b      	adds	r3, r7, r1
 8007ffc:	8812      	ldrh	r2, [r2, #0]
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	187b      	adds	r3, r7, r1
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	2380      	movs	r3, #128	; 0x80
 8008006:	01db      	lsls	r3, r3, #7
 8008008:	4013      	ands	r3, r2
 800800a:	d016      	beq.n	800803a <USB_EPClearStall+0xf6>
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	18d3      	adds	r3, r2, r3
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29a      	uxth	r2, r3
 800801a:	2014      	movs	r0, #20
 800801c:	183b      	adds	r3, r7, r0
 800801e:	491c      	ldr	r1, [pc, #112]	; (8008090 <USB_EPClearStall+0x14c>)
 8008020:	400a      	ands	r2, r1
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	18d3      	adds	r3, r2, r3
 800802e:	183a      	adds	r2, r7, r0
 8008030:	8812      	ldrh	r2, [r2, #0]
 8008032:	491b      	ldr	r1, [pc, #108]	; (80080a0 <USB_EPClearStall+0x15c>)
 8008034:	430a      	orrs	r2, r1
 8008036:	b292      	uxth	r2, r2
 8008038:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	18d3      	adds	r3, r2, r3
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	2012      	movs	r0, #18
 800804a:	183b      	adds	r3, r7, r0
 800804c:	4915      	ldr	r1, [pc, #84]	; (80080a4 <USB_EPClearStall+0x160>)
 800804e:	400a      	ands	r2, r1
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	183b      	adds	r3, r7, r0
 8008054:	183a      	adds	r2, r7, r0
 8008056:	8812      	ldrh	r2, [r2, #0]
 8008058:	2180      	movs	r1, #128	; 0x80
 800805a:	0149      	lsls	r1, r1, #5
 800805c:	404a      	eors	r2, r1
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	183b      	adds	r3, r7, r0
 8008062:	183a      	adds	r2, r7, r0
 8008064:	8812      	ldrh	r2, [r2, #0]
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	0189      	lsls	r1, r1, #6
 800806a:	404a      	eors	r2, r1
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	18d3      	adds	r3, r2, r3
 8008078:	183a      	adds	r2, r7, r0
 800807a:	8812      	ldrh	r2, [r2, #0]
 800807c:	4907      	ldr	r1, [pc, #28]	; (800809c <USB_EPClearStall+0x158>)
 800807e:	430a      	orrs	r2, r1
 8008080:	b292      	uxth	r2, r2
 8008082:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b006      	add	sp, #24
 800808c:	bd80      	pop	{r7, pc}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	ffff8f8f 	.word	0xffff8f8f
 8008094:	ffff80c0 	.word	0xffff80c0
 8008098:	ffff8fbf 	.word	0xffff8fbf
 800809c:	ffff8080 	.word	0xffff8080
 80080a0:	ffffc080 	.word	0xffffc080
 80080a4:	ffffbf8f 	.word	0xffffbf8f

080080a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	000a      	movs	r2, r1
 80080b2:	1cfb      	adds	r3, r7, #3
 80080b4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80080b6:	1cfb      	adds	r3, r7, #3
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	224c      	movs	r2, #76	; 0x4c
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b002      	add	sp, #8
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2258      	movs	r2, #88	; 0x58
 80080dc:	5a9b      	ldrh	r3, [r3, r2]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <USB_DevConnect+0x28>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	b299      	uxth	r1, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2258      	movs	r2, #88	; 0x58
 80080ea:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b002      	add	sp, #8
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	ffff8000 	.word	0xffff8000

080080fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2244      	movs	r2, #68	; 0x44
 8008108:	5a9b      	ldrh	r3, [r3, r2]
 800810a:	b29b      	uxth	r3, r3
 800810c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	0018      	movs	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	b004      	add	sp, #16
 8008116:	bd80      	pop	{r7, pc}

08008118 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	; 0x28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	0019      	movs	r1, r3
 8008124:	1dbb      	adds	r3, r7, #6
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	1d3b      	adds	r3, r7, #4
 800812a:	1c0a      	adds	r2, r1, #0
 800812c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008140:	1dbb      	adds	r3, r7, #6
 8008142:	881a      	ldrh	r2, [r3, #0]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	18d3      	adds	r3, r2, r3
 8008148:	2280      	movs	r2, #128	; 0x80
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	4694      	mov	ip, r2
 800814e:	4463      	add	r3, ip
 8008150:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	e020      	b.n	800819a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	2112      	movs	r1, #18
 800815e:	187b      	adds	r3, r7, r1
 8008160:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3301      	adds	r3, #1
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	b21a      	sxth	r2, r3
 800816c:	187b      	adds	r3, r7, r1
 800816e:	2000      	movs	r0, #0
 8008170:	5e1b      	ldrsh	r3, [r3, r0]
 8008172:	4313      	orrs	r3, r2
 8008174:	b21a      	sxth	r2, r3
 8008176:	187b      	adds	r3, r7, r1
 8008178:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	187a      	adds	r2, r7, r1
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	3302      	adds	r3, #2
 8008186:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3301      	adds	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	3301      	adds	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	3b01      	subs	r3, #1
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1db      	bne.n	8008158 <USB_WritePMA+0x40>
  }
}
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	46bd      	mov	sp, r7
 80081a6:	b00a      	add	sp, #40	; 0x28
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b08a      	sub	sp, #40	; 0x28
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	0019      	movs	r1, r3
 80081b6:	1dbb      	adds	r3, r7, #6
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	1d3b      	adds	r3, r7, #4
 80081bc:	1c0a      	adds	r2, r1, #0
 80081be:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081d2:	1dbb      	adds	r3, r7, #6
 80081d4:	881a      	ldrh	r2, [r3, #0]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	18d3      	adds	r3, r2, r3
 80081da:	2280      	movs	r2, #128	; 0x80
 80081dc:	00d2      	lsls	r2, r2, #3
 80081de:	4694      	mov	ip, r2
 80081e0:	4463      	add	r3, ip
 80081e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
 80081e8:	e018      	b.n	800821c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	3302      	adds	r3, #2
 80081f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	b2da      	uxtb	r2, r3
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	3301      	adds	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	3b01      	subs	r3, #1
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e3      	bne.n	80081ea <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	4013      	ands	r3, r2
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	701a      	strb	r2, [r3, #0]
  }
}
 8008240:	46c0      	nop			; (mov r8, r8)
 8008242:	46bd      	mov	sp, r7
 8008244:	b00a      	add	sp, #40	; 0x28
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	000a      	movs	r2, r1
 8008252:	1cfb      	adds	r3, r7, #3
 8008254:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008256:	230f      	movs	r3, #15
 8008258:	18fb      	adds	r3, r7, r3
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7c1b      	ldrb	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d116      	bne.n	8008294 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008266:	2380      	movs	r3, #128	; 0x80
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	2181      	movs	r1, #129	; 0x81
 8008270:	f002 f885 	bl	800a37e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800827a:	2380      	movs	r3, #128	; 0x80
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	2101      	movs	r1, #1
 8008284:	f002 f87b 	bl	800a37e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	23b6      	movs	r3, #182	; 0xb6
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	2101      	movs	r1, #1
 8008290:	50d1      	str	r1, [r2, r3]
 8008292:	e013      	b.n	80082bc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	2202      	movs	r2, #2
 800829a:	2181      	movs	r1, #129	; 0x81
 800829c:	f002 f86f 	bl	800a37e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	2340      	movs	r3, #64	; 0x40
 80082aa:	2202      	movs	r2, #2
 80082ac:	2101      	movs	r1, #1
 80082ae:	f002 f866 	bl	800a37e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	23b6      	movs	r3, #182	; 0xb6
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	2101      	movs	r1, #1
 80082ba:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	2308      	movs	r3, #8
 80082c0:	2203      	movs	r2, #3
 80082c2:	2182      	movs	r1, #130	; 0x82
 80082c4:	f002 f85b 	bl	800a37e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082ce:	2387      	movs	r3, #135	; 0x87
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	0018      	movs	r0, r3
 80082d4:	f002 f9ec 	bl	800a6b0 <USBD_static_malloc>
 80082d8:	0001      	movs	r1, r0
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	23ae      	movs	r3, #174	; 0xae
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	23ae      	movs	r3, #174	; 0xae
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	58d3      	ldr	r3, [r2, r3]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80082ee:	230f      	movs	r3, #15
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	2201      	movs	r2, #1
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e02c      	b.n	8008352 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	23ae      	movs	r3, #174	; 0xae
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	58d3      	ldr	r3, [r2, r3]
 8008300:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	23af      	movs	r3, #175	; 0xaf
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	58d3      	ldr	r3, [r2, r3]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	2385      	movs	r3, #133	; 0x85
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	2100      	movs	r1, #0
 8008316:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	2386      	movs	r3, #134	; 0x86
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	2100      	movs	r1, #0
 8008320:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	2381      	movs	r3, #129	; 0x81
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	58d2      	ldr	r2, [r2, r3]
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	2101      	movs	r1, #1
 800833a:	f002 f96b 	bl	800a614 <USBD_LL_PrepareReceive>
 800833e:	e008      	b.n	8008352 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	2381      	movs	r3, #129	; 0x81
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	58d2      	ldr	r2, [r2, r3]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	2101      	movs	r1, #1
 800834e:	f002 f961 	bl	800a614 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008352:	230f      	movs	r3, #15
 8008354:	18fb      	adds	r3, r7, r3
 8008356:	781b      	ldrb	r3, [r3, #0]
}
 8008358:	0018      	movs	r0, r3
 800835a:	46bd      	mov	sp, r7
 800835c:	b004      	add	sp, #16
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	000a      	movs	r2, r1
 800836a:	1cfb      	adds	r3, r7, #3
 800836c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800836e:	230f      	movs	r3, #15
 8008370:	18fb      	adds	r3, r7, r3
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2181      	movs	r1, #129	; 0x81
 800837a:	0018      	movs	r0, r3
 800837c:	f002 f836 	bl	800a3ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2101      	movs	r1, #1
 800838a:	0018      	movs	r0, r3
 800838c:	f002 f82e 	bl	800a3ec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	23b6      	movs	r3, #182	; 0xb6
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	2100      	movs	r1, #0
 8008398:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2182      	movs	r1, #130	; 0x82
 800839e:	0018      	movs	r0, r3
 80083a0:	f002 f824 	bl	800a3ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	23ae      	movs	r3, #174	; 0xae
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	58d3      	ldr	r3, [r2, r3]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d011      	beq.n	80083da <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	23af      	movs	r3, #175	; 0xaf
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	58d3      	ldr	r3, [r2, r3]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	23ae      	movs	r3, #174	; 0xae
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	58d3      	ldr	r3, [r2, r3]
 80083ca:	0018      	movs	r0, r3
 80083cc:	f002 f97c 	bl	800a6c8 <USBD_static_free>
    pdev->pClassData = NULL;
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	23ae      	movs	r3, #174	; 0xae
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	2100      	movs	r1, #0
 80083d8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80083da:	230f      	movs	r3, #15
 80083dc:	18fb      	adds	r3, r7, r3
 80083de:	781b      	ldrb	r3, [r3, #0]
}
 80083e0:	0018      	movs	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b004      	add	sp, #16
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	23ae      	movs	r3, #174	; 0xae
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	58d3      	ldr	r3, [r2, r3]
 80083fa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083fc:	230f      	movs	r3, #15
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008404:	230c      	movs	r3, #12
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	2200      	movs	r2, #0
 800840a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800840c:	2317      	movs	r3, #23
 800840e:	18fb      	adds	r3, r7, r3
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	001a      	movs	r2, r3
 800841a:	2360      	movs	r3, #96	; 0x60
 800841c:	4013      	ands	r3, r2
 800841e:	d03d      	beq.n	800849c <USBD_CDC_Setup+0xb4>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d000      	beq.n	8008426 <USBD_CDC_Setup+0x3e>
 8008424:	e094      	b.n	8008550 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88db      	ldrh	r3, [r3, #6]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d02b      	beq.n	8008486 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b25b      	sxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	da12      	bge.n	800845e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	23af      	movs	r3, #175	; 0xaf
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	58d3      	ldr	r3, [r2, r3]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008446:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	88d2      	ldrh	r2, [r2, #6]
 800844c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800844e:	6939      	ldr	r1, [r7, #16]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	88da      	ldrh	r2, [r3, #6]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	0018      	movs	r0, r3
 8008458:	f001 fbb2 	bl	8009bc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800845c:	e083      	b.n	8008566 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	7859      	ldrb	r1, [r3, #1]
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	2380      	movs	r3, #128	; 0x80
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	b2d9      	uxtb	r1, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4a40      	ldr	r2, [pc, #256]	; (8008574 <USBD_CDC_Setup+0x18c>)
 8008474:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008476:	6939      	ldr	r1, [r7, #16]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	88da      	ldrh	r2, [r3, #6]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	0018      	movs	r0, r3
 8008480:	f001 fbd1 	bl	8009c26 <USBD_CtlPrepareRx>
      break;
 8008484:	e06f      	b.n	8008566 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	23af      	movs	r3, #175	; 0xaf
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	58d3      	ldr	r3, [r2, r3]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	7850      	ldrb	r0, [r2, #1]
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	4798      	blx	r3
      break;
 800849a:	e064      	b.n	8008566 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b0b      	cmp	r3, #11
 80084a2:	d037      	beq.n	8008514 <USBD_CDC_Setup+0x12c>
 80084a4:	dc47      	bgt.n	8008536 <USBD_CDC_Setup+0x14e>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <USBD_CDC_Setup+0xc8>
 80084aa:	2b0a      	cmp	r3, #10
 80084ac:	d019      	beq.n	80084e2 <USBD_CDC_Setup+0xfa>
 80084ae:	e042      	b.n	8008536 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	23a7      	movs	r3, #167	; 0xa7
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	5cd3      	ldrb	r3, [r2, r3]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d107      	bne.n	80084cc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084bc:	230c      	movs	r3, #12
 80084be:	18f9      	adds	r1, r7, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	0018      	movs	r0, r3
 80084c6:	f001 fb7b 	bl	8009bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084ca:	e040      	b.n	800854e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	0011      	movs	r1, r2
 80084d2:	0018      	movs	r0, r3
 80084d4:	f001 faf6 	bl	8009ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 80084d8:	2317      	movs	r3, #23
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	2202      	movs	r2, #2
 80084de:	701a      	strb	r2, [r3, #0]
          break;
 80084e0:	e035      	b.n	800854e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	23a7      	movs	r3, #167	; 0xa7
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	5cd3      	ldrb	r3, [r2, r3]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d107      	bne.n	80084fe <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ee:	230f      	movs	r3, #15
 80084f0:	18f9      	adds	r1, r7, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	0018      	movs	r0, r3
 80084f8:	f001 fb62 	bl	8009bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084fc:	e027      	b.n	800854e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	0011      	movs	r1, r2
 8008504:	0018      	movs	r0, r3
 8008506:	f001 fadd 	bl	8009ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 800850a:	2317      	movs	r3, #23
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	2202      	movs	r2, #2
 8008510:	701a      	strb	r2, [r3, #0]
          break;
 8008512:	e01c      	b.n	800854e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	23a7      	movs	r3, #167	; 0xa7
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	5cd3      	ldrb	r3, [r2, r3]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d015      	beq.n	800854c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	0011      	movs	r1, r2
 8008526:	0018      	movs	r0, r3
 8008528:	f001 facc 	bl	8009ac4 <USBD_CtlError>
            ret = USBD_FAIL;
 800852c:	2317      	movs	r3, #23
 800852e:	18fb      	adds	r3, r7, r3
 8008530:	2202      	movs	r2, #2
 8008532:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008534:	e00a      	b.n	800854c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	0011      	movs	r1, r2
 800853c:	0018      	movs	r0, r3
 800853e:	f001 fac1 	bl	8009ac4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008542:	2317      	movs	r3, #23
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	2202      	movs	r2, #2
 8008548:	701a      	strb	r2, [r3, #0]
          break;
 800854a:	e000      	b.n	800854e <USBD_CDC_Setup+0x166>
          break;
 800854c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800854e:	e00a      	b.n	8008566 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f001 fab4 	bl	8009ac4 <USBD_CtlError>
      ret = USBD_FAIL;
 800855c:	2317      	movs	r3, #23
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	2202      	movs	r2, #2
 8008562:	701a      	strb	r2, [r3, #0]
      break;
 8008564:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008566:	2317      	movs	r3, #23
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	781b      	ldrb	r3, [r3, #0]
}
 800856c:	0018      	movs	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	b006      	add	sp, #24
 8008572:	bd80      	pop	{r7, pc}
 8008574:	00000201 	.word	0x00000201

08008578 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	000a      	movs	r2, r1
 8008582:	1cfb      	adds	r3, r7, #3
 8008584:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	23ae      	movs	r3, #174	; 0xae
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	58d3      	ldr	r3, [r2, r3]
 800858e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	23b0      	movs	r3, #176	; 0xb0
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	58d3      	ldr	r3, [r2, r3]
 8008598:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	23ae      	movs	r3, #174	; 0xae
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	58d3      	ldr	r3, [r2, r3]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d03e      	beq.n	8008624 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085a6:	1cfb      	adds	r3, r7, #3
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	0013      	movs	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	18cb      	adds	r3, r1, r3
 80085b6:	331c      	adds	r3, #28
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d02b      	beq.n	8008616 <USBD_CDC_DataIn+0x9e>
 80085be:	1cfb      	adds	r3, r7, #3
 80085c0:	781a      	ldrb	r2, [r3, #0]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	0013      	movs	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	18cb      	adds	r3, r1, r3
 80085ce:	331c      	adds	r3, #28
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	1cfb      	adds	r3, r7, #3
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	0013      	movs	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	189b      	adds	r3, r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	18cb      	adds	r3, r1, r3
 80085e2:	3338      	adds	r3, #56	; 0x38
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	0019      	movs	r1, r3
 80085e8:	f7f7 fe1e 	bl	8000228 <__aeabi_uidivmod>
 80085ec:	1e0b      	subs	r3, r1, #0
 80085ee:	d112      	bne.n	8008616 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80085f0:	1cfb      	adds	r3, r7, #3
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	0013      	movs	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	189b      	adds	r3, r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	18cb      	adds	r3, r1, r3
 8008600:	331c      	adds	r3, #28
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008606:	1cfb      	adds	r3, r7, #3
 8008608:	7819      	ldrb	r1, [r3, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	2300      	movs	r3, #0
 800860e:	2200      	movs	r2, #0
 8008610:	f001 ffc9 	bl	800a5a6 <USBD_LL_Transmit>
 8008614:	e004      	b.n	8008620 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	2385      	movs	r3, #133	; 0x85
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	2100      	movs	r1, #0
 800861e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	e000      	b.n	8008626 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8008624:	2302      	movs	r3, #2
  }
}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b004      	add	sp, #16
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	000a      	movs	r2, r1
 8008638:	1cfb      	adds	r3, r7, #3
 800863a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	23ae      	movs	r3, #174	; 0xae
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	58d3      	ldr	r3, [r2, r3]
 8008644:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008646:	1cfb      	adds	r3, r7, #3
 8008648:	781a      	ldrb	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	0011      	movs	r1, r2
 800864e:	0018      	movs	r0, r3
 8008650:	f002 f817 	bl	800a682 <USBD_LL_GetRxDataSize>
 8008654:	0001      	movs	r1, r0
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	2383      	movs	r3, #131	; 0x83
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	23ae      	movs	r3, #174	; 0xae
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	58d3      	ldr	r3, [r2, r3]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d011      	beq.n	800868e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	23af      	movs	r3, #175	; 0xaf
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	58d3      	ldr	r3, [r2, r3]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	2381      	movs	r3, #129	; 0x81
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	58c8      	ldr	r0, [r1, r3]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2183      	movs	r1, #131	; 0x83
 8008680:	0089      	lsls	r1, r1, #2
 8008682:	468c      	mov	ip, r1
 8008684:	4463      	add	r3, ip
 8008686:	0019      	movs	r1, r3
 8008688:	4790      	blx	r2

    return USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e000      	b.n	8008690 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800868e:	2302      	movs	r3, #2
  }
}
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b004      	add	sp, #16
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	23ae      	movs	r3, #174	; 0xae
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	58d3      	ldr	r3, [r2, r3]
 80086a8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	23af      	movs	r3, #175	; 0xaf
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	58d3      	ldr	r3, [r2, r3]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d019      	beq.n	80086ea <USBD_CDC_EP0_RxReady+0x52>
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	5cd3      	ldrb	r3, [r2, r3]
 80086be:	2bff      	cmp	r3, #255	; 0xff
 80086c0:	d013      	beq.n	80086ea <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	23af      	movs	r3, #175	; 0xaf
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	58d3      	ldr	r3, [r2, r3]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	2280      	movs	r2, #128	; 0x80
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80086d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4c06      	ldr	r4, [pc, #24]	; (80086f4 <USBD_CDC_EP0_RxReady+0x5c>)
 80086da:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086dc:	b292      	uxth	r2, r2
 80086de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	2380      	movs	r3, #128	; 0x80
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	21ff      	movs	r1, #255	; 0xff
 80086e8:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	0018      	movs	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b005      	add	sp, #20
 80086f2:	bd90      	pop	{r4, r7, pc}
 80086f4:	00000201 	.word	0x00000201

080086f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2243      	movs	r2, #67	; 0x43
 8008704:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008706:	4b02      	ldr	r3, [pc, #8]	; (8008710 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8008708:	0018      	movs	r0, r3
 800870a:	46bd      	mov	sp, r7
 800870c:	b002      	add	sp, #8
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000370 	.word	0x20000370

08008714 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2243      	movs	r2, #67	; 0x43
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008722:	4b02      	ldr	r3, [pc, #8]	; (800872c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b002      	add	sp, #8
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2000032c 	.word	0x2000032c

08008730 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2243      	movs	r2, #67	; 0x43
 800873c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800873e:	4b02      	ldr	r3, [pc, #8]	; (8008748 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8008740:	0018      	movs	r0, r3
 8008742:	46bd      	mov	sp, r7
 8008744:	b002      	add	sp, #8
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200003b4 	.word	0x200003b4

0800874c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	220a      	movs	r2, #10
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800875a:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800875c:	0018      	movs	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	b002      	add	sp, #8
 8008762:	bd80      	pop	{r7, pc}
 8008764:	200002e8 	.word	0x200002e8

08008768 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008772:	200f      	movs	r0, #15
 8008774:	183b      	adds	r3, r7, r0
 8008776:	2202      	movs	r2, #2
 8008778:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	23af      	movs	r3, #175	; 0xaf
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800878a:	183b      	adds	r3, r7, r0
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008790:	230f      	movs	r3, #15
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	781b      	ldrb	r3, [r3, #0]
}
 8008796:	0018      	movs	r0, r3
 8008798:	46bd      	mov	sp, r7
 800879a:	b004      	add	sp, #16
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	1dbb      	adds	r3, r7, #6
 80087aa:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	23ae      	movs	r3, #174	; 0xae
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	58d3      	ldr	r3, [r2, r3]
 80087b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	2382      	movs	r3, #130	; 0x82
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80087c0:	1dbb      	adds	r3, r7, #6
 80087c2:	8819      	ldrh	r1, [r3, #0]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	2384      	movs	r3, #132	; 0x84
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	0018      	movs	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	b006      	add	sp, #24
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	23ae      	movs	r3, #174	; 0xae
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	58d3      	ldr	r3, [r2, r3]
 80087e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	2381      	movs	r3, #129	; 0x81
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	0018      	movs	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	b004      	add	sp, #16
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	23ae      	movs	r3, #174	; 0xae
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	58d3      	ldr	r3, [r2, r3]
 800880e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	23ae      	movs	r3, #174	; 0xae
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	58d3      	ldr	r3, [r2, r3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d022      	beq.n	8008862 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	2385      	movs	r3, #133	; 0x85
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	58d3      	ldr	r3, [r2, r3]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d11a      	bne.n	800885e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	2385      	movs	r3, #133	; 0x85
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	2101      	movs	r1, #1
 8008830:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	2384      	movs	r3, #132	; 0x84
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	58d2      	ldr	r2, [r2, r3]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	2382      	movs	r3, #130	; 0x82
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	2384      	movs	r3, #132	; 0x84
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800884e:	b29b      	uxth	r3, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	000a      	movs	r2, r1
 8008854:	2181      	movs	r1, #129	; 0x81
 8008856:	f001 fea6 	bl	800a5a6 <USBD_LL_Transmit>

      return USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e002      	b.n	8008864 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8008862:	2302      	movs	r3, #2
  }
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b004      	add	sp, #16
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	23ae      	movs	r3, #174	; 0xae
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	58d3      	ldr	r3, [r2, r3]
 800887c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	23ae      	movs	r3, #174	; 0xae
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	58d3      	ldr	r3, [r2, r3]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d019      	beq.n	80088be <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7c1b      	ldrb	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	2381      	movs	r3, #129	; 0x81
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	58d2      	ldr	r2, [r2, r3]
 800889a:	2380      	movs	r3, #128	; 0x80
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	2101      	movs	r1, #1
 80088a2:	f001 feb7 	bl	800a614 <USBD_LL_PrepareReceive>
 80088a6:	e008      	b.n	80088ba <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	2381      	movs	r3, #129	; 0x81
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	58d2      	ldr	r2, [r2, r3]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	2101      	movs	r1, #1
 80088b6:	f001 fead 	bl	800a614 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80088be:	2302      	movs	r3, #2
  }
}
 80088c0:	0018      	movs	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b004      	add	sp, #16
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	1dfb      	adds	r3, r7, #7
 80088d4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088dc:	2302      	movs	r3, #2
 80088de:	e020      	b.n	8008922 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	23ad      	movs	r3, #173	; 0xad
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	58d3      	ldr	r3, [r2, r3]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	23ad      	movs	r3, #173	; 0xad
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	2100      	movs	r1, #0
 80088f4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	23ac      	movs	r3, #172	; 0xac
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	23a7      	movs	r3, #167	; 0xa7
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	2101      	movs	r1, #1
 800890e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	1dfa      	adds	r2, r7, #7
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0018      	movs	r0, r3
 800891c:	f001 fca6 	bl	800a26c <USBD_LL_Init>

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	0018      	movs	r0, r3
 8008924:	46bd      	mov	sp, r7
 8008926:	b004      	add	sp, #16
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008934:	200f      	movs	r0, #15
 8008936:	183b      	adds	r3, r7, r0
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	23ad      	movs	r3, #173	; 0xad
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800894c:	183b      	adds	r3, r7, r0
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e003      	b.n	800895c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008954:	230f      	movs	r3, #15
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	2202      	movs	r2, #2
 800895a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800895c:	230f      	movs	r3, #15
 800895e:	18fb      	adds	r3, r7, r3
 8008960:	781b      	ldrb	r3, [r3, #0]
}
 8008962:	0018      	movs	r0, r3
 8008964:	46bd      	mov	sp, r7
 8008966:	b004      	add	sp, #16
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	0018      	movs	r0, r3
 8008976:	f001 fcdd 	bl	800a334 <USBD_LL_Start>

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b002      	add	sp, #8
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	0018      	movs	r0, r3
 8008990:	46bd      	mov	sp, r7
 8008992:	b002      	add	sp, #8
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008996:	b590      	push	{r4, r7, lr}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	000a      	movs	r2, r1
 80089a0:	1cfb      	adds	r3, r7, #3
 80089a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089a4:	240f      	movs	r4, #15
 80089a6:	193b      	adds	r3, r7, r4
 80089a8:	2202      	movs	r2, #2
 80089aa:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	23ad      	movs	r3, #173	; 0xad
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	58d3      	ldr	r3, [r2, r3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	23ad      	movs	r3, #173	; 0xad
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	58d3      	ldr	r3, [r2, r3]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	1cfa      	adds	r2, r7, #3
 80089c4:	7811      	ldrb	r1, [r2, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	0010      	movs	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	1e03      	subs	r3, r0, #0
 80089ce:	d102      	bne.n	80089d6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80089d0:	193b      	adds	r3, r7, r4
 80089d2:	2200      	movs	r2, #0
 80089d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80089d6:	230f      	movs	r3, #15
 80089d8:	18fb      	adds	r3, r7, r3
 80089da:	781b      	ldrb	r3, [r3, #0]
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b005      	add	sp, #20
 80089e2:	bd90      	pop	{r4, r7, pc}

080089e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	000a      	movs	r2, r1
 80089ee:	1cfb      	adds	r3, r7, #3
 80089f0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	23ad      	movs	r3, #173	; 0xad
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	58d3      	ldr	r3, [r2, r3]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	1cfa      	adds	r2, r7, #3
 80089fe:	7811      	ldrb	r1, [r2, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	0010      	movs	r0, r2
 8008a04:	4798      	blx	r3

  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	0018      	movs	r0, r3
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	b002      	add	sp, #8
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	22aa      	movs	r2, #170	; 0xaa
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	4694      	mov	ip, r2
 8008a22:	4463      	add	r3, ip
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	0011      	movs	r1, r2
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f001 f810 	bl	8009a4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	23a5      	movs	r3, #165	; 0xa5
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	2101      	movs	r1, #1
 8008a36:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a23      	ldr	r2, [pc, #140]	; (8008ac8 <USBD_LL_SetupStage+0xb8>)
 8008a3c:	5a9b      	ldrh	r3, [r3, r2]
 8008a3e:	0019      	movs	r1, r3
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	23a6      	movs	r3, #166	; 0xa6
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	23aa      	movs	r3, #170	; 0xaa
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	5cd3      	ldrb	r3, [r2, r3]
 8008a50:	001a      	movs	r2, r3
 8008a52:	231f      	movs	r3, #31
 8008a54:	4013      	ands	r3, r2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d019      	beq.n	8008a8e <USBD_LL_SetupStage+0x7e>
 8008a5a:	d822      	bhi.n	8008aa2 <USBD_LL_SetupStage+0x92>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <USBD_LL_SetupStage+0x56>
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d00a      	beq.n	8008a7a <USBD_LL_SetupStage+0x6a>
 8008a64:	e01d      	b.n	8008aa2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	22aa      	movs	r2, #170	; 0xaa
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	189a      	adds	r2, r3, r2
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	0011      	movs	r1, r2
 8008a72:	0018      	movs	r0, r3
 8008a74:	f000 fa10 	bl	8008e98 <USBD_StdDevReq>
      break;
 8008a78:	e020      	b.n	8008abc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	22aa      	movs	r2, #170	; 0xaa
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	189a      	adds	r2, r3, r2
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	0011      	movs	r1, r2
 8008a86:	0018      	movs	r0, r3
 8008a88:	f000 fa78 	bl	8008f7c <USBD_StdItfReq>
      break;
 8008a8c:	e016      	b.n	8008abc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	22aa      	movs	r2, #170	; 0xaa
 8008a92:	0092      	lsls	r2, r2, #2
 8008a94:	189a      	adds	r2, r3, r2
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	0011      	movs	r1, r2
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f000 fac5 	bl	800902a <USBD_StdEPReq>
      break;
 8008aa0:	e00c      	b.n	8008abc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	23aa      	movs	r3, #170	; 0xaa
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	5cd3      	ldrb	r3, [r2, r3]
 8008aaa:	227f      	movs	r2, #127	; 0x7f
 8008aac:	4393      	bics	r3, r2
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0011      	movs	r1, r2
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f001 fcc4 	bl	800a442 <USBD_LL_StallEP>
      break;
 8008aba:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	0018      	movs	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b002      	add	sp, #8
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	000002ae 	.word	0x000002ae

08008acc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	200b      	movs	r0, #11
 8008ad8:	183b      	adds	r3, r7, r0
 8008ada:	1c0a      	adds	r2, r1, #0
 8008adc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ade:	183b      	adds	r3, r7, r0
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d154      	bne.n	8008b90 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3355      	adds	r3, #85	; 0x55
 8008aea:	33ff      	adds	r3, #255	; 0xff
 8008aec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	23a5      	movs	r3, #165	; 0xa5
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	58d3      	ldr	r3, [r2, r3]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d139      	bne.n	8008b6e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d919      	bls.n	8008b3a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d203      	bcs.n	8008b28 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	e002      	b.n	8008b2e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	001a      	movs	r2, r3
 8008b34:	f001 f89b 	bl	8009c6e <USBD_CtlContinueRx>
 8008b38:	e045      	b.n	8008bc6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	23ad      	movs	r3, #173	; 0xad
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	58d3      	ldr	r3, [r2, r3]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00d      	beq.n	8008b64 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	23a7      	movs	r3, #167	; 0xa7
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d107      	bne.n	8008b64 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	23ad      	movs	r3, #173	; 0xad
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	58d3      	ldr	r3, [r2, r3]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	0010      	movs	r0, r2
 8008b62:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	0018      	movs	r0, r3
 8008b68:	f001 f894 	bl	8009c94 <USBD_CtlSendStatus>
 8008b6c:	e02b      	b.n	8008bc6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	23a5      	movs	r3, #165	; 0xa5
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	58d3      	ldr	r3, [r2, r3]
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d125      	bne.n	8008bc6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	23a5      	movs	r3, #165	; 0xa5
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	2100      	movs	r1, #0
 8008b82:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2100      	movs	r1, #0
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f001 fc5a 	bl	800a442 <USBD_LL_StallEP>
 8008b8e:	e01a      	b.n	8008bc6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	23ad      	movs	r3, #173	; 0xad
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	58d3      	ldr	r3, [r2, r3]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d011      	beq.n	8008bc2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	23a7      	movs	r3, #167	; 0xa7
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d10b      	bne.n	8008bc2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	23ad      	movs	r3, #173	; 0xad
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	58d3      	ldr	r3, [r2, r3]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	220b      	movs	r2, #11
 8008bb6:	18ba      	adds	r2, r7, r2
 8008bb8:	7811      	ldrb	r1, [r2, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	0010      	movs	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	e001      	b.n	8008bc6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e000      	b.n	8008bc8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	0018      	movs	r0, r3
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	b006      	add	sp, #24
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	200b      	movs	r0, #11
 8008bdc:	183b      	adds	r3, r7, r0
 8008bde:	1c0a      	adds	r2, r1, #0
 8008be0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008be2:	183b      	adds	r3, r7, r0
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d000      	beq.n	8008bec <USBD_LL_DataInStage+0x1c>
 8008bea:	e08e      	b.n	8008d0a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	23a5      	movs	r3, #165	; 0xa5
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	58d3      	ldr	r3, [r2, r3]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d164      	bne.n	8008cc8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d915      	bls.n	8008c36 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 ffec 	bl	8009c00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2100      	movs	r1, #0
 8008c30:	f001 fcf0 	bl	800a614 <USBD_LL_PrepareReceive>
 8008c34:	e059      	b.n	8008cea <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	0019      	movs	r1, r3
 8008c40:	0010      	movs	r0, r2
 8008c42:	f7f7 faf1 	bl	8000228 <__aeabi_uidivmod>
 8008c46:	1e0b      	subs	r3, r1, #0
 8008c48:	d11f      	bne.n	8008c8a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d319      	bcc.n	8008c8a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	23a6      	movs	r3, #166	; 0xa6
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d211      	bcs.n	8008c8a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f000 ffc7 	bl	8009c00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	23a6      	movs	r3, #166	; 0xa6
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	2100      	movs	r1, #0
 8008c7a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2200      	movs	r2, #0
 8008c82:	2100      	movs	r1, #0
 8008c84:	f001 fcc6 	bl	800a614 <USBD_LL_PrepareReceive>
 8008c88:	e02f      	b.n	8008cea <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	23ad      	movs	r3, #173	; 0xad
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	58d3      	ldr	r3, [r2, r3]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00d      	beq.n	8008cb4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	23a7      	movs	r3, #167	; 0xa7
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d107      	bne.n	8008cb4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	23ad      	movs	r3, #173	; 0xad
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	58d3      	ldr	r3, [r2, r3]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	0010      	movs	r0, r2
 8008cb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2180      	movs	r1, #128	; 0x80
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f001 fbc2 	bl	800a442 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f000 fffb 	bl	8009cbc <USBD_CtlReceiveStatus>
 8008cc6:	e010      	b.n	8008cea <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	23a5      	movs	r3, #165	; 0xa5
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	58d3      	ldr	r3, [r2, r3]
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d005      	beq.n	8008ce0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	23a5      	movs	r3, #165	; 0xa5
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2180      	movs	r1, #128	; 0x80
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f001 fbac 	bl	800a442 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	23a8      	movs	r3, #168	; 0xa8
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	5cd3      	ldrb	r3, [r2, r3]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d124      	bne.n	8008d40 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff fe43 	bl	8008984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	23a8      	movs	r3, #168	; 0xa8
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	2100      	movs	r1, #0
 8008d06:	54d1      	strb	r1, [r2, r3]
 8008d08:	e01a      	b.n	8008d40 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	23ad      	movs	r3, #173	; 0xad
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	58d3      	ldr	r3, [r2, r3]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d011      	beq.n	8008d3c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	23a7      	movs	r3, #167	; 0xa7
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d10b      	bne.n	8008d3c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	23ad      	movs	r3, #173	; 0xad
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	58d3      	ldr	r3, [r2, r3]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	220b      	movs	r2, #11
 8008d30:	18ba      	adds	r2, r7, r2
 8008d32:	7811      	ldrb	r1, [r2, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	0010      	movs	r0, r2
 8008d38:	4798      	blx	r3
 8008d3a:	e001      	b.n	8008d40 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e000      	b.n	8008d42 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b006      	add	sp, #24
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	2340      	movs	r3, #64	; 0x40
 8008d56:	2200      	movs	r2, #0
 8008d58:	2100      	movs	r1, #0
 8008d5a:	f001 fb10 	bl	800a37e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	23ac      	movs	r3, #172	; 0xac
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	2101      	movs	r1, #1
 8008d66:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	23b2      	movs	r3, #178	; 0xb2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	2140      	movs	r1, #64	; 0x40
 8008d70:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	2200      	movs	r2, #0
 8008d78:	2180      	movs	r1, #128	; 0x80
 8008d7a:	f001 fb00 	bl	800a37e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2240      	movs	r2, #64	; 0x40
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	23a7      	movs	r3, #167	; 0xa7
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	2101      	movs	r1, #1
 8008d92:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	23a5      	movs	r3, #165	; 0xa5
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	23a9      	movs	r3, #169	; 0xa9
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	2100      	movs	r1, #0
 8008dac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	23ae      	movs	r3, #174	; 0xae
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	58d3      	ldr	r3, [r2, r3]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	23ad      	movs	r3, #173	; 0xad
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	58d3      	ldr	r3, [r2, r3]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	b2d9      	uxtb	r1, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	0018      	movs	r0, r3
 8008dce:	4790      	blx	r2
  }

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b002      	add	sp, #8
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	000a      	movs	r2, r1
 8008de4:	1cfb      	adds	r3, r7, #3
 8008de6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	1cfa      	adds	r2, r7, #3
 8008dec:	7812      	ldrb	r2, [r2, #0]
 8008dee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	0018      	movs	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	b002      	add	sp, #8
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	23a7      	movs	r3, #167	; 0xa7
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	5cd1      	ldrb	r1, [r2, r3]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a06      	ldr	r2, [pc, #24]	; (8008e28 <USBD_LL_Suspend+0x2c>)
 8008e10:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	23a7      	movs	r3, #167	; 0xa7
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	2104      	movs	r1, #4
 8008e1a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b002      	add	sp, #8
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	0000029d 	.word	0x0000029d

08008e2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	23a7      	movs	r3, #167	; 0xa7
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	5cd3      	ldrb	r3, [r2, r3]
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d106      	bne.n	8008e4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <USBD_LL_Resume+0x2c>)
 8008e44:	5c99      	ldrb	r1, [r3, r2]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	23a7      	movs	r3, #167	; 0xa7
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	0018      	movs	r0, r3
 8008e52:	46bd      	mov	sp, r7
 8008e54:	b002      	add	sp, #8
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0000029d 	.word	0x0000029d

08008e5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	23a7      	movs	r3, #167	; 0xa7
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	5cd3      	ldrb	r3, [r2, r3]
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d10e      	bne.n	8008e8e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	23ad      	movs	r3, #173	; 0xad
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	58d3      	ldr	r3, [r2, r3]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	23ad      	movs	r3, #173	; 0xad
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	58d3      	ldr	r3, [r2, r3]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	0010      	movs	r0, r2
 8008e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	230f      	movs	r3, #15
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	001a      	movs	r2, r3
 8008eb0:	2360      	movs	r3, #96	; 0x60
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b40      	cmp	r3, #64	; 0x40
 8008eb6:	d004      	beq.n	8008ec2 <USBD_StdDevReq+0x2a>
 8008eb8:	d84f      	bhi.n	8008f5a <USBD_StdDevReq+0xc2>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <USBD_StdDevReq+0x3e>
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d14b      	bne.n	8008f5a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	23ad      	movs	r3, #173	; 0xad
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	58d3      	ldr	r3, [r2, r3]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	0010      	movs	r0, r2
 8008ed2:	4798      	blx	r3
      break;
 8008ed4:	e048      	b.n	8008f68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d835      	bhi.n	8008f4a <USBD_StdDevReq+0xb2>
 8008ede:	009a      	lsls	r2, r3, #2
 8008ee0:	4b25      	ldr	r3, [pc, #148]	; (8008f78 <USBD_StdDevReq+0xe0>)
 8008ee2:	18d3      	adds	r3, r2, r3
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	0011      	movs	r1, r2
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 fa52 	bl	8009398 <USBD_GetDescriptor>
          break;
 8008ef4:	e030      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f000 fbfd 	bl	80096fc <USBD_SetAddress>
          break;
 8008f02:	e029      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	0011      	movs	r1, r2
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f000 fc4a 	bl	80097a4 <USBD_SetConfig>
          break;
 8008f10:	e022      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	0011      	movs	r1, r2
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f000 fce7 	bl	80098ec <USBD_GetConfig>
          break;
 8008f1e:	e01b      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	0011      	movs	r1, r2
 8008f26:	0018      	movs	r0, r3
 8008f28:	f000 fd1b 	bl	8009962 <USBD_GetStatus>
          break;
 8008f2c:	e014      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	0011      	movs	r1, r2
 8008f34:	0018      	movs	r0, r3
 8008f36:	f000 fd4e 	bl	80099d6 <USBD_SetFeature>
          break;
 8008f3a:	e00d      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	0011      	movs	r1, r2
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 fd5d 	bl	8009a02 <USBD_ClrFeature>
          break;
 8008f48:	e006      	b.n	8008f58 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f000 fdb7 	bl	8009ac4 <USBD_CtlError>
          break;
 8008f56:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008f58:	e006      	b.n	8008f68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	0011      	movs	r1, r2
 8008f60:	0018      	movs	r0, r3
 8008f62:	f000 fdaf 	bl	8009ac4 <USBD_CtlError>
      break;
 8008f66:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008f68:	230f      	movs	r3, #15
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	781b      	ldrb	r3, [r3, #0]
}
 8008f6e:	0018      	movs	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	b004      	add	sp, #16
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	0800b128 	.word	0x0800b128

08008f7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f7c:	b5b0      	push	{r4, r5, r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f86:	230f      	movs	r3, #15
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	001a      	movs	r2, r3
 8008f94:	2360      	movs	r3, #96	; 0x60
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d004      	beq.n	8008fa6 <USBD_StdItfReq+0x2a>
 8008f9c:	d839      	bhi.n	8009012 <USBD_StdItfReq+0x96>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <USBD_StdItfReq+0x2a>
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	d135      	bne.n	8009012 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	23a7      	movs	r3, #167	; 0xa7
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	5cd3      	ldrb	r3, [r2, r3]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d825      	bhi.n	8009000 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	889b      	ldrh	r3, [r3, #4]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d819      	bhi.n	8008ff2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	23ad      	movs	r3, #173	; 0xad
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	58d3      	ldr	r3, [r2, r3]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	250f      	movs	r5, #15
 8008fca:	197c      	adds	r4, r7, r5
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	0010      	movs	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	0003      	movs	r3, r0
 8008fd6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	88db      	ldrh	r3, [r3, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d116      	bne.n	800900e <USBD_StdItfReq+0x92>
 8008fe0:	197b      	adds	r3, r7, r5
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d112      	bne.n	800900e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	0018      	movs	r0, r3
 8008fec:	f000 fe52 	bl	8009c94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ff0:	e00d      	b.n	800900e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	0011      	movs	r1, r2
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f000 fd63 	bl	8009ac4 <USBD_CtlError>
          break;
 8008ffe:	e006      	b.n	800900e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	0011      	movs	r1, r2
 8009006:	0018      	movs	r0, r3
 8009008:	f000 fd5c 	bl	8009ac4 <USBD_CtlError>
          break;
 800900c:	e000      	b.n	8009010 <USBD_StdItfReq+0x94>
          break;
 800900e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009010:	e006      	b.n	8009020 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	0011      	movs	r1, r2
 8009018:	0018      	movs	r0, r3
 800901a:	f000 fd53 	bl	8009ac4 <USBD_CtlError>
      break;
 800901e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	b004      	add	sp, #16
 8009028:	bdb0      	pop	{r4, r5, r7, pc}

0800902a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800902a:	b5b0      	push	{r4, r5, r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009034:	230f      	movs	r3, #15
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	889a      	ldrh	r2, [r3, #4]
 8009040:	230e      	movs	r3, #14
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	001a      	movs	r2, r3
 800904c:	2360      	movs	r3, #96	; 0x60
 800904e:	4013      	ands	r3, r2
 8009050:	2b40      	cmp	r3, #64	; 0x40
 8009052:	d006      	beq.n	8009062 <USBD_StdEPReq+0x38>
 8009054:	d900      	bls.n	8009058 <USBD_StdEPReq+0x2e>
 8009056:	e190      	b.n	800937a <USBD_StdEPReq+0x350>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00c      	beq.n	8009076 <USBD_StdEPReq+0x4c>
 800905c:	2b20      	cmp	r3, #32
 800905e:	d000      	beq.n	8009062 <USBD_StdEPReq+0x38>
 8009060:	e18b      	b.n	800937a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	23ad      	movs	r3, #173	; 0xad
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	58d3      	ldr	r3, [r2, r3]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	0010      	movs	r0, r2
 8009072:	4798      	blx	r3
      break;
 8009074:	e188      	b.n	8009388 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	001a      	movs	r2, r3
 800907c:	2360      	movs	r3, #96	; 0x60
 800907e:	4013      	ands	r3, r2
 8009080:	2b20      	cmp	r3, #32
 8009082:	d10f      	bne.n	80090a4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	23ad      	movs	r3, #173	; 0xad
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	58d3      	ldr	r3, [r2, r3]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	250f      	movs	r5, #15
 8009090:	197c      	adds	r4, r7, r5
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	0010      	movs	r0, r2
 8009098:	4798      	blx	r3
 800909a:	0003      	movs	r3, r0
 800909c:	7023      	strb	r3, [r4, #0]

        return ret;
 800909e:	197b      	adds	r3, r7, r5
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	e174      	b.n	800938e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d007      	beq.n	80090bc <USBD_StdEPReq+0x92>
 80090ac:	dd00      	ble.n	80090b0 <USBD_StdEPReq+0x86>
 80090ae:	e15c      	b.n	800936a <USBD_StdEPReq+0x340>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d100      	bne.n	80090b6 <USBD_StdEPReq+0x8c>
 80090b4:	e092      	b.n	80091dc <USBD_StdEPReq+0x1b2>
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d04b      	beq.n	8009152 <USBD_StdEPReq+0x128>
 80090ba:	e156      	b.n	800936a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	23a7      	movs	r3, #167	; 0xa7
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	5cd3      	ldrb	r3, [r2, r3]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d002      	beq.n	80090ce <USBD_StdEPReq+0xa4>
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d01d      	beq.n	8009108 <USBD_StdEPReq+0xde>
 80090cc:	e039      	b.n	8009142 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ce:	220e      	movs	r2, #14
 80090d0:	18bb      	adds	r3, r7, r2
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d010      	beq.n	80090fa <USBD_StdEPReq+0xd0>
 80090d8:	18bb      	adds	r3, r7, r2
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b80      	cmp	r3, #128	; 0x80
 80090de:	d00c      	beq.n	80090fa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80090e0:	18bb      	adds	r3, r7, r2
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	0011      	movs	r1, r2
 80090e8:	0018      	movs	r0, r3
 80090ea:	f001 f9aa 	bl	800a442 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	0018      	movs	r0, r3
 80090f4:	f001 f9a5 	bl	800a442 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090f8:	e02a      	b.n	8009150 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	0011      	movs	r1, r2
 8009100:	0018      	movs	r0, r3
 8009102:	f000 fcdf 	bl	8009ac4 <USBD_CtlError>
              break;
 8009106:	e023      	b.n	8009150 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d113      	bne.n	8009138 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009110:	220e      	movs	r2, #14
 8009112:	18bb      	adds	r3, r7, r2
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00e      	beq.n	8009138 <USBD_StdEPReq+0x10e>
 800911a:	18bb      	adds	r3, r7, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b80      	cmp	r3, #128	; 0x80
 8009120:	d00a      	beq.n	8009138 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	88db      	ldrh	r3, [r3, #6]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800912a:	18bb      	adds	r3, r7, r2
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	0011      	movs	r1, r2
 8009132:	0018      	movs	r0, r3
 8009134:	f001 f985 	bl	800a442 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	0018      	movs	r0, r3
 800913c:	f000 fdaa 	bl	8009c94 <USBD_CtlSendStatus>

              break;
 8009140:	e006      	b.n	8009150 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	0011      	movs	r1, r2
 8009148:	0018      	movs	r0, r3
 800914a:	f000 fcbb 	bl	8009ac4 <USBD_CtlError>
              break;
 800914e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009150:	e112      	b.n	8009378 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	23a7      	movs	r3, #167	; 0xa7
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	5cd3      	ldrb	r3, [r2, r3]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d002      	beq.n	8009164 <USBD_StdEPReq+0x13a>
 800915e:	2b03      	cmp	r3, #3
 8009160:	d01d      	beq.n	800919e <USBD_StdEPReq+0x174>
 8009162:	e032      	b.n	80091ca <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009164:	220e      	movs	r2, #14
 8009166:	18bb      	adds	r3, r7, r2
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <USBD_StdEPReq+0x166>
 800916e:	18bb      	adds	r3, r7, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b80      	cmp	r3, #128	; 0x80
 8009174:	d00c      	beq.n	8009190 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009176:	18bb      	adds	r3, r7, r2
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	0011      	movs	r1, r2
 800917e:	0018      	movs	r0, r3
 8009180:	f001 f95f 	bl	800a442 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2180      	movs	r1, #128	; 0x80
 8009188:	0018      	movs	r0, r3
 800918a:	f001 f95a 	bl	800a442 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800918e:	e024      	b.n	80091da <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	0011      	movs	r1, r2
 8009196:	0018      	movs	r0, r3
 8009198:	f000 fc94 	bl	8009ac4 <USBD_CtlError>
              break;
 800919c:	e01d      	b.n	80091da <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d118      	bne.n	80091d8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091a6:	210e      	movs	r1, #14
 80091a8:	187b      	adds	r3, r7, r1
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	227f      	movs	r2, #127	; 0x7f
 80091ae:	4013      	ands	r3, r2
 80091b0:	d006      	beq.n	80091c0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80091b2:	187b      	adds	r3, r7, r1
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	0011      	movs	r1, r2
 80091ba:	0018      	movs	r0, r3
 80091bc:	f001 f96c 	bl	800a498 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	0018      	movs	r0, r3
 80091c4:	f000 fd66 	bl	8009c94 <USBD_CtlSendStatus>
              }
              break;
 80091c8:	e006      	b.n	80091d8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	0011      	movs	r1, r2
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 fc77 	bl	8009ac4 <USBD_CtlError>
              break;
 80091d6:	e000      	b.n	80091da <USBD_StdEPReq+0x1b0>
              break;
 80091d8:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80091da:	e0cd      	b.n	8009378 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	23a7      	movs	r3, #167	; 0xa7
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	5cd3      	ldrb	r3, [r2, r3]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d002      	beq.n	80091ee <USBD_StdEPReq+0x1c4>
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d03c      	beq.n	8009266 <USBD_StdEPReq+0x23c>
 80091ec:	e0b5      	b.n	800935a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ee:	220e      	movs	r2, #14
 80091f0:	18bb      	adds	r3, r7, r2
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <USBD_StdEPReq+0x1e4>
 80091f8:	18bb      	adds	r3, r7, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b80      	cmp	r3, #128	; 0x80
 80091fe:	d006      	beq.n	800920e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	0011      	movs	r1, r2
 8009206:	0018      	movs	r0, r3
 8009208:	f000 fc5c 	bl	8009ac4 <USBD_CtlError>
                break;
 800920c:	e0ac      	b.n	8009368 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800920e:	220e      	movs	r2, #14
 8009210:	18bb      	adds	r3, r7, r2
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	b25b      	sxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	da0c      	bge.n	8009234 <USBD_StdEPReq+0x20a>
 800921a:	18bb      	adds	r3, r7, r2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	227f      	movs	r2, #127	; 0x7f
 8009220:	401a      	ands	r2, r3
 8009222:	0013      	movs	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	189b      	adds	r3, r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	3310      	adds	r3, #16
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	18d3      	adds	r3, r2, r3
 8009230:	3304      	adds	r3, #4
 8009232:	e00d      	b.n	8009250 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009234:	230e      	movs	r3, #14
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	227f      	movs	r2, #127	; 0x7f
 800923c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800923e:	0013      	movs	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	189b      	adds	r3, r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	3351      	adds	r3, #81	; 0x51
 8009248:	33ff      	adds	r3, #255	; 0xff
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	18d3      	adds	r3, r2, r3
 800924e:	3304      	adds	r3, #4
 8009250:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	0018      	movs	r0, r3
 8009260:	f000 fcae 	bl	8009bc0 <USBD_CtlSendData>
              break;
 8009264:	e080      	b.n	8009368 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009266:	220e      	movs	r2, #14
 8009268:	18bb      	adds	r3, r7, r2
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b25b      	sxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	da14      	bge.n	800929c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009272:	18bb      	adds	r3, r7, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	220f      	movs	r2, #15
 8009278:	401a      	ands	r2, r3
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	0013      	movs	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	189b      	adds	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	18cb      	adds	r3, r1, r3
 8009286:	3318      	adds	r3, #24
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d11e      	bne.n	80092cc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0011      	movs	r1, r2
 8009294:	0018      	movs	r0, r3
 8009296:	f000 fc15 	bl	8009ac4 <USBD_CtlError>
                  break;
 800929a:	e065      	b.n	8009368 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800929c:	230e      	movs	r3, #14
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	220f      	movs	r2, #15
 80092a4:	401a      	ands	r2, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	23ac      	movs	r3, #172	; 0xac
 80092aa:	0059      	lsls	r1, r3, #1
 80092ac:	0013      	movs	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	189b      	adds	r3, r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	18c3      	adds	r3, r0, r3
 80092b6:	185b      	adds	r3, r3, r1
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f000 fbfd 	bl	8009ac4 <USBD_CtlError>
                  break;
 80092ca:	e04d      	b.n	8009368 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092cc:	220e      	movs	r2, #14
 80092ce:	18bb      	adds	r3, r7, r2
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	b25b      	sxtb	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da0c      	bge.n	80092f2 <USBD_StdEPReq+0x2c8>
 80092d8:	18bb      	adds	r3, r7, r2
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	227f      	movs	r2, #127	; 0x7f
 80092de:	401a      	ands	r2, r3
 80092e0:	0013      	movs	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	189b      	adds	r3, r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	3310      	adds	r3, #16
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	18d3      	adds	r3, r2, r3
 80092ee:	3304      	adds	r3, #4
 80092f0:	e00d      	b.n	800930e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092f2:	230e      	movs	r3, #14
 80092f4:	18fb      	adds	r3, r7, r3
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	227f      	movs	r2, #127	; 0x7f
 80092fa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092fc:	0013      	movs	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	189b      	adds	r3, r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	3351      	adds	r3, #81	; 0x51
 8009306:	33ff      	adds	r3, #255	; 0xff
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	18d3      	adds	r3, r2, r3
 800930c:	3304      	adds	r3, #4
 800930e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009310:	220e      	movs	r2, #14
 8009312:	18bb      	adds	r3, r7, r2
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <USBD_StdEPReq+0x2f8>
 800931a:	18bb      	adds	r3, r7, r2
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b80      	cmp	r3, #128	; 0x80
 8009320:	d103      	bne.n	800932a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	e010      	b.n	800934c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800932a:	230e      	movs	r3, #14
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	0011      	movs	r1, r2
 8009334:	0018      	movs	r0, r3
 8009336:	f001 f8da 	bl	800a4ee <USBD_LL_IsStallEP>
 800933a:	1e03      	subs	r3, r0, #0
 800933c:	d003      	beq.n	8009346 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2201      	movs	r2, #1
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e002      	b.n	800934c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2202      	movs	r2, #2
 8009352:	0018      	movs	r0, r3
 8009354:	f000 fc34 	bl	8009bc0 <USBD_CtlSendData>
              break;
 8009358:	e006      	b.n	8009368 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	0011      	movs	r1, r2
 8009360:	0018      	movs	r0, r3
 8009362:	f000 fbaf 	bl	8009ac4 <USBD_CtlError>
              break;
 8009366:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009368:	e006      	b.n	8009378 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	0011      	movs	r1, r2
 8009370:	0018      	movs	r0, r3
 8009372:	f000 fba7 	bl	8009ac4 <USBD_CtlError>
          break;
 8009376:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009378:	e006      	b.n	8009388 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	0011      	movs	r1, r2
 8009380:	0018      	movs	r0, r3
 8009382:	f000 fb9f 	bl	8009ac4 <USBD_CtlError>
      break;
 8009386:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009388:	230f      	movs	r3, #15
 800938a:	18fb      	adds	r3, r7, r3
 800938c:	781b      	ldrb	r3, [r3, #0]
}
 800938e:	0018      	movs	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	b004      	add	sp, #16
 8009394:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009398 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093a2:	2308      	movs	r3, #8
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	2200      	movs	r2, #0
 80093a8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ae:	230b      	movs	r3, #11
 80093b0:	18fb      	adds	r3, r7, r3
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	885b      	ldrh	r3, [r3, #2]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b07      	cmp	r3, #7
 80093c0:	d900      	bls.n	80093c4 <USBD_GetDescriptor+0x2c>
 80093c2:	e159      	b.n	8009678 <USBD_GetDescriptor+0x2e0>
 80093c4:	009a      	lsls	r2, r3, #2
 80093c6:	4bcb      	ldr	r3, [pc, #812]	; (80096f4 <USBD_GetDescriptor+0x35c>)
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	23ac      	movs	r3, #172	; 0xac
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	58d3      	ldr	r3, [r2, r3]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	2108      	movs	r1, #8
 80093de:	1879      	adds	r1, r7, r1
 80093e0:	0010      	movs	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	0003      	movs	r3, r0
 80093e6:	60fb      	str	r3, [r7, #12]
      break;
 80093e8:	e153      	b.n	8009692 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10f      	bne.n	8009412 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	23ad      	movs	r3, #173	; 0xad
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	58d3      	ldr	r3, [r2, r3]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	2208      	movs	r2, #8
 80093fe:	18ba      	adds	r2, r7, r2
 8009400:	0010      	movs	r0, r2
 8009402:	4798      	blx	r3
 8009404:	0003      	movs	r3, r0
 8009406:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	2202      	movs	r2, #2
 800940e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009410:	e13f      	b.n	8009692 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	23ad      	movs	r3, #173	; 0xad
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	58d3      	ldr	r3, [r2, r3]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	2208      	movs	r2, #8
 800941e:	18ba      	adds	r2, r7, r2
 8009420:	0010      	movs	r0, r2
 8009422:	4798      	blx	r3
 8009424:	0003      	movs	r3, r0
 8009426:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	2202      	movs	r2, #2
 800942e:	701a      	strb	r2, [r3, #0]
      break;
 8009430:	e12f      	b.n	8009692 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	885b      	ldrh	r3, [r3, #2]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b05      	cmp	r3, #5
 800943a:	d900      	bls.n	800943e <USBD_GetDescriptor+0xa6>
 800943c:	e0d0      	b.n	80095e0 <USBD_GetDescriptor+0x248>
 800943e:	009a      	lsls	r2, r3, #2
 8009440:	4bad      	ldr	r3, [pc, #692]	; (80096f8 <USBD_GetDescriptor+0x360>)
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	23ac      	movs	r3, #172	; 0xac
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	58d3      	ldr	r3, [r2, r3]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	23ac      	movs	r3, #172	; 0xac
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	58d3      	ldr	r3, [r2, r3]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	2108      	movs	r1, #8
 8009466:	1879      	adds	r1, r7, r1
 8009468:	0010      	movs	r0, r2
 800946a:	4798      	blx	r3
 800946c:	0003      	movs	r3, r0
 800946e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009470:	e0c3      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	0011      	movs	r1, r2
 8009478:	0018      	movs	r0, r3
 800947a:	f000 fb23 	bl	8009ac4 <USBD_CtlError>
            err++;
 800947e:	210b      	movs	r1, #11
 8009480:	187b      	adds	r3, r7, r1
 8009482:	781a      	ldrb	r2, [r3, #0]
 8009484:	187b      	adds	r3, r7, r1
 8009486:	3201      	adds	r2, #1
 8009488:	701a      	strb	r2, [r3, #0]
          break;
 800948a:	e0b6      	b.n	80095fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	23ac      	movs	r3, #172	; 0xac
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	58d3      	ldr	r3, [r2, r3]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00d      	beq.n	80094b6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	23ac      	movs	r3, #172	; 0xac
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	58d3      	ldr	r3, [r2, r3]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	2108      	movs	r1, #8
 80094aa:	1879      	adds	r1, r7, r1
 80094ac:	0010      	movs	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	0003      	movs	r3, r0
 80094b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b4:	e0a1      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	0011      	movs	r1, r2
 80094bc:	0018      	movs	r0, r3
 80094be:	f000 fb01 	bl	8009ac4 <USBD_CtlError>
            err++;
 80094c2:	210b      	movs	r1, #11
 80094c4:	187b      	adds	r3, r7, r1
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	187b      	adds	r3, r7, r1
 80094ca:	3201      	adds	r2, #1
 80094cc:	701a      	strb	r2, [r3, #0]
          break;
 80094ce:	e094      	b.n	80095fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	23ac      	movs	r3, #172	; 0xac
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	58d3      	ldr	r3, [r2, r3]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00d      	beq.n	80094fa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	23ac      	movs	r3, #172	; 0xac
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	58d3      	ldr	r3, [r2, r3]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	7c12      	ldrb	r2, [r2, #16]
 80094ec:	2108      	movs	r1, #8
 80094ee:	1879      	adds	r1, r7, r1
 80094f0:	0010      	movs	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	0003      	movs	r3, r0
 80094f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094f8:	e07f      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0011      	movs	r1, r2
 8009500:	0018      	movs	r0, r3
 8009502:	f000 fadf 	bl	8009ac4 <USBD_CtlError>
            err++;
 8009506:	210b      	movs	r1, #11
 8009508:	187b      	adds	r3, r7, r1
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	187b      	adds	r3, r7, r1
 800950e:	3201      	adds	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
          break;
 8009512:	e072      	b.n	80095fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	23ac      	movs	r3, #172	; 0xac
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	58d3      	ldr	r3, [r2, r3]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00d      	beq.n	800953e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	23ac      	movs	r3, #172	; 0xac
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	58d3      	ldr	r3, [r2, r3]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	2108      	movs	r1, #8
 8009532:	1879      	adds	r1, r7, r1
 8009534:	0010      	movs	r0, r2
 8009536:	4798      	blx	r3
 8009538:	0003      	movs	r3, r0
 800953a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953c:	e05d      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	0011      	movs	r1, r2
 8009544:	0018      	movs	r0, r3
 8009546:	f000 fabd 	bl	8009ac4 <USBD_CtlError>
            err++;
 800954a:	210b      	movs	r1, #11
 800954c:	187b      	adds	r3, r7, r1
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	187b      	adds	r3, r7, r1
 8009552:	3201      	adds	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
          break;
 8009556:	e050      	b.n	80095fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	23ac      	movs	r3, #172	; 0xac
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	58d3      	ldr	r3, [r2, r3]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00d      	beq.n	8009582 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	23ac      	movs	r3, #172	; 0xac
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	58d3      	ldr	r3, [r2, r3]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	7c12      	ldrb	r2, [r2, #16]
 8009574:	2108      	movs	r1, #8
 8009576:	1879      	adds	r1, r7, r1
 8009578:	0010      	movs	r0, r2
 800957a:	4798      	blx	r3
 800957c:	0003      	movs	r3, r0
 800957e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009580:	e03b      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	0011      	movs	r1, r2
 8009588:	0018      	movs	r0, r3
 800958a:	f000 fa9b 	bl	8009ac4 <USBD_CtlError>
            err++;
 800958e:	210b      	movs	r1, #11
 8009590:	187b      	adds	r3, r7, r1
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	187b      	adds	r3, r7, r1
 8009596:	3201      	adds	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
          break;
 800959a:	e02e      	b.n	80095fa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	23ac      	movs	r3, #172	; 0xac
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	58d3      	ldr	r3, [r2, r3]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00d      	beq.n	80095c6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	23ac      	movs	r3, #172	; 0xac
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	58d3      	ldr	r3, [r2, r3]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7c12      	ldrb	r2, [r2, #16]
 80095b8:	2108      	movs	r1, #8
 80095ba:	1879      	adds	r1, r7, r1
 80095bc:	0010      	movs	r0, r2
 80095be:	4798      	blx	r3
 80095c0:	0003      	movs	r3, r0
 80095c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095c4:	e019      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	0011      	movs	r1, r2
 80095cc:	0018      	movs	r0, r3
 80095ce:	f000 fa79 	bl	8009ac4 <USBD_CtlError>
            err++;
 80095d2:	210b      	movs	r1, #11
 80095d4:	187b      	adds	r3, r7, r1
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	187b      	adds	r3, r7, r1
 80095da:	3201      	adds	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
          break;
 80095de:	e00c      	b.n	80095fa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	0011      	movs	r1, r2
 80095e6:	0018      	movs	r0, r3
 80095e8:	f000 fa6c 	bl	8009ac4 <USBD_CtlError>
          err++;
 80095ec:	210b      	movs	r1, #11
 80095ee:	187b      	adds	r3, r7, r1
 80095f0:	781a      	ldrb	r2, [r3, #0]
 80095f2:	187b      	adds	r3, r7, r1
 80095f4:	3201      	adds	r2, #1
 80095f6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80095f8:	e04b      	b.n	8009692 <USBD_GetDescriptor+0x2fa>
 80095fa:	e04a      	b.n	8009692 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	7c1b      	ldrb	r3, [r3, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	23ad      	movs	r3, #173	; 0xad
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	58d3      	ldr	r3, [r2, r3]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	2208      	movs	r2, #8
 8009610:	18ba      	adds	r2, r7, r2
 8009612:	0010      	movs	r0, r2
 8009614:	4798      	blx	r3
 8009616:	0003      	movs	r3, r0
 8009618:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800961a:	e03a      	b.n	8009692 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	0011      	movs	r1, r2
 8009622:	0018      	movs	r0, r3
 8009624:	f000 fa4e 	bl	8009ac4 <USBD_CtlError>
        err++;
 8009628:	210b      	movs	r1, #11
 800962a:	187b      	adds	r3, r7, r1
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	187b      	adds	r3, r7, r1
 8009630:	3201      	adds	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
      break;
 8009634:	e02d      	b.n	8009692 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7c1b      	ldrb	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10f      	bne.n	800965e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	23ad      	movs	r3, #173	; 0xad
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	58d3      	ldr	r3, [r2, r3]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	2208      	movs	r2, #8
 800964a:	18ba      	adds	r2, r7, r2
 800964c:	0010      	movs	r0, r2
 800964e:	4798      	blx	r3
 8009650:	0003      	movs	r3, r0
 8009652:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3301      	adds	r3, #1
 8009658:	2207      	movs	r2, #7
 800965a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800965c:	e019      	b.n	8009692 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	0011      	movs	r1, r2
 8009664:	0018      	movs	r0, r3
 8009666:	f000 fa2d 	bl	8009ac4 <USBD_CtlError>
        err++;
 800966a:	210b      	movs	r1, #11
 800966c:	187b      	adds	r3, r7, r1
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	187b      	adds	r3, r7, r1
 8009672:	3201      	adds	r2, #1
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	e00c      	b.n	8009692 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	0011      	movs	r1, r2
 800967e:	0018      	movs	r0, r3
 8009680:	f000 fa20 	bl	8009ac4 <USBD_CtlError>
      err++;
 8009684:	210b      	movs	r1, #11
 8009686:	187b      	adds	r3, r7, r1
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	187b      	adds	r3, r7, r1
 800968c:	3201      	adds	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]
      break;
 8009690:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8009692:	230b      	movs	r3, #11
 8009694:	18fb      	adds	r3, r7, r3
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d127      	bne.n	80096ec <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800969c:	2108      	movs	r1, #8
 800969e:	187b      	adds	r3, r7, r1
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d019      	beq.n	80096da <USBD_GetDescriptor+0x342>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	88db      	ldrh	r3, [r3, #6]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d015      	beq.n	80096da <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88da      	ldrh	r2, [r3, #6]
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	1c18      	adds	r0, r3, #0
 80096b8:	1c11      	adds	r1, r2, #0
 80096ba:	b28a      	uxth	r2, r1
 80096bc:	b283      	uxth	r3, r0
 80096be:	429a      	cmp	r2, r3
 80096c0:	d900      	bls.n	80096c4 <USBD_GetDescriptor+0x32c>
 80096c2:	1c01      	adds	r1, r0, #0
 80096c4:	b28a      	uxth	r2, r1
 80096c6:	2108      	movs	r1, #8
 80096c8:	187b      	adds	r3, r7, r1
 80096ca:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	881a      	ldrh	r2, [r3, #0]
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	f000 fa73 	bl	8009bc0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	88db      	ldrh	r3, [r3, #6]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 fad5 	bl	8009c94 <USBD_CtlSendStatus>
 80096ea:	e000      	b.n	80096ee <USBD_GetDescriptor+0x356>
    return;
 80096ec:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80096ee:	46bd      	mov	sp, r7
 80096f0:	b004      	add	sp, #16
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	0800b150 	.word	0x0800b150
 80096f8:	0800b170 	.word	0x0800b170

080096fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	889b      	ldrh	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d13d      	bne.n	800978a <USBD_SetAddress+0x8e>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	88db      	ldrh	r3, [r3, #6]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d139      	bne.n	800978a <USBD_SetAddress+0x8e>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	2b7f      	cmp	r3, #127	; 0x7f
 800971c:	d835      	bhi.n	800978a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	885b      	ldrh	r3, [r3, #2]
 8009722:	b2da      	uxtb	r2, r3
 8009724:	230f      	movs	r3, #15
 8009726:	18fb      	adds	r3, r7, r3
 8009728:	217f      	movs	r1, #127	; 0x7f
 800972a:	400a      	ands	r2, r1
 800972c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	23a7      	movs	r3, #167	; 0xa7
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	5cd3      	ldrb	r3, [r2, r3]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d106      	bne.n	8009748 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	0011      	movs	r1, r2
 8009740:	0018      	movs	r0, r3
 8009742:	f000 f9bf 	bl	8009ac4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009746:	e027      	b.n	8009798 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	240f      	movs	r4, #15
 800974c:	193a      	adds	r2, r7, r4
 800974e:	4914      	ldr	r1, [pc, #80]	; (80097a0 <USBD_SetAddress+0xa4>)
 8009750:	7812      	ldrb	r2, [r2, #0]
 8009752:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009754:	193b      	adds	r3, r7, r4
 8009756:	781a      	ldrb	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	0011      	movs	r1, r2
 800975c:	0018      	movs	r0, r3
 800975e:	f000 fef7 	bl	800a550 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	0018      	movs	r0, r3
 8009766:	f000 fa95 	bl	8009c94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800976a:	193b      	adds	r3, r7, r4
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	23a7      	movs	r3, #167	; 0xa7
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	2102      	movs	r1, #2
 800977a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977c:	e00c      	b.n	8009798 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	23a7      	movs	r3, #167	; 0xa7
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	2101      	movs	r1, #1
 8009786:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009788:	e006      	b.n	8009798 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	0011      	movs	r1, r2
 8009790:	0018      	movs	r0, r3
 8009792:	f000 f997 	bl	8009ac4 <USBD_CtlError>
  }
}
 8009796:	46c0      	nop			; (mov r8, r8)
 8009798:	46c0      	nop			; (mov r8, r8)
 800979a:	46bd      	mov	sp, r7
 800979c:	b005      	add	sp, #20
 800979e:	bd90      	pop	{r4, r7, pc}
 80097a0:	0000029e 	.word	0x0000029e

080097a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	885b      	ldrh	r3, [r3, #2]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	4b4c      	ldr	r3, [pc, #304]	; (80098e8 <USBD_SetConfig+0x144>)
 80097b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097b8:	4b4b      	ldr	r3, [pc, #300]	; (80098e8 <USBD_SetConfig+0x144>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d906      	bls.n	80097ce <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	0011      	movs	r1, r2
 80097c6:	0018      	movs	r0, r3
 80097c8:	f000 f97c 	bl	8009ac4 <USBD_CtlError>
 80097cc:	e088      	b.n	80098e0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	23a7      	movs	r3, #167	; 0xa7
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	5cd3      	ldrb	r3, [r2, r3]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d002      	beq.n	80097e0 <USBD_SetConfig+0x3c>
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d029      	beq.n	8009832 <USBD_SetConfig+0x8e>
 80097de:	e071      	b.n	80098c4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80097e0:	4b41      	ldr	r3, [pc, #260]	; (80098e8 <USBD_SetConfig+0x144>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01f      	beq.n	8009828 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80097e8:	4b3f      	ldr	r3, [pc, #252]	; (80098e8 <USBD_SetConfig+0x144>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	001a      	movs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	23a7      	movs	r3, #167	; 0xa7
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	2103      	movs	r1, #3
 80097fa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097fc:	4b3a      	ldr	r3, [pc, #232]	; (80098e8 <USBD_SetConfig+0x144>)
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	0011      	movs	r1, r2
 8009804:	0018      	movs	r0, r3
 8009806:	f7ff f8c6 	bl	8008996 <USBD_SetClassConfig>
 800980a:	0003      	movs	r3, r0
 800980c:	2b02      	cmp	r3, #2
 800980e:	d106      	bne.n	800981e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	0011      	movs	r1, r2
 8009816:	0018      	movs	r0, r3
 8009818:	f000 f954 	bl	8009ac4 <USBD_CtlError>
            return;
 800981c:	e060      	b.n	80098e0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	0018      	movs	r0, r3
 8009822:	f000 fa37 	bl	8009c94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009826:	e05b      	b.n	80098e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	0018      	movs	r0, r3
 800982c:	f000 fa32 	bl	8009c94 <USBD_CtlSendStatus>
        break;
 8009830:	e056      	b.n	80098e0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009832:	4b2d      	ldr	r3, [pc, #180]	; (80098e8 <USBD_SetConfig+0x144>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d115      	bne.n	8009866 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	23a7      	movs	r3, #167	; 0xa7
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	2102      	movs	r1, #2
 8009842:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009844:	4b28      	ldr	r3, [pc, #160]	; (80098e8 <USBD_SetConfig+0x144>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	001a      	movs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800984e:	4b26      	ldr	r3, [pc, #152]	; (80098e8 <USBD_SetConfig+0x144>)
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	0011      	movs	r1, r2
 8009856:	0018      	movs	r0, r3
 8009858:	f7ff f8c4 	bl	80089e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0018      	movs	r0, r3
 8009860:	f000 fa18 	bl	8009c94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009864:	e03c      	b.n	80098e0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8009866:	4b20      	ldr	r3, [pc, #128]	; (80098e8 <USBD_SetConfig+0x144>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	001a      	movs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	429a      	cmp	r2, r3
 8009872:	d022      	beq.n	80098ba <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	b2da      	uxtb	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	0011      	movs	r1, r2
 800987e:	0018      	movs	r0, r3
 8009880:	f7ff f8b0 	bl	80089e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009884:	4b18      	ldr	r3, [pc, #96]	; (80098e8 <USBD_SetConfig+0x144>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	001a      	movs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800988e:	4b16      	ldr	r3, [pc, #88]	; (80098e8 <USBD_SetConfig+0x144>)
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	0011      	movs	r1, r2
 8009896:	0018      	movs	r0, r3
 8009898:	f7ff f87d 	bl	8008996 <USBD_SetClassConfig>
 800989c:	0003      	movs	r3, r0
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d106      	bne.n	80098b0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	0011      	movs	r1, r2
 80098a8:	0018      	movs	r0, r3
 80098aa:	f000 f90b 	bl	8009ac4 <USBD_CtlError>
            return;
 80098ae:	e017      	b.n	80098e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 f9ee 	bl	8009c94 <USBD_CtlSendStatus>
        break;
 80098b8:	e012      	b.n	80098e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0018      	movs	r0, r3
 80098be:	f000 f9e9 	bl	8009c94 <USBD_CtlSendStatus>
        break;
 80098c2:	e00d      	b.n	80098e0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	0011      	movs	r1, r2
 80098ca:	0018      	movs	r0, r3
 80098cc:	f000 f8fa 	bl	8009ac4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <USBD_SetConfig+0x144>)
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	0011      	movs	r1, r2
 80098d8:	0018      	movs	r0, r3
 80098da:	f7ff f883 	bl	80089e4 <USBD_ClrClassConfig>
        break;
 80098de:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b002      	add	sp, #8
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	20000770 	.word	0x20000770

080098ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d006      	beq.n	800990c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f000 f8dd 	bl	8009ac4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800990a:	e026      	b.n	800995a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	23a7      	movs	r3, #167	; 0xa7
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	5cd3      	ldrb	r3, [r2, r3]
 8009914:	2b02      	cmp	r3, #2
 8009916:	dc02      	bgt.n	800991e <USBD_GetConfig+0x32>
 8009918:	2b00      	cmp	r3, #0
 800991a:	dc03      	bgt.n	8009924 <USBD_GetConfig+0x38>
 800991c:	e016      	b.n	800994c <USBD_GetConfig+0x60>
 800991e:	2b03      	cmp	r3, #3
 8009920:	d00c      	beq.n	800993c <USBD_GetConfig+0x50>
 8009922:	e013      	b.n	800994c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3308      	adds	r3, #8
 800992e:	0019      	movs	r1, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	0018      	movs	r0, r3
 8009936:	f000 f943 	bl	8009bc0 <USBD_CtlSendData>
        break;
 800993a:	e00e      	b.n	800995a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1d19      	adds	r1, r3, #4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	0018      	movs	r0, r3
 8009946:	f000 f93b 	bl	8009bc0 <USBD_CtlSendData>
        break;
 800994a:	e006      	b.n	800995a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	0011      	movs	r1, r2
 8009952:	0018      	movs	r0, r3
 8009954:	f000 f8b6 	bl	8009ac4 <USBD_CtlError>
        break;
 8009958:	46c0      	nop			; (mov r8, r8)
}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	46bd      	mov	sp, r7
 800995e:	b002      	add	sp, #8
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	23a7      	movs	r3, #167	; 0xa7
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	5cd3      	ldrb	r3, [r2, r3]
 8009974:	3b01      	subs	r3, #1
 8009976:	2b02      	cmp	r3, #2
 8009978:	d822      	bhi.n	80099c0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	88db      	ldrh	r3, [r3, #6]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d006      	beq.n	8009990 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	0011      	movs	r1, r2
 8009988:	0018      	movs	r0, r3
 800998a:	f000 f89b 	bl	8009ac4 <USBD_CtlError>
        break;
 800998e:	e01e      	b.n	80099ce <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	23a9      	movs	r3, #169	; 0xa9
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	58d3      	ldr	r3, [r2, r3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2202      	movs	r2, #2
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	330c      	adds	r3, #12
 80099b2:	0019      	movs	r1, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	0018      	movs	r0, r3
 80099ba:	f000 f901 	bl	8009bc0 <USBD_CtlSendData>
      break;
 80099be:	e006      	b.n	80099ce <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	0011      	movs	r1, r2
 80099c6:	0018      	movs	r0, r3
 80099c8:	f000 f87c 	bl	8009ac4 <USBD_CtlError>
      break;
 80099cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b002      	add	sp, #8
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	885b      	ldrh	r3, [r3, #2]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d108      	bne.n	80099fa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	23a9      	movs	r3, #169	; 0xa9
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	2101      	movs	r1, #1
 80099f0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	0018      	movs	r0, r3
 80099f6:	f000 f94d 	bl	8009c94 <USBD_CtlSendStatus>
  }
}
 80099fa:	46c0      	nop			; (mov r8, r8)
 80099fc:	46bd      	mov	sp, r7
 80099fe:	b002      	add	sp, #8
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	23a7      	movs	r3, #167	; 0xa7
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	5cd3      	ldrb	r3, [r2, r3]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d80d      	bhi.n	8009a36 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	885b      	ldrh	r3, [r3, #2]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d110      	bne.n	8009a44 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	23a9      	movs	r3, #169	; 0xa9
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	2100      	movs	r1, #0
 8009a2a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f000 f930 	bl	8009c94 <USBD_CtlSendStatus>
      }
      break;
 8009a34:	e006      	b.n	8009a44 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	0011      	movs	r1, r2
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f000 f841 	bl	8009ac4 <USBD_CtlError>
      break;
 8009a42:	e000      	b.n	8009a46 <USBD_ClrFeature+0x44>
      break;
 8009a44:	46c0      	nop			; (mov r8, r8)
  }
}
 8009a46:	46c0      	nop			; (mov r8, r8)
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b002      	add	sp, #8
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	785a      	ldrb	r2, [r3, #1]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3302      	adds	r3, #2
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	3303      	adds	r3, #3
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	18d3      	adds	r3, r2, r3
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	3304      	adds	r3, #4
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	3305      	adds	r3, #5
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	3306      	adds	r3, #6
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	3307      	adds	r3, #7
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	18d3      	adds	r3, r2, r3
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	80da      	strh	r2, [r3, #6]

}
 8009abc:	46c0      	nop			; (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2180      	movs	r1, #128	; 0x80
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f000 fcb5 	bl	800a442 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2100      	movs	r1, #0
 8009adc:	0018      	movs	r0, r3
 8009ade:	f000 fcb0 	bl	800a442 <USBD_LL_StallEP>
}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	b002      	add	sp, #8
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009aea:	b590      	push	{r4, r7, lr}
 8009aec:	b087      	sub	sp, #28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009af6:	2417      	movs	r4, #23
 8009af8:	193b      	adds	r3, r7, r4
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d03c      	beq.n	8009b7e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	0018      	movs	r0, r3
 8009b08:	f000 f83d 	bl	8009b86 <USBD_GetLen>
 8009b0c:	0003      	movs	r3, r0
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	18db      	adds	r3, r3, r3
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b1a:	193b      	adds	r3, r7, r4
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	193a      	adds	r2, r7, r4
 8009b20:	1c59      	adds	r1, r3, #1
 8009b22:	7011      	strb	r1, [r2, #0]
 8009b24:	001a      	movs	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	189b      	adds	r3, r3, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	7812      	ldrb	r2, [r2, #0]
 8009b2e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b30:	193b      	adds	r3, r7, r4
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	193a      	adds	r2, r7, r4
 8009b36:	1c59      	adds	r1, r3, #1
 8009b38:	7011      	strb	r1, [r2, #0]
 8009b3a:	001a      	movs	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	189b      	adds	r3, r3, r2
 8009b40:	2203      	movs	r2, #3
 8009b42:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b44:	e017      	b.n	8009b76 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	60fa      	str	r2, [r7, #12]
 8009b4c:	2417      	movs	r4, #23
 8009b4e:	193a      	adds	r2, r7, r4
 8009b50:	7812      	ldrb	r2, [r2, #0]
 8009b52:	1939      	adds	r1, r7, r4
 8009b54:	1c50      	adds	r0, r2, #1
 8009b56:	7008      	strb	r0, [r1, #0]
 8009b58:	0011      	movs	r1, r2
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	1852      	adds	r2, r2, r1
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009b62:	193b      	adds	r3, r7, r4
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	193a      	adds	r2, r7, r4
 8009b68:	1c59      	adds	r1, r3, #1
 8009b6a:	7011      	strb	r1, [r2, #0]
 8009b6c:	001a      	movs	r2, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	189b      	adds	r3, r3, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e3      	bne.n	8009b46 <USBD_GetString+0x5c>
    }
  }
}
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	46bd      	mov	sp, r7
 8009b82:	b007      	add	sp, #28
 8009b84:	bd90      	pop	{r4, r7, pc}

08009b86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b8e:	230f      	movs	r3, #15
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	2200      	movs	r2, #0
 8009b94:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8009b96:	e008      	b.n	8009baa <USBD_GetLen+0x24>
  {
    len++;
 8009b98:	210f      	movs	r1, #15
 8009b9a:	187b      	adds	r3, r7, r1
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	187b      	adds	r3, r7, r1
 8009ba0:	3201      	adds	r2, #1
 8009ba2:	701a      	strb	r2, [r3, #0]
    buf++;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f2      	bne.n	8009b98 <USBD_GetLen+0x12>
  }

  return len;
 8009bb2:	230f      	movs	r3, #15
 8009bb4:	18fb      	adds	r3, r7, r3
 8009bb6:	781b      	ldrb	r3, [r3, #0]
}
 8009bb8:	0018      	movs	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	b004      	add	sp, #16
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	1dbb      	adds	r3, r7, #6
 8009bcc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	23a5      	movs	r3, #165	; 0xa5
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	2102      	movs	r1, #2
 8009bd6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8009bd8:	1dbb      	adds	r3, r7, #6
 8009bda:	881a      	ldrh	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009be0:	1dbb      	adds	r3, r7, #6
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009be8:	1dbb      	adds	r3, r7, #6
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f000 fcd8 	bl	800a5a6 <USBD_LL_Transmit>

  return USBD_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b004      	add	sp, #16
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	1dbb      	adds	r3, r7, #6
 8009c0c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c0e:	1dbb      	adds	r3, r7, #6
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	2100      	movs	r1, #0
 8009c18:	f000 fcc5 	bl	800a5a6 <USBD_LL_Transmit>

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	0018      	movs	r0, r3
 8009c20:	46bd      	mov	sp, r7
 8009c22:	b004      	add	sp, #16
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	1dbb      	adds	r3, r7, #6
 8009c32:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	23a5      	movs	r3, #165	; 0xa5
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	2103      	movs	r1, #3
 8009c3c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8009c3e:	1dbb      	adds	r3, r7, #6
 8009c40:	8819      	ldrh	r1, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	23ae      	movs	r3, #174	; 0xae
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8009c4a:	1dbb      	adds	r3, r7, #6
 8009c4c:	8819      	ldrh	r1, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	23b0      	movs	r3, #176	; 0xb0
 8009c52:	005b      	lsls	r3, r3, #1
 8009c54:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c56:	1dbb      	adds	r3, r7, #6
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f000 fcd8 	bl	800a614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	0018      	movs	r0, r3
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	b004      	add	sp, #16
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	1dbb      	adds	r3, r7, #6
 8009c7a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c7c:	1dbb      	adds	r3, r7, #6
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	2100      	movs	r1, #0
 8009c86:	f000 fcc5 	bl	800a614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	b004      	add	sp, #16
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	23a5      	movs	r3, #165	; 0xa5
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2200      	movs	r2, #0
 8009cac:	2100      	movs	r1, #0
 8009cae:	f000 fc7a 	bl	800a5a6 <USBD_LL_Transmit>

  return USBD_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	23a5      	movs	r3, #165	; 0xa5
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	2105      	movs	r1, #5
 8009ccc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	f000 fc9d 	bl	800a614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	0018      	movs	r0, r3
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b002      	add	sp, #8
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ce8:	4914      	ldr	r1, [pc, #80]	; (8009d3c <MX_USB_DEVICE_Init+0x58>)
 8009cea:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <MX_USB_DEVICE_Init+0x5c>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7fe fdea 	bl	80088c8 <USBD_Init>
 8009cf4:	1e03      	subs	r3, r0, #0
 8009cf6:	d001      	beq.n	8009cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009cf8:	f7f7 fce0 	bl	80016bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009cfc:	4a11      	ldr	r2, [pc, #68]	; (8009d44 <MX_USB_DEVICE_Init+0x60>)
 8009cfe:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <MX_USB_DEVICE_Init+0x5c>)
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f7fe fe11 	bl	800892a <USBD_RegisterClass>
 8009d08:	1e03      	subs	r3, r0, #0
 8009d0a:	d001      	beq.n	8009d10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009d0c:	f7f7 fcd6 	bl	80016bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d10:	4a0d      	ldr	r2, [pc, #52]	; (8009d48 <MX_USB_DEVICE_Init+0x64>)
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <MX_USB_DEVICE_Init+0x5c>)
 8009d14:	0011      	movs	r1, r2
 8009d16:	0018      	movs	r0, r3
 8009d18:	f7fe fd26 	bl	8008768 <USBD_CDC_RegisterInterface>
 8009d1c:	1e03      	subs	r3, r0, #0
 8009d1e:	d001      	beq.n	8009d24 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009d20:	f7f7 fccc 	bl	80016bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <MX_USB_DEVICE_Init+0x5c>)
 8009d26:	0018      	movs	r0, r3
 8009d28:	f7fe fe1f 	bl	800896a <USBD_Start>
 8009d2c:	1e03      	subs	r3, r0, #0
 8009d2e:	d001      	beq.n	8009d34 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009d30:	f7f7 fcc4 	bl	80016bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d34:	46c0      	nop			; (mov r8, r8)
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	20000408 	.word	0x20000408
 8009d40:	20000774 	.word	0x20000774
 8009d44:	200002f4 	.word	0x200002f4
 8009d48:	200003f8 	.word	0x200003f8

08009d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d50:	4907      	ldr	r1, [pc, #28]	; (8009d70 <CDC_Init_FS+0x24>)
 8009d52:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <CDC_Init_FS+0x28>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	0018      	movs	r0, r3
 8009d58:	f7fe fd21 	bl	800879e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d5c:	4a06      	ldr	r2, [pc, #24]	; (8009d78 <CDC_Init_FS+0x2c>)
 8009d5e:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <CDC_Init_FS+0x28>)
 8009d60:	0011      	movs	r1, r2
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7fe fd37 	bl	80087d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d68:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000e20 	.word	0x20000e20
 8009d74:	20000774 	.word	0x20000774
 8009d78:	20000a38 	.word	0x20000a38

08009d7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d82:	0018      	movs	r0, r3
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6039      	str	r1, [r7, #0]
 8009d90:	0011      	movs	r1, r2
 8009d92:	1dfb      	adds	r3, r7, #7
 8009d94:	1c02      	adds	r2, r0, #0
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	1d3b      	adds	r3, r7, #4
 8009d9a:	1c0a      	adds	r2, r1, #0
 8009d9c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d9e:	1dfb      	adds	r3, r7, #7
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b23      	cmp	r3, #35	; 0x23
 8009da4:	d804      	bhi.n	8009db0 <CDC_Control_FS+0x28>
 8009da6:	009a      	lsls	r2, r3, #2
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <CDC_Control_FS+0x34>)
 8009daa:	18d3      	adds	r3, r2, r3
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009db0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8009db2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b002      	add	sp, #8
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	0800b188 	.word	0x0800b188

08009dc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <CDC_Receive_FS+0x28>)
 8009dce:	0011      	movs	r1, r2
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	f7fe fd00 	bl	80087d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009dd6:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <CDC_Receive_FS+0x28>)
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7fe fd47 	bl	800886c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009dde:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009de0:	0018      	movs	r0, r3
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b002      	add	sp, #8
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000774 	.word	0x20000774

08009dec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009dec:	b5b0      	push	{r4, r5, r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	000a      	movs	r2, r1
 8009df6:	1cbb      	adds	r3, r7, #2
 8009df8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009dfa:	230f      	movs	r3, #15
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e02:	4a11      	ldr	r2, [pc, #68]	; (8009e48 <CDC_Transmit_FS+0x5c>)
 8009e04:	23ae      	movs	r3, #174	; 0xae
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	58d3      	ldr	r3, [r2, r3]
 8009e0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	2385      	movs	r3, #133	; 0x85
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	58d3      	ldr	r3, [r2, r3]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e010      	b.n	8009e3e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009e1c:	1cbb      	adds	r3, r7, #2
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <CDC_Transmit_FS+0x5c>)
 8009e24:	0018      	movs	r0, r3
 8009e26:	f7fe fcba 	bl	800879e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e2a:	250f      	movs	r5, #15
 8009e2c:	197c      	adds	r4, r7, r5
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <CDC_Transmit_FS+0x5c>)
 8009e30:	0018      	movs	r0, r3
 8009e32:	f7fe fce4 	bl	80087fe <USBD_CDC_TransmitPacket>
 8009e36:	0003      	movs	r3, r0
 8009e38:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8009e3a:	197b      	adds	r3, r7, r5
 8009e3c:	781b      	ldrb	r3, [r3, #0]
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b004      	add	sp, #16
 8009e44:	bdb0      	pop	{r4, r5, r7, pc}
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	20000774 	.word	0x20000774

08009e4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	0002      	movs	r2, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	1dfb      	adds	r3, r7, #7
 8009e58:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2212      	movs	r2, #18
 8009e5e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e62:	0018      	movs	r0, r3
 8009e64:	46bd      	mov	sp, r7
 8009e66:	b002      	add	sp, #8
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	20000424 	.word	0x20000424

08009e70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	0002      	movs	r2, r0
 8009e78:	6039      	str	r1, [r7, #0]
 8009e7a:	1dfb      	adds	r3, r7, #7
 8009e7c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2204      	movs	r2, #4
 8009e82:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e84:	4b02      	ldr	r3, [pc, #8]	; (8009e90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e86:	0018      	movs	r0, r3
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	b002      	add	sp, #8
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	46c0      	nop			; (mov r8, r8)
 8009e90:	20000438 	.word	0x20000438

08009e94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	0002      	movs	r2, r0
 8009e9c:	6039      	str	r1, [r7, #0]
 8009e9e:	1dfb      	adds	r3, r7, #7
 8009ea0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009ea2:	1dfb      	adds	r3, r7, #7
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4908      	ldr	r1, [pc, #32]	; (8009ed0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <USBD_FS_ProductStrDescriptor+0x40>)
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f7ff fe1a 	bl	8009aea <USBD_GetString>
 8009eb6:	e005      	b.n	8009ec4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	4905      	ldr	r1, [pc, #20]	; (8009ed0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <USBD_FS_ProductStrDescriptor+0x40>)
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f7ff fe13 	bl	8009aea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec4:	4b02      	ldr	r3, [pc, #8]	; (8009ed0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	b002      	add	sp, #8
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	20001208 	.word	0x20001208
 8009ed4:	0800b0ac 	.word	0x0800b0ac

08009ed8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	0002      	movs	r2, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	1dfb      	adds	r3, r7, #7
 8009ee4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4904      	ldr	r1, [pc, #16]	; (8009efc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009eec:	0018      	movs	r0, r3
 8009eee:	f7ff fdfc 	bl	8009aea <USBD_GetString>
  return USBD_StrDesc;
 8009ef2:	4b02      	ldr	r3, [pc, #8]	; (8009efc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b002      	add	sp, #8
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20001208 	.word	0x20001208
 8009f00:	0800b0c4 	.word	0x0800b0c4

08009f04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	0002      	movs	r2, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	1dfb      	adds	r3, r7, #7
 8009f10:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	221a      	movs	r2, #26
 8009f16:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f18:	f000 f84c 	bl	8009fb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f1c:	4b02      	ldr	r3, [pc, #8]	; (8009f28 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009f1e:	0018      	movs	r0, r3
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b002      	add	sp, #8
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	2000043c 	.word	0x2000043c

08009f2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	0002      	movs	r2, r0
 8009f34:	6039      	str	r1, [r7, #0]
 8009f36:	1dfb      	adds	r3, r7, #7
 8009f38:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009f3a:	1dfb      	adds	r3, r7, #7
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	4908      	ldr	r1, [pc, #32]	; (8009f68 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f7ff fdce 	bl	8009aea <USBD_GetString>
 8009f4e:	e005      	b.n	8009f5c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	4905      	ldr	r1, [pc, #20]	; (8009f68 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009f56:	0018      	movs	r0, r3
 8009f58:	f7ff fdc7 	bl	8009aea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f5c:	4b02      	ldr	r3, [pc, #8]	; (8009f68 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009f5e:	0018      	movs	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	20001208 	.word	0x20001208
 8009f6c:	0800b0d8 	.word	0x0800b0d8

08009f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	0002      	movs	r2, r0
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	1dfb      	adds	r3, r7, #7
 8009f7c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009f7e:	1dfb      	adds	r3, r7, #7
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	4908      	ldr	r1, [pc, #32]	; (8009fac <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7ff fdac 	bl	8009aea <USBD_GetString>
 8009f92:	e005      	b.n	8009fa0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	4905      	ldr	r1, [pc, #20]	; (8009fac <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7ff fda5 	bl	8009aea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fa0:	4b02      	ldr	r3, [pc, #8]	; (8009fac <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b002      	add	sp, #8
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	20001208 	.word	0x20001208
 8009fb0:	0800b0e4 	.word	0x0800b0e4

08009fb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fba:	4b10      	ldr	r3, [pc, #64]	; (8009ffc <Get_SerialNum+0x48>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <Get_SerialNum+0x4c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <Get_SerialNum+0x50>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	18d3      	adds	r3, r2, r3
 8009fd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00b      	beq.n	8009ff2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fda:	490b      	ldr	r1, [pc, #44]	; (800a008 <Get_SerialNum+0x54>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2208      	movs	r2, #8
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f000 f815 	bl	800a010 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fe6:	4909      	ldr	r1, [pc, #36]	; (800a00c <Get_SerialNum+0x58>)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2204      	movs	r2, #4
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 f80f 	bl	800a010 <IntToUnicode>
  }
}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b004      	add	sp, #16
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	1ff80050 	.word	0x1ff80050
 800a000:	1ff80054 	.word	0x1ff80054
 800a004:	1ff80058 	.word	0x1ff80058
 800a008:	2000043e 	.word	0x2000043e
 800a00c:	2000044e 	.word	0x2000044e

0800a010 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	1dfb      	adds	r3, r7, #7
 800a01c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a01e:	2117      	movs	r1, #23
 800a020:	187b      	adds	r3, r7, r1
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a026:	187b      	adds	r3, r7, r1
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	e02f      	b.n	800a08e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	0f1b      	lsrs	r3, r3, #28
 800a032:	2b09      	cmp	r3, #9
 800a034:	d80d      	bhi.n	800a052 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	0f1b      	lsrs	r3, r3, #28
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	2317      	movs	r3, #23
 800a03e:	18fb      	adds	r3, r7, r3
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	0019      	movs	r1, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	185b      	adds	r3, r3, r1
 800a04a:	3230      	adds	r2, #48	; 0x30
 800a04c:	b2d2      	uxtb	r2, r2
 800a04e:	701a      	strb	r2, [r3, #0]
 800a050:	e00c      	b.n	800a06c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	0f1b      	lsrs	r3, r3, #28
 800a056:	b2da      	uxtb	r2, r3
 800a058:	2317      	movs	r3, #23
 800a05a:	18fb      	adds	r3, r7, r3
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	0019      	movs	r1, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	185b      	adds	r3, r3, r1
 800a066:	3237      	adds	r2, #55	; 0x37
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a072:	2117      	movs	r1, #23
 800a074:	187b      	adds	r3, r7, r1
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	3301      	adds	r3, #1
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	18d3      	adds	r3, r2, r3
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a084:	187b      	adds	r3, r7, r1
 800a086:	781a      	ldrb	r2, [r3, #0]
 800a088:	187b      	adds	r3, r7, r1
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	2317      	movs	r3, #23
 800a090:	18fa      	adds	r2, r7, r3
 800a092:	1dfb      	adds	r3, r7, #7
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3c8      	bcc.n	800a02e <IntToUnicode+0x1e>
  }
}
 800a09c:	46c0      	nop			; (mov r8, r8)
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	b006      	add	sp, #24
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <HAL_PCD_MspInit+0x38>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d10e      	bne.n	800a0d8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0ba:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <HAL_PCD_MspInit+0x3c>)
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <HAL_PCD_MspInit+0x3c>)
 800a0c0:	2180      	movs	r1, #128	; 0x80
 800a0c2:	0409      	lsls	r1, r1, #16
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	201f      	movs	r0, #31
 800a0ce:	f7f8 f935 	bl	800233c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a0d2:	201f      	movs	r0, #31
 800a0d4:	f7f8 f947 	bl	8002366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a0d8:	46c0      	nop			; (mov r8, r8)
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	b002      	add	sp, #8
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	40005c00 	.word	0x40005c00
 800a0e4:	40021000 	.word	0x40021000

0800a0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	23bc      	movs	r3, #188	; 0xbc
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	58d2      	ldr	r2, [r2, r3]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	21ac      	movs	r1, #172	; 0xac
 800a0fc:	0089      	lsls	r1, r1, #2
 800a0fe:	468c      	mov	ip, r1
 800a100:	4463      	add	r3, ip
 800a102:	0019      	movs	r1, r3
 800a104:	0010      	movs	r0, r2
 800a106:	f7fe fc83 	bl	8008a10 <USBD_LL_SetupStage>
}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b002      	add	sp, #8
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a112:	b590      	push	{r4, r7, lr}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	000a      	movs	r2, r1
 800a11c:	1cfb      	adds	r3, r7, #3
 800a11e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	23bc      	movs	r3, #188	; 0xbc
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	58d4      	ldr	r4, [r2, r3]
 800a128:	1cfb      	adds	r3, r7, #3
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	23be      	movs	r3, #190	; 0xbe
 800a130:	0059      	lsls	r1, r3, #1
 800a132:	0013      	movs	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	189b      	adds	r3, r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	18c3      	adds	r3, r0, r3
 800a13c:	185b      	adds	r3, r3, r1
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	1cfb      	adds	r3, r7, #3
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	0019      	movs	r1, r3
 800a146:	0020      	movs	r0, r4
 800a148:	f7fe fcc0 	bl	8008acc <USBD_LL_DataOutStage>
}
 800a14c:	46c0      	nop			; (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	b003      	add	sp, #12
 800a152:	bd90      	pop	{r4, r7, pc}

0800a154 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	000a      	movs	r2, r1
 800a15e:	1cfb      	adds	r3, r7, #3
 800a160:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	23bc      	movs	r3, #188	; 0xbc
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	58d0      	ldr	r0, [r2, r3]
 800a16a:	1cfb      	adds	r3, r7, #3
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	0013      	movs	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	189b      	adds	r3, r3, r2
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	18cb      	adds	r3, r1, r3
 800a17a:	333c      	adds	r3, #60	; 0x3c
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	1cfb      	adds	r3, r7, #3
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	0019      	movs	r1, r3
 800a184:	f7fe fd24 	bl	8008bd0 <USBD_LL_DataInStage>
}
 800a188:	46c0      	nop			; (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b002      	add	sp, #8
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	23bc      	movs	r3, #188	; 0xbc
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	58d3      	ldr	r3, [r2, r3]
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f7fe fe5b 	bl	8008e5c <USBD_LL_SOF>
}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b002      	add	sp, #8
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1b6:	230f      	movs	r3, #15
 800a1b8:	18fb      	adds	r3, r7, r3
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d001      	beq.n	800a1ca <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a1c6:	f7f7 fa79 	bl	80016bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	23bc      	movs	r3, #188	; 0xbc
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	58d2      	ldr	r2, [r2, r3]
 800a1d2:	230f      	movs	r3, #15
 800a1d4:	18fb      	adds	r3, r7, r3
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	0019      	movs	r1, r3
 800a1da:	0010      	movs	r0, r2
 800a1dc:	f7fe fdfd 	bl	8008dda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	23bc      	movs	r3, #188	; 0xbc
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	58d3      	ldr	r3, [r2, r3]
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7fe fdae 	bl	8008d4a <USBD_LL_Reset>
}
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	b004      	add	sp, #16
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	23bc      	movs	r3, #188	; 0xbc
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	58d3      	ldr	r3, [r2, r3]
 800a208:	0018      	movs	r0, r3
 800a20a:	f7fe fdf7 	bl	8008dfc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <HAL_PCD_SuspendCallback+0x34>)
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	4b04      	ldr	r3, [pc, #16]	; (800a22c <HAL_PCD_SuspendCallback+0x34>)
 800a21c:	2106      	movs	r1, #6
 800a21e:	430a      	orrs	r2, r1
 800a220:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	46bd      	mov	sp, r7
 800a226:	b002      	add	sp, #8
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	46c0      	nop			; (mov r8, r8)
 800a22c:	e000ed00 	.word	0xe000ed00

0800a230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a240:	4b09      	ldr	r3, [pc, #36]	; (800a268 <HAL_PCD_ResumeCallback+0x38>)
 800a242:	691a      	ldr	r2, [r3, #16]
 800a244:	4b08      	ldr	r3, [pc, #32]	; (800a268 <HAL_PCD_ResumeCallback+0x38>)
 800a246:	2106      	movs	r1, #6
 800a248:	438a      	bics	r2, r1
 800a24a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a24c:	f000 fa44 	bl	800a6d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	23bc      	movs	r3, #188	; 0xbc
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	58d3      	ldr	r3, [r2, r3]
 800a258:	0018      	movs	r0, r3
 800a25a:	f7fe fde7 	bl	8008e2c <USBD_LL_Resume>
}
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	46bd      	mov	sp, r7
 800a262:	b002      	add	sp, #8
 800a264:	bd80      	pop	{r7, pc}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	e000ed00 	.word	0xe000ed00

0800a26c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a274:	4a2d      	ldr	r2, [pc, #180]	; (800a32c <USBD_LL_Init+0xc0>)
 800a276:	23bc      	movs	r3, #188	; 0xbc
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	23b0      	movs	r3, #176	; 0xb0
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4929      	ldr	r1, [pc, #164]	; (800a32c <USBD_LL_Init+0xc0>)
 800a286:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a288:	4b28      	ldr	r3, [pc, #160]	; (800a32c <USBD_LL_Init+0xc0>)
 800a28a:	4a29      	ldr	r2, [pc, #164]	; (800a330 <USBD_LL_Init+0xc4>)
 800a28c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a28e:	4b27      	ldr	r3, [pc, #156]	; (800a32c <USBD_LL_Init+0xc0>)
 800a290:	2208      	movs	r2, #8
 800a292:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a294:	4b25      	ldr	r3, [pc, #148]	; (800a32c <USBD_LL_Init+0xc0>)
 800a296:	2202      	movs	r2, #2
 800a298:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a29a:	4b24      	ldr	r3, [pc, #144]	; (800a32c <USBD_LL_Init+0xc0>)
 800a29c:	2202      	movs	r2, #2
 800a29e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2a0:	4b22      	ldr	r3, [pc, #136]	; (800a32c <USBD_LL_Init+0xc0>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2a6:	4b21      	ldr	r3, [pc, #132]	; (800a32c <USBD_LL_Init+0xc0>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2ac:	4b1f      	ldr	r3, [pc, #124]	; (800a32c <USBD_LL_Init+0xc0>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2b2:	4b1e      	ldr	r3, [pc, #120]	; (800a32c <USBD_LL_Init+0xc0>)
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f7f8 fa2b 	bl	8002710 <HAL_PCD_Init>
 800a2ba:	1e03      	subs	r3, r0, #0
 800a2bc:	d001      	beq.n	800a2c2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800a2be:	f7f7 f9fd 	bl	80016bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	23b0      	movs	r3, #176	; 0xb0
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	58d0      	ldr	r0, [r2, r3]
 800a2ca:	2318      	movs	r3, #24
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	f7f9 ffec 	bl	80042ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	23b0      	movs	r3, #176	; 0xb0
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	58d0      	ldr	r0, [r2, r3]
 800a2dc:	2358      	movs	r3, #88	; 0x58
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2180      	movs	r1, #128	; 0x80
 800a2e2:	f7f9 ffe3 	bl	80042ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	23b0      	movs	r3, #176	; 0xb0
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	58d0      	ldr	r0, [r2, r3]
 800a2ee:	23c0      	movs	r3, #192	; 0xc0
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2181      	movs	r1, #129	; 0x81
 800a2f4:	f7f9 ffda 	bl	80042ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	23b0      	movs	r3, #176	; 0xb0
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	58d0      	ldr	r0, [r2, r3]
 800a300:	2388      	movs	r3, #136	; 0x88
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	2200      	movs	r2, #0
 800a306:	2101      	movs	r1, #1
 800a308:	f7f9 ffd0 	bl	80042ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	23b0      	movs	r3, #176	; 0xb0
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	58d0      	ldr	r0, [r2, r3]
 800a314:	2380      	movs	r3, #128	; 0x80
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	2200      	movs	r2, #0
 800a31a:	2182      	movs	r1, #130	; 0x82
 800a31c:	f7f9 ffc6 	bl	80042ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	0018      	movs	r0, r3
 800a324:	46bd      	mov	sp, r7
 800a326:	b002      	add	sp, #8
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	46c0      	nop			; (mov r8, r8)
 800a32c:	20001408 	.word	0x20001408
 800a330:	40005c00 	.word	0x40005c00

0800a334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a33c:	210f      	movs	r1, #15
 800a33e:	187b      	adds	r3, r7, r1
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a344:	260e      	movs	r6, #14
 800a346:	19bb      	adds	r3, r7, r6
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	23b0      	movs	r3, #176	; 0xb0
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	000d      	movs	r5, r1
 800a356:	187c      	adds	r4, r7, r1
 800a358:	0018      	movs	r0, r3
 800a35a:	f7f8 fad9 	bl	8002910 <HAL_PCD_Start>
 800a35e:	0003      	movs	r3, r0
 800a360:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a362:	19bc      	adds	r4, r7, r6
 800a364:	197b      	adds	r3, r7, r5
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	0018      	movs	r0, r3
 800a36a:	f000 f9bc 	bl	800a6e6 <USBD_Get_USB_Status>
 800a36e:	0003      	movs	r3, r0
 800a370:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a372:	19bb      	adds	r3, r7, r6
 800a374:	781b      	ldrb	r3, [r3, #0]
}
 800a376:	0018      	movs	r0, r3
 800a378:	46bd      	mov	sp, r7
 800a37a:	b005      	add	sp, #20
 800a37c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a37e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	000c      	movs	r4, r1
 800a388:	0010      	movs	r0, r2
 800a38a:	0019      	movs	r1, r3
 800a38c:	1cfb      	adds	r3, r7, #3
 800a38e:	1c22      	adds	r2, r4, #0
 800a390:	701a      	strb	r2, [r3, #0]
 800a392:	1cbb      	adds	r3, r7, #2
 800a394:	1c02      	adds	r2, r0, #0
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	003b      	movs	r3, r7
 800a39a:	1c0a      	adds	r2, r1, #0
 800a39c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39e:	260f      	movs	r6, #15
 800a3a0:	19bb      	adds	r3, r7, r6
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a6:	250e      	movs	r5, #14
 800a3a8:	197b      	adds	r3, r7, r5
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	23b0      	movs	r3, #176	; 0xb0
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	58d0      	ldr	r0, [r2, r3]
 800a3b6:	19bc      	adds	r4, r7, r6
 800a3b8:	1cbb      	adds	r3, r7, #2
 800a3ba:	781d      	ldrb	r5, [r3, #0]
 800a3bc:	003b      	movs	r3, r7
 800a3be:	881a      	ldrh	r2, [r3, #0]
 800a3c0:	1cfb      	adds	r3, r7, #3
 800a3c2:	7819      	ldrb	r1, [r3, #0]
 800a3c4:	002b      	movs	r3, r5
 800a3c6:	f7f8 fc38 	bl	8002c3a <HAL_PCD_EP_Open>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ce:	250e      	movs	r5, #14
 800a3d0:	197c      	adds	r4, r7, r5
 800a3d2:	19bb      	adds	r3, r7, r6
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f000 f985 	bl	800a6e6 <USBD_Get_USB_Status>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a3e0:	197b      	adds	r3, r7, r5
 800a3e2:	781b      	ldrb	r3, [r3, #0]
}
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b005      	add	sp, #20
 800a3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3ec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	000a      	movs	r2, r1
 800a3f6:	1cfb      	adds	r3, r7, #3
 800a3f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fa:	210f      	movs	r1, #15
 800a3fc:	187b      	adds	r3, r7, r1
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a402:	260e      	movs	r6, #14
 800a404:	19bb      	adds	r3, r7, r6
 800a406:	2200      	movs	r2, #0
 800a408:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	23b0      	movs	r3, #176	; 0xb0
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	58d2      	ldr	r2, [r2, r3]
 800a412:	000d      	movs	r5, r1
 800a414:	187c      	adds	r4, r7, r1
 800a416:	1cfb      	adds	r3, r7, #3
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	0019      	movs	r1, r3
 800a41c:	0010      	movs	r0, r2
 800a41e:	f7f8 fc7b 	bl	8002d18 <HAL_PCD_EP_Close>
 800a422:	0003      	movs	r3, r0
 800a424:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a426:	19bc      	adds	r4, r7, r6
 800a428:	197b      	adds	r3, r7, r5
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	0018      	movs	r0, r3
 800a42e:	f000 f95a 	bl	800a6e6 <USBD_Get_USB_Status>
 800a432:	0003      	movs	r3, r0
 800a434:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a436:	19bb      	adds	r3, r7, r6
 800a438:	781b      	ldrb	r3, [r3, #0]
}
 800a43a:	0018      	movs	r0, r3
 800a43c:	46bd      	mov	sp, r7
 800a43e:	b005      	add	sp, #20
 800a440:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a442 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a442:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	000a      	movs	r2, r1
 800a44c:	1cfb      	adds	r3, r7, #3
 800a44e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	210f      	movs	r1, #15
 800a452:	187b      	adds	r3, r7, r1
 800a454:	2200      	movs	r2, #0
 800a456:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a458:	260e      	movs	r6, #14
 800a45a:	19bb      	adds	r3, r7, r6
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	23b0      	movs	r3, #176	; 0xb0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	58d2      	ldr	r2, [r2, r3]
 800a468:	000d      	movs	r5, r1
 800a46a:	187c      	adds	r4, r7, r1
 800a46c:	1cfb      	adds	r3, r7, #3
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	0019      	movs	r1, r3
 800a472:	0010      	movs	r0, r2
 800a474:	f7f8 fd2d 	bl	8002ed2 <HAL_PCD_EP_SetStall>
 800a478:	0003      	movs	r3, r0
 800a47a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a47c:	19bc      	adds	r4, r7, r6
 800a47e:	197b      	adds	r3, r7, r5
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	0018      	movs	r0, r3
 800a484:	f000 f92f 	bl	800a6e6 <USBD_Get_USB_Status>
 800a488:	0003      	movs	r3, r0
 800a48a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a48c:	19bb      	adds	r3, r7, r6
 800a48e:	781b      	ldrb	r3, [r3, #0]
}
 800a490:	0018      	movs	r0, r3
 800a492:	46bd      	mov	sp, r7
 800a494:	b005      	add	sp, #20
 800a496:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a498 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	000a      	movs	r2, r1
 800a4a2:	1cfb      	adds	r3, r7, #3
 800a4a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a6:	210f      	movs	r1, #15
 800a4a8:	187b      	adds	r3, r7, r1
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ae:	260e      	movs	r6, #14
 800a4b0:	19bb      	adds	r3, r7, r6
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	23b0      	movs	r3, #176	; 0xb0
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	58d2      	ldr	r2, [r2, r3]
 800a4be:	000d      	movs	r5, r1
 800a4c0:	187c      	adds	r4, r7, r1
 800a4c2:	1cfb      	adds	r3, r7, #3
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	0019      	movs	r1, r3
 800a4c8:	0010      	movs	r0, r2
 800a4ca:	f7f8 fd5e 	bl	8002f8a <HAL_PCD_EP_ClrStall>
 800a4ce:	0003      	movs	r3, r0
 800a4d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d2:	19bc      	adds	r4, r7, r6
 800a4d4:	197b      	adds	r3, r7, r5
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f000 f904 	bl	800a6e6 <USBD_Get_USB_Status>
 800a4de:	0003      	movs	r3, r0
 800a4e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a4e2:	19bb      	adds	r3, r7, r6
 800a4e4:	781b      	ldrb	r3, [r3, #0]
}
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	b005      	add	sp, #20
 800a4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	000a      	movs	r2, r1
 800a4f8:	1cfb      	adds	r3, r7, #3
 800a4fa:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	23b0      	movs	r3, #176	; 0xb0
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	58d3      	ldr	r3, [r2, r3]
 800a504:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a506:	1cfb      	adds	r3, r7, #3
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b25b      	sxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da0d      	bge.n	800a52c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a510:	1cfb      	adds	r3, r7, #3
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	227f      	movs	r2, #127	; 0x7f
 800a516:	4013      	ands	r3, r2
 800a518:	68f9      	ldr	r1, [r7, #12]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	0013      	movs	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	189b      	adds	r3, r3, r2
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	18cb      	adds	r3, r1, r3
 800a526:	3302      	adds	r3, #2
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	e00d      	b.n	800a548 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a52c:	1cfb      	adds	r3, r7, #3
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	227f      	movs	r2, #127	; 0x7f
 800a532:	401a      	ands	r2, r3
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	23b5      	movs	r3, #181	; 0xb5
 800a538:	0059      	lsls	r1, r3, #1
 800a53a:	0013      	movs	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	18c3      	adds	r3, r0, r3
 800a544:	185b      	adds	r3, r3, r1
 800a546:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a548:	0018      	movs	r0, r3
 800a54a:	46bd      	mov	sp, r7
 800a54c:	b004      	add	sp, #16
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	000a      	movs	r2, r1
 800a55a:	1cfb      	adds	r3, r7, #3
 800a55c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55e:	210f      	movs	r1, #15
 800a560:	187b      	adds	r3, r7, r1
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a566:	260e      	movs	r6, #14
 800a568:	19bb      	adds	r3, r7, r6
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	23b0      	movs	r3, #176	; 0xb0
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	58d2      	ldr	r2, [r2, r3]
 800a576:	000d      	movs	r5, r1
 800a578:	187c      	adds	r4, r7, r1
 800a57a:	1cfb      	adds	r3, r7, #3
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	0019      	movs	r1, r3
 800a580:	0010      	movs	r0, r2
 800a582:	f7f8 fb2f 	bl	8002be4 <HAL_PCD_SetAddress>
 800a586:	0003      	movs	r3, r0
 800a588:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a58a:	19bc      	adds	r4, r7, r6
 800a58c:	197b      	adds	r3, r7, r5
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 f8a8 	bl	800a6e6 <USBD_Get_USB_Status>
 800a596:	0003      	movs	r3, r0
 800a598:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a59a:	19bb      	adds	r3, r7, r6
 800a59c:	781b      	ldrb	r3, [r3, #0]
}
 800a59e:	0018      	movs	r0, r3
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	b005      	add	sp, #20
 800a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a8:	b087      	sub	sp, #28
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	0008      	movs	r0, r1
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	0019      	movs	r1, r3
 800a5b4:	230b      	movs	r3, #11
 800a5b6:	18fb      	adds	r3, r7, r3
 800a5b8:	1c02      	adds	r2, r0, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	2408      	movs	r4, #8
 800a5be:	193b      	adds	r3, r7, r4
 800a5c0:	1c0a      	adds	r2, r1, #0
 800a5c2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c4:	2117      	movs	r1, #23
 800a5c6:	187b      	adds	r3, r7, r1
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5cc:	2516      	movs	r5, #22
 800a5ce:	197b      	adds	r3, r7, r5
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	23b0      	movs	r3, #176	; 0xb0
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	58d0      	ldr	r0, [r2, r3]
 800a5dc:	193b      	adds	r3, r7, r4
 800a5de:	881d      	ldrh	r5, [r3, #0]
 800a5e0:	000e      	movs	r6, r1
 800a5e2:	187c      	adds	r4, r7, r1
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	230b      	movs	r3, #11
 800a5e8:	18fb      	adds	r3, r7, r3
 800a5ea:	7819      	ldrb	r1, [r3, #0]
 800a5ec:	002b      	movs	r3, r5
 800a5ee:	f7f8 fc34 	bl	8002e5a <HAL_PCD_EP_Transmit>
 800a5f2:	0003      	movs	r3, r0
 800a5f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f6:	2516      	movs	r5, #22
 800a5f8:	197c      	adds	r4, r7, r5
 800a5fa:	19bb      	adds	r3, r7, r6
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	0018      	movs	r0, r3
 800a600:	f000 f871 	bl	800a6e6 <USBD_Get_USB_Status>
 800a604:	0003      	movs	r3, r0
 800a606:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a608:	197b      	adds	r3, r7, r5
 800a60a:	781b      	ldrb	r3, [r3, #0]
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	b007      	add	sp, #28
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	0008      	movs	r0, r1
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	0019      	movs	r1, r3
 800a622:	230b      	movs	r3, #11
 800a624:	18fb      	adds	r3, r7, r3
 800a626:	1c02      	adds	r2, r0, #0
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	2408      	movs	r4, #8
 800a62c:	193b      	adds	r3, r7, r4
 800a62e:	1c0a      	adds	r2, r1, #0
 800a630:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a632:	2117      	movs	r1, #23
 800a634:	187b      	adds	r3, r7, r1
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63a:	2516      	movs	r5, #22
 800a63c:	197b      	adds	r3, r7, r5
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	23b0      	movs	r3, #176	; 0xb0
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	58d0      	ldr	r0, [r2, r3]
 800a64a:	193b      	adds	r3, r7, r4
 800a64c:	881d      	ldrh	r5, [r3, #0]
 800a64e:	000e      	movs	r6, r1
 800a650:	187c      	adds	r4, r7, r1
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	230b      	movs	r3, #11
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	7819      	ldrb	r1, [r3, #0]
 800a65a:	002b      	movs	r3, r5
 800a65c:	f7f8 fbad 	bl	8002dba <HAL_PCD_EP_Receive>
 800a660:	0003      	movs	r3, r0
 800a662:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a664:	2516      	movs	r5, #22
 800a666:	197c      	adds	r4, r7, r5
 800a668:	19bb      	adds	r3, r7, r6
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f000 f83a 	bl	800a6e6 <USBD_Get_USB_Status>
 800a672:	0003      	movs	r3, r0
 800a674:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a676:	197b      	adds	r3, r7, r5
 800a678:	781b      	ldrb	r3, [r3, #0]
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b007      	add	sp, #28
 800a680:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a682 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	000a      	movs	r2, r1
 800a68c:	1cfb      	adds	r3, r7, #3
 800a68e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	23b0      	movs	r3, #176	; 0xb0
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	58d2      	ldr	r2, [r2, r3]
 800a698:	1cfb      	adds	r3, r7, #3
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	0019      	movs	r1, r3
 800a69e:	0010      	movs	r0, r2
 800a6a0:	f7f8 fbc2 	bl	8002e28 <HAL_PCD_EP_GetRxCount>
 800a6a4:	0003      	movs	r3, r0
}
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b002      	add	sp, #8
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <USBD_static_malloc+0x14>)
}
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	b002      	add	sp, #8
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	200016fc 	.word	0x200016fc

0800a6c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]

}
 800a6d0:	46c0      	nop			; (mov r8, r8)
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b002      	add	sp, #8
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6dc:	f7f6 fc60 	bl	8000fa0 <SystemClock_Config>
}
 800a6e0:	46c0      	nop			; (mov r8, r8)
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	0002      	movs	r2, r0
 800a6ee:	1dfb      	adds	r3, r7, #7
 800a6f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f2:	230f      	movs	r3, #15
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a6fa:	1dfb      	adds	r3, r7, #7
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d017      	beq.n	800a732 <USBD_Get_USB_Status+0x4c>
 800a702:	dc1b      	bgt.n	800a73c <USBD_Get_USB_Status+0x56>
 800a704:	2b02      	cmp	r3, #2
 800a706:	d00f      	beq.n	800a728 <USBD_Get_USB_Status+0x42>
 800a708:	dc18      	bgt.n	800a73c <USBD_Get_USB_Status+0x56>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <USBD_Get_USB_Status+0x2e>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d005      	beq.n	800a71e <USBD_Get_USB_Status+0x38>
 800a712:	e013      	b.n	800a73c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a714:	230f      	movs	r3, #15
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
    break;
 800a71c:	e013      	b.n	800a746 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a71e:	230f      	movs	r3, #15
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	2202      	movs	r2, #2
 800a724:	701a      	strb	r2, [r3, #0]
    break;
 800a726:	e00e      	b.n	800a746 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a728:	230f      	movs	r3, #15
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	2201      	movs	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
    break;
 800a730:	e009      	b.n	800a746 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a732:	230f      	movs	r3, #15
 800a734:	18fb      	adds	r3, r7, r3
 800a736:	2202      	movs	r2, #2
 800a738:	701a      	strb	r2, [r3, #0]
    break;
 800a73a:	e004      	b.n	800a746 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a73c:	230f      	movs	r3, #15
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	2202      	movs	r2, #2
 800a742:	701a      	strb	r2, [r3, #0]
    break;
 800a744:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a746:	230f      	movs	r3, #15
 800a748:	18fb      	adds	r3, r7, r3
 800a74a:	781b      	ldrb	r3, [r3, #0]
}
 800a74c:	0018      	movs	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	b004      	add	sp, #16
 800a752:	bd80      	pop	{r7, pc}

0800a754 <__errno>:
 800a754:	4b01      	ldr	r3, [pc, #4]	; (800a75c <__errno+0x8>)
 800a756:	6818      	ldr	r0, [r3, #0]
 800a758:	4770      	bx	lr
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	20000458 	.word	0x20000458

0800a760 <__libc_init_array>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	2600      	movs	r6, #0
 800a764:	4d0c      	ldr	r5, [pc, #48]	; (800a798 <__libc_init_array+0x38>)
 800a766:	4c0d      	ldr	r4, [pc, #52]	; (800a79c <__libc_init_array+0x3c>)
 800a768:	1b64      	subs	r4, r4, r5
 800a76a:	10a4      	asrs	r4, r4, #2
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	d109      	bne.n	800a784 <__libc_init_array+0x24>
 800a770:	2600      	movs	r6, #0
 800a772:	f000 fc8b 	bl	800b08c <_init>
 800a776:	4d0a      	ldr	r5, [pc, #40]	; (800a7a0 <__libc_init_array+0x40>)
 800a778:	4c0a      	ldr	r4, [pc, #40]	; (800a7a4 <__libc_init_array+0x44>)
 800a77a:	1b64      	subs	r4, r4, r5
 800a77c:	10a4      	asrs	r4, r4, #2
 800a77e:	42a6      	cmp	r6, r4
 800a780:	d105      	bne.n	800a78e <__libc_init_array+0x2e>
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	00b3      	lsls	r3, r6, #2
 800a786:	58eb      	ldr	r3, [r5, r3]
 800a788:	4798      	blx	r3
 800a78a:	3601      	adds	r6, #1
 800a78c:	e7ee      	b.n	800a76c <__libc_init_array+0xc>
 800a78e:	00b3      	lsls	r3, r6, #2
 800a790:	58eb      	ldr	r3, [r5, r3]
 800a792:	4798      	blx	r3
 800a794:	3601      	adds	r6, #1
 800a796:	e7f2      	b.n	800a77e <__libc_init_array+0x1e>
 800a798:	0800b254 	.word	0x0800b254
 800a79c:	0800b254 	.word	0x0800b254
 800a7a0:	0800b254 	.word	0x0800b254
 800a7a4:	0800b258 	.word	0x0800b258

0800a7a8 <memcpy>:
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d100      	bne.n	800a7b2 <memcpy+0xa>
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	5ccc      	ldrb	r4, [r1, r3]
 800a7b4:	54c4      	strb	r4, [r0, r3]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	e7f8      	b.n	800a7ac <memcpy+0x4>

0800a7ba <memset>:
 800a7ba:	0003      	movs	r3, r0
 800a7bc:	1882      	adds	r2, r0, r2
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d100      	bne.n	800a7c4 <memset+0xa>
 800a7c2:	4770      	bx	lr
 800a7c4:	7019      	strb	r1, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	e7f9      	b.n	800a7be <memset+0x4>
	...

0800a7cc <siprintf>:
 800a7cc:	b40e      	push	{r1, r2, r3}
 800a7ce:	b500      	push	{lr}
 800a7d0:	490b      	ldr	r1, [pc, #44]	; (800a800 <siprintf+0x34>)
 800a7d2:	b09c      	sub	sp, #112	; 0x70
 800a7d4:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d6:	9002      	str	r0, [sp, #8]
 800a7d8:	9006      	str	r0, [sp, #24]
 800a7da:	9107      	str	r1, [sp, #28]
 800a7dc:	9104      	str	r1, [sp, #16]
 800a7de:	4809      	ldr	r0, [pc, #36]	; (800a804 <siprintf+0x38>)
 800a7e0:	4909      	ldr	r1, [pc, #36]	; (800a808 <siprintf+0x3c>)
 800a7e2:	cb04      	ldmia	r3!, {r2}
 800a7e4:	9105      	str	r1, [sp, #20]
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	a902      	add	r1, sp, #8
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f000 f870 	bl	800a8d0 <_svfiprintf_r>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9a02      	ldr	r2, [sp, #8]
 800a7f4:	7013      	strb	r3, [r2, #0]
 800a7f6:	b01c      	add	sp, #112	; 0x70
 800a7f8:	bc08      	pop	{r3}
 800a7fa:	b003      	add	sp, #12
 800a7fc:	4718      	bx	r3
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	7fffffff 	.word	0x7fffffff
 800a804:	20000458 	.word	0x20000458
 800a808:	ffff0208 	.word	0xffff0208

0800a80c <__ssputs_r>:
 800a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80e:	688e      	ldr	r6, [r1, #8]
 800a810:	b085      	sub	sp, #20
 800a812:	0007      	movs	r7, r0
 800a814:	000c      	movs	r4, r1
 800a816:	9203      	str	r2, [sp, #12]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	429e      	cmp	r6, r3
 800a81c:	d83c      	bhi.n	800a898 <__ssputs_r+0x8c>
 800a81e:	2390      	movs	r3, #144	; 0x90
 800a820:	898a      	ldrh	r2, [r1, #12]
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	421a      	tst	r2, r3
 800a826:	d034      	beq.n	800a892 <__ssputs_r+0x86>
 800a828:	6909      	ldr	r1, [r1, #16]
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	6960      	ldr	r0, [r4, #20]
 800a82e:	1a5b      	subs	r3, r3, r1
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	2303      	movs	r3, #3
 800a834:	4343      	muls	r3, r0
 800a836:	0fdd      	lsrs	r5, r3, #31
 800a838:	18ed      	adds	r5, r5, r3
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	9802      	ldr	r0, [sp, #8]
 800a83e:	3301      	adds	r3, #1
 800a840:	181b      	adds	r3, r3, r0
 800a842:	106d      	asrs	r5, r5, #1
 800a844:	42ab      	cmp	r3, r5
 800a846:	d900      	bls.n	800a84a <__ssputs_r+0x3e>
 800a848:	001d      	movs	r5, r3
 800a84a:	0553      	lsls	r3, r2, #21
 800a84c:	d532      	bpl.n	800a8b4 <__ssputs_r+0xa8>
 800a84e:	0029      	movs	r1, r5
 800a850:	0038      	movs	r0, r7
 800a852:	f000 fb49 	bl	800aee8 <_malloc_r>
 800a856:	1e06      	subs	r6, r0, #0
 800a858:	d109      	bne.n	800a86e <__ssputs_r+0x62>
 800a85a:	230c      	movs	r3, #12
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	2340      	movs	r3, #64	; 0x40
 800a860:	2001      	movs	r0, #1
 800a862:	89a2      	ldrh	r2, [r4, #12]
 800a864:	4240      	negs	r0, r0
 800a866:	4313      	orrs	r3, r2
 800a868:	81a3      	strh	r3, [r4, #12]
 800a86a:	b005      	add	sp, #20
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	9a02      	ldr	r2, [sp, #8]
 800a870:	6921      	ldr	r1, [r4, #16]
 800a872:	f7ff ff99 	bl	800a7a8 <memcpy>
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	4a14      	ldr	r2, [pc, #80]	; (800a8cc <__ssputs_r+0xc0>)
 800a87a:	401a      	ands	r2, r3
 800a87c:	2380      	movs	r3, #128	; 0x80
 800a87e:	4313      	orrs	r3, r2
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	6126      	str	r6, [r4, #16]
 800a886:	18f6      	adds	r6, r6, r3
 800a888:	6026      	str	r6, [r4, #0]
 800a88a:	6165      	str	r5, [r4, #20]
 800a88c:	9e01      	ldr	r6, [sp, #4]
 800a88e:	1aed      	subs	r5, r5, r3
 800a890:	60a5      	str	r5, [r4, #8]
 800a892:	9b01      	ldr	r3, [sp, #4]
 800a894:	429e      	cmp	r6, r3
 800a896:	d900      	bls.n	800a89a <__ssputs_r+0x8e>
 800a898:	9e01      	ldr	r6, [sp, #4]
 800a89a:	0032      	movs	r2, r6
 800a89c:	9903      	ldr	r1, [sp, #12]
 800a89e:	6820      	ldr	r0, [r4, #0]
 800a8a0:	f000 faa3 	bl	800adea <memmove>
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	1b9b      	subs	r3, r3, r6
 800a8aa:	60a3      	str	r3, [r4, #8]
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	199e      	adds	r6, r3, r6
 800a8b0:	6026      	str	r6, [r4, #0]
 800a8b2:	e7da      	b.n	800a86a <__ssputs_r+0x5e>
 800a8b4:	002a      	movs	r2, r5
 800a8b6:	0038      	movs	r0, r7
 800a8b8:	f000 fb8c 	bl	800afd4 <_realloc_r>
 800a8bc:	1e06      	subs	r6, r0, #0
 800a8be:	d1e0      	bne.n	800a882 <__ssputs_r+0x76>
 800a8c0:	0038      	movs	r0, r7
 800a8c2:	6921      	ldr	r1, [r4, #16]
 800a8c4:	f000 faa4 	bl	800ae10 <_free_r>
 800a8c8:	e7c7      	b.n	800a85a <__ssputs_r+0x4e>
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	fffffb7f 	.word	0xfffffb7f

0800a8d0 <_svfiprintf_r>:
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	b0a1      	sub	sp, #132	; 0x84
 800a8d4:	9003      	str	r0, [sp, #12]
 800a8d6:	001d      	movs	r5, r3
 800a8d8:	898b      	ldrh	r3, [r1, #12]
 800a8da:	000f      	movs	r7, r1
 800a8dc:	0016      	movs	r6, r2
 800a8de:	061b      	lsls	r3, r3, #24
 800a8e0:	d511      	bpl.n	800a906 <_svfiprintf_r+0x36>
 800a8e2:	690b      	ldr	r3, [r1, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10e      	bne.n	800a906 <_svfiprintf_r+0x36>
 800a8e8:	2140      	movs	r1, #64	; 0x40
 800a8ea:	f000 fafd 	bl	800aee8 <_malloc_r>
 800a8ee:	6038      	str	r0, [r7, #0]
 800a8f0:	6138      	str	r0, [r7, #16]
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d105      	bne.n	800a902 <_svfiprintf_r+0x32>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	9a03      	ldr	r2, [sp, #12]
 800a8fa:	3801      	subs	r0, #1
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	b021      	add	sp, #132	; 0x84
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	ac08      	add	r4, sp, #32
 800a90a:	6163      	str	r3, [r4, #20]
 800a90c:	3320      	adds	r3, #32
 800a90e:	7663      	strb	r3, [r4, #25]
 800a910:	3310      	adds	r3, #16
 800a912:	76a3      	strb	r3, [r4, #26]
 800a914:	9507      	str	r5, [sp, #28]
 800a916:	0035      	movs	r5, r6
 800a918:	782b      	ldrb	r3, [r5, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <_svfiprintf_r+0x52>
 800a91e:	2b25      	cmp	r3, #37	; 0x25
 800a920:	d147      	bne.n	800a9b2 <_svfiprintf_r+0xe2>
 800a922:	1bab      	subs	r3, r5, r6
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	42b5      	cmp	r5, r6
 800a928:	d00c      	beq.n	800a944 <_svfiprintf_r+0x74>
 800a92a:	0032      	movs	r2, r6
 800a92c:	0039      	movs	r1, r7
 800a92e:	9803      	ldr	r0, [sp, #12]
 800a930:	f7ff ff6c 	bl	800a80c <__ssputs_r>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d100      	bne.n	800a93a <_svfiprintf_r+0x6a>
 800a938:	e0ae      	b.n	800aa98 <_svfiprintf_r+0x1c8>
 800a93a:	6962      	ldr	r2, [r4, #20]
 800a93c:	9b05      	ldr	r3, [sp, #20]
 800a93e:	4694      	mov	ip, r2
 800a940:	4463      	add	r3, ip
 800a942:	6163      	str	r3, [r4, #20]
 800a944:	782b      	ldrb	r3, [r5, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d100      	bne.n	800a94c <_svfiprintf_r+0x7c>
 800a94a:	e0a5      	b.n	800aa98 <_svfiprintf_r+0x1c8>
 800a94c:	2201      	movs	r2, #1
 800a94e:	2300      	movs	r3, #0
 800a950:	4252      	negs	r2, r2
 800a952:	6062      	str	r2, [r4, #4]
 800a954:	a904      	add	r1, sp, #16
 800a956:	3254      	adds	r2, #84	; 0x54
 800a958:	1852      	adds	r2, r2, r1
 800a95a:	1c6e      	adds	r6, r5, #1
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	60e3      	str	r3, [r4, #12]
 800a960:	60a3      	str	r3, [r4, #8]
 800a962:	7013      	strb	r3, [r2, #0]
 800a964:	65a3      	str	r3, [r4, #88]	; 0x58
 800a966:	2205      	movs	r2, #5
 800a968:	7831      	ldrb	r1, [r6, #0]
 800a96a:	4854      	ldr	r0, [pc, #336]	; (800aabc <_svfiprintf_r+0x1ec>)
 800a96c:	f000 fa32 	bl	800add4 <memchr>
 800a970:	1c75      	adds	r5, r6, #1
 800a972:	2800      	cmp	r0, #0
 800a974:	d11f      	bne.n	800a9b6 <_svfiprintf_r+0xe6>
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	06d3      	lsls	r3, r2, #27
 800a97a:	d504      	bpl.n	800a986 <_svfiprintf_r+0xb6>
 800a97c:	2353      	movs	r3, #83	; 0x53
 800a97e:	a904      	add	r1, sp, #16
 800a980:	185b      	adds	r3, r3, r1
 800a982:	2120      	movs	r1, #32
 800a984:	7019      	strb	r1, [r3, #0]
 800a986:	0713      	lsls	r3, r2, #28
 800a988:	d504      	bpl.n	800a994 <_svfiprintf_r+0xc4>
 800a98a:	2353      	movs	r3, #83	; 0x53
 800a98c:	a904      	add	r1, sp, #16
 800a98e:	185b      	adds	r3, r3, r1
 800a990:	212b      	movs	r1, #43	; 0x2b
 800a992:	7019      	strb	r1, [r3, #0]
 800a994:	7833      	ldrb	r3, [r6, #0]
 800a996:	2b2a      	cmp	r3, #42	; 0x2a
 800a998:	d016      	beq.n	800a9c8 <_svfiprintf_r+0xf8>
 800a99a:	0035      	movs	r5, r6
 800a99c:	2100      	movs	r1, #0
 800a99e:	200a      	movs	r0, #10
 800a9a0:	68e3      	ldr	r3, [r4, #12]
 800a9a2:	782a      	ldrb	r2, [r5, #0]
 800a9a4:	1c6e      	adds	r6, r5, #1
 800a9a6:	3a30      	subs	r2, #48	; 0x30
 800a9a8:	2a09      	cmp	r2, #9
 800a9aa:	d94e      	bls.n	800aa4a <_svfiprintf_r+0x17a>
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	d111      	bne.n	800a9d4 <_svfiprintf_r+0x104>
 800a9b0:	e017      	b.n	800a9e2 <_svfiprintf_r+0x112>
 800a9b2:	3501      	adds	r5, #1
 800a9b4:	e7b0      	b.n	800a918 <_svfiprintf_r+0x48>
 800a9b6:	4b41      	ldr	r3, [pc, #260]	; (800aabc <_svfiprintf_r+0x1ec>)
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	1ac0      	subs	r0, r0, r3
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4083      	lsls	r3, r0
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	002e      	movs	r6, r5
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	e7ce      	b.n	800a966 <_svfiprintf_r+0x96>
 800a9c8:	9b07      	ldr	r3, [sp, #28]
 800a9ca:	1d19      	adds	r1, r3, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	9107      	str	r1, [sp, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	db01      	blt.n	800a9d8 <_svfiprintf_r+0x108>
 800a9d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d6:	e004      	b.n	800a9e2 <_svfiprintf_r+0x112>
 800a9d8:	425b      	negs	r3, r3
 800a9da:	60e3      	str	r3, [r4, #12]
 800a9dc:	2302      	movs	r3, #2
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	782b      	ldrb	r3, [r5, #0]
 800a9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e6:	d10a      	bne.n	800a9fe <_svfiprintf_r+0x12e>
 800a9e8:	786b      	ldrb	r3, [r5, #1]
 800a9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ec:	d135      	bne.n	800aa5a <_svfiprintf_r+0x18a>
 800a9ee:	9b07      	ldr	r3, [sp, #28]
 800a9f0:	3502      	adds	r5, #2
 800a9f2:	1d1a      	adds	r2, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9207      	str	r2, [sp, #28]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db2b      	blt.n	800aa54 <_svfiprintf_r+0x184>
 800a9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fe:	4e30      	ldr	r6, [pc, #192]	; (800aac0 <_svfiprintf_r+0x1f0>)
 800aa00:	2203      	movs	r2, #3
 800aa02:	0030      	movs	r0, r6
 800aa04:	7829      	ldrb	r1, [r5, #0]
 800aa06:	f000 f9e5 	bl	800add4 <memchr>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d006      	beq.n	800aa1c <_svfiprintf_r+0x14c>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	1b80      	subs	r0, r0, r6
 800aa12:	4083      	lsls	r3, r0
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	3501      	adds	r5, #1
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	7829      	ldrb	r1, [r5, #0]
 800aa1e:	2206      	movs	r2, #6
 800aa20:	4828      	ldr	r0, [pc, #160]	; (800aac4 <_svfiprintf_r+0x1f4>)
 800aa22:	1c6e      	adds	r6, r5, #1
 800aa24:	7621      	strb	r1, [r4, #24]
 800aa26:	f000 f9d5 	bl	800add4 <memchr>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d03c      	beq.n	800aaa8 <_svfiprintf_r+0x1d8>
 800aa2e:	4b26      	ldr	r3, [pc, #152]	; (800aac8 <_svfiprintf_r+0x1f8>)
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d125      	bne.n	800aa80 <_svfiprintf_r+0x1b0>
 800aa34:	2207      	movs	r2, #7
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	3307      	adds	r3, #7
 800aa3a:	4393      	bics	r3, r2
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	6963      	ldr	r3, [r4, #20]
 800aa42:	9a04      	ldr	r2, [sp, #16]
 800aa44:	189b      	adds	r3, r3, r2
 800aa46:	6163      	str	r3, [r4, #20]
 800aa48:	e765      	b.n	800a916 <_svfiprintf_r+0x46>
 800aa4a:	4343      	muls	r3, r0
 800aa4c:	0035      	movs	r5, r6
 800aa4e:	2101      	movs	r1, #1
 800aa50:	189b      	adds	r3, r3, r2
 800aa52:	e7a6      	b.n	800a9a2 <_svfiprintf_r+0xd2>
 800aa54:	2301      	movs	r3, #1
 800aa56:	425b      	negs	r3, r3
 800aa58:	e7d0      	b.n	800a9fc <_svfiprintf_r+0x12c>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	200a      	movs	r0, #10
 800aa5e:	001a      	movs	r2, r3
 800aa60:	3501      	adds	r5, #1
 800aa62:	6063      	str	r3, [r4, #4]
 800aa64:	7829      	ldrb	r1, [r5, #0]
 800aa66:	1c6e      	adds	r6, r5, #1
 800aa68:	3930      	subs	r1, #48	; 0x30
 800aa6a:	2909      	cmp	r1, #9
 800aa6c:	d903      	bls.n	800aa76 <_svfiprintf_r+0x1a6>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c5      	beq.n	800a9fe <_svfiprintf_r+0x12e>
 800aa72:	9209      	str	r2, [sp, #36]	; 0x24
 800aa74:	e7c3      	b.n	800a9fe <_svfiprintf_r+0x12e>
 800aa76:	4342      	muls	r2, r0
 800aa78:	0035      	movs	r5, r6
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	1852      	adds	r2, r2, r1
 800aa7e:	e7f1      	b.n	800aa64 <_svfiprintf_r+0x194>
 800aa80:	ab07      	add	r3, sp, #28
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	003a      	movs	r2, r7
 800aa86:	0021      	movs	r1, r4
 800aa88:	4b10      	ldr	r3, [pc, #64]	; (800aacc <_svfiprintf_r+0x1fc>)
 800aa8a:	9803      	ldr	r0, [sp, #12]
 800aa8c:	e000      	b.n	800aa90 <_svfiprintf_r+0x1c0>
 800aa8e:	bf00      	nop
 800aa90:	9004      	str	r0, [sp, #16]
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	d1d3      	bne.n	800aa40 <_svfiprintf_r+0x170>
 800aa98:	89bb      	ldrh	r3, [r7, #12]
 800aa9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa9c:	065b      	lsls	r3, r3, #25
 800aa9e:	d400      	bmi.n	800aaa2 <_svfiprintf_r+0x1d2>
 800aaa0:	e72d      	b.n	800a8fe <_svfiprintf_r+0x2e>
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	4240      	negs	r0, r0
 800aaa6:	e72a      	b.n	800a8fe <_svfiprintf_r+0x2e>
 800aaa8:	ab07      	add	r3, sp, #28
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	003a      	movs	r2, r7
 800aaae:	0021      	movs	r1, r4
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <_svfiprintf_r+0x1fc>)
 800aab2:	9803      	ldr	r0, [sp, #12]
 800aab4:	f000 f87c 	bl	800abb0 <_printf_i>
 800aab8:	e7ea      	b.n	800aa90 <_svfiprintf_r+0x1c0>
 800aaba:	46c0      	nop			; (mov r8, r8)
 800aabc:	0800b218 	.word	0x0800b218
 800aac0:	0800b21e 	.word	0x0800b21e
 800aac4:	0800b222 	.word	0x0800b222
 800aac8:	00000000 	.word	0x00000000
 800aacc:	0800a80d 	.word	0x0800a80d

0800aad0 <_printf_common>:
 800aad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad2:	0015      	movs	r5, r2
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	688a      	ldr	r2, [r1, #8]
 800aad8:	690b      	ldr	r3, [r1, #16]
 800aada:	000c      	movs	r4, r1
 800aadc:	9000      	str	r0, [sp, #0]
 800aade:	4293      	cmp	r3, r2
 800aae0:	da00      	bge.n	800aae4 <_printf_common+0x14>
 800aae2:	0013      	movs	r3, r2
 800aae4:	0022      	movs	r2, r4
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	3243      	adds	r2, #67	; 0x43
 800aaea:	7812      	ldrb	r2, [r2, #0]
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	d001      	beq.n	800aaf4 <_printf_common+0x24>
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	069b      	lsls	r3, r3, #26
 800aaf8:	d502      	bpl.n	800ab00 <_printf_common+0x30>
 800aafa:	682b      	ldr	r3, [r5, #0]
 800aafc:	3302      	adds	r3, #2
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	2306      	movs	r3, #6
 800ab04:	0017      	movs	r7, r2
 800ab06:	401f      	ands	r7, r3
 800ab08:	421a      	tst	r2, r3
 800ab0a:	d027      	beq.n	800ab5c <_printf_common+0x8c>
 800ab0c:	0023      	movs	r3, r4
 800ab0e:	3343      	adds	r3, #67	; 0x43
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	1e5a      	subs	r2, r3, #1
 800ab14:	4193      	sbcs	r3, r2
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	0692      	lsls	r2, r2, #26
 800ab1a:	d430      	bmi.n	800ab7e <_printf_common+0xae>
 800ab1c:	0022      	movs	r2, r4
 800ab1e:	9901      	ldr	r1, [sp, #4]
 800ab20:	9800      	ldr	r0, [sp, #0]
 800ab22:	9e08      	ldr	r6, [sp, #32]
 800ab24:	3243      	adds	r2, #67	; 0x43
 800ab26:	47b0      	blx	r6
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d025      	beq.n	800ab78 <_printf_common+0xa8>
 800ab2c:	2306      	movs	r3, #6
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	682a      	ldr	r2, [r5, #0]
 800ab32:	68e1      	ldr	r1, [r4, #12]
 800ab34:	2500      	movs	r5, #0
 800ab36:	4003      	ands	r3, r0
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d103      	bne.n	800ab44 <_printf_common+0x74>
 800ab3c:	1a8d      	subs	r5, r1, r2
 800ab3e:	43eb      	mvns	r3, r5
 800ab40:	17db      	asrs	r3, r3, #31
 800ab42:	401d      	ands	r5, r3
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	6922      	ldr	r2, [r4, #16]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	dd01      	ble.n	800ab50 <_printf_common+0x80>
 800ab4c:	1a9b      	subs	r3, r3, r2
 800ab4e:	18ed      	adds	r5, r5, r3
 800ab50:	2700      	movs	r7, #0
 800ab52:	42bd      	cmp	r5, r7
 800ab54:	d120      	bne.n	800ab98 <_printf_common+0xc8>
 800ab56:	2000      	movs	r0, #0
 800ab58:	e010      	b.n	800ab7c <_printf_common+0xac>
 800ab5a:	3701      	adds	r7, #1
 800ab5c:	68e3      	ldr	r3, [r4, #12]
 800ab5e:	682a      	ldr	r2, [r5, #0]
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	42bb      	cmp	r3, r7
 800ab64:	ddd2      	ble.n	800ab0c <_printf_common+0x3c>
 800ab66:	0022      	movs	r2, r4
 800ab68:	2301      	movs	r3, #1
 800ab6a:	9901      	ldr	r1, [sp, #4]
 800ab6c:	9800      	ldr	r0, [sp, #0]
 800ab6e:	9e08      	ldr	r6, [sp, #32]
 800ab70:	3219      	adds	r2, #25
 800ab72:	47b0      	blx	r6
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d1f0      	bne.n	800ab5a <_printf_common+0x8a>
 800ab78:	2001      	movs	r0, #1
 800ab7a:	4240      	negs	r0, r0
 800ab7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab7e:	2030      	movs	r0, #48	; 0x30
 800ab80:	18e1      	adds	r1, r4, r3
 800ab82:	3143      	adds	r1, #67	; 0x43
 800ab84:	7008      	strb	r0, [r1, #0]
 800ab86:	0021      	movs	r1, r4
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	3145      	adds	r1, #69	; 0x45
 800ab8c:	7809      	ldrb	r1, [r1, #0]
 800ab8e:	18a2      	adds	r2, r4, r2
 800ab90:	3243      	adds	r2, #67	; 0x43
 800ab92:	3302      	adds	r3, #2
 800ab94:	7011      	strb	r1, [r2, #0]
 800ab96:	e7c1      	b.n	800ab1c <_printf_common+0x4c>
 800ab98:	0022      	movs	r2, r4
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	9901      	ldr	r1, [sp, #4]
 800ab9e:	9800      	ldr	r0, [sp, #0]
 800aba0:	9e08      	ldr	r6, [sp, #32]
 800aba2:	321a      	adds	r2, #26
 800aba4:	47b0      	blx	r6
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d0e6      	beq.n	800ab78 <_printf_common+0xa8>
 800abaa:	3701      	adds	r7, #1
 800abac:	e7d1      	b.n	800ab52 <_printf_common+0x82>
	...

0800abb0 <_printf_i>:
 800abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb2:	b08b      	sub	sp, #44	; 0x2c
 800abb4:	9206      	str	r2, [sp, #24]
 800abb6:	000a      	movs	r2, r1
 800abb8:	3243      	adds	r2, #67	; 0x43
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	9005      	str	r0, [sp, #20]
 800abbe:	9204      	str	r2, [sp, #16]
 800abc0:	7e0a      	ldrb	r2, [r1, #24]
 800abc2:	000c      	movs	r4, r1
 800abc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abc6:	2a78      	cmp	r2, #120	; 0x78
 800abc8:	d807      	bhi.n	800abda <_printf_i+0x2a>
 800abca:	2a62      	cmp	r2, #98	; 0x62
 800abcc:	d809      	bhi.n	800abe2 <_printf_i+0x32>
 800abce:	2a00      	cmp	r2, #0
 800abd0:	d100      	bne.n	800abd4 <_printf_i+0x24>
 800abd2:	e0c1      	b.n	800ad58 <_printf_i+0x1a8>
 800abd4:	2a58      	cmp	r2, #88	; 0x58
 800abd6:	d100      	bne.n	800abda <_printf_i+0x2a>
 800abd8:	e08c      	b.n	800acf4 <_printf_i+0x144>
 800abda:	0026      	movs	r6, r4
 800abdc:	3642      	adds	r6, #66	; 0x42
 800abde:	7032      	strb	r2, [r6, #0]
 800abe0:	e022      	b.n	800ac28 <_printf_i+0x78>
 800abe2:	0010      	movs	r0, r2
 800abe4:	3863      	subs	r0, #99	; 0x63
 800abe6:	2815      	cmp	r0, #21
 800abe8:	d8f7      	bhi.n	800abda <_printf_i+0x2a>
 800abea:	f7f5 fa8d 	bl	8000108 <__gnu_thumb1_case_shi>
 800abee:	0016      	.short	0x0016
 800abf0:	fff6001f 	.word	0xfff6001f
 800abf4:	fff6fff6 	.word	0xfff6fff6
 800abf8:	001ffff6 	.word	0x001ffff6
 800abfc:	fff6fff6 	.word	0xfff6fff6
 800ac00:	fff6fff6 	.word	0xfff6fff6
 800ac04:	003600a8 	.word	0x003600a8
 800ac08:	fff6009a 	.word	0xfff6009a
 800ac0c:	00b9fff6 	.word	0x00b9fff6
 800ac10:	0036fff6 	.word	0x0036fff6
 800ac14:	fff6fff6 	.word	0xfff6fff6
 800ac18:	009e      	.short	0x009e
 800ac1a:	0026      	movs	r6, r4
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	3642      	adds	r6, #66	; 0x42
 800ac20:	1d11      	adds	r1, r2, #4
 800ac22:	6019      	str	r1, [r3, #0]
 800ac24:	6813      	ldr	r3, [r2, #0]
 800ac26:	7033      	strb	r3, [r6, #0]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e0a7      	b.n	800ad7c <_printf_i+0x1cc>
 800ac2c:	6808      	ldr	r0, [r1, #0]
 800ac2e:	6819      	ldr	r1, [r3, #0]
 800ac30:	1d0a      	adds	r2, r1, #4
 800ac32:	0605      	lsls	r5, r0, #24
 800ac34:	d50b      	bpl.n	800ac4e <_printf_i+0x9e>
 800ac36:	680d      	ldr	r5, [r1, #0]
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	da03      	bge.n	800ac46 <_printf_i+0x96>
 800ac3e:	232d      	movs	r3, #45	; 0x2d
 800ac40:	9a04      	ldr	r2, [sp, #16]
 800ac42:	426d      	negs	r5, r5
 800ac44:	7013      	strb	r3, [r2, #0]
 800ac46:	4b61      	ldr	r3, [pc, #388]	; (800adcc <_printf_i+0x21c>)
 800ac48:	270a      	movs	r7, #10
 800ac4a:	9303      	str	r3, [sp, #12]
 800ac4c:	e01b      	b.n	800ac86 <_printf_i+0xd6>
 800ac4e:	680d      	ldr	r5, [r1, #0]
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	0641      	lsls	r1, r0, #25
 800ac54:	d5f1      	bpl.n	800ac3a <_printf_i+0x8a>
 800ac56:	b22d      	sxth	r5, r5
 800ac58:	e7ef      	b.n	800ac3a <_printf_i+0x8a>
 800ac5a:	680d      	ldr	r5, [r1, #0]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	1d08      	adds	r0, r1, #4
 800ac60:	6018      	str	r0, [r3, #0]
 800ac62:	062e      	lsls	r6, r5, #24
 800ac64:	d501      	bpl.n	800ac6a <_printf_i+0xba>
 800ac66:	680d      	ldr	r5, [r1, #0]
 800ac68:	e003      	b.n	800ac72 <_printf_i+0xc2>
 800ac6a:	066d      	lsls	r5, r5, #25
 800ac6c:	d5fb      	bpl.n	800ac66 <_printf_i+0xb6>
 800ac6e:	680d      	ldr	r5, [r1, #0]
 800ac70:	b2ad      	uxth	r5, r5
 800ac72:	4b56      	ldr	r3, [pc, #344]	; (800adcc <_printf_i+0x21c>)
 800ac74:	2708      	movs	r7, #8
 800ac76:	9303      	str	r3, [sp, #12]
 800ac78:	2a6f      	cmp	r2, #111	; 0x6f
 800ac7a:	d000      	beq.n	800ac7e <_printf_i+0xce>
 800ac7c:	3702      	adds	r7, #2
 800ac7e:	0023      	movs	r3, r4
 800ac80:	2200      	movs	r2, #0
 800ac82:	3343      	adds	r3, #67	; 0x43
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	6863      	ldr	r3, [r4, #4]
 800ac88:	60a3      	str	r3, [r4, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	db03      	blt.n	800ac96 <_printf_i+0xe6>
 800ac8e:	2204      	movs	r2, #4
 800ac90:	6821      	ldr	r1, [r4, #0]
 800ac92:	4391      	bics	r1, r2
 800ac94:	6021      	str	r1, [r4, #0]
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	d102      	bne.n	800aca0 <_printf_i+0xf0>
 800ac9a:	9e04      	ldr	r6, [sp, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00c      	beq.n	800acba <_printf_i+0x10a>
 800aca0:	9e04      	ldr	r6, [sp, #16]
 800aca2:	0028      	movs	r0, r5
 800aca4:	0039      	movs	r1, r7
 800aca6:	f7f5 fabf 	bl	8000228 <__aeabi_uidivmod>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	3e01      	subs	r6, #1
 800acae:	5c5b      	ldrb	r3, [r3, r1]
 800acb0:	7033      	strb	r3, [r6, #0]
 800acb2:	002b      	movs	r3, r5
 800acb4:	0005      	movs	r5, r0
 800acb6:	429f      	cmp	r7, r3
 800acb8:	d9f3      	bls.n	800aca2 <_printf_i+0xf2>
 800acba:	2f08      	cmp	r7, #8
 800acbc:	d109      	bne.n	800acd2 <_printf_i+0x122>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	07db      	lsls	r3, r3, #31
 800acc2:	d506      	bpl.n	800acd2 <_printf_i+0x122>
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	4293      	cmp	r3, r2
 800acca:	dc02      	bgt.n	800acd2 <_printf_i+0x122>
 800accc:	2330      	movs	r3, #48	; 0x30
 800acce:	3e01      	subs	r6, #1
 800acd0:	7033      	strb	r3, [r6, #0]
 800acd2:	9b04      	ldr	r3, [sp, #16]
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	9b07      	ldr	r3, [sp, #28]
 800acda:	0021      	movs	r1, r4
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	9805      	ldr	r0, [sp, #20]
 800ace0:	9b06      	ldr	r3, [sp, #24]
 800ace2:	aa09      	add	r2, sp, #36	; 0x24
 800ace4:	f7ff fef4 	bl	800aad0 <_printf_common>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d14c      	bne.n	800ad86 <_printf_i+0x1d6>
 800acec:	2001      	movs	r0, #1
 800acee:	4240      	negs	r0, r0
 800acf0:	b00b      	add	sp, #44	; 0x2c
 800acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acf4:	3145      	adds	r1, #69	; 0x45
 800acf6:	700a      	strb	r2, [r1, #0]
 800acf8:	4a34      	ldr	r2, [pc, #208]	; (800adcc <_printf_i+0x21c>)
 800acfa:	9203      	str	r2, [sp, #12]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	6821      	ldr	r1, [r4, #0]
 800ad00:	ca20      	ldmia	r2!, {r5}
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	0608      	lsls	r0, r1, #24
 800ad06:	d516      	bpl.n	800ad36 <_printf_i+0x186>
 800ad08:	07cb      	lsls	r3, r1, #31
 800ad0a:	d502      	bpl.n	800ad12 <_printf_i+0x162>
 800ad0c:	2320      	movs	r3, #32
 800ad0e:	4319      	orrs	r1, r3
 800ad10:	6021      	str	r1, [r4, #0]
 800ad12:	2710      	movs	r7, #16
 800ad14:	2d00      	cmp	r5, #0
 800ad16:	d1b2      	bne.n	800ac7e <_printf_i+0xce>
 800ad18:	2320      	movs	r3, #32
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	439a      	bics	r2, r3
 800ad1e:	6022      	str	r2, [r4, #0]
 800ad20:	e7ad      	b.n	800ac7e <_printf_i+0xce>
 800ad22:	2220      	movs	r2, #32
 800ad24:	6809      	ldr	r1, [r1, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	6022      	str	r2, [r4, #0]
 800ad2a:	0022      	movs	r2, r4
 800ad2c:	2178      	movs	r1, #120	; 0x78
 800ad2e:	3245      	adds	r2, #69	; 0x45
 800ad30:	7011      	strb	r1, [r2, #0]
 800ad32:	4a27      	ldr	r2, [pc, #156]	; (800add0 <_printf_i+0x220>)
 800ad34:	e7e1      	b.n	800acfa <_printf_i+0x14a>
 800ad36:	0648      	lsls	r0, r1, #25
 800ad38:	d5e6      	bpl.n	800ad08 <_printf_i+0x158>
 800ad3a:	b2ad      	uxth	r5, r5
 800ad3c:	e7e4      	b.n	800ad08 <_printf_i+0x158>
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	680d      	ldr	r5, [r1, #0]
 800ad42:	1d10      	adds	r0, r2, #4
 800ad44:	6949      	ldr	r1, [r1, #20]
 800ad46:	6018      	str	r0, [r3, #0]
 800ad48:	6813      	ldr	r3, [r2, #0]
 800ad4a:	062e      	lsls	r6, r5, #24
 800ad4c:	d501      	bpl.n	800ad52 <_printf_i+0x1a2>
 800ad4e:	6019      	str	r1, [r3, #0]
 800ad50:	e002      	b.n	800ad58 <_printf_i+0x1a8>
 800ad52:	066d      	lsls	r5, r5, #25
 800ad54:	d5fb      	bpl.n	800ad4e <_printf_i+0x19e>
 800ad56:	8019      	strh	r1, [r3, #0]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9e04      	ldr	r6, [sp, #16]
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	e7bb      	b.n	800acd8 <_printf_i+0x128>
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	1d11      	adds	r1, r2, #4
 800ad64:	6019      	str	r1, [r3, #0]
 800ad66:	6816      	ldr	r6, [r2, #0]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	0030      	movs	r0, r6
 800ad6c:	6862      	ldr	r2, [r4, #4]
 800ad6e:	f000 f831 	bl	800add4 <memchr>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d001      	beq.n	800ad7a <_printf_i+0x1ca>
 800ad76:	1b80      	subs	r0, r0, r6
 800ad78:	6060      	str	r0, [r4, #4]
 800ad7a:	6863      	ldr	r3, [r4, #4]
 800ad7c:	6123      	str	r3, [r4, #16]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	9a04      	ldr	r2, [sp, #16]
 800ad82:	7013      	strb	r3, [r2, #0]
 800ad84:	e7a8      	b.n	800acd8 <_printf_i+0x128>
 800ad86:	6923      	ldr	r3, [r4, #16]
 800ad88:	0032      	movs	r2, r6
 800ad8a:	9906      	ldr	r1, [sp, #24]
 800ad8c:	9805      	ldr	r0, [sp, #20]
 800ad8e:	9d07      	ldr	r5, [sp, #28]
 800ad90:	47a8      	blx	r5
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	d0aa      	beq.n	800acec <_printf_i+0x13c>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	079b      	lsls	r3, r3, #30
 800ad9a:	d415      	bmi.n	800adc8 <_printf_i+0x218>
 800ad9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9e:	68e0      	ldr	r0, [r4, #12]
 800ada0:	4298      	cmp	r0, r3
 800ada2:	daa5      	bge.n	800acf0 <_printf_i+0x140>
 800ada4:	0018      	movs	r0, r3
 800ada6:	e7a3      	b.n	800acf0 <_printf_i+0x140>
 800ada8:	0022      	movs	r2, r4
 800adaa:	2301      	movs	r3, #1
 800adac:	9906      	ldr	r1, [sp, #24]
 800adae:	9805      	ldr	r0, [sp, #20]
 800adb0:	9e07      	ldr	r6, [sp, #28]
 800adb2:	3219      	adds	r2, #25
 800adb4:	47b0      	blx	r6
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d098      	beq.n	800acec <_printf_i+0x13c>
 800adba:	3501      	adds	r5, #1
 800adbc:	68e3      	ldr	r3, [r4, #12]
 800adbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	42ab      	cmp	r3, r5
 800adc4:	dcf0      	bgt.n	800ada8 <_printf_i+0x1f8>
 800adc6:	e7e9      	b.n	800ad9c <_printf_i+0x1ec>
 800adc8:	2500      	movs	r5, #0
 800adca:	e7f7      	b.n	800adbc <_printf_i+0x20c>
 800adcc:	0800b229 	.word	0x0800b229
 800add0:	0800b23a 	.word	0x0800b23a

0800add4 <memchr>:
 800add4:	b2c9      	uxtb	r1, r1
 800add6:	1882      	adds	r2, r0, r2
 800add8:	4290      	cmp	r0, r2
 800adda:	d101      	bne.n	800ade0 <memchr+0xc>
 800addc:	2000      	movs	r0, #0
 800adde:	4770      	bx	lr
 800ade0:	7803      	ldrb	r3, [r0, #0]
 800ade2:	428b      	cmp	r3, r1
 800ade4:	d0fb      	beq.n	800adde <memchr+0xa>
 800ade6:	3001      	adds	r0, #1
 800ade8:	e7f6      	b.n	800add8 <memchr+0x4>

0800adea <memmove>:
 800adea:	b510      	push	{r4, lr}
 800adec:	4288      	cmp	r0, r1
 800adee:	d902      	bls.n	800adf6 <memmove+0xc>
 800adf0:	188b      	adds	r3, r1, r2
 800adf2:	4298      	cmp	r0, r3
 800adf4:	d303      	bcc.n	800adfe <memmove+0x14>
 800adf6:	2300      	movs	r3, #0
 800adf8:	e007      	b.n	800ae0a <memmove+0x20>
 800adfa:	5c8b      	ldrb	r3, [r1, r2]
 800adfc:	5483      	strb	r3, [r0, r2]
 800adfe:	3a01      	subs	r2, #1
 800ae00:	d2fb      	bcs.n	800adfa <memmove+0x10>
 800ae02:	bd10      	pop	{r4, pc}
 800ae04:	5ccc      	ldrb	r4, [r1, r3]
 800ae06:	54c4      	strb	r4, [r0, r3]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d1fa      	bne.n	800ae04 <memmove+0x1a>
 800ae0e:	e7f8      	b.n	800ae02 <memmove+0x18>

0800ae10 <_free_r>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	0005      	movs	r5, r0
 800ae14:	2900      	cmp	r1, #0
 800ae16:	d010      	beq.n	800ae3a <_free_r+0x2a>
 800ae18:	1f0c      	subs	r4, r1, #4
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da00      	bge.n	800ae22 <_free_r+0x12>
 800ae20:	18e4      	adds	r4, r4, r3
 800ae22:	0028      	movs	r0, r5
 800ae24:	f000 f918 	bl	800b058 <__malloc_lock>
 800ae28:	4a1d      	ldr	r2, [pc, #116]	; (800aea0 <_free_r+0x90>)
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d105      	bne.n	800ae3c <_free_r+0x2c>
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	6014      	str	r4, [r2, #0]
 800ae34:	0028      	movs	r0, r5
 800ae36:	f000 f917 	bl	800b068 <__malloc_unlock>
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x42>
 800ae40:	6821      	ldr	r1, [r4, #0]
 800ae42:	1860      	adds	r0, r4, r1
 800ae44:	4283      	cmp	r3, r0
 800ae46:	d1f3      	bne.n	800ae30 <_free_r+0x20>
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	1841      	adds	r1, r0, r1
 800ae4e:	6021      	str	r1, [r4, #0]
 800ae50:	e7ee      	b.n	800ae30 <_free_r+0x20>
 800ae52:	001a      	movs	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <_free_r+0x4e>
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	d9f9      	bls.n	800ae52 <_free_r+0x42>
 800ae5e:	6811      	ldr	r1, [r2, #0]
 800ae60:	1850      	adds	r0, r2, r1
 800ae62:	42a0      	cmp	r0, r4
 800ae64:	d10b      	bne.n	800ae7e <_free_r+0x6e>
 800ae66:	6820      	ldr	r0, [r4, #0]
 800ae68:	1809      	adds	r1, r1, r0
 800ae6a:	1850      	adds	r0, r2, r1
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	4283      	cmp	r3, r0
 800ae70:	d1e0      	bne.n	800ae34 <_free_r+0x24>
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	1841      	adds	r1, r0, r1
 800ae78:	6011      	str	r1, [r2, #0]
 800ae7a:	6053      	str	r3, [r2, #4]
 800ae7c:	e7da      	b.n	800ae34 <_free_r+0x24>
 800ae7e:	42a0      	cmp	r0, r4
 800ae80:	d902      	bls.n	800ae88 <_free_r+0x78>
 800ae82:	230c      	movs	r3, #12
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	e7d5      	b.n	800ae34 <_free_r+0x24>
 800ae88:	6821      	ldr	r1, [r4, #0]
 800ae8a:	1860      	adds	r0, r4, r1
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	d103      	bne.n	800ae98 <_free_r+0x88>
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	1841      	adds	r1, r0, r1
 800ae96:	6021      	str	r1, [r4, #0]
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	6054      	str	r4, [r2, #4]
 800ae9c:	e7ca      	b.n	800ae34 <_free_r+0x24>
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	2000191c 	.word	0x2000191c

0800aea4 <sbrk_aligned>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4e0f      	ldr	r6, [pc, #60]	; (800aee4 <sbrk_aligned+0x40>)
 800aea8:	000d      	movs	r5, r1
 800aeaa:	6831      	ldr	r1, [r6, #0]
 800aeac:	0004      	movs	r4, r0
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d102      	bne.n	800aeb8 <sbrk_aligned+0x14>
 800aeb2:	f000 f8bf 	bl	800b034 <_sbrk_r>
 800aeb6:	6030      	str	r0, [r6, #0]
 800aeb8:	0029      	movs	r1, r5
 800aeba:	0020      	movs	r0, r4
 800aebc:	f000 f8ba 	bl	800b034 <_sbrk_r>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d00a      	beq.n	800aeda <sbrk_aligned+0x36>
 800aec4:	2303      	movs	r3, #3
 800aec6:	1cc5      	adds	r5, r0, #3
 800aec8:	439d      	bics	r5, r3
 800aeca:	42a8      	cmp	r0, r5
 800aecc:	d007      	beq.n	800aede <sbrk_aligned+0x3a>
 800aece:	1a29      	subs	r1, r5, r0
 800aed0:	0020      	movs	r0, r4
 800aed2:	f000 f8af 	bl	800b034 <_sbrk_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d101      	bne.n	800aede <sbrk_aligned+0x3a>
 800aeda:	2501      	movs	r5, #1
 800aedc:	426d      	negs	r5, r5
 800aede:	0028      	movs	r0, r5
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	46c0      	nop			; (mov r8, r8)
 800aee4:	20001920 	.word	0x20001920

0800aee8 <_malloc_r>:
 800aee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeea:	2203      	movs	r2, #3
 800aeec:	1ccb      	adds	r3, r1, #3
 800aeee:	4393      	bics	r3, r2
 800aef0:	3308      	adds	r3, #8
 800aef2:	0006      	movs	r6, r0
 800aef4:	001f      	movs	r7, r3
 800aef6:	2b0c      	cmp	r3, #12
 800aef8:	d232      	bcs.n	800af60 <_malloc_r+0x78>
 800aefa:	270c      	movs	r7, #12
 800aefc:	42b9      	cmp	r1, r7
 800aefe:	d831      	bhi.n	800af64 <_malloc_r+0x7c>
 800af00:	0030      	movs	r0, r6
 800af02:	f000 f8a9 	bl	800b058 <__malloc_lock>
 800af06:	4d32      	ldr	r5, [pc, #200]	; (800afd0 <_malloc_r+0xe8>)
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	001c      	movs	r4, r3
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	d12e      	bne.n	800af6e <_malloc_r+0x86>
 800af10:	0039      	movs	r1, r7
 800af12:	0030      	movs	r0, r6
 800af14:	f7ff ffc6 	bl	800aea4 <sbrk_aligned>
 800af18:	0004      	movs	r4, r0
 800af1a:	1c43      	adds	r3, r0, #1
 800af1c:	d11e      	bne.n	800af5c <_malloc_r+0x74>
 800af1e:	682c      	ldr	r4, [r5, #0]
 800af20:	0025      	movs	r5, r4
 800af22:	2d00      	cmp	r5, #0
 800af24:	d14a      	bne.n	800afbc <_malloc_r+0xd4>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	0029      	movs	r1, r5
 800af2a:	18e3      	adds	r3, r4, r3
 800af2c:	0030      	movs	r0, r6
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	f000 f880 	bl	800b034 <_sbrk_r>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	4283      	cmp	r3, r0
 800af38:	d143      	bne.n	800afc2 <_malloc_r+0xda>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	3703      	adds	r7, #3
 800af3e:	1aff      	subs	r7, r7, r3
 800af40:	2303      	movs	r3, #3
 800af42:	439f      	bics	r7, r3
 800af44:	3708      	adds	r7, #8
 800af46:	2f0c      	cmp	r7, #12
 800af48:	d200      	bcs.n	800af4c <_malloc_r+0x64>
 800af4a:	270c      	movs	r7, #12
 800af4c:	0039      	movs	r1, r7
 800af4e:	0030      	movs	r0, r6
 800af50:	f7ff ffa8 	bl	800aea4 <sbrk_aligned>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d034      	beq.n	800afc2 <_malloc_r+0xda>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	19df      	adds	r7, r3, r7
 800af5c:	6027      	str	r7, [r4, #0]
 800af5e:	e013      	b.n	800af88 <_malloc_r+0xa0>
 800af60:	2b00      	cmp	r3, #0
 800af62:	dacb      	bge.n	800aefc <_malloc_r+0x14>
 800af64:	230c      	movs	r3, #12
 800af66:	2500      	movs	r5, #0
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	0028      	movs	r0, r5
 800af6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	1bd1      	subs	r1, r2, r7
 800af72:	d420      	bmi.n	800afb6 <_malloc_r+0xce>
 800af74:	290b      	cmp	r1, #11
 800af76:	d917      	bls.n	800afa8 <_malloc_r+0xc0>
 800af78:	19e2      	adds	r2, r4, r7
 800af7a:	6027      	str	r7, [r4, #0]
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d111      	bne.n	800afa4 <_malloc_r+0xbc>
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	6863      	ldr	r3, [r4, #4]
 800af84:	6011      	str	r1, [r2, #0]
 800af86:	6053      	str	r3, [r2, #4]
 800af88:	0030      	movs	r0, r6
 800af8a:	0025      	movs	r5, r4
 800af8c:	f000 f86c 	bl	800b068 <__malloc_unlock>
 800af90:	2207      	movs	r2, #7
 800af92:	350b      	adds	r5, #11
 800af94:	1d23      	adds	r3, r4, #4
 800af96:	4395      	bics	r5, r2
 800af98:	1aea      	subs	r2, r5, r3
 800af9a:	429d      	cmp	r5, r3
 800af9c:	d0e5      	beq.n	800af6a <_malloc_r+0x82>
 800af9e:	1b5b      	subs	r3, r3, r5
 800afa0:	50a3      	str	r3, [r4, r2]
 800afa2:	e7e2      	b.n	800af6a <_malloc_r+0x82>
 800afa4:	605a      	str	r2, [r3, #4]
 800afa6:	e7ec      	b.n	800af82 <_malloc_r+0x9a>
 800afa8:	6862      	ldr	r2, [r4, #4]
 800afaa:	42a3      	cmp	r3, r4
 800afac:	d101      	bne.n	800afb2 <_malloc_r+0xca>
 800afae:	602a      	str	r2, [r5, #0]
 800afb0:	e7ea      	b.n	800af88 <_malloc_r+0xa0>
 800afb2:	605a      	str	r2, [r3, #4]
 800afb4:	e7e8      	b.n	800af88 <_malloc_r+0xa0>
 800afb6:	0023      	movs	r3, r4
 800afb8:	6864      	ldr	r4, [r4, #4]
 800afba:	e7a7      	b.n	800af0c <_malloc_r+0x24>
 800afbc:	002c      	movs	r4, r5
 800afbe:	686d      	ldr	r5, [r5, #4]
 800afc0:	e7af      	b.n	800af22 <_malloc_r+0x3a>
 800afc2:	230c      	movs	r3, #12
 800afc4:	0030      	movs	r0, r6
 800afc6:	6033      	str	r3, [r6, #0]
 800afc8:	f000 f84e 	bl	800b068 <__malloc_unlock>
 800afcc:	e7cd      	b.n	800af6a <_malloc_r+0x82>
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	2000191c 	.word	0x2000191c

0800afd4 <_realloc_r>:
 800afd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd6:	0007      	movs	r7, r0
 800afd8:	000e      	movs	r6, r1
 800afda:	0014      	movs	r4, r2
 800afdc:	2900      	cmp	r1, #0
 800afde:	d105      	bne.n	800afec <_realloc_r+0x18>
 800afe0:	0011      	movs	r1, r2
 800afe2:	f7ff ff81 	bl	800aee8 <_malloc_r>
 800afe6:	0005      	movs	r5, r0
 800afe8:	0028      	movs	r0, r5
 800afea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afec:	2a00      	cmp	r2, #0
 800afee:	d103      	bne.n	800aff8 <_realloc_r+0x24>
 800aff0:	f7ff ff0e 	bl	800ae10 <_free_r>
 800aff4:	0025      	movs	r5, r4
 800aff6:	e7f7      	b.n	800afe8 <_realloc_r+0x14>
 800aff8:	f000 f83e 	bl	800b078 <_malloc_usable_size_r>
 800affc:	9001      	str	r0, [sp, #4]
 800affe:	4284      	cmp	r4, r0
 800b000:	d803      	bhi.n	800b00a <_realloc_r+0x36>
 800b002:	0035      	movs	r5, r6
 800b004:	0843      	lsrs	r3, r0, #1
 800b006:	42a3      	cmp	r3, r4
 800b008:	d3ee      	bcc.n	800afe8 <_realloc_r+0x14>
 800b00a:	0021      	movs	r1, r4
 800b00c:	0038      	movs	r0, r7
 800b00e:	f7ff ff6b 	bl	800aee8 <_malloc_r>
 800b012:	1e05      	subs	r5, r0, #0
 800b014:	d0e8      	beq.n	800afe8 <_realloc_r+0x14>
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	0022      	movs	r2, r4
 800b01a:	429c      	cmp	r4, r3
 800b01c:	d900      	bls.n	800b020 <_realloc_r+0x4c>
 800b01e:	001a      	movs	r2, r3
 800b020:	0031      	movs	r1, r6
 800b022:	0028      	movs	r0, r5
 800b024:	f7ff fbc0 	bl	800a7a8 <memcpy>
 800b028:	0031      	movs	r1, r6
 800b02a:	0038      	movs	r0, r7
 800b02c:	f7ff fef0 	bl	800ae10 <_free_r>
 800b030:	e7da      	b.n	800afe8 <_realloc_r+0x14>
	...

0800b034 <_sbrk_r>:
 800b034:	2300      	movs	r3, #0
 800b036:	b570      	push	{r4, r5, r6, lr}
 800b038:	4d06      	ldr	r5, [pc, #24]	; (800b054 <_sbrk_r+0x20>)
 800b03a:	0004      	movs	r4, r0
 800b03c:	0008      	movs	r0, r1
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	f7f6 fc7c 	bl	800193c <_sbrk>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d103      	bne.n	800b050 <_sbrk_r+0x1c>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d000      	beq.n	800b050 <_sbrk_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	20001924 	.word	0x20001924

0800b058 <__malloc_lock>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	4802      	ldr	r0, [pc, #8]	; (800b064 <__malloc_lock+0xc>)
 800b05c:	f000 f814 	bl	800b088 <__retarget_lock_acquire_recursive>
 800b060:	bd10      	pop	{r4, pc}
 800b062:	46c0      	nop			; (mov r8, r8)
 800b064:	20001928 	.word	0x20001928

0800b068 <__malloc_unlock>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	4802      	ldr	r0, [pc, #8]	; (800b074 <__malloc_unlock+0xc>)
 800b06c:	f000 f80d 	bl	800b08a <__retarget_lock_release_recursive>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	46c0      	nop			; (mov r8, r8)
 800b074:	20001928 	.word	0x20001928

0800b078 <_malloc_usable_size_r>:
 800b078:	1f0b      	subs	r3, r1, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	1f18      	subs	r0, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da01      	bge.n	800b086 <_malloc_usable_size_r+0xe>
 800b082:	580b      	ldr	r3, [r1, r0]
 800b084:	18c0      	adds	r0, r0, r3
 800b086:	4770      	bx	lr

0800b088 <__retarget_lock_acquire_recursive>:
 800b088:	4770      	bx	lr

0800b08a <__retarget_lock_release_recursive>:
 800b08a:	4770      	bx	lr

0800b08c <_init>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr

0800b098 <_fini>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	46c0      	nop			; (mov r8, r8)
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr
